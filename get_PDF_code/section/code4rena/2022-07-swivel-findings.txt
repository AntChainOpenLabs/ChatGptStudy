{"Vulnerability Type": "Incorrect comparison operator", "Vulnerability Location": "VaultTracker.sol line 86", "Repair Method": "Change comparison operator from '>' to '>='", "Vulnerability Information": "The comparison should be 'a = vlt.notional' instead of a  vlt.notional. Otherwise dust amounts will always be left in vlt.notional when calling `removeNotional()` or `transferNotionalFrom()`."}

{"Vulnerability Type": "Loss of funds", "Vulnerability Location": "VaultTracker.sol line 123-132", "Repair Method": "Add 'require(block.timestamp < m)' in SplitUnderlying function and add 'vlt.notional = 0' after line 124 in redeemInterest function", "Vulnerability Information": "Loss of all user funds. This exploit stems from a quirk in the way that exchange rate is tracked for matured positions."}

1. {"Vulnerability Type": "Reentrancy", "Vulnerability Location": "function _removeNotional()", "Repair Method": "Use the checks-effects-interactions pattern to ensure that all external calls are made after state changes have been made", "Vulnerability Information": "The _removeNotional() function can be reentered by an attacker, allowing them to drain the protocol of funds."}
2. {"Vulnerability Type": "Integer Underflow", "Vulnerability Location": "function redeemVaultInterest()", "Repair Method": "Check that the maturity rate is greater than or equal to the exchange rate before performing any calculations that rely on this assumption", "Vulnerability Information": "The redeemVaultInterest() function can underflow if the maturity rate is less than the exchange rate, causing users to lose their funds or interest."}
3. {"Vulnerability Type": "Incorrect Check", "Vulnerability Location": "function permit()", "Repair Method": "Change the check to ensure that the recovered address is not equal to the zero address", "Vulnerability Information": "The permit() function allows anyone to approve themselves as a spender using the zero address, resulting in unlimited approval and the potential for draining the protocol."}

1. {"Vulnerability Type": "Broken functionality", "Vulnerability Location": "Yearn vault integration in Compounding.sol", "Repair Method": "Access the underlying token of a Yearn vault through the `token` property instead of the non-existent `underlying` which will cause a revert and the inability to create marketplaces associated with the protocol.", "Vulnerability Information": "Yearn integration is broken, making it impossible to create a `MarketPlace` associated with a Yearn vault."}
2. {"Vulnerability Type": "Miscalculated interest", "Vulnerability Location": "Functions within VaultTracker that calculate interest", "Repair Method": "For all interest calculations, use `vlt.notional + vlt.redeemable` instead of just `vlt.notional` as `yield` base.", "Vulnerability Information": "VaultTracker neglect previously accrued interest while attempting to calculate new interest. This causes `nToken` holders to receive less yield than they should."}

{"Vulnerability Type": "Error in allowance logic", "Vulnerability Location": "ZcToken.sol", "Repair Method": "Change = to < in the if statement", "Vulnerability Information": "There is an error in the allowance functionality to allow a non-owner to withdraw or redeem ZcTokens for the owner."}

{"Vulnerability Type": "Mismatch in withdraw() between Yearn and other protocols can prevent Users from redeeming zcTokens and permanently lock funds", "Vulnerability Location": "Swivel.sol", "Repair Method": "Calculate the price per share and use that to retrieve the correct number of underlying assets", "Vulnerability Information": "Yearn withdraw `amount` parameter specifies how many `shares` are burnt instead of underlying assets retrieved."}

{"Vulnerability Type": "Swivel.setFee() is implemented wrongly", "Vulnerability Location": "Swivel.sol", "Repair Method": "Modify the line of code to feenominators[i[x]] = d[x]", "Vulnerability Information": "Swivel.feenominators won't be set as expected."}

{"Vulnerability Type": "VaultTracker has the wrong admin", "Vulnerability Location": "VaultTracker.sol", "Repair Method": "Modify the constructor of the VaultTracker contract so that the creator contract can pass in msg.sender (MarketPlaceâ€™s address) to be used as admin", "Vulnerability Information": "`VaultTracker` takes `msg.sender` as the admin. However, the creator contract is not able (and not supposed to) interact with the VaultTracker unlike the marketplace contract."}

1. {"Vulnerability Type": "Incorrect withdrawal behavior", "Vulnerability Location": "ZcToken.withdraw function", "Repair Method": "Add getMaturityRate function to ZcToken and use it instead of maturityRate across the contract", "Vulnerability Information": "If maturityRate is still 0 after maturity deadline, then previewWithdraw calculated amount is 0 and thus withdraw function will send 0 underlying tokens to user, which might be very confusing to user."}
2. {"Vulnerability Type": "Interface definition error", "Vulnerability Location": "MarketPlace.authRedeem function", "Repair Method": "Declare 'is ISwivel' in Swivel contract and change method name to authRedeem", "Vulnerability Information": "MarketPlace.authRedeem call interface ISwivel.authRedeem but Swivel contract does not have this method only method authRedeemZcToken()."}
3. {"Vulnerability Type": "Missing modifier", "Vulnerability Location": "authRedeem function in Marketplace contract", "Repair Method": "Add unpaused(p) modifier in authRedeem function", "Vulnerability Information": "Due to missing modifier, User will be able to redeem zcTokens and withdraw underlying even in paused Market."}

