1. {"Vulnerability Type": "Missing receive/fallback function", "Vulnerability Location": "L1Migrator contract", "Repair Method": "Add receive() external payable function to L1Migrator contract", "Vulnerability Information": "The L1Migrator contract is unable to receive ETH because it does not have a receive() or fallback() function, causing all ETH held by the BridgeMinter to get stuck in the contract."}
2. {"Vulnerability Type": "Loss of funds due to insufficient call value", "Vulnerability Location": "outboundTransfer function in L1LPTGateway contract", "Repair Method": "Add a check to ensure that the call value is sufficient to cover _maxSubmissionCost and _maxGas * _gasPriceBid", "Vulnerability Information": "Fund can be lost if the L1 call value provided is insufficient to cover _maxSubmissionCost, or stuck if insufficient to cover _maxSubmissionCost + (_maxGas * _gasPriceBid)."}
3. {"Vulnerability Type": "Ability to mint arbitrary amount of tokens", "Vulnerability Location": "mint function in L2LivepeerToken contract", "Repair Method": "Remove MINTER_ROLE and make the L2LivepeerToken only mintable by the owner, which is the L2Minter contract", "Vulnerability Information": "An address with MINTER_ROLE can burn an arbitrary amount of tokens, posing a serious centralization risk."}
4. {"Vulnerability Type": "Fund loss due to failed RetryableTicket creation", "Vulnerability Location": "migrateLPT function in L1Migrator contract", "Repair Method": "Use the balance of the L1Migrator contract instead of the amount returned by IBridgeMinter(bridgeMinterAddr).withdrawLPTToL1Migrator(), and limit access to the function", "Vulnerability Information": "The L1Migrator.migrateLPT() function can be called by anyone and if the creation of the RetryableTicket on L2 fails due to insufficient funds, the LPT sits in the L1Migrator contract with no way of moving it to L2 or anywhere else, effectively causing the funds to be lost."}

{"Vulnerability Type": "lack of funds", "Vulnerability Location": "sendTxToL2() function in L1Migrator.sol", "Repair Method": "Add the amount withdrawn from BridgeMinter to the msg.value parameter in sendTxToL2() function", "Vulnerability Information": "The ETH transferred to L2 does not include any funds from bridgeMinter, resulting in all the ETH from bridgeMinter being frozen in the contract."}

{"Vulnerability Type": "admin privilege abuse", "Vulnerability Location": "approve() function in L1Escrow.sol", "Repair Method": "Restrict the power of the approve() function by only allowing approvals to other trusted protocol contracts", "Vulnerability Information": "The admin can approve an arbitrary spender with an arbitrary amount, leading to a rug vector and reputation risk."}

{"Vulnerability Type": "centralization risk", "Vulnerability Location": "burn() function in L2LivepeerToken.sol", "Repair Method": "Remove the BURNER_ROLE and change burn() function to only allow burning tokens from the caller's address", "Vulnerability Information": "An address with BURNER_ROLE can burn an arbitrary amount of tokens from any address, posing a serious centralization risk."}

{"Vulnerability Type": "withdrawal issue", "Vulnerability Location": "outboundTransfer() function in L2LPTGateway.sol", "Repair Method": "Implement the outboundTransfer() function with the same signature as the one used by the Arbitrum Router", "Vulnerability Information": "The desired feature to withdraw LPT from L2 to L1 via Arbitrum Router will not work properly due to the missing interface on L2LPTGateway."}

{"Vulnerability Type": "admin privilege abuse", "Vulnerability Location": "approve() function in L1Escrow.sol", "Repair Method": "Remove the approve() function and approve l1LPT to l1Gateway in the constructor", "Vulnerability Information": "An address with DEFAULT_ADMIN_ROLE can approve an arbitrary amount of tokens to any address, posing a serious centralization risk."}

