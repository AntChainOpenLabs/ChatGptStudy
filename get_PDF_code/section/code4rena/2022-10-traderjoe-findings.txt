1. {"Vulnerability Type": "Owner privileges vulnerability", "Vulnerability Location": "PendingOwnable.sol#L42", "Repair Method": "Add a timelock contract to use onlyOwner privileges and warn users in case of a possible security weakness. Only use a multisign wallet for onlyOwner if specified in the documentation.", "Vulnerability Information": "The contract's owner has numerous privileges, and there is no timelock structure in place to use these privileges. Private key thefts of project owners have increased recently, making this vulnerability a medium severity."}
2. {"Vulnerability Type": "Fee manipulation", "Vulnerability Location": "FeeHelper.sol#L58-L72", "Repair Method": "Decay linearly to the time since last swap when T < Tf, or don't update _tf.time if swap did not affect Vr, or only skip Vr update if swap amount is not negligible. Reset the indexRef in the forceDecay function.", "Vulnerability Information": "An attacker can keep fees extremely high at basically zero cost by swapping just under every Tf seconds, a zero-ish amount. This makes the protocol completely uncompetitive around the clock and can make any TraderJoe pair uncompetitive at negligible cost. The impact to the protocol is that most users will favor alternative AMMs, which directly translates to a large loss of revenue. The severity of this vulnerability is debated, but it is considered medium severity."}

1. {"Vulnerability Type": "Wrong parameters in function call", "Vulnerability Location": "LBToken._burn", "Repair Method": "Call the hook correctly with the right parameters", "Vulnerability Information": "The `_beforeTokenTransfer` hook is called with `from = address(0)` and `to = _account` instead of `from = _account` and `to = address(0)`."}
2. {"Vulnerability Type": "Incorrect function behavior", "Vulnerability Location": "LBRouter.removeLiquidity", "Repair Method": "Add a conditional statement to return the correct values when the token order is switched", "Vulnerability Information": "When the order of the tokens is swapped by the function, the return value `amountX` in reality is the amount of the user-provided token Y that is returned and vice versa."}

{"Vulnerability Type": "Manipulation of flashloan fee collection mechanism", "Vulnerability Location": "LBPair.flashLoan() function in LBPair.sol", "Repair Method": "Have a separate global fee structure for a given pair, and record token X and token Y fees per share separately. If the ideal remediation cannot be achieved, a compromise would be to distribute the flashloan fees from the -nth populated bin to the +nth populated bin, where `n` is respective to the active bin. `n` could be an adjustable market parameter.", "Vulnerability Information": "The flashloan fee collection mechanism in LBPair.flashLoan() function can be easily manipulated by adding liquidity to the active bin right before a flashloan to receive most of the fees. This trick can be used both by the borrower themselves, or by a third party miner or a node operator frontrunning the flashloan transactions. This is in detriment to the liquidity providers, who would be providing the bulk of the flashloan, but receiving a much less fraction of the fees."}

{"Vulnerability Type": "Incorrect output amount calculation", "Vulnerability Location": "LBRouter.sol", "Repair Method": "Use the `JoeLibrary.getAmountOut` function in the `_swapSupportingFeeOnTransferTokens` function of `LBRouter` when computing output amounts for V1 pools.", "Vulnerability Information": "Output amount is calculated incorrectly for a Trader Joe V1 pool when swapping tokens across multiple pools and some of the pools in the chain are V1 ones. Calculated amounts will always be smaller than expected ones, which will always affect chained swaps that include V1 pools."}

{"Vulnerability Type": "Balance Duplication", "Vulnerability Location": "LBToken.sol", "Repair Method": "Add checks to make sure that _from != _to and use the following code: _balances[_id][_from] -= _amount; _balances[_id][_to] += _amount;", "Vulnerability Information": "The vulnerability allows transferring funds to oneself to increase the balance due to the improper usage of a supporting temporary variable."}

{"Vulnerability Type": "Fee calculation vulnerability", "Vulnerability Location": "_beforeTokenTransfer() function in LBPair.sol", "Repair Method": "Remove the exemption of any address from _cacheFees() function, including address(0)", "Vulnerability Information": "Attacker can steal the entire reserves of the LBPair by exploiting the bug in the fee calculation logic in the _beforeTokenTransfer() function, which skips fee accrual for the LBToken address and 0 address, allowing the attacker to collect fees for the entire growth of accToken*PerShare from zero to current value and overflow the FeesX/FeesY variables."}

{"Vulnerability Type": "Incorrect fee calculation", "Vulnerability Location": "LBPair contracts, SwapHelper.getAmounts, LBRouter.getSwapIn, LBRouter.getSwapOut", "Repair Method": "Use FeeHelper.getFeeAmount instead of FeeHelper.getFeeAmountFrom, fix the incorrect conditional for amountIn overflow, use new functions SwapHelper.getAmountsV2 and FeeHelper.getAmountInWithFees", "Vulnerability Information": "LBPair contracts consistently collect less fees than their FeeParameters, resulting in a growing Fee Deficit percentage that could potentially trigger an unnecessary bin de-activation."}

{"Vulnerability Type": "Incorrect calculation", "Vulnerability Location": "LBRouter._getAmountsIn function", "Repair Method": "Modify the calculation formula in the _getAmountsIn function as follows: amountsIn[i+1] = (_reserveIn * amountOut_ * 1_000) / ((_reserveOut * amountOut_) * 997) + 1", "Vulnerability Information": "The vulnerability is caused by an incorrect order of operation in the calculation formula in the _getAmountsIn function, which results in the router using incorrect amounts, sometimes reverting, sometimes costing the end user more tokens than necessary."}

{"Vulnerability Type": "Arithmetic Underflow", "Vulnerability Location": "swapAVAXForExactTokens function in LBRouter.sol", "Repair Method": "Update the code in line 520 to `if (msg.value < amountsIn[0]) _safeTransferAVAX(_to, amountsIn[0] - msg.value)`", "Vulnerability Information": "Calling swapAVAXForExactTokens function while sending excess amount cannot refund such excess amount, resulting in an arithmetic underflow that always reverts the transaction. This limits the usability of the protocol and degrades user experience."}

{"Vulnerability Type": "Incorrect implementation", "Vulnerability Location": "LBPair.setFeeParameter function", "Repair Method": "Modify function LBPair._setFeesParameters to include a shift left operation before executing or operation", "Vulnerability Information": "Wrong implementation of function LBPair.setFeeParameter can break the functionality of LBPair and make user's tokens locked. Incorrect fee calculation when executing an action with LBPair (swap, flashLoan, mint). The user can't swap/mint/flashLoan-- Make all the tokens stuck in the pools."}

