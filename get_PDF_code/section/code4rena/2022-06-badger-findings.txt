1. {"Vulnerability Type": "slippage protection vulnerability", "Vulnerability Location": "MyStrategy.sol#L249 and MyStrategy.sol#L275", "Repair Method": "Pass a minimum amount of AURA that the swap is supposed to get in harvest or use an aggregator like Cowswap", "Vulnerability Information": "Single swaps of `_harvest` contains no slippage or deadline, which makes it vulnerable to sandwich attacks, MEV exploits and may lead to significant loss of yield."}
2. {"Vulnerability Type": "reentrancy vulnerability", "Vulnerability Location": "MyStrategy.sol#L428-L430", "Repair Method": "Remove the second transfer of BADGER tokens in `_sendBadgerToTree()` function", "Vulnerability Information": "If the contract receives rewards from the hidden hand marketplace in BADGER then the contract tries to transfer the same amount of tokens twice to two different accounts, once with `_sendBadgerToTree()` in `MyStrategy` and again with `_processExtraToken()` in the `BasicStrategy` contract."}
3. {"Vulnerability Type": "denial of service vulnerability", "Vulnerability Location": "MyStrategy.sol#L184-L187", "Repair Method": "Call `LOCKER.processExpiredLocks(false);` in `MyStrategy._withdrawAll` directly and remove the check which enforces unlocking all want tokens on L184-L187", "Vulnerability Information": "By locking a small amount of want tokens via `AuraLocker.lock` with the `strategy` address, a malicious individual can cause DoS and prevent withdrawing and migrating funds to the vault."}

1. {"Vulnerability Type": "Loss of Funds", "Vulnerability Location": "sweepRewardToken() function", "Repair Method": "Add a check to ensure that bribesProcessor is not set to 0x0 before transferring reward tokens", "Vulnerability Information": "Attacker can call sweepRewardToken() when bribesProcessor==0 and reward funds will be lost because there is no check in sweepRewardToken() and _handleRewardTransfer() and _sendTokenToBribesProcessor()"}
2. {"Vulnerability Type": "Token Stuck", "Vulnerability Location": "_harvest() and claimBribesFromHiddenHand() functions", "Repair Method": "Refactor from a delta of balance to absolute balances", "Vulnerability Information": "auraBAL can be stuck into the Strategy contract and not counted as earned during the next _harvest() or claimBribesFromHiddenHand() call"}

