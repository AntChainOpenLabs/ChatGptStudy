{"Vulnerability Type": "Token Change Can Be Frontrun, Blocking Token", "Vulnerability Location": "JBTokenStore.sol:246, JBTokenStore.sol:266, JBController.sol:605", "Repair Method": "Before allowing a caller to change to a specific token ensure that they have control over it. This can be achieved by storing a list of trusted older JB directories and projects which are then queried. Alternatively the contract could require the caller to actually be the .owner() address of the token to migrate", "Vulnerability Information": "This vulnerability allows malicious actors to block other users from changing tokens of their projects. Furthermore if ownership over the token contract is transferred to the JBTokenStore contract prior to the change, as suggested in the recourse section of Juicebox's 24.05.2022 post-mortem update, this vulnerability would allow an attacker to become the owner of tokens being transferred. For JBToken based tokens this would allow an attacker to begin issuing arbitrary amounts the token that was meant to be transferred."}

{"Vulnerability Type": "Juicebox project owner can create a honeypot to cause grief", "Vulnerability Location": "JBController.sol:760, JBSplitsStore.sol:147", "Repair Method": "Set a minimum percentage for each split when calling set. Furthermore, it would probably be wise to prevent duplicate beneficiaries. An alternative to setting a minimum percentage would be to have a check on the length of the splits array and capping that at a sensible value.", "Vulnerability Information": "In a Juicebox project the project owner (or anyone that they approve) can set splits. These splits are details of the token distributions to other addresses in response to contributions to the project. The project owner could honeypot users by creating a project with the MAX_RESERVED_RATE reserved rate, and setting a large percentage split for the msg.sender who calls distributeReservedTokensOf in JBController.sol. The project owner could then fund the project with a series of large payments to ensure that the reserved amount was sufficiently large to entice a user to call distributeReservedTokensOf in the belief that they will be obtaining a large percentage of the reserve. However, when a user calls this method they will hit the block gas limit and will have spent a large amount of ETH on gas, without receiving any of their expected split."}

1. {"Vulnerability Type": "Outdated Oracle Data Feed", "Vulnerability Location": "JBChainlinkV3PriceFeed.sol, JBPrices.sol, JBSingleTokenPaymentTerminalStore.sol", "Repair Method": "Add a tolerance that compares the updatedAt return timestamp from latestRoundData() with the current block timestamp and ensure that the priceFeed is being updated with the required frequency. Use other oracle to get the price feed as redundancy in the case of having one oracle that returns outdated values.", "Vulnerability Information": "The current implementation of JBChainlinkV3PriceFeed is used by the protocol to showcase how the feed will be retrieved via Chainlink Data Feeds. The feed is used to retrieve the currentPrice, which is also used afterwards by JBPrices.priceFor(), then by JBSingleTokenPaymentTerminalStore.recordPaymentFrom(), JBSingleTokenPaymentTerminalStore.recordDistributionFor, JBSingleTokenPaymentTerminalStore.recordUsedAllowanceOf, JBSingleTokenPaymentTerminalStore._overflowDuring and JBSingleTokenPaymentTerminalStore._currentTotalOverflowOf. Although the current feeds are calculated by a non-implemented IJBPriceFeed, if the implementation of the price feed is the same as the showcased in JBChainlinkV3PriceFeed, the retrieved data can be outdated or out of bounds."}
2. {"Vulnerability Type": "Duplicated Locked Splits", "Vulnerability Location": "JBSplitsStore.sol", "Repair Method": "Either prevent duplicates in the splits or track the matches while checking the locked splits.", "Vulnerability Information": "The function of the protocol could be impacted. The check of the locked split is not suitable for duplicated cases."}
3. {"Vulnerability Type": "Locked Splits Can Be Updated", "Vulnerability Location": "JBSplitsStore.sol", "Repair Method": "Add two additional sameness checks for preferClaimed and preferAddToBalance.", "Vulnerability Information": "Locked sets with either preferClaimed or preferAddToBalance set to true can have their bool values overwritten by supplying the same split just with different bool values. The check for sameness does not check the equality of the struct properties preferClaimed and preferAddToBalance."}

{"Vulnerability Type": "changeTokenOf makes it impossible for holders of oldToken to redeem the overflowed assets", "Vulnerability Location": "JBController.sol#L588-L606", "Repair Method": "Consider adding a delay to `changeTokenOf`, or adding a function to convert `oldToken` to `newToken`", "Vulnerability Information": "When the owner calls the changeTokenOf function of the JBController contract, the token corresponding to the current project will be changed, which will make the oldToken holder unable to redeem the overflowing assets."}

{"Vulnerability Type": "Reentrancy issues", "Vulnerability Location": "distributePayoutsOf function", "Repair Method": "Add a reentrancyGuard as you do on `JBSingleTokenPaymentTerminalStore.sol`", "Vulnerability Information": "In the contract `JBPayoutRedemptionPaymentTerminal`, the function `distributePayoutsOf` calls the internal function `_distributePayoutsOf` and this internal function performs a loop where is using the function `_distributeToPayoutSplitsOf`. In these functions there are a `_transferFrom` what give back the control to the `msg.sender` (`_to` variable) creating a reentrancy attack vector."}

{"Vulnerability Type": "Lack of check on mustStartAtOrAfter", "Vulnerability Location": "JBFundingCycleStore.sol#L306-L312", "Repair Method": "Add a check for the `_mustStartAtOrAfter`", "Vulnerability Information": "By setting huge `mustStartAtOrAfter`, the owner can set start time in the past. It might open up possibility to bypass the ballot waiting time depending on the ballot's implementation."}

{"Vulnerability Type": "Grieffer beneficiary can cause DOS", "Vulnerability Location": "JBPayoutRedemptionPaymentTerminal.sol#L1147-L1152", "Repair Method": "Have beneficiaries withdraw their benefit instead of sending it to them", "Vulnerability Information": "Payouts won't be able to be distributed if one of multiple beneficiaries decides to revert the transaction on receival."}

1. {"Vulnerability Type": "Incorrect token distribution", "Vulnerability Location": "JBController._reservedTokenAmountFrom", "Repair Method": "Update the calculation in the _reservedTokenAmountFrom function to correctly calculate the amount of reserved tokens", "Vulnerability Information": "More outstanding reserved tokens are distributed than anticipated leading to less redeemable assets and therefore loss of user funds."}
2. {"Vulnerability Type": "Unsafe ERC20 transfer", "Vulnerability Location": "JBERC20PaymentTerminal._transferFrom", "Repair Method": "Use a safe transfer library like OpenZeppelin SafeERC20 to ensure consistent handling of ERC20 return values and abstract over inconsistent ERC20 implementations", "Vulnerability Information": "Tokens that return false rather than revert to indicate failed transfers may silently fail rather than reverting as expected. Additionally, attempting to transfer ERC20s with missing return values will revert. This means Juicebox payment terminals cannot support a number of popular ERC20s, including USDT and BNB."}

{"Vulnerability Type": "Code quality", "Vulnerability Location": "JBSingleTokenPaymentTerminalStore.recordPaymentFrom(), JBSingleTokenPaymentTerminalStore.addToBalanceOf(), JBPayoutRedemptionPaymentTerminal.pay(), JBPayoutRedemptionPaymentTerminal.addToBalanceOf(), JBPayoutRedemptionPaymentTerminal.processFees(), JBPrices.addFeedFor()", "Repair Method": "Measure the contract balance before and after the call to transfer()/transferFrom() in JBERC20PaymentTerminal._transferFrom(), add a check for inverse feed in JBPrices.addFeedFor(), limit the loop in JBPayoutRedemptionPaymentTerminal.processFees() to a reasonable number of iterations", "Vulnerability Information": "Various vulnerabilities in the Juicebox smart contract code that could lead to issues such as denial of service, inconsistent currency conversions, and exceeding gas limits."}

{"Vulnerability Type": "Arbitrary token minting", "Vulnerability Location": "JBToken contract's mint function", "Repair Method": "Set minter as the JBTokenStore contract and add the onlyminter modifier to the mint function", "Vulnerability Information": "The owner of the JBToken contract can mint arbitrary amount of tokens."}

{"Vulnerability Type": "Imprecise fee calculation", "Vulnerability Location": "JBPayoutRedemptionPaymentTerminal contract's _feeAmount function", "Repair Method": "Adjust the formula for calculating the discounted fee", "Vulnerability Information": "The current implementation calculates the fee in a way that leads to inaccuracy and to fewer fees being paid than anticipated by the protocol."}

