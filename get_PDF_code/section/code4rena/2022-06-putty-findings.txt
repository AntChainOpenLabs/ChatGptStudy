1. {"Vulnerability Type": "Solidity version vulnerability", "Vulnerability Location": "Use of Solidity version 0.8.13", "Repair Method": "Use recent Solidity version 0.8.15 which has the fix for these issues", "Vulnerability Information": "Solidity version 0.8.13 has two known issues applicable to PuttyV2."}
2. {"Vulnerability Type": "Malicious Token Contracts vulnerability", "Vulnerability Location": "exercise() and withdraw() functions", "Repair Method": "Consider whitelisting approved ERC20 token or ERC721 address contracts to prevent users setting malicious token contracts", "Vulnerability Information": "Malicious Token Contracts May Lead To Locking Orders"}

{"Vulnerability Type": "Flashloan without fee", "Vulnerability Location": "PuttyV2 contract", "Repair Method": "Add nonReentrant to exercise and fillOrder adding a non-negligible gas overhead", "Vulnerability Information": "The contract serves as a flashloan pool without fee. The malicious user could leverage PuttyV2 contract to flashloan without paying fee the assets to make profit."}

{"Vulnerability Type": "Put option exercise prevention", "Vulnerability Location": "fillOrder() function", "Repair Method": "Verify the asset amounts and addresses during fillOrder(), and allow exercise if the token no longer exists at that point in time", "Vulnerability Information": "Put option sellers can prevent exercise by specifying zero amounts, or non-existant tokens. If the put option seller includes in order.erc20Assets, an amount of zero for any of the assets, or specifies an asset that doesn't currently have any code at its address, the put buyer will be unable to exercise the option."}

{"Vulnerability Type": "Loss of assets", "Vulnerability Location": "Creating a short call order with non-empty floorTokens array", "Repair Method": "Prohibiting non-empty floorTokens for short calls", "Vulnerability Information": "If a short call order is created with non-empty floorTokens array, the taker cannot exercise. Also, the maker cannot withdraw after the expiration. The maker will still get premium when the order is filled. If the non-empty floorTokens array was included as an accident, it is a loss for both parties: the taker loses premium without possible exercise, the maker loses the locked ERC20s and ERC721s."}

{"Vulnerability Type": "Inability to exercise option", "Vulnerability Location": "Creating a short put option order on an NFT that does not support ERC721", "Repair Method": "Supporting exercising on NFTs that do not support ERC721 or adding a whitelist to NFTs in the order", "Vulnerability Information": "An attacker can create a short put option on an NFT that does not support ERC721, like cryptopunk. When the user fulfills the order, the baseAsset will be transferred to the contract. However, since the NFT does not support ERC721, the user cannot exercise the option because the safeTransferFrom function call fails. The attacker can get premium and get back baseAsset after option expires."}

1. {"Vulnerability Type": "Denial-of-Service", "Vulnerability Location": "withdraw function in PuttyV2.sol", "Repair Method": "Adopt a withdrawal pattern for retrieving owner fee", "Vulnerability Information": "The owner can transfer the ownership to a zero address, causing the fee transfer to the contract owner to always revert, resulting in no one being able to withdraw their strike amount from the contract."}
2. {"Vulnerability Type": "Fee change without user consent", "Vulnerability Location": "withdraw function in PuttyV2.sol", "Repair Method": "Store the fees in Order and verify that they are correct when the order is filled, so they are hardcoded in the struct", "Vulnerability Information": "Fees can change between the time the order is filled and its terms are agreed upon and the withdrawal time, leading to a loss of the expected funds for the concerned users."}

{"Vulnerability Type": "Fee deduction vulnerability", "Vulnerability Location": "PuttyV2.sol", "Repair Method": "Update the if condition at PuttyV2.sol#L498 and add feeAmount calculation and deduction after put is exercised and strike is transferred at PuttyV2.sol#L451", "Vulnerability Information": "Fee is being deducted when Put is expired and not when it is exercised, which is impacting the assets."}

{"Vulnerability Type": "ERC721 token transfer vulnerability", "Vulnerability Location": "PuttyV2.sol", "Repair Method": "Implement the require check in Solmate's ERC721#_safeMint in your own mint function or document the design decision to use _mint and the associated risk for end users", "Vulnerability Information": "Putty position tokens may be minted to non ERC721 receivers, which may lock the options positions and make them nontransferable."}

1. {"Vulnerability Type": "Design", "Vulnerability Location": "M-15", "Repair Method": "Link the fee to option premium or move fee gathering to fillOrder", "Vulnerability Information": "Zero strike call options will avoid paying system fee."}
2. {"Vulnerability Type": "Logic", "Vulnerability Location": "M-02", "Repair Method": "Have an upper bound on the number of assets, or allow them to be transferred out one at a time", "Vulnerability Information": "Unbounded loops may cause exercise()s and withdraw()s to fail."}
3. {"Vulnerability Type": "Logic", "Vulnerability Location": "M-04", "Repair Method": "Charge fees also for exercised put options", "Vulnerability Information": "Put options are free of any fees."}

{"Vulnerability Type": "Zero-value token transfer", "Vulnerability Location": "fillOrder() and exercise()", "Repair Method": "Add a require(0 == msg.value) for the above three conditions.", "Vulnerability Information": "Ether sent to the contract when non-Ether code paths are taken is locked in the contract forever."}

{"Vulnerability Type": "Dependency on centralized database", "Vulnerability Location": "Order cancellation", "Repair Method": "Add an extra method to cancel all orders of a caller using a minimum valid nonce state variable or counters.", "Vulnerability Information": "Order cancellation is prone to frontrunning and is dependent on a centralized database."}

{"Vulnerability Type": "Overlap between ERC721.transferFrom() and ERC20.transferFrom()", "Vulnerability Location": "PuttyV2.sol contract, lines 324-601", "Repair Method": "Whitelist approved ERC721 and ERC20 token contracts and separate them into different whitelists for ERC20s and ERC721s. Ensure each contract is in the right category.", "Vulnerability Information": "ERC721 tokens transferred into the contract via fillOrder() can be permanently stuck in the contract as neither exercise() nor withdraw() will successfully transfer the tokens out of the contract."}

{"Vulnerability Type": "Zero strike call options can be systemically used to steal premium from the taker", "Vulnerability Location": "PuttyV2.sol contract, lines 435-437", "Repair Method": "Check that strike is positive before transfer in all cases.", "Vulnerability Information": "Malicious makers can create short call orders with zero strike value, receive the premium, wait for expiration, and recover their assets, effectively collecting the premium for free."}

{"Vulnerability Type": "Order duration can be set to 0 by malicious maker", "Vulnerability Location": "PuttyV2.sol contract", "Repair Method": "Enforce a minimum order duration of at least 15 minutes on filling.", "Vulnerability Information": "Malicious makers can set a minimum order duration as 0, causing the order to instantly expire after filling and forcing the taker to lose money in a meaningless transaction."}

{"Vulnerability Type": "Double Fill", "Vulnerability Location": "acceptCounterOffer() function", "Repair Method": "Require that order can't be in the filled state on cancel", "Vulnerability Information": "An attacker can fill both originalOrder and order when a user is attempting to accept a counter offer, resulting in both orders being filled."}

