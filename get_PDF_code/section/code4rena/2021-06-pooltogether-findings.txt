1. {"Vulnerability Type": "Unchecked return values", "Vulnerability Location": "ERC20 transfer and transferFrom in BadgerYieldSource and SushiYieldSource contracts", "Repair Method": "Use SafeERC20 library implementation and call safeTransfer or safeTransferFrom when transferring ERC20 tokens", "Vulnerability Information": "The return values of ERC20 transfer and transferFrom are not checked to be true, which could be false if the transferred tokens are not ERC20-compliant."}
2. {"Vulnerability Type": "DoS", "Vulnerability Location": "_depositInVault() function in YearnV2YieldSource contract", "Repair Method": "Use safeIncreaseAllowance() function instead of safeApprove()", "Vulnerability Information": "If the existing allowance is non-zero, then safeApprove() will revert causing the userâ€™s token deposits to fail leading to denial-of-service."}
3. {"Vulnerability Type": "Locked ERC721 tokens", "Vulnerability Location": "awardExternalERC721 function in PrizePool contract", "Repair Method": "Consider changing transferFrom to safeTransferFrom or use try/catch statement to handle error cases separately or provide a function for the pool owner to remove malicious winners manually if this happens", "Vulnerability Information": "If any winner is a contract and is not aware of incoming ERC721 tokens, the sent tokens could be locked."}
4. {"Vulnerability Type": "Loss of underlying tokens", "Vulnerability Location": "redeemToken function in IdleYieldSource contract", "Repair Method": "Change redeemedShare to redeemAmount", "Vulnerability Information": "Users could get fewer underlying tokens than they should."}
5. {"Vulnerability Type": "Arithmetic underflow and overflow", "Vulnerability Location": "SushiYieldSource, BadgerYieldSource, and IdleYieldSource contracts", "Repair Method": "Use SafeMath library functions", "Vulnerability Information": "SafeMath is not completely used at certain lines of yield source contracts, which could potentially cause arithmetic underflow and overflow."}
6. {"Vulnerability Type": "Integer underflow", "Vulnerability Location": "withdraw function in YearnV2YieldSource contract", "Repair Method": "Return currentBalance - previousBalance if currentBalance > previousBalance else 0", "Vulnerability Information": "All vault withdrawals fail due to the integer underflow as the previousBalance is less than currentBalance. Users won't be able to get back their investment."}
7. {"Vulnerability Type": "Contract existence check", "Vulnerability Location": "depositToken function in YieldSourcePrizePool contract", "Repair Method": "Perform a contract existence check on _yieldSource prior to the depositToken function existence hack for determining yield source contract", "Vulnerability Information": "The check will pass here but will revert in all future calls to the yield source forcing contract redeployment after the pool is active. Users will not be able to interact with the pool and abandon it."}

1. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "YieldSourcePrizePool_canAwardExternal function", "Repair Method": "Add a function to return the interest-bearing token", "Vulnerability Information": "The _canAwardExternal function does not work as expected. It might be possible to award the interest-bearing token which would lead to errors and loss of funds when trying to redeem underlying."}
2. {"Vulnerability Type": "High Severity", "Vulnerability Location": "BadgerYieldSource balanceOfToken function", "Repair Method": "Use badgerSett.balance() instead of badger.balanceOf(address(badgerSett))", "Vulnerability Information": "The balanceOfToken function computes the redeemable balance in badger for the user's badgerSett balance, but it under-reports the actual balance due to not accounting for the balance in the Sett, the Controller, and the Strategy."}
3. {"Vulnerability Type": "High Severity", "Vulnerability Location": "withdrawWithTimelockFrom function", "Repair Method": "Increase the unlock timestamp by duration each time instead of resetting it to the duration", "Vulnerability Information": "Users can withdraw the entire PrizePool deposit by circumventing the timelock, leading to significant issues for the protocol."}
4. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "timelockDepositTo function", "Repair Method": "Change operator to from on L281 of timelockDepositTo function and specify the scenarios where the role of the operator is applicable", "Vulnerability Information": "The timelock deposits and withdrawals are made to/from different addresses in the scenario where the operator address != user specified from/to addresses, leading to failed timelock deposits."}
5. {"Vulnerability Type": "High Severity", "Vulnerability Location": "IdleYieldSource contract", "Repair Method": "Implement mantissa calculations like in the contract for the AAVE yield", "Vulnerability Information": "Arithmetic can zero out the number of shares or tokens that should be given due to not using mantissa calculations."}

