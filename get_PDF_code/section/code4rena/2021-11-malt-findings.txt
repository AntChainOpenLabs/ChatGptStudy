1. {"Vulnerability Type": "Frontrunning", "Vulnerability Location": "UniswapHandler calls to UniswapV2Router", "Repair Method": "Implement price slippage checks whenever removing liquidity or swapping tokens. Ensure that only the UniswapHandler contract can call UniswapV2Router and UniswapV2Pair contract.", "Vulnerability Information": "UniswapHandler calls to UniswapV2Router are vulnerable to frontrunning attacks due to lack of price slippage checks and anyone having access to UniswapV2Router contract."}
2. {"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "AbstractRewardMine.sol#setRewardToken", "Repair Method": "Remove the function or use it with a timelock contract and ensure that the new token is distributed in a way that padding variables still make sense. Alternatively, make the rewardToken immutable.", "Vulnerability Information": "Changing the reward token in AbstractRewardMine.sol#setRewardToken can result in `totalDeclaredReward` being changed to 0 and create problems with accumulated padding variables."}
3. {"Vulnerability Type": "Unchecked return value", "Vulnerability Location": "Permissions contract, lines 85 and 101", "Repair Method": "Check the return value of the .call function to ensure that the transfer succeeded.", "Vulnerability Information": "ETH transfer using .call function in Permissions contract can appear successful even if it failed due to lack of verification of the return value."}
4. {"Vulnerability Type": "Re-entrancy", "Vulnerability Location": "AbstractRewardMine contract, _withdraw method", "Repair Method": "Update internal accounting before the transfer occurs to prevent re-entrancy attacks.", "Vulnerability Information": "The _withdraw method in AbstractRewardMine contract is vulnerable to re-entrancy attacks due to lack of proper internal accounting before the transfer occurs."}
5. {"Vulnerability Type": "Incorrect state update", "Vulnerability Location": "AuctionEschapeHatch.sol#exitEarly", "Repair Method": "Rethink how to track values of an auction correctly and ensure that the correct values are used for the correct calculations.", "Vulnerability Information": "AuctionEschapeHatch.sol#exitEarly updates the state of the auction wrongly, allowing users to claim more malt with less commitment and reducing profit penalties."}

1. {"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "TIMELOCK_ROLE Can Withdraw All FUND from the Contracts via `emergencyWithdrawGAS(), emergencyWithdraw(), partialWithdrawGAS(), partialWithdraw()", "Repair Method": "Pause the Contract and Disable All Functions when Bad Thing Happen rather than Withdraw All Fund to a random address. If Withdraw Fund can't avoid, a Multi Sig ETH Address should be hardcoded into the contract to ensure the fund move to a safe wallet.", "Vulnerability Information": "`TIMELOCK_ROLE` has absolute power to withdraw all funds from the contracts which may raise red flags for investors."}
2. {"Vulnerability Type": "Whitelisting", "Vulnerability Location": "liquidity removed is directly sent to msg.sender, which would revert if it is not whitelisted", "Repair Method": "Liquidity should be removed to UniswapHandler contract, then the proceed is sent to msg.sender. Whitelisting should be avoided as anyone could deploy similar swapping contracts.", "Vulnerability Information": "Unable to remove liquidity in Recovery Mode due to whitelisting on `verifyTransfer`."}
3. {"Vulnerability Type": "Leak of Value", "Vulnerability Location": "`DAO.sol` incentives outside parties to advance the epoch by minting 100 MALT tokens for calling the `advance` function", "Repair Method": "Rather than calculating from the genesis timestamp, store the last time that the epoch length was modified and calculate from there.", "Vulnerability Information": "Reducing the epoch length results in leaking value from advancement incentives."}
4. {"Vulnerability Type": "Bypassing Restrictions", "Vulnerability Location": "One of the innovative feature of Malt is to block buying while under peg. The buy block can be bypassed by swapping to the whitelisted UniswapHandler", "Repair Method": "This exploit can be mitigated by disabling addLiquidity() when the protocol is in recovery mode.", "Vulnerability Information": "User can bypass Recovery Mode via UniswapHandler to buy Malt."}
5. {"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "setReplenishingIndex mistake could freeze unclaimed tokens", "Repair Method": "Remove the require statement on line 136, so that an admin can set the index to a smaller value.", "Vulnerability Information": "setReplenishingIndex mistake could freeze unclaimed tokens."}

1. {"Vulnerability Type": "Wrong return values", "Vulnerability Location": "AuctionEscapeHatch.sol", "Repair Method": "Add a missing comma in the function calls to getAuctionCore() to ensure the correct return values are used", "Vulnerability Information": "The getAuctionCore() function returns wrong values out of order, leading to potential loss of user funds."}
2. {"Vulnerability Type": "Duplicate auction ids", "Vulnerability Location": "AuctionParticipant.sol", "Repair Method": "Add a check to the purchaseArbitrageTokens() function to ensure that duplicate ids are not added, for example by changing auctionIds to a mapping instead of an array", "Vulnerability Information": "The purchaseArbitrageTokens() function in AuctionParticipant.sol pushes duplicate auction ids to an array, causing issues with the replenishingIndex variable and potentially breaking claiming of incentives."}
3. {"Vulnerability Type": "Flashloan attack", "Vulnerability Location": "UniswapHandler.sol, StabilizerNode.sol", "Repair Method": "Use a short TWAP to calculate the trade size instead of reading directly from the pool", "Vulnerability Information": "The AMM pool can be drained using a flashloan and calling stabilize due to the vulnerability in the trade size calculation in UniswapHandler.sol and StabilizerNode.sol."}
4. {"Vulnerability Type": "Reentrancy", "Vulnerability Location": "Bonding.sol", "Repair Method": "Add access controls to the function bondToAccount() to prevent reentrancy attacks", "Vulnerability Information": "The _notSameBlock() function in Bonding.sol can be circumvented in bondToAccount() by calling it via a smart contract, leading to potential risks from reentrancy attacks."}
5. {"Vulnerability Type": "Outdated data", "Vulnerability Location": "MaltDataLab", "Repair Method": "Add calls to trackMaltPrice(), trackPoolReserves, and trackPool wherever the values are impacted by the protocol to ensure the most up-to-date values are used", "Vulnerability Information": "Malt Protocol uses stale results from MaltDataLab which can be abused by users, leading to potential risks from miners censoring calls and extracting value from other areas of the protocol which use outdated values."}

1. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "Auction collateralToken won't work if token is fee-on-transfer token", "Repair Method": "Add logic to transfers/transferFroms to calculate exactly how many tokens were actually sent to a specific address", "Vulnerability Information": "The smart contract does not account for fee-on-transfer tokens when transferring tokens, which can cause the contract to revert and fail."}
2. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "Dutch auction can be manipulated", "Repair Method": "Incentivize stabilize() or incentivize a permission-less call to _endAuction(). Lock-in auction price when user commit purchase", "Vulnerability Information": "The Dutch auction can be manipulated by preventing _endAuction() from being called, allowing an attacker to purchase tokens at a lower price."}
3. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "Bonding doesn't work with fee-on transfer tokens", "Repair Method": "Measure the asset change right before and after the asset-transferring calls and use the difference as the actual bonded amount", "Vulnerability Information": "The bonding function does not account for fee-on-transfer tokens, causing the function to revert and fail."}
4. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "Slippage checks when adding liquidity are too strict", "Repair Method": "Ensure that the balances in the contract are always balanced and match the current reserve ratio. Accept parameters instead of how many tokens to provide liquidity with from the caller side", "Vulnerability Information": "The slippage checks when adding liquidity are too strict, causing the function to revert and fail. An attacker can even send tokens to the contract to make them unbalanced and revert, resulting in a griefing attack."}

1. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "Bonding.sol _unbondAndBreak", "Repair Method": "Add a similar edge case check to `_unbondAndBreak`. In the case where LP tokens are transferred back to Bonding.sol instead of malt/reward, these LP tokens should be forwarded back to the user since the value is rightfully theirs.", "Vulnerability Information": "Bonding.sol _unbondAndBreak does not account for edge case where no tokens are returned."}
2. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "stabilize function", "Repair Method": "In `_beforeTokenTransfer`, if the price is above 1$ and the receiver is the AMM pool, stabilize it.", "Vulnerability Information": "Theft of system profit."}
3. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "purchaseArbitrageTokens function", "Repair Method": "Consider adding a check to ensure that `realCommitment != 0` in `purchaseArbitrageTokens`.", "Vulnerability Information": "Users can contribute to an auction without directly committing collateral tokens."}
4. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "_calculateMaltRequiredForExit function", "Repair Method": "Consider implementing/integrating a TWAP oracle to track the price of Malt.", "Vulnerability Information": "_calculateMaltRequiredForExit uses spot price to calculate Malt quantity in exitEarly."}
5. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "roles in Malt Finance", "Repair Method": "1. Some tasks don't really need a special role like StabilizerNode. Should allow any community members to run their own StabilizerNode without approval needed. 2. Consider transfer Admin to Multisig or DAO.", "Vulnerability Information": "The power structure is too centralized and protocol may break if anything happens to Admin."}
6. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "setBonding function", "Repair Method": "Set `BONDING_ROLE` instead of `REINVESTOR_ROLE` in `setBonding` function.", "Vulnerability Information": "MiningService.setBonding should use BONDING role instead of REINVESTOR one."}

1. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "DAO.sol setAdvanceIncentive function", "Repair Method": "Check for a reasonable maximum value in advance() function", "Vulnerability Information": "setAdvanceIncentive function of DAO.sol doesn't check for a maximum value of incentive, which can result in a large amount of malt being minted if incentivewould be very large."}
2. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "MovingAverage.sol setSampleMemory function", "Repair Method": "Check for count < sampleMemory in _getFirstSample function", "Vulnerability Information": "setSampleMemory function of MovingAverage.sol can break MovingAverage, making the value of exchangeRate in StabilizerNode.stabilize() being extremely wrong."}
3. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "UniswapHandler.sol addLiquidity function", "Repair Method": "Reset approval amount if not all tokens were added to liquidity pool", "Vulnerability Information": "addLiquidity function in UniswapHandler.sol does not reset approval if not all tokens were added to the liquidity pool, leading to large Uniswap approval amounts by the UniswapHandler contract."}
4. {"Vulnerability Type": "High Severity", "Vulnerability Location": "AuctionBurnReserveSkew.sol getPegDeltaFrequency function", "Repair Method": "Change the logic in getPegDeltaFrequency function", "Vulnerability Information": "getPegDeltaFrequency function in AuctionBurnReserveSkew.sol has an incorrect logic, which can limit its functionality and can result in an improper amount of excess Liquidity Extension balance to be used at the end of an auction."}
5. {"Vulnerability Type": "High Severity", "Vulnerability Location": "Timelock.sol setGovernor and setDelay functions", "Repair Method": "Make setGovernor and setDelay only callable from the Timelock contract itself", "Vulnerability Information": "The current implementation of Timelock contract allows the governor to execute any transactions without any constraints, which can result in granting minter role to any address and mint unlimited amount of MALT."}
6. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "MovingAverage.sol _getFirstSample function", "Repair Method": "Add an additional check for if (counter + 1 < sampleMemory) return 0 in _get

1. {"Vulnerability Type": "Incorrect token approval", "Vulnerability Location": "_distributeRewards function", "Repair Method": "Reset approval amount if the input rewarded amount to allocateArbRewards is less than the output amount", "Vulnerability Information": "The allocateArbRewards function does not necessarily utilize the entire amount approved by the StabilizerNode contract, resulting in dust token approval amounts accruing within the StabilizerNode contract."}
2. {"Vulnerability Type": "Incentive abuse", "Vulnerability Location": "_shouldAdjustSupply function", "Repair Method": "Use auctionExists and auctionActive consistently in StabilizerNode and Auction to ensure the edge case cannot be abused", "Vulnerability Information": "An auction which is inactive but exists would satisfy the edge case and result in triggerAuction simply returning, allowing the caller to be rewarded for their call to stabilize even if an auction exists already."}
3. {"Vulnerability Type": "Incorrect return value", "Vulnerability Location": "UniswapHandler.maltMarketPrice function", "Repair Method": "Return rewardDecimals instead of maltDecimals in the rewardDecimals < maltDecimals branch", "Vulnerability Information": "The returned decimals do not match the computed price for the rewardDecimals < maltDecimals branch, resulting in callers receiving a price in unexpected decimals and potentially inflating or deflating the actual amount."}
4. {"Vulnerability Type": "Incorrect permissions", "Vulnerability Location": "Permissions.reassignGlobalAdmin function", "Repair Method": "Ensure that the caller has both the TIMELOCK_ROLE and ADMIN_ROLE roles", "Vulnerability Information": "The TIMELOCK_ROLE is not the admin of all the reassigned roles, and the revokeRole calls will fail as it requires the ADMIN_ROLE, making it impossible to call reassignGlobalAdmin if the caller only has the TIMELOCK_ROLE role."}

