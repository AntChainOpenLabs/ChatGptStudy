1. {"Vulnerability Type": "Copy portfolio to earn royalties", "Vulnerability Location": "create() function in NestedFactory.sol", "Repair Method": "Add a require statement to prevent users from copying their own portfolios", "Vulnerability Information": "Users can copy their own portfolio and receive royalty shares for it, repeating the process over and over again."}
2. {"Vulnerability Type": "Using same msg.value multiple times", "Vulnerability Location": "create() function in NestedFactory.sol", "Repair Method": "Treat ETH exclusively, not allowing ETH operations to be batched at all", "Vulnerability Information": "Passing multiple ETH deposits in orders array will use the same msg.value many times, resulting in multiple deposits that sum up to a much bigger accounted value than actually deposited value."}
3. {"Vulnerability Type": "Locked ETH in contract", "Vulnerability Location": "_transferInputTokens() function in NestedFactory.sol", "Repair Method": "Ensure msg.value = 0 in _transferInputTokens() for non-ETH transfers", "Vulnerability Information": "A user that mistakenly calls create() or addToken() with WETH (or another ERC20) as the input token, but includes native ETH with the function call will have their native ETH permanently locked in the contract."}
4. {"Vulnerability Type": "Front-running", "Vulnerability Location": "setReserve() function in NestedFactory.sol", "Repair Method": "Initialize the value for the reserve variable in the constructor", "Vulnerability Information": "The reserve address variable in NestedFactory.sol remains equal to 0 before the setReserve() function is called by an owner, which may lead to incorrect transfers of tokens or invalid comparison with the asset reserve."}
5. {"Vulnerability Type": "Overcharging users", "Vulnerability Location": "_submitInOrders() function in NestedFactory.sol", "Repair Method": "Update the records if input is from the reserve, and transfer back any unspent amount that exceeds the 1% fixed fee", "Vulnerability Information": "When executing orders, the actual amountSpent + feesAmount can be lower than _inputTokenAmount, and the unspent amount should be returned to the user. However, in the current implementation, the unspent amount will be taken as part of the fee."}
6. {"Vulnerability Type": "Unbounded number of shareholders", "Vulnerability Location": "FeeSplitter contract", "Repair Method": "Set a sanity maximum number of shareholders that

1. {"Vulnerability Type": "Cache Syncing", "Vulnerability Location": "isResolverCached() function, create() function, swapTokenForTokens() function", "Repair Method": "Add a modifier to require that the cache is synced to all functions that interact with the operators.", "Vulnerability Information": "Many core operations are dependent on the assumption that the cache is synced before these functions are executed however this may not necessarily be the case."}
2. {"Vulnerability Type": "Array Manipulation", "Vulnerability Location": "removeOperator() function", "Repair Method": "Instead of doing an element deletion, it should be replaced with the last element, then have the last element popped in removeOperator().", "Vulnerability Information": "Removing an operator will cause the cache functionality to be permanently broken."}

