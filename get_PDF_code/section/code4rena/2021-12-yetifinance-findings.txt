{"Vulnerability Type": "Unwhitelisted token can cause disaster", "Vulnerability Location": "sendCollaterals function in ActivePool.sol", "Repair Method": "Add a check to see if collateral to be transferred is whitelisted", "Vulnerability Information": "Contract instability and financial loss. This will happen if one of the allowed contract calls sendCollaterals with non whitelisted token."}

{"Vulnerability Type": "Out of gas", "Vulnerability Location": "poolColl.tokens[] array in ActivePool.sol", "Repair Method": "Check RemixArray's length", "Vulnerability Information": "There is no upper limit on poolColl.tokens[], it increments each time when a new collateral is added. Eventually, as the count of collateral increases, gas cost of smart contract calls will raise and that there is no implemented function to reduce the array size."}

{"Vulnerability Type": "Wrong lastBuyBackPrice", "Vulnerability Location": "buyBack function in sYETIToken.sol", "Repair Method": "Verify the first and last element of the path are YETI/YUSD and use the first and last amount parameter", "Vulnerability Information": "The sYETIToken.lastBuyBackPrice is set in buyBack and hardcoded, however, these amounts depend on the swap path parameter that is used by the caller."}

{"Vulnerability Type": "Collateral parameters can be overwritten", "Vulnerability Location": "addCollateral function in Whitelist.sol", "Repair Method": "Fix the check to ensure collateral does not already exist", "Vulnerability Information": "It's possible to repeatedly add the first collateral token in validCollateral through the Whitelist.addCollateral function."}

{"Vulnerability Type": "Yeti token rebase checks the additional token amount incorrectly", "Vulnerability Location": "rebase function in sYETIToken.sol", "Repair Method": "Limit the check by extra Yeti tokens, not the whole balance", "Vulnerability Information": "The amount added to effectiveYetiTokenBalance during rebase can exceed the actual amount of the Yeti tokens owned by the contract."}

{"Vulnerability Type": "Wrong comment in getFee", "Vulnerability Location": "getFee function in ThreePieceWiseLinearPrice

1. {"Vulnerability Type": "Reentrancy", "Vulnerability Location": "BorrowerOperations.sol", "Repair Method": "Add a re-entrancy guard similar to OpenZeppelin's ReentrancyGuard", "Vulnerability Information": "Several functions in BorrowerOperations.sol are potentially re-entrant as they are external but have no re-entrancy guard declared."}
2. {"Vulnerability Type": "Chainlink Price Feed", "Vulnerability Location": "PriceFeed.sol", "Repair Method": "Add checks on the return data with proper revert messages if the price is stale or the round is incomplete", "Vulnerability Information": "The latestRoundData function in PriceFeed.sol fetches the asset price from a Chainlink aggregator using the latestRoundData function, but there are no checks on roundID."}
3. {"Vulnerability Type": "Unauthorized Function Call", "Vulnerability Location": "StabilityPool.sol", "Repair Method": "Allow only the ActivePool to call the receiveCollateral() function", "Vulnerability Information": "The receiveCollateral() function in StabilityPool.sol can be called by anyone, but it should only be called by ActivePool."}
4. {"Vulnerability Type": "Piecewise Linear Functions", "Vulnerability Location": "ThreePieceWiseLinearPriceCurve.adjustParams", "Repair Method": "Evaluate the piecewise linear function in a different way that does not require computing the y-axis intersection value", "Vulnerability Information": "The adjustParams function in ThreePieceWiseLinearPriceCurve uses unsigned integers to compute the y-axis intersect, which means these values cannot become negative, ruling out a whole class of functions."}
5. {"Vulnerability Type": "Fee Decay", "Vulnerability Location": "ThreePieceWiseLinearPriceCurve.calculateDecayedFee", "Repair Method": "Reset the fee to zero if decay = decayTime", "Vulnerability Information": "The calculateDecayedFee function in ThreePieceWiseLinearPriceCurve does not decay the lastFeePercent if decay = decayTime, but should set it to 0 instead."}

