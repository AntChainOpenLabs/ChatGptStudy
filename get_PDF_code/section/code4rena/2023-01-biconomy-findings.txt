1. {"Vulnerability Type": "Theft of funds under relaying the transaction", "Vulnerability Location": "contracts/smart-contract-wallet/SmartAccount.sol#L200, contracts/smart-contract-wallet/SmartAccount.sol#L239, contracts/smart-contract-wallet/SmartAccount.sol#L248", "Repair Method": "Calculate the number of bytes used by the relayer as a sum per input parameter and bound the length of the signature to eliminate the possibility of putting meaningless zeroes there.", "Vulnerability Information": "An attacker could manipulate the calldata to increase the refund amount while spending less gas than what is calculated by the contract."}
2. {"Vulnerability Type": "Destruction of the SmartAccount implementation", "Vulnerability Location": "contracts/smart-contract-wallet/SmartAccount.sol#L166, contracts/smart-contract-wallet/SmartAccount.sol#L192, contracts/smart-contract-wallet/SmartAccount.sol#L229, contracts/smart-contract-wallet/base/Executor.sol#L23", "Repair Method": "Add to the deploy script initialization of the SmartAccount implementation, or add to the SmartAccount contract a constructor that will prevent implementation contract from the initialization.", "Vulnerability Information": "If the SmartAccount implementation contract is not initialized, it can be destroyed using a contract that executes the selfdestruct opcode on any incoming call."}

1. {"Vulnerability Type": "Attacker can gain control of counterfactual wallet", "Vulnerability Location": "SmartAccountFactory.sol, SmartAccount.sol", "Repair Method": "Include the entrypoint as part of the salt during address generation", "Vulnerability Information": "An attacker can deploy the counterfactual wallet on behalf of the owner and use an arbitrary entrypoint, allowing them to execute any arbitrary call or code using delegatecall."}
2. {"Vulnerability Type": "DoS of user operations and loss of user transaction fee due to insufficient gas value submission by malicious bundler", "Vulnerability Location": "EntryPoint.sol", "Repair Method": "Update the Account Abstraction implementation to the latest version to verify remaining gas is more than sufficient to cover the specified callGasLimit and verificationGasLimit", "Vulnerability Information": "A malicious bundler could submit a bundle of high gas usage user operations with insufficient gas value, causing the bundle to fail even when the users calculated the gas limits correctly, potentially draining their funds."}

{"Vulnerability Type": "Arbitrary transactions possible due to insufficient signature validation", "Vulnerability Location": "checkSignatures function in SmartAccount.sol", "Repair Method": "The protocol should validate before calling isValidSignature that _signer is owner.", "Vulnerability Information": "A hacker can create arbitrary transaction through the smart wallet by evading signature validation."}

1. {"Vulnerability Type": "Doesn't Follow ERC1271 Standard", "Vulnerability Location": "ISignatureValidator.sol, SmartAccount.sol", "Repair Method": "Follow EIP-1271 standard", "Vulnerability Information": "ERC1271_MAGIC_VAULE should be 0x1626ba7e instead of 0x20c13b0b and function name should be isValidSignature(bytes32,bytes) instead of isValidSignature(bytes,bytes)."}
2. {"Vulnerability Type": "Paymaster ETH can be drained with malicious sender", "Vulnerability Location": "VerifyingSingletonPaymaster.sol", "Repair Method": "Limit validatePaymasterUserOp function to view function in erc4337 spec and add simple boolean data for mapping if hash is used or not", "Vulnerability Information": "Paymaster's signature can be replayed to drain their deposits."}
3. {"Vulnerability Type": "Replay attack (EIP712 signed transaction)", "Vulnerability Location": "SmartAccount.sol", "Repair Method": "Add batchId to the hash calculation of the transaction in encodeTransactionData function", "Vulnerability Information": "Signed transaction can be replayed."}
4. {"Vulnerability Type": "Griefing attacks on handleOps and multiSend logic", "Vulnerability Location": "EntryPoint.sol, MultiSend.sol", "Repair Method": "Remove redundant require-like checks from internal functions called from the handleOps function and add the non-atomic execution logic to the multiSend function", "Vulnerability Information": "The handleOps function executes an array of UserOperation. If at least one user operation fails the whole transaction will revert. The multiSend function reverts if at least one of the transactions fails, so it is also vulnerable to such type of attacks."}

{"Vulnerability Type": "Non-compliance with EIP-4337", "Vulnerability Location": "contracts/smart-contract-wallet/BaseSmartAccount.sol#L60-L68", "Repair Method": "Rewrite the code to comply with EIP-4337 specifications", "Vulnerability Information": "Some parts of the codebase are not compliant with the EIP-4337 from the EIP-4337 specifications, at multiple degrees of severity."}

{"Vulnerability Type": "Smart contract upgradability vulnerability", "Vulnerability Location": "contracts/smart-contract-wallet/base/ModuleManager.sol#L18", "Repair Method": "Add storage gaps to all inherited contracts that contain storage variables", "Vulnerability Information": "SmartAccount.sol inherits from contracts that are not stateless and don't contain storage gaps which can be dangerous when upgrading."}

1. {"Vulnerability Type": "Stealing Funds", "Vulnerability Location": "FeeRefund.tokenGasPriceFactor", "Repair Method": "Include tokenGasPriceFactor in the encoded transaction data and verify it with the user's signature", "Vulnerability Information": "The submitter of a transaction is paid back the transaction's gas costs either in ETH or in ERC20 tokens. With ERC20 tokens, the tokenGasPriceFactor value is not included in the checks, allowing the submitter to simulate the tx with one value and submit it with another value to increase the actual gas repayment and steal the user's funds."}
2. {"Vulnerability Type": "Cross-Chain Signature Replay Attack", "Vulnerability Location": "VerifyingSingletonPaymaster.sol#getHash", "Repair Method": "Add the chainId in the calculation of the UserOperation hash", "Vulnerability Information": "User operations can be replayed on smart accounts across different chains due to missing chainId in the calculation of the UserOperation hash in VerifyingSingletonPaymaster.sol#getHash."}
3. {"Vulnerability Type": "Access Control", "Vulnerability Location": "SmartAccount.sol#execute and SmartAccount.sol#executeBatch", "Repair Method": "Remove onlyOwner modifier from execute and executeBatch", "Vulnerability Information": "execute and executeBatch functions in SmartAccount.sol can only be called by owner, not EntryPoint, breaking the interaction with EntryPoint."}

{"Vulnerability Type": "Nonce Collision", "Vulnerability Location": "execTransaction function in SmartAccount.sol", "Repair Method": "Add a requirement that batchId is not 0 in execTransaction", "Vulnerability Information": "Transactions can fail due to batchId collision, which can result in unexpected failing of transactions. There are two main ways to execute transactions from the smart wallet, and due to different ways to execute transactions on the wallet, there could be a collision between batchIds being used."}

