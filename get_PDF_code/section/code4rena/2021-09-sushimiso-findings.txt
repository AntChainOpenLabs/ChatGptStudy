1. {"Vulnerability Type": "use of transfer() instead of call() to send eth", "Vulnerability Location": "use of transfer() instead of call() to send eth", "Repair Method": "use call() to send eth", "Vulnerability Information": "Use of `transfer()` might render ETH impossible to withdraw because after istanbul hardfork, there is an increase in the gas cost of the SLOAD operation and therefore breaks some existing smart contracts."}
2. {"Vulnerability Type": "SushiToken transfers are broken due to wrong delegates accounting on transfers", "Vulnerability Location": "SushiToken._beforeTokenTransfer", "Repair Method": "Change the `_moveDelegates` call to be from `_delegates[from]` instead", "Vulnerability Information": "When minting / transferring / burning tokens, the `SushiToken._beforeTokenTransfer` function is called and supposed to correctly shift the voting power due to the increase/decrease in tokens for the `from` and `to` accounts. However, it does not correctly do that, it tries to shift the votes from the `from` account, instead of the `_delegates[from]` account."}
3. {"Vulnerability Type": "Last person to withdraw his tokens might not be able to do this, in Crowdsale (edge case)", "Vulnerability Location": "Crowdsale.sol", "Repair Method": "In the function _addCommitment, add a check on auctionEnded() or status.finalized", "Vulnerability Information": "Suppose a Crowdsale is successful and enough commitments are made before the `marketInfo.endTime`. Suppose marketStatus.commitmentsTotal == marketInfo.totalTokens -1 // note this is an edge case, but can be constructed by an attacker. Then the function `auctionEnded()` returns true. Assume `auctionSuccessful()` is also true (might depend on the config of `marketPrice.goal` and `marketInfo.totalTokens`). Then an admin can call `finalize()` to finalize the Crowdsale. The function finalize distributes the funds and the unsold tokens and sets `status.finalized = true` so that finalized cannot be called again. Now we have `marketInfo.totalTokens -1` tokens left in the contract. However `commitEth()` or `commitTokens()` can still be called (they give no error message that the auction has ended)."}
4. {"Vulnerability Type": "Adding liquidity to an existing pool may allows the attacker to steal most of the tokens", "V

