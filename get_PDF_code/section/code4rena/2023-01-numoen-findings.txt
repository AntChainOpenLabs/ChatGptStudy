{"Vulnerability Type": "Precision loss", "Vulnerability Location": "Pair.invariant() function", "Repair Method": "Multiply first before division to prevent precision loss", "Vulnerability Information": "There is a precision loss in the invariant function that can lead to loss of funds. The significant rounding before conversion to D18 can result in the wrong invariant check result. This can allow an attacker to steal funds without affecting the invariant."}

1. {"Vulnerability Type": "Incorrect initialization code hash", "Vulnerability Location": "UniswapV2Library.pairFor", "Repair Method": "Integrate the latest version of UniswapV2.", "Vulnerability Information": "The init code hash used to calculate the address of UniswapV2 pair contract is not same as the latest UniswapV2 repository."}
2. {"Vulnerability Type": "Incorrect liquidity calculation", "Vulnerability Location": "LiquidityManager.addLiquidity", "Repair Method": "Add a functionality to calculate the liquidity for the first deposit on-chain.", "Vulnerability Information": "The LPs are supposed to supply three input values `amount0Min, amount1Min, liquidity` via `AddLiquidityParams` but these three values should meet an accurate relationship, or else the depositor will suffer from revert or fund loss."}

1. {"Vulnerability Type": "Partial fund loss", "Vulnerability Location": "LendgineRouter.sol", "Repair Method": "Automatically refund excess ETH or use atomic multicall feature", "Vulnerability Information": "Borrower can lose partial fund during minting of Power Token as excess ETH are not refunded automatically"}
2. {"Vulnerability Type": "Fee on transfer tokens", "Vulnerability Location": "Lendgine.sol", "Repair Method": "Whitelist tokens or calculate balance before and after transfer", "Vulnerability Information": "Fee on transfer tokens will not behave as expected"}

{"Vulnerability Type": "Precision Loss", "Vulnerability Location": "FullMath.mulDiv function in Pair.sol and Lendgine.sol", "Repair Method": "Normalize and scale totalLiquidityBorrowed by token precision before multiplication instead of division by 1e18", "Vulnerability Information": "Division before multiplication incurs unnecessary precision loss"}

