1. {"Vulnerability Type": "Validation", "Vulnerability Location": "setBondPercentDiv, addBounty, setMinLicenseFee, mintTo, validateWeights, proposeBasketLicense", "Repair Method": "Add appropriate validation checks to the functions", "Vulnerability Information": "Functions lack necessary validation checks"}
2. {"Vulnerability Type": "Malfunction", "Vulnerability Location": "Basket.sol#mint()", "Repair Method": "Remove the nonReentrant modifier from the mint() function", "Vulnerability Information": "Extra nonReentrant modifier causes malfunction in the mint() function"}
3. {"Vulnerability Type": "Denial of Service", "Vulnerability Location": "Bonding mechanism in publishAllIndex, settleAuction, bondBurn", "Repair Method": "Consider de-prioritizing bonding to rebalance or remove the bonding mechanism altogether", "Vulnerability Information": "Malicious user can DOS auctions using the bonding mechanism"}
4. {"Vulnerability Type": "Re-entrancy", "Vulnerability Location": "Factory.createBasket", "Repair Method": "Add nonReentrant modifier to the createBasket function", "Vulnerability Information": "createBasket function is vulnerable to re-entrancy"}
5. {"Vulnerability Type": "Division by Zero", "Vulnerability Location": "Factory.setBondPercentDiv and Auction.bondForRebalance()", "Repair Method": "Add a require statement to disallow setting bondPercentDiv to zero", "Vulnerability Information": "Setting bondPercentDiv to zero causes division by zero error"}
6. {"Vulnerability Type": "Incorrect Calculation", "Vulnerability Location": "Basket.sol#transferFrom()", "Repair Method": "Use stored token balances instead of transfer for calculating amounts", "Vulnerability Information": "Fee on transfer tokens transfer less tokens than expected"}

{"Vulnerability Type": "Division by zero", "Vulnerability Location": "Auction.settleAuction()", "Repair Method": "Add an appropriate require statement to disallow setting Factory.auctionDecrement to zero", "Vulnerability Information": "Setting Factory.auctionDecrement to zero causes Denial of Service in Auction.settleAuction()"}
{"Vulnerability Type": "Division by zero", "Vulnerability Location": "Basket.handleFees()", "Repair Method": "Add a check to handleFees: if totalSupply= 0, return and reset ibRatio to BASE", "Vulnerability Information": "Basket becomes unusable if everybody burns their shares"}
{"Vulnerability Type": "Smart contract vulnerability", "Vulnerability Location": "Auction.sol", "Repair Method": "Add a sanity check in settleAuction to require (newRatio > basket.ibRatio())", "Vulnerability Information": "Auction bonder can steal user funds if bond block is high enough"}

