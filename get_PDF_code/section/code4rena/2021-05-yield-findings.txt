{"Vulnerability Type": "DoS", "Vulnerability Location": "build() function in Cauldron.sol", "Repair Method": "Assign the vaultID by Cauldron instead of user specifying it in the build() operation or add validation logic in Ladle's batching to revert batches that have only build or a subset of the operations that do not make sense to the protocol's operations per valid recipes", "Vulnerability Information": "An attacker can front-run a valid batch transaction in the mempool by constructing a malicious batch transaction with only the build operation with the same vaultID, causing the valid batch transaction to fail and preventing users from opening a vault and interacting with the protocol."}

{"Vulnerability Type": "Interest Avoidance", "Vulnerability Location": "buy function in Witch.sol", "Repair Method": "Disallow users to give vaults to Witch or require vaultOwners[vaultId] and cauldron.auctions(vaultId) to be non-zero at the beginning of function buy", "Vulnerability Information": "A user can avoid paying borrowing interest after the fyToken matures by giving their vault to Witch and buying all their collateral using underlying tokens, which is sold at a price of balances_.art/balances_.ink and does not include borrowing fees."}

{"Vulnerability Type": "DoS", "Vulnerability Location": "createJoin function in JoinFactory.sol and Wand.sol", "Repair Method": "Deploy Joins using CREATE instead of CREATE2 or add access control in createJoin and allow only Wand to call it", "Vulnerability Information": "An attacker can create fake Joins corresponding to specific tokens beforehand to make Wand unable to deploy the actual Join, causing a DoS attack. The attacker can also perform DoS attacks on newly added assets by front-running transactions calling the function addAsset of Wand and creating the corresponding Join to make the benign transaction fail."}

{"Vulnerability Type": "Logic", "Vulnerability Location": "log_2 function in YieldMath.sol", "Repair Method": "Check which version is the correct version and fix the incorrect version", "Vulnerability Information": "The V1 version of YieldMath.sol contains >= (larger or equal), while the V2 version of YieldMath.sol contains > (larger) in the log_2 function, which might lead to miss calculations."}

{"Vulnerability Type": "Ownership", "Vulnerability Location": "grab function in Witch.sol", "Repair Method": "Store the original owner in Cauldron.auctions along with the time at which the auction was started or remove the feature of allowing multiple competing liquidation engines and move the auctions mapping to the Witch", "Vulnerability Information": "After the second grab, the information of the original owner of the vault is lost, and the vault can't be returned to the original owner once the debt has been sold. The grab function stores the previous owner in vaultOwners[vaultId], and then the contract itself is the new owner, overwriting vaultOwners[vaultId] at the second grab."}

{"Vulnerability Type": "auth collision", "Vulnerability Location": "AccessControl.sol", "Repair Method": "Add explicit checks for giving ROOT access and implement CI checks for signature collisions", "Vulnerability Information": "The auth mechanism of `AccessControl.sol` uses function selectors `(msg.sig)` as a `(unique)` role definition. Also the `_moduleCall` allows the code to be extended."}

{"Vulnerability Type": "Uninitialized or Incorrectly set", "Vulnerability Location": "Cauldron", "Repair Method": "Initialize `auctionInterval`  at declaration with a reasonable default value and add a threshold check in `setAuctionInterval()` to ensure the new value meets/exceeds a reasonable default value", "Vulnerability Information": "The `grab()` function in Cauldron is used by the Witch or other liquidation engines to grab vaults that are under-collateralized."}

{"Vulnerability Type": "Violation of implicit constraints", "Vulnerability Location": "Ladle", "Repair Method": "Enforce batch operation constraints explicitly in the code along with documentation and onboarding validation", "Vulnerability Information": "The Ladle batching of operations is a complex task with implicit constraints on what operations can be bundled together in a batch."}

{"Vulnerability Type": "User can redeem more tokens by artificially increasing the chi accrual", "Vulnerability Location": "FYToken.sol", "Repair Method": "Make the chi accrual time-weighted to mitigate the manipulation caused by flash borrow and repay", "Vulnerability Information": "A user can artificially increase the chi accrual (after maturity) by flash borrow on Compound, which affects the exchange rate used by the chi oracle."}

{"Vulnerability Type": "auth only works well with external functions", "Vulnerability Location": "AccessControl.sol", "Repair Method": "Make sure all auth functions use external or change the modifier to check for the correct selector", "Vulnerability Information": "The auth modifier of `AccessControl.sol` doesn't work as you would expect."}

{"Vulnerability Type": "Duplication of Balance", "Vulnerability Location": "stir function of the Cauldron contract", "Repair Method": "Imposing a require check prohibiting the from and to variables to be equivalent", "Vulnerability Information": "It is possible to duplicate currently held ink or art within a Cauldron, thereby breaking the contract's accounting system and minting units out of thin air."}

{"Vulnerability Type": "Uniswap Oracle uses wrong prices", "Vulnerability Location": "Uniswap oracle contract", "Repair Method": "Using cumulativeTicks and applying equation 5.5 from the Uniswap V3 whitepaper to compute the token0 TWAP", "Vulnerability Information": "The Uniswap oracle uses a mock contract with hard-coded prices to retrieve the price, which is not feasible in production."}

