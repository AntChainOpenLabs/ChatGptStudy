{"Vulnerability Type": "Privilege Escalation", "Vulnerability Location": "function recoverERC20(address token) external onlyOwner returns(bool)", "Repair Method": "Use a multisig wallet to safeguard the owner's wallet. Keep track of the reserved amount for rewarding token and only transfer the remaining amount of token out.", "Vulnerability Information": "The owner can transfer all ERC20 reward token out using function recoverERC20."}

{"Vulnerability Type": "Input Validation", "Vulnerability Location": "function extendPledge(uint256 pledgeId, uint256 newEndTimestamp) external", "Repair Method": "Add a check during the input validation block to ensure that reward token of the pledge being extended is still a valid reward token.", "Vulnerability Information": "Pledges that contain delisted tokens can be extended to continue using delisted reward tokens."}

{"Vulnerability Type": "Logic", "Vulnerability Location": "function _getRewardAmount(uint256 pledgeId, address receiver, uint256 duration) internal view returns (uint256)", "Repair Method": "Provide a way for the creator to provide additional rewards after the pledge creation. Or provide some reward refreshment function that recalculates votesDifference and transfers the required additional reward.", "Vulnerability Information": "Pledge may be out of reward due to the decay in veCRV balance. targetVotes is never reached."}

1. {"Vulnerability Type": "Reward miscalculation", "Vulnerability Location": "extendPledge and increasePledgeRewardPerVote functions", "Repair Method": "Update votesDifference when extending a pledge or increasing a pledge reward per vote", "Vulnerability Information": "Total reward amount in extendPledge and increasePledgeRewardPerVote can be calculated incorrectly due to cached pledgeParams.votesDifference, which can lead to two outcomes: 1. total reward amount is higher, thus a portion of it won't be claimable; 2. total reward amount is lower, thus the pledge target won't be reached."}
2. {"Vulnerability Type": "Accidental inheritance", "Vulnerability Location": "WardenPledge contract", "Repair Method": "Change inheritance from Ownable to Owner", "Vulnerability Information": "WardenPledge accidentally inherits Ownable instead of Owner which removes an important safeguard without sponsor knowledge."}

1. {"Vulnerability Type": "Unexpected Block", "Vulnerability Location": "function pause() external onlyOwner {        _pause();    }", "Repair Method": "Make the pause function time-delayed and only callable by a timelock governance contract", "Vulnerability Information": "Pausing WardenPledge contract, which takes effect immediately, by its owner can unexpectedly block pledge creator from calling closePledge or retrievePledgeRewards function."}
2. {"Vulnerability Type": "Incorrect Fee Calculation", "Vulnerability Location": "vars.feeAmount = (vars.totalRewardAmount * protocalFeeRatio) / MAX_PCT ;", "Repair Method": "Collect fees after the pledge completes, in one of the close functions or in a newly created pull function for owner to collect fees", "Vulnerability Information": "Fees charged from entire theoretical pledge amount instead of actual pledge amount."}
3. {"Vulnerability Type": "Loss of Precision", "Vulnerability Location": "if(delegationBoost.adjusted_balance_of(pledgeParams.receiver) + bias  pledgeParams.targetVotes) revert Errors.TargetVotesOverflow();", "Repair Method": "Use bias instead of amount in the check", "Vulnerability Information": "Due to loss of precision, targetVotes may not reach."}

