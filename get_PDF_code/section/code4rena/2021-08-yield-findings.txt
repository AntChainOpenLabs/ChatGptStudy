{"Vulnerability Type": "ERC20 transfer function not checked for return value", "Vulnerability Location": "function claim(address to) external", "Repair Method": "Use OpenZeppelinâ€™s SafeERC20 versions with the safeTransfer and safeTransferFrom functions that handle the return value check as well as non-standard-compliant tokens.", "Vulnerability Information": "The claim function performs an ERC20 transfer rewardsToken.transfer(to, claiming); but does not check the return value, nor does it work with all legacy tokens."}

{"Vulnerability Type": "ERC20Rewards breaks when setting a different token", "Vulnerability Location": "function setRewards(address _rewardsToken, uint256 _rewardsDuration)", "Repair Method": "Disallow changing the reward token, or clear user's pending rewards of the old token. The second approach requires more code changes and keeping track of what token a user last claimed.", "Vulnerability Information": "The setRewards function allows setting a different token. Holders of a previous reward period cannot all be paid out and will receive their old reward amount in the new token."}

{"Vulnerability Type": "Rewards accumulated can stay constant and often not increment", "Vulnerability Location": "function _updateRewardsPerToken() internal", "Repair Method": "The simplest is to probably not update the rewardsPerToken_.lastUpdated field if rewardsPerToken_.accumulated does not change. Although this change should be closely scrutinized to see it doesn't introduce bugs elsewhere.", "Vulnerability Information": "rewardsPerToken_.accumulated can stay constant while rewardsPerToken_.lastUpdated is continually updated, leading to no actual rewards being distributed."}

{"Vulnerability Type": "Rewards squatting - setting rewards in different ERC20 tokens opens various economic attacks", "Vulnerability Location": "function setRewards(address _rewardsToken, uint256 _rewardsDuration)", "Repair Method": "Disallow changing the reward token.", "Vulnerability Information": "Users essentially have an option to either claim currently earned reward amounts on future rewards tokens, or the current rewards token."}

{"Vulnerability Type": "ERC20Rewards returns wrong rewards if no tokens initially exist", "Vulnerability Location": "function _updateRewardsPerToken() internal", "Repair Method": "The rewardsPerToken_.lastUpdated field must always be updated in _updateRewardsPerToken to the current time (or end) even if _totalSupply == 0. Don't return

1. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "ERC20Rewards.sol L175", "Repair Method": "Use the SafeERC20 library implementation from OpenZeppelin and calling safeTransfer or safeTransferFrom when transferring ERC20 tokens", "Vulnerability Information": "Tokens not compliant with the ERC20 specification could return `false` from the `transfer` function call to indicate the transfer fails, while the calling contract would not notice the failure if the return value is not checked."}
2. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "TimeLock.schedule function", "Repair Method": "Include eta in the hash to allow scheduling the same transactions multiple times", "Vulnerability Information": "The `TimeLock.schedule` function reverts if the same `targets` and `data` fields are used as the `txHash` will be the same."}
3. {"Vulnerability Type": "High Severity", "Vulnerability Location": "CTokenMultiOracle.sol #L110", "Repair Method": "Get the decimals of the underlying tokens to set the correct decimal of a `Source`", "Vulnerability Information": "The `CTokenMultiOracle` contract assumes the exchange rates (borrowing rate) of Compound always have 18 decimals, while, however, which is not true."}
4. {"Vulnerability Type": "High Severity", "Vulnerability Location": "CompositeMultiOracle.peek/get functions", "Repair Method": "Scale the prices to `1e18` by dividing by the oracle precision (`IOracle(source.source).decimals()`)", "Vulnerability Information": "The `CompositeMultiOracle.peek/get` functions seem to return wrong prices. It's unclear what decimals `source.decimals` refers to in this case."}

