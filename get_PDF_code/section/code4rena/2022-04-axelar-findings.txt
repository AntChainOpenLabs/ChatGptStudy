{"Vulnerability Type": "Cross-chain smart contract call failure", "Vulnerability Location": "callContractWithToken() function in AxelarGateway.sol", "Repair Method": "Re-mint and refund the burned tokens in case of contract call failure on the destination chain", "Vulnerability Information": "Cross-chain smart contract calls can revert but source chain tokens remain burnt and are not refunded"}

{"Vulnerability Type": "Loss of funds during transfer to other chain", "Vulnerability Location": "AxelarGateway.sol#L384-L389", "Repair Method": "Call the callContractWithToken function with the source chain as the destination chain in order to return the user their funds instead of reverting when the transfer is not successful", "Vulnerability Information": "User's funds can get lost when transferring to other chain"}

{"Vulnerability Type": "Unsupported fee-on-transfer tokens", "Vulnerability Location": "AxelarGateway.sol#L284-L334", "Repair Method": "Calculate the difference of token balance (using balanceOf) before and after the transferFrom to get the actual amount of tokens received by the contract", "Vulnerability Information": "When tokenAddress is fee-on-transfer tokens, the actual amount of tokens received by the contract will be less than the amount"}

{"Vulnerability Type": "Reentrancy", "Vulnerability Location": "AxelarGatewayMultisig.sol#L484, AxelarGatewayMultisig.sol#L490, AxelarGatewayMultisig.sol#L529", "Repair Method": "Make execute nonReentrant, Add an ever increasing nonce to signatures to prevent replay", "Vulnerability Information": "The `_execute` function and its wrapper `execute` are both reentrant. If an attacker manages to reenter the `_execute` function with the same batch of commands and signatures, previously successfully executed and ongoing commands will be skipped due to premature marking of the success flag. This allows later commands to be executed before the current ongoing command is finished. The reentrant attack can be nested to perform further reordering of commands."}

{"Vulnerability Type": "Low level call returns true if the address doesn't exist", "Vulnerability Location": "AxelarGateway.sol#L545-L548, AxelarGatewayProxy.sol#L16-L24", "Repair Method": "Check before any low-level call that the address actually exists, for example before the low level call in the callERC20 function you can check that the address is a contract by checking its code size.", "Vulnerability Information": "The low-level functions call, delegatecall and staticcall return true as their first return value if the account called is non-existent, as part of the design of the EVM. Account existence must be checked prior to calling if needed."}

