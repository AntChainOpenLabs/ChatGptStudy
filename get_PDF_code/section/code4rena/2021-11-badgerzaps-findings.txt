1. {"Vulnerability Type": "No slippage control", "Vulnerability Location": "IbbtcVaultZap.sol deposit function", "Repair Method": "Add a `minOut` in line with the mint function of other contacts, and pass it as a parameter on L174", "Vulnerability Information": "There is no slippage control on `deposit` of `IbbtcVaultZap.sol`, which expose user to sandwich attack."}
2. {"Vulnerability Type": "Improper input validation", "Vulnerability Location": "Zap.sol redeem function", "Repair Method": "Verify that the passed token address is either wBTC or renbtc", "Vulnerability Information": "In the `redeem()` function, the user can pass a token address. That's the token they receive in return for the ibbtc they give back. Because of missing address checks the user can provide any possible ERC20 token here without the function reverting."}
3. {"Vulnerability Type": "Missing token approval", "Vulnerability Location": "SettToRenIbbtcZap.sol setZapConfig function", "Repair Method": "Add an `if` statement to check if `curvePool` has been updated and approve `_token` to `_curvePool` if it has.", "Vulnerability Information": "When `curvePool` or `token` got updated, `token` is not approved to `curvePool`, which will malfunction the contract and break minting."}
4. {"Vulnerability Type": "Excessive require", "Vulnerability Location": "IbbtcVaultZap.sol deposit function", "Repair Method": "Check for `RENCRV_VAULT.blockLock` only when `if (_amounts[1] > 0 || _amounts[2] > 0)`", "Vulnerability Information": "The check for `RENCRV_VAULT.blockLock` is only needed when `if (_amounts[1] > 0 || _amounts[2] > 0)`. However, in the current implementation, the check is done at the very first, making transactions unrelated to `RENCRV_VAULT` fail unexpectedly if there is a prior transaction involved with `RENCRV_VAULT` in the same block."}
5. {"Vulnerability Type": "Improper implementation", "Vulnerability Location": "IbbtcVaultZap.sol and SettToRenIbbtcZap.sol setGuardian function", "Repair Method": "Change `governance = _guardian` to `guardian = _guardian`", "Vulnerability Information": "`governance = _guardian` should be `guardian = _guardian`."}
6. {"Vulnerability Type": "Incorrect function implementation", "Vulnerability Location": "Zap.sol calcMint function", "Repair Method": "Implement the missing functions for `calcMint`", "Vulnerability Information": "`calcMint` in Zap.sol always return poolId=0 and idx=0, while the docstring specified it should return the most optimal route instead. This will lead to suboptimal zap."}

