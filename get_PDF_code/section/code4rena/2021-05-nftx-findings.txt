1. {"Vulnerability Type": "Direct redeem fee circumvention", "Vulnerability Location": "NFTXVaultUpgradeable.sol", "Repair Method": "Use a commit-reveal pattern for NFT swaps and redemptions", "Vulnerability Information": "A malicious actor can revert a transaction if they did not get the NFT they wanted, combined with utilizing Flashbots miners which do not publish transactions which revert with FlashbotsCheckAndSend, there would be no cost to constantly attempting this every block or after the nonce is updated from getPseudoRand()."}
2. {"Vulnerability Type": "Brute-forcing randomization", "Vulnerability Location": "NFTXVaultUpgradeable.sol", "Repair Method": "Consider only EOA (external only account) for redeem/swap operations to prevent brute-forcing via contracts. Alternatively, make the user commit to pseudo-random IDs before revealing them.", "Vulnerability Information": "Users can brute-force the on-chain randomization (using nonce + blockhash) by repeatedly trying to redeem/swap from a contract, checking the NFT IDs returned from the function and reverting the transaction if those are not the NFT IDs of specific interest."}
3. {"Vulnerability Type": "Fee distribution re-entrancy", "Vulnerability Location": "NFTXFeeDistributor", "Repair Method": "Incorporate re-entrancy protection into the distribute function by not trusting return data from externally called contracts and only utilizing whether the transaction succeeds to determine if the treasury fallback should be called.", "Vulnerability Information": "A smart contract with a malicious receiveRewards function can re-enter the distribute function with the same vault ID, thereby causing the exploit."}
4. {"Vulnerability Type": "Unchecked return value for token transfers", "Vulnerability Location": "Withdrawal of staking token and rescue of arbitrary tokens sent to the FeeDistributor contract", "Repair Method": "Use safeTransfer/safeTransferFrom or require() consistently.", "Vulnerability Information": "Failure to check the return value of token transfers or to use safeTransfer/safeTransferFrom can cause silent failures of transfers and affect token accounting in contract."}
5. {"Vulnerability Type": "Wrong probabilities for ERC1155", "Vulnerability Location":

