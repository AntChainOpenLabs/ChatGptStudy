1. {"Vulnerability Type": "Malicious token duplication", "Vulnerability Location": "ConvexYieldWrapper.sol", "Repair Method": "Implement the `_beforeTokenTransfer()` function as shown in the reference contract and exclude the wrapper contract and collateral vaults from checkpointing", "Vulnerability Information": "It is possible to transfer `wCVX` tokens to another account after an initial checkpoint has been made, allowing a user to replicate their deposited balance over any number of accounts."}
2. {"Vulnerability Type": "Rewards distribution disruption", "Vulnerability Location": "ConvexStakingWrapper.sol", "Repair Method": "Cast up to uint256 for calculations and then back to uint128 to store again", "Vulnerability Information": "An early user can grief the system by causing `reward.reward_integral` to exceed `type(uint128).max` and overflow, disrupting the rewards distribution."}
3. {"Vulnerability Type": "Insufficient validation of oracle data feed", "Vulnerability Location": "_peek() function", "Repair Method": "Add additional checks for stale price and round completeness", "Vulnerability Information": "There is no check for stale price and round completeness, which can lead to wrong `quoteAmount` return value."}
4. {"Vulnerability Type": "Vault collateral transfer", "Vulnerability Location": "ConvexYieldWrapper.sol", "Repair Method": "Checkpoint the previous and new vault owner when any change to a vault occurs, including transferring ownership of a vault to a new account, transferring collateral to another vault, and adding/removing collateral to/from a vault", "Vulnerability Information": "It is possible to manipulate the result of `_getDepositedBalance()` by transferring ownership of a vault to another user, moving collateral between vaults, and adding/removing collateral, allowing a user to generate protocol yield multiple times over on a single collateral amount."}

