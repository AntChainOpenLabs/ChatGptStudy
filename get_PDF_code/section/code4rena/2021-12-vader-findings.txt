1. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "VaderPoolV2.mintFungible function", "Repair Method": "Add a user-specified minimum amount of LP tokens to mint.", "Vulnerability Information": "Frontrunners can extract up to 100% of the value provided by LPs to VaderPoolV2 as fungible liquidity."}
2. {"Vulnerability Type": "High Severity", "Vulnerability Location": "LiquidityBasedTWAP.sol", "Repair Method": "Review the algorithm used for calculating the prices of assets and ensure that it's calculating what you expect.", "Vulnerability Information": "Invalid values returned from oracle for USDV and VADER prices in situations where the oracle uses more than one foreign asset."}
3. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderReserve.sol", "Repair Method": "Apply a fixed scaling factor to convert back from a fixed point number to a standard integer.", "Vulnerability Information": "Reserve pays out vastly higher (or lower) IL protection than it should."}
4. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "Converter.sol", "Repair Method": "Decouple the merkle proof from conversion of VETH to VADER.", "Vulnerability Information": "Users can lock themselves out of being able to convert VETH, becoming stuck with the deprecated asset."}
5. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "LiquidityBasedTWAP.sol", "Repair Method": "Calculate fair reserves using the pool invariant and the fair prices of the two assets.", "Vulnerability Information": "Oracle can be manipulated to consider only a single pair for pricing."}
6. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderPoolV2.mintSynth and mintFungible functions", "Repair Method": "Remove the 'from' parameter and always perform the 'safeTransferFrom' call with 'from=msg.sender'.", "Vulnerability Information": "VaderPoolV2 minting synths & fungibles can be frontrun."}
7. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderPoolV2.sol", "Repair Method": "Add a user-specified minimum amount of LP tokens to mint.", "Vulnerability Information": "Denial of service."}

1. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderPoolV2.burn", "Repair Method": "Use a manipulation resistant oracle for the relative prices of the pool's assets (TWAP, etc.)", "Vulnerability Information": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve."}
2. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderPool.mintSynth", "Repair Method": "Tie the exchange rate use for minting/burning synths to a manipulation resistant oracle.", "Vulnerability Information": "Redemption value of synths can be manipulated to drain VaderPoolV2 of all native assets in the associated pair."}
3. {"Vulnerability Type": "High Severity", "Vulnerability Location": "VaderPoolV2.setTokenSupport", "Repair Method": "Enforce that the initial liquidity is provided by the VaderPoolV2 owner.", "Vulnerability Information": "VaderPoolV2 owner can steal all user assets which are approved VaderPoolV2."}
4. {"Vulnerability Type": "High Severity", "Vulnerability Location": "GovernorAlpha.veto", "Repair Method": "Hash the function signatures to calculate function selectors and then check those rather than the calldata.", "Vulnerability Information": "Council veto protection does not work."}
5. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "VaderReserve.reimburseImpermanentLoss", "Repair Method": "Care should be taken so that the calculation being performed is the expected one.", "Vulnerability Information": "VaderReserve.reimburseImpermanentLoss improperly converts USDV to VADER."}
6. {"Vulnerability Type": "High Severity", "Vulnerability Location": "USDV.mint and USDV.burn", "Repair Method": "Consider utilising both getVaderPrice and getUSDVPrice when calculating the expected uAmount and vAmount to mint or burn.", "Vulnerability Information": "USDV.sol Mint and Burn Amounts Are Incorrect."}

1. {"Vulnerability Type": "Improperly scaled oracle price", "Vulnerability Location": "LiquidityBasedTWAP.sol", "Repair Method": "Update oracle calculation to properly account for scale factors and handle difference in decimals between oracle and foreign asset. Build a test suite to ensure expected values are returned.", "Vulnerability Information": "Oracle returns an improperly scaled USDV/VADER price."}
2. {"Vulnerability Type": "Replacing oracle of earlier entry", "Vulnerability Location": "LiquidityBasedTWAP.sol", "Repair Method": "Bind the oracle to pair instead of foreignAsset.", "Vulnerability Information": "Adding pair of the same foreignAsset would replace oracle of earlier entry."}
3. {"Vulnerability Type": "Losses for synth holders", "Vulnerability Location": "VaderPoolV2.sol", "Repair Method": "Account for LP provided liquidity separately from total amount variables in LP shares mint and burn calculations.", "Vulnerability Information": "Using single total native reserve variable for synth and non-synth reserves of VaderPoolV2 can lead to losses for synth holders."}
4. {"Vulnerability Type": "Not updating previousPrices upon syncing token price", "Vulnerability Location": "LiquidityBasedTWAP.sol", "Repair Method": "Update previousPrices after syncing the respective prices for VADER and USDV.", "Vulnerability Information": "previousPrices is never updated upon syncing token price."}
5. {"Vulnerability Type": "No way to remove GasThrottle", "Vulnerability Location": "VaderPool.sol", "Repair Method": "Either remove GasThrottle.sol entirely or allow governance to turn it off.", "Vulnerability Information": "No way to remove GasThrottle from VaderPool after deployment."}

1. {"Vulnerability Type": "totalLiquidityWeight is updated when adding new token pairs which skews price data", "Vulnerability Location": "function _addVaderPair", "Repair Method": "Remove the line `totalLiquidityWeight[uint256(Paths.VADER)] += pairLiquidityEvaluation;` in `_addVaderPair`", "Vulnerability Information": "Newly added token pairs will increase `pastTotalLiquidityWeight` while leaving `pastLiquidityWeights` underrepresented."}
2. {"Vulnerability Type": "Vader TWAP averages wrong", "Vulnerability Location": "function syncVaderPrice", "Repair Method": "Move the `_totalLiquidityWeight += currentLiquidityEvaluation` and the `pastLiquidityWeights[i] = pastLiquidityEvaluation` assignments before the `continue`.", "Vulnerability Information": "An attacker can break the price functions and make them revert. `_totalLiquidityWeight` never increases and the storage variable `totalLiquidityWeight[uint256(Paths.VADER)] = _totalLiquidityWeight = 0;` is set to zero."}

