{"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "multiple locations", "Repair Method": "implementing changes in the code as recommended in the report", "Vulnerability Information": "The report highlights several vulnerabilities in the Foundation smart contracts, including issues with withdrawing funds, missing receiver validation, and the potential for creators to steal sale revenue from owners' sales."}

{"Vulnerability Type": "Multiple vulnerabilities", "Vulnerability Location": "Various locations in the smart contract code", "Repair Method": "Prevent NFT owners from creating multiple auctions, add additional checks to control who can obtain unallocated NFTs from the contract, update the NFTMarketReserveAuction._transferFromEscrow logic to leave the NFT in the escrow and let the super call transfer it to the recipient, remove loop length caps in _getCreatorPaymentInfo function", "Vulnerability Information": "The smart contract code contains multiple vulnerabilities including NFT owners creating multiple auctions, unallocated NFTs being obtained by anyone, offers made after auction end being stolen by auction winners, and _getCreatorPaymentInfo() function not being equipped to handle reverts on an unbounded _recipients array."}

{"Vulnerability Type": "Upgradable contract vulnerability", "Vulnerability Location": "Upgradable escrow contract", "Repair Method": "Separate the escrow contract to make it non-upgradable with a restricted set of functionality", "Vulnerability Information": "Upgradable escrow contract poses great risk to user who approved their NFT to the contract."}

{"Vulnerability Type": "Race condition vulnerability", "Vulnerability Location": "FETH.sol#L212", "Repair Method": "Add increase and decrease allowance", "Vulnerability Information": "The contract of the `FETH` does not have any protection against the well-known “Multiple Withdrawal Attack” attack on the Approve/TransferFrom methods of the ERC20 standard."}

{"Vulnerability Type": "Royalty revenue splitting vulnerability", "Vulnerability Location": "NFTMarketFees.sol#L76-L79", "Repair Method": "Fetch the royalty information during offer creation, cache it for the final transfer, and reject any NFT for which the array size is more than `MAX_ROYALTY_RECIPIENTS_INDEX`", "Vulnerability Information": "The actual exchange code only respects the Royalty Registry or other royalty information if the number of recipients is less than or equal to four."}

{"Vulnerability Type": "EIP-2981 support vulnerability", "Vulnerability Location": "NFTMarketCreators.sol#L65-L82", "Repair Method": "Instead of passing a constant of 10,000 as the `_salePrice`, we suggest using the actual `_salePrice`, so there the royalties can be paid for recipients with less than 1 BPS of the royalties. When the total royalties cut is lower than 10%, it should be honored. It's capped at 10% only when the total royalties cut is higher than 10%.", "Vulnerability Information": "The current implementation of EIP-2981 support will always pass a constant `BASIS_POINTS` as the `_salePrice`."}

{"Vulnerability Type": "EIP-712 signature vulnerability", "Vulnerability Location": "NFTMarketPrivateSale.sol#L123-L174", "Repair Method": "Most contracts utilize nonces when generating EIP-712 signatures to ensure that the contract hasn't been used for. When a nonce is injected into a signature, it makes

1. {"Vulnerability Type": "Non-standard API usage", "Vulnerability Location": "[NFTMarketCreators.sol#L85-L112](https://github.com/code-423n4/2022-02-foundation/blob/4d8c8931baffae31c7506872bf1100e1598f2754/contracts/mixins/NFTMarketCreators.sol#L85-L112)", "Repair Method": "Change the code to determine the total shares defined so it can be leveraged to distribute below", "Vulnerability Information": "The royalties can be distributed unfairly among creatorRecipients for NFT contracts with non-standard getRoyalties() returns."}
2. {"Vulnerability Type": "Incorrect fee calculation", "Vulnerability Location": "[NFTMarketOffer.sol#L255-L271](https://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketOffer.sol#L255-L271)", "Repair Method": "Ensure the `_nftContractToTokenIdToFirstSaleCompleted` is correctly tracked. It might be useful to ensure the distribution of funds are in the order of when the trades occurred.", "Vulnerability Information": "Fees are incorrectly charged on unfinalized NFT sales."}
3. {"Vulnerability Type": "Insufficient balance check", "Vulnerability Location": "[NFTMarketPrivateSale.sol#L143-L150](https://github.com/code-423n4/2022-02-foundation/blob/main/contracts/mixins/NFTMarketPrivateSale.sol#L143-L150)", "Repair Method": "Add a `_cancelBuyersOffer()` call to the `buyFromPrivateSaleFor()` function to cancel the buyer's offer on the same NFT.", "Vulnerability Information": "`buyFromPrivateSaleFor()` will fail if the buyer has insufficient balance due to an open offer on the same NFT."}
4. {"Vulnerability Type": "Fee evasion", "Vulnerability Location": "[NFTMarketFees.sol#L40](https://github.com/code-423n4/2022-02-foundation/blob/4d8c8931baffae31c7506872bf1100e1598f2754/contracts/mixins/NFTMarketFees.sol#L40)", "Repair Method": "Document the issue as a known issue/potential abuse path.", "Vulnerability Information": "Primary sellers can avoid paying the primary fee."}
5. {"Vulnerability Type": "Lack of support", "Vulnerability Location": " ", "Repair Method": "Consider designing a wrapper contract for cryptopunks to facilitate standard `ERC721` transfers.", "Vulnerability Information": "There is no support for the trading of Cryptopunks."}

{"Vulnerability Type": "Bit Math Overflow", "Vulnerability Location": "LockedBalance library in set() function", "Repair Method": "Cast totalAmount and expiration to their respective types (uint96 and uint32) before performing bit math operations", "Vulnerability Information": "The LockedBalance contract takes 256-bit amount values but performs bit math on them as if they were 96 bit values. Bits could spill over to a different locked balance in the else part, leading to stealing funds from the protocol."}

{"Vulnerability Type": "Deadlock", "Vulnerability Location": "adminAccountMigration() function in NFTMarketReserveAuction.sol and NFTMarketBuyPrice.sol", "Repair Method": "Invalidate the buy offer before account migration or update both auction and buy price at the same time", "Vulnerability Information": "The adminAccountMigration() function is called by the operator role to update all sellers' auctions. The auction.seller account is updated to the new address, however, the protocol fails to update buyPrice.seller. As a result, the protocol is put in a deadlock situation where the new address cannot cancel the auction and withdraw their NFT without the compromised account first cancelling the buy price and vice-versa."}

