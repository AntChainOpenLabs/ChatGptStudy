{"Vulnerability Type": "Calls to function do not verify input parameters", "Vulnerability Location": "Swivel.initiate()", "Repair Method": "Restrict the values of o.exit and o.vault so only one case can be triggered in Swivel.initiate()", "Vulnerability Information": "Swivel lend() does not validate the o.exit and o.vault for each order before making the external call to Swivel."}

{"Vulnerability Type": "Denial of Service (DoS)", "Vulnerability Location": "Sense's redeem function", "Repair Method": "Use a whitelisted Sense address, or send to ISense(d).redeem Redeemer's whole principal balance", "Vulnerability Information": "Sense's redeem can be totally DOSd due to user supplied input."}

{"Vulnerability Type": "Inability to redeem PT from Notional", "Vulnerability Location": "maxRedeem function", "Repair Method": "Call redeem from Notional using the amount from maxRedeem as the shares input after the call to maxRedeem", "Vulnerability Information": "The maxRedeem function is a view function which only returns the balance of the Redeemer.sol contract."}

{"Vulnerability Type": "Unpermissioned use of marketplace funds", "Vulnerability Location": "sellPrincipalToken, buyPrincipalToken, sellUnderlying, buyUnderlying functions", "Repair Method": "All functions should use safetransfer to get funds from msg.sender not from marketplace", "Vulnerability Information": "Fund loss from marketplace.sellPrincipalToken, buyPrincipalToken, sellUnderlying, buyUnderlying are all unpermissioned and use marketplace funds to complete the action but send the resulting tokens to msg.sender."}

{"Vulnerability Type": "Incorrect implementation of redeem function", "Vulnerability Location": "APWine and Tempus PT redeem function", "Repair Method": "Fix the transfer line: Safe.transferFrom(IERC20(principal), lender, address(this), amount)", "Vulnerability Information": "Redeeming APWine and Tempus PT will always fail, causing a portion of iPT to not be able to be redeemed for the underlying token."}

{"Vulnerability Type": "Leak of Value", "Vulnerability Location": "yield function", "Repair Method": "Add checks, or ideally have a trusted keeper bulk sellBase with an additional slippage check as the function parameter", "Vulnerability Information": "The function yield is using the input from sellBasePreview and then using it."}

{"Vulnerability Type": "Withdrawal of eToken before withdrawFee of eToken", "Vulnerability Location": "withdrawFee function", "Repair Method": "Add fees[eToken] = 0; after withdrawals[e] = 0; in withdraw", "Vulnerability Information": "withdrawFee of eToken requires the amount of eToken in Lender.sol = fees[eToken] so Safe.transfer will not revert."}

1. {"Vulnerability Type": "Ability to mint any amount of PT", "Vulnerability Location": "Lender.sol#L192-L235, Lender.sol#L486-L534, Lender.sol#L545-L589", "Repair Method": "Validate the input addresses of y, x, and pool through a whitelisting procedure if possible or validate that the returned amounts correspond with the amount of PT gained from the protocols by checking the balance before and after the PTs are gained and checking the difference is equal to returned.", "Vulnerability Information": "Some of the lend functions do not validate addresses sent as input which could lead to a malicious user being able to mint more PT tokens than they should."}
2. {"Vulnerability Type": "Allowance check always true in ERC5095 redeem", "Vulnerability Location": "redeem function", "Repair Method": "Change the underlyingAmount to principalAmount, which is the intended parameter.", "Vulnerability Information": "In redeem, it is checked that the allowance is larger than underlyingAmount, which is the return parameter (i.e., equal to 0 at that point). Therefore, this check is always true and there is no actual allowance check, allowing anyone to redeem for another user."}
3. {"Vulnerability Type": "ERC5095 redeem/withdraw does not update allowances", "Vulnerability Location": "withdraw and redeem functions", "Repair Method": "Update the allowances upon spending.", "Vulnerability Information": "ERC5095's redeem/withdraw allows an ERC20-approved account to redeem user's tokens, but does not update the allowance after burning."}
4. {"Vulnerability Type": "Funds may be stuck when redeeming for Illuminate", "Vulnerability Location": "Redeemer.sol#L116", "Repair Method": "Clarify the purpose of this function and fix the corresponding bug.", "Vulnerability Information": "Funds may be stuck when redeeming for Illuminate."}
5. {"Vulnerability Type": "Not minting iPTs for lenders in several lend functions", "Vulnerability Location": "Lender.sol#L247-L305, Lender.sol#L317-L367, Lender.sol#L192-L235", "Repair Method": "Mint the appropriate amount of iPTs to the lender like in the rest of the lend functions.", "Vulnerability Information": "Using any of the lend function mentioned, will result in loss of funds to the lender as the funds are transferred from them but no iPTs are sent back to them!"}
6. {"Vulnerability Type": "The lend function for tempus uses the wrong return value of depositAndFix", "Vulnerability Location": "Lender.sol#L452-L453", "Repair Method": "Use the second return value of depositAndFix function for the lend function for tempus.", "Vulnerability Information": "The depositAndFix function of the TempusController contract returns two uint256 data, the first is the number of shares exchanged for the underlying token, the second is the number of principalToken exchanged for the shares, the second return value should be used in the lend function for tempus."}
7. {"Vulnerability Type": "Redeemer.redeem() for Element withdraws PT to wrong address", "Vulnerability Location": "Redeemer.sol#L187", "Repair Method": "Modify IElementToken(principal).withdrawPrincipal(amount, marketPlace) like this. IElementToken(principal).withdrawPrincipal(amount, address(this));", "Vulnerability Information": "Redeemer.redeem() for Element withdraws PT to wrong address."}

{"Vulnerability Type": "burning tokens from other accounts", "Vulnerability Location": "Redeemer.sol and ERC5095.sol", "Repair Method": "Validate and use msg.sender instead of user supplied address", "Vulnerability Information": "Illuminate PT burns shares from a user supplied address account instead of user's account. With such a discrepancy a malicious user can burn all other's user shares by having the necessary shares on her balance, while burning them from everyone else."}

{"Vulnerability Type": "unimplemented function", "Vulnerability Location": "MarketPlace.sol", "Repair Method": "Implement the missing transferFrom function in safe.sol", "Vulnerability Information": "safe.sol never implements a transferFrom function meaning it will revert whenever a user calls either function."}

{"Vulnerability Type": "centralisation risk", "Vulnerability Location": "Lender.sol", "Repair Method": "Set all admin functions behind either a timelocked DAO or at least a timelocked multisig contract", "Vulnerability Information": "There are numerous methods that the admin could apply to rug pull the protocol and take all user funds."}

{"Vulnerability Type": "no check for paused market", "Vulnerability Location": "Lender.sol", "Repair Method": "Check in mint function that the market is not paused", "Vulnerability Information": "Lender's mint function does not check whether the supplied market is paused. Even if a market is paused due to insolvency/bugs, an attacker can issue iPTs."}

{"Vulnerability Type": "protocol fee not pulled from user", "Vulnerability Location": "Lender.sol", "Repair Method": "Pull lent + totalFee from the user", "Vulnerability Information": "The Swivel lend method adds to fees[u] the order fee, but does not pull that fee from the user. It only pulls the order-post-fee amount."}

1. {"Vulnerability Type": "Infinite token minting", "Vulnerability Location": "Lender.mint()", "Repair Method": "Ensure p != uint8(MarketPlace.Principals.Illuminate)", "Vulnerability Information": "Lender.mint() may use `p = 0` which will mean `principal` is the same as `principalToken(u, m)` i.e. the Illuminate PT. The impact is we will transfer some `principal` to the `Lender` contract and it will mint us an equivalent amount of `principal` tokens. This can be repeated indefinitely thereby minting infinite tokens."}
2. {"Vulnerability Type": "Incorrect return value usage", "Vulnerability Location": "Pendle lend() function", "Repair Method": "Use index 1 of the array returned by swapExactTokensForTokens()", "Vulnerability Information": "The function `swapExactTokensForTokens()` will return and array with the 0 index being the input amount follow by each output amount. The 0 index is incorrectly used in Pendle `lend()` function as the output amount. As a result the value of `returned` will be the invalid (i.e. the input rather than the output)."}
3. {"Vulnerability Type": "Sandwich attacks", "Vulnerability Location": "Marketplace and Lender's yield() swapping functions", "Repair Method": "Consider adding minimum accepted return argument to the five mentioned functions and condition execution success on it", "Vulnerability Information": "Swapping function in Marketplace and Lender's yield() can be sandwiched as there is no slippage control option. Trades can happen at a manipulated price and end up receiving fewer tokens than current market price dictates."}
4. {"Vulnerability Type": "Unauthorized function call", "Vulnerability Location": "Redeemer.sol#redeem()", "Repair Method": "Only allow unauthenticated call after maturity", "Vulnerability Information": "`redeem()` is a public function, anyone can call it before maturity, and force the whole protocol to sell it's holdings at a discounted price, causing fund loss to the stake holders."}

1. {"Vulnerability Type": "logic violation/incompleteness", "Vulnerability Location": "Illuminate and Yield lending", "Repair Method": "Switch the logic for when `p == uint8(MarketPlace.Principals.Yield)` and `p == uint8(MarketPlace.Principals.Illuminate)`", "Vulnerability Information": "Lender's Illuminate and Yield lend() mistreats the principal type `p` requested by a user, producing another type each time."}
2. {"Vulnerability Type": "input validation", "Vulnerability Location": "Tempus lend method", "Repair Method": "Check Lender's `x.tempusPool().principalShare()` before and after the swap, and the delta is the amount received.", "Vulnerability Information": "The Tempus `lend` method calculates the amount of tokens to mint as `amountReturnedFromTempus * lenderBalanceOfMetaPrincipalToken`, which seems wrong as there's no connection between the two items."}
3. {"Vulnerability Type": "input validation", "Vulnerability Location": "Swivel lend method", "Repair Method": "Add a check at the beginning of the function to ensure that `p == uint8(MarketPlace.Principals.Swivel)`", "Vulnerability Information": "The principals enum `p` is only used for `unpaused(p)` modifier, and an attacker can bypass the `unpaused(p)` modifier check by simply passing an enum of another principle that is not paused."}
4. {"Vulnerability Type": "arithmetic", "Vulnerability Location": "Swivel lend method", "Repair Method": "Change the order of operations to `((a[i] * fee) * order.premium) / order.principal)`", "Vulnerability Information": "There is a division before multiplication bug that exists in `lend()` for the Swivel case, which can lead to zero rounding of return amount."}

