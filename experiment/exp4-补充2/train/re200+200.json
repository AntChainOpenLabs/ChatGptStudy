{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \n \n/** \n * @dev Contract module that helps prevent reentrant calls to a function. \n * \n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier \n * available, which can be applied to functions to make sure there are no nested \n * (reentrant) calls to them. \n * \n * Note that because there is a single `nonReentrant` guard, functions marked as \n * `nonReentrant` may not call one another. This can be worked around by making \n * those functions `private`, and then adding `external` `nonReentrant` entry \n * points to them. \n * \n * TIP: If you would like to learn more about reentrancy and alternative ways \n * to protect against it, check out our blog post \n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul]. \n */ \nabstract contract ReentrancyGuardUpgradeable is Initializable { \n    // Booleans are more expensive than uint256 or any type that takes up a full \n    // word because each write operation emits an extra SLOAD to first read the \n    // slot's contents, replace the bits taken up by the boolean, and then write \n    // back. This is the compiler's defense against contract upgrades and \n    // pointer aliasing, and it cannot be disabled. \n \n    // The values being non-zero value makes deployment a bit more expensive, \n    // but in exchange the refund on every call to nonReentrant will be lower in \n    // amount. Since refunds are capped to a percentage of the total \n    // transaction's gas, it is best to keep them low in cases like this one, to \n    // increase the likelihood of the full refund coming into effect. \n    uint256 private constant _NOT_ENTERED = 1; \n    uint256 private constant _ENTERED = 2; \n \n    uint256 private _status; \n \n    function __ReentrancyGuard_init() internal initializer { \n        __ReentrancyGuard_init_unchained(); \n    } \n \n    function __ReentrancyGuard_init_unchained() internal initializer { \n        _status = _NOT_ENTERED; \n    } \n \n    /** \n     * @dev Prevents a contract from calling itself, directly or indirectly. \n     * Calling a `nonReentrant` function from another `nonReentrant` \n     * function is not supported. It is possible to prevent this from happening \n     * by making the `nonReentrant` function external, and make it call a \n     * `private` function that does the actual work. \n     */ \n    modifier nonReentrant() { \n        // On the first call to nonReentrant, _notEntered will be true \n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\"); \n \n        // Any calls to nonReentrant after this point will fail \n        _status = _ENTERED; \n \n        _; \n \n        // By storing the original value once again, a refund is triggered (see \n        // https://eips.ethereum.org/EIPS/eip-2200) \n        _status = _NOT_ENTERED; \n    } \n    uint256[49] private __gap; \n} \n \n// File: contracts/interface/IInvit.sol \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.7.0; \n \ninterface IInvit { \n    function isTrade(address userAddress) external view returns (bool); \n    function getInvit(address userAddress) external view returns (address[] memory); \n    function appendInvit (address beInvit ,address invit) external returns(bool); \n} \n \n// File: contracts/interface/IMartToken.sol \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.4.22 <0.9.0; \npragma experimental ABIEncoderV2; \n \ninterface IMartToken { \n    function startBlock() external view returns (uint256); \n    function getDaysupply() external view returns (uint256, uint256); \n    function getPreDaysupply(uint256 _day) external view returns (uint256, uint256); \n    function getUsereward(address addr, uint256 amount) external returns (bool); \n    function addLockFee() external returns (bool); \n} \n \n// File: @openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol \n \n \n \n/** \n * @dev Interface of the ERC20 standard as defined in the EIP. \n */ \ninterface IERC20Upgradeable { \n    /** \n     * @dev Returns the amount of tokens in existence. \n     */ \n    function totalSupply() external view returns (uint256); \n \n    /** \n     * @dev Returns the amount of tokens owned by `account`. \n     */ \n    function balanceOf(address account) external view returns (uint256); \n \n    /** \n     * @dev Moves `amount` tokens from the caller's account to `recipient`. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transfer(address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Returns the remaining number of tokens that `spender` will be \n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are called. \n     */ \n    function allowance(address owner, address spender) external view returns (uint256); \n \n    /** \n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * IMPORTANT: Beware that changing an allowance with this method brings the risk \n     * that someone may use both the old and the new allowance by unfortunate \n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the spender's allowance to 0 and set the \n     * desired value afterwards: \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * \n     * Emits an {Approval} event. \n     */ \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the \n     * allowance mechanism. `amount` is then deducted from the caller's \n     * allowance. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n \n    /** \n     * @dev Emitted when `value` tokens are moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     */ \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    /** \n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by \n     * a call to {approve}. `value` is the new allowance. \n     */ \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n} \n \n// File: contracts/interface/IERC20.sol \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.7.0; \n \n \n \ninterface IERC20 is IERC20Upgradeable { \n    function decimals() external view returns (uint8); \n} \n \n// File: @openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \n \n/* \n * @dev Provides information about the current execution context, including the \n * sender of the transaction and its data. While these are generally available \n * via msg.sender and msg.data, they should not be accessed in such a direct \n * manner, since when dealing with GSN meta-transactions the account sending and \n * paying for execution may not be the actual sender (as far as an application \n * is concerned). \n * \n * This contract is only required for intermediate, library-like contracts. \n */ \nabstract contract ContextUpgradeable is Initializable { \n    function __Context_init() internal initializer { \n        __Context_init_unchained(); \n    } \n \n    function __Context_init_unchained() internal initializer { \n    } \n    function _msgSender() internal view virtual returns (address payable) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes memory) { \n        this; // silence state mutability warning without generating bytecode - see https://github.co\n        return msg.data; \n    } \n    uint256[50] private __gap; \n} \n \n// File: @openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \n \n/** \n * @dev Contract module which provides a basic access control mechanism, where \n * there is an account (an owner) that can be granted exclusive access to \n * specific functions. \n * \n * By default, the owner account will be the one that deploys the contract. This \n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will make available the modifier \n * `onlyOwner`, which can be applied to your functions to restrict their use to \n * the owner. \n */ \nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    /** \n     * @dev Initializes the contract setting the deployer as the initial owner. \n     */ \n    function __Ownable_init() internal initializer { \n        __Context_init_unchained(); \n        __Ownable_init_unchained(); \n    } \n \n    function __Ownable_init_unchained() internal initializer { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n    /** \n     * @dev Returns the address of the current owner. \n     */ \n    function owner() public view virtual returns (address) { \n        return _owner; \n    } \n \n    /** \n     * @dev Throws if called by any account other than the owner. \n     */ \n    modifier onlyOwner() { \n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    /** \n     * @dev Leaves the contract without owner. It will not be possible to call \n     * `onlyOwner` functions anymore. Can only be called by the current owner. \n     * \n     * NOTE: Renouncing ownership will leave the contract without an owner, \n     * thereby removing any functionality that is only available to the owner. \n     */ \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    /** \n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \n     * Can only be called by the current owner. \n     */ \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n    uint256[49] private __gap; \n} \n \n// File: contracts/interface/IAggregatorV3Interface.sol \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.7.0; \n \ninterface IAggregatorV3Interface { \n \n  function decimals() \n    external \n    view \n    returns ( \n      uint8 \n    ); \n \n  function description() \n    external \n    view \n    returns ( \n      string memory \n    ); \n \n  function version() \n    external \n    view \n    returns ( \n      uint256 \n    ); \n \n  // getRoundData and latestRoundData should both raise \"No data present\" \n  // if they do not have data to report, instead of returning unset values \n  // which could be misinterpreted as actual reported values. \n  function getRoundData( \n    uint80 _roundId \n  ) \n    external \n    view \n    returns ( \n      uint80 roundId, \n      int256 answer, \n      uint256 startedAt, \n      uint256 updatedAt, \n      uint80 answeredInRound \n    ); \n \n  function latestRoundData() \n    external \n    view \n    returns ( \n      uint80 roundId, \n      int256 answer, \n      uint256 startedAt, \n      uint256 updatedAt, \n      uint80 answeredInRound \n    ); \n \n} \n \n// File: contracts/Oracle/Oracle.sol \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.7.0; \n \n \n \n \n \ncontract Oracle is OwnableUpgradeable { \n    mapping(address => IAggregatorV3Interface) public getContractAddress; \n    mapping(address => uint256) public getPrice; \n    function _Oracle_INIT_ () public initializer { \n            __Ownable_init(); \n    } \n    /// @dev Set price oracle contract addresses in batches \n    function setOracleBatch (address[] memory _tokens, address[] memory _aggregatorV3Interface) publi\n        require(_tokens.length < 100, 'Oracle: Too many settings at once'); \n        require(_tokens.length == _aggregatorV3Interface.length, 'Oracle: Unequal length'); \n        for (uint8 i = 0; i < _tokens.length; i++) { \n            getContractAddress[_tokens[i]] = IAggregatorV3Interface(_aggregatorV3Interface[i]); \n        } \n    } \n    /// @dev Update the price of a certain token from the price oracle machine \n    function _updatePrice(address _token) internal { \n        (,int price,,,) = getContractAddress[_token].latestRoundData(); \n        require(price >= 0, 'Oracle: price verify error'); \n        getPrice[_token] = uint256(price); \n    } \n} \n \n// File: contracts/MartTradeMining.sol \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n \nabstract contract Context { \n    function _msgSender() internal view virtual returns (address payable) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes memory) { \n        this; // silence state mutability warning without generating bytecode - see https://github.co\n        return msg.data; \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n \ncontract Ownable is Context { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    /** \n     * @dev Initializes the  contract setting the  deployer as \n     */  \n    constructor () internal { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n    /** \n     * @dev Returns the  address of the  current owner. \n     */  \n    function owner() public view returns (address) { \n        return _owner; \n    } \n \n    /** \n     * @dev Throws if called by any account other than the  owner. \n     */  \n    modifier onlyOwner() { \n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    /** \n     * @dev Leaves the  contract without owner. It will  not b\n     * `onlyOwner` functions anymore. Can only be called by the  current owner. \n     * \n     * NOTE:  Renouncing ownership will  leave \n     * thereby removing any functionality that is only available to the  owner. \n     */  \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    /** \n     * @dev Transfers ownership of the  contract to a  new ac\n     * Can only be called by the  current owner. \n     */  \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n \ninterface IERC20 { \n    /** \n     * @dev Returns the  amount of tokens in existence. \n     */  \n    function totalSupply() external view returns (uint256); \n \n    /** \n     * @dev Returns the  amount of tokens owned by `account`. \n     */  \n    function balanceOf(address account) external view returns (uint256); \n \n    /** \n     * @dev Moves `amount` tokens from the  caller's account to `recipient`. \n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * Emits a  {Transfer} event. \n     */  \n    function transfer(address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Returns the  remaining number of tokens that `spender` will\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are  called. \n     */  \n    function allowance(address owner, address spender) external view returns (uint256); \n \n    /** \n     * @dev Sets `amount` as the  allowance of `spender` over the\n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * IMPORTANT: Beware that changing an  allowance with this method brings \n     * that someone may use both the  old and the  new allow\n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the  spender's allowance to 0 and set the\n     * desired value afterwards: \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * \n     * Emits an  {Approval} event. \n     */  \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the  \n     * allowance mechanism. `amount` is then deducted from the  caller's \n     * allowance. \n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * Emits a  {Transfer} event. \n     */  \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n \n    /** \n     * @dev Emitted when `value` tokens are  moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     */  \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    /** \n     * @dev Emitted when the  allowance of a  `spender` for \n     * a  call to {approve}. `value` is the  new allowance. \n     */  \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n \nlibrary SafeMath { \n \n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n        uint256 c = a + b; \n        require(c >= a, \"SafeMath: addition overflow\"); \n \n        return c; \n    } \n \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n        return sub(a, b, \"SafeMath: subtraction overflow\"); \n    } \n \n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \n        require(b <= a, errorMessage); \n        uint256 c = a - b; \n \n        return c; \n    } \n \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n        // benefit is lost if 'b' is also tested. \n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \n        if (a == 0) { \n            return 0; \n        } \n \n        uint256 c = a * b; \n        require(c / a == b, \"SafeMath: multiplication overflow\"); \n \n        return c; \n    } \n \n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \n        return div(a, b, \"SafeMath: division by zero\"); \n    } \n \n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \n        require(b > 0, errorMessage); \n        uint256 c = a / b; \n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold \n \n        return c; \n    } \n \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n        return mod(a, b, \"SafeMath: modulo by zero\"); \n    } \n \n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \n        require(b != 0, errorMessage); \n        return a % b; \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \nabstract contract ERC20Burnable is Context, ERC20 { \n \n    function burn(uint256 amount) public { \n        _burn(_msgSender(), amount); \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \ncontract MatifiToken is ERC20Burnable, Ownable { \n \n    constructor() public ERC20('Matifi Token', 'MATIFI') { \n        _mint(msg.sender, 21000000 * 10**18); \n    } \n \n} \nAnalysis of audit results\nRe-Entrancy\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; \n \ncontract MDAO is ERC20 { \n    constructor() ERC20(\"MemoryDAO\", \"MDAO\") { \n        _mint(address(msg.sender), 200000000e18); \n    } \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.9; \n \nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\"; \nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20SnapshotUpgradeable.sol\"; \nimport \"@opengsn/contracts/src/BaseRelayRecipient.sol\"; \nimport \"../utils/AccessControlProxyPausable.sol\"; \nimport \"../utils/UUPSUpgradeableByRole.sol\"; \nimport \"../shared/IMonstropolyDeployer.sol\"; \n \ncontract MonstropolyERC20 is ERC20Upgradeable, ERC20SnapshotUpgradeable, AccessControlProxyPausable, \n    string public override versionRecipient = \"2.4.0\"; \n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER_ROLE\"); \n    bytes32 public constant ANTIBOT_ROLE = keccak256(\"ANTIBOT_ROLE\"); \n \n    uint256 public burned; \n    uint256 public cap; \n    uint256 private _maxBalanceWhenAntiBot; \n    bool private _isAntibot; \n    bool private _isAntiBotInitialized; \n \n    mapping(address => bool) public whitelisted; \n \n    function initialize() public initializer { \n        cap = 500000000 ether; \n        _maxBalanceWhenAntiBot = 10000 ether; \n        __ERC20_init(\"MPOLY Token\", \"MPOLY\"); \n        __ERC20Snapshot_init(); \n        __AccessControlProxyPausable_init(msg.sender); \n        _mint(IMonstropolyDeployer(config).get(keccak256(\"DISTRIBUTION_VAULT\")), cap); \n    } \n \n    function _msgSender() internal override(BaseRelayRecipient, ContextUpgradeable) view returns (add\n        return BaseRelayRecipient._msgSender(); \n    } \n \n    function _msgData() internal override(BaseRelayRecipient, ContextUpgradeable) view returns (bytes \n        return BaseRelayRecipient._msgData(); \n    } \n \n    function setTrustedForwarder(address _forwarder) public onlyRole(DEFAULT_ADMIN_ROLE) { \n        _setTrustedForwarder(_forwarder); \n    } \n \n    function approveAll(address to) public { \n        uint256 total = balanceOf(_msgSender()); \n        _approve(_msgSender(), to, total); \n    } \n \n    function mint(address to, uint256 amount) public onlyRole(MINTER_ROLE) { \n        _mint(to, amount); \n    } \n \n    function _mint(address account, uint256 amount) internal override { \n        require(ERC20Upgradeable.totalSupply() + amount + burned <= cap, \"MonstropolyERC20: cap excee\n        super._mint(account, amount); \n    } \n \n    function _burn(address account, uint256 amount) internal override { \n        burned += amount; \n        super._burn(account, amount); \n    } \n \n    function burnFrom(address account, uint256 amount) public { \n        require(_msgSender() == account || allowance(account, _msgSender()) >= amount, \"MonstropolyER\n        _burn(account, amount); \n    } \n \n    function snapshot() external onlyRole(DEFAULT_ADMIN_ROLE) { \n        _snapshot(); \n    } \n \n    function stopAntiBot() external onlyRole(ANTIBOT_ROLE) { \n        _isAntibot = false; \n    } \n \n    function startAntiBot() external onlyRole(ANTIBOT_ROLE) { \n        require(!_isAntiBotInitialized, \"MonstropolyERC20: antibot not startable anymore\"); \n        _isAntiBotInitialized = true; \n        _isAntibot = true; \n    } \n \n    function setAntiBotMaxBalance(uint256 _max) external onlyRole(ANTIBOT_ROLE) { \n        require(_max >= 10000 ether, \"MonstropolyERC20: max must be >= 10k\"); \n        _maxBalanceWhenAntiBot = _max; \n    } \n \n    function whitelist(address[] calldata _list) external onlyRole(ANTIBOT_ROLE) { \n        for(uint256 i; i <_list.length; i++) { \nUUPSUpgradeableByRole.sol\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.9; \n \nimport \"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\"; \nimport \"../utils/AccessControlProxyPausable.sol\"; \n \ncontract UUPSUpgradeableByRole is AccessControlProxyPausable, UUPSUpgradeable { \n \n    bytes32 public constant UPGRADER_ROLE = keccak256(\"UPGRADER_ROLE\"); \n \n    function _authorizeUpgrade(address newImplementation) \n        internal \n        onlyRole(UPGRADER_ROLE) \n        override \n    {} \n}\nAccessControlProxyPausable.sol\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \nimport \"@openzeppelin/contracts-upgradeable/access/IAccessControlUpgradeable.sol\"; \nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\"; \nimport \"@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol\"; \n \nabstract contract AccessControlProxyPausable is PausableUpgradeable { \n \n    address public config; \n \n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; \n    bytes32 public constant PAUSER_ROLE = keccak256(\"PAUSER_ROLE\"); \n            whitelisted[_list[i]] = true; \n        } \n    } \n \n    function unwhitelist(address[] calldata _list) external onlyRole(ANTIBOT_ROLE) { \n        for(uint256 i; i <_list.length; i++) { \n            whitelisted[_list[i]] = false; \n        } \n    } \n \n    function _beforeTokenTransfer(address from, address to, uint256 amount) \n        internal \n        whenNotPaused \n        override(ERC20Upgradeable, ERC20SnapshotUpgradeable) \n    { \n        _antiBotMaxBalance(to, amount); \n        super._beforeTokenTransfer(from, to, amount); \n    } \n \n    function _antiBotMaxBalance(address _addr, uint256 _amount) internal view { \n        if((_isAntibot) && (!whitelisted[_addr])){ \n            uint256 _balance = balanceOf(_addr); \n            uint256 _nextBalance = _balance + _amount; \n            require(_nextBalance <= _maxBalanceWhenAntiBot, \"MonstropolyERC20: Maxbalance for antibot\n        } \n    } \n}\n \n    modifier onlyRole(bytes32 role) { \n        address account = msg.sender; \n        require(hasRole(role, account), string( \n                    abi.encodePacked( \n                        \"AccessControlProxyPausable: account \", \n                        StringsUpgradeable.toHexString(uint160(account), 20), \n                        \" is missing role \", \n                        StringsUpgradeable.toHexString(uint256(role), 32) \n                    ) \n                )); \n        _; \n    } \n \n    function hasRole(bytes32 role, address account) public view returns (bool) { \n        IAccessControlUpgradeable manager = IAccessControlUpgradeable(config); \n        return manager.hasRole(role, account); \n    } \n \n    function __AccessControlProxyPausable_init(address config_) internal initializer { \n        __Pausable_init(); \n        __AccessControlProxyPausable_init_unchained(config_); \n    } \n \n    function __AccessControlProxyPausable_init_unchained(address config_) internal initializer { \n        config = config_; \n    } \n \n    function pause() public onlyRole(PAUSER_ROLE){ \n        _pause(); \n    } \n \n    function unpause() public onlyRole(PAUSER_ROLE){ \n        _unpause(); \n    } \n \n    function updateManager(address config_) public onlyRole(DEFAULT_ADMIN_ROLE) { \n        config = config_; \n    } \n}\nIMonstropolyERC20.sol\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.9; \n \ninterface IMonstropolyERC20 { \n    function transferFrom( \n        address sender, \n        address recipient, \n        uint256 amount \n    ) external  returns (bool); \n    function transfer(address account, uint256 amount) external; \n    function balanceOf(address account) external view  returns (uint256); \n    function allowance(address owner, address spender) external view returns (uint256); \n    function burn(uint256 amount) external; \n    function burnFrom(address account, uint256 amount) external; \n    function mint(address to, uint256 amount) external; \n}\nIMonstropolyDeployer.sol\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.9; \n \ninterface IMonstropolyDeployer { \n    function addr(bytes32) external view returns (address); \n    function get(bytes32) external view returns (address); \n    function set(string memory , address) external; \n}\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface INetswapPair { \n    event Approval(address indexed owner, address indexed spender, uint value); \n    event Transfer(address indexed from, address indexed to, uint value); \n \n    function name() external pure returns (string memory); \n    function symbol() external pure returns (string memory); \n    function decimals() external pure returns (uint8); \n    function totalSupply() external view returns (uint); \n    function balanceOf(address owner) external view returns (uint); \n    function allowance(address owner, address spender) external view returns (uint); \n \n    function approve(address spender, uint value) external returns (bool); \n    function transfer(address to, uint value) external returns (bool); \n    function transferFrom(address from, address to, uint value) external returns (bool); \n \n    function DOMAIN_SEPARATOR() external view returns (bytes32); \n    function PERMIT_TYPEHASH() external pure returns (bytes32); \n    function nonces(address owner) external view returns (uint); \n \n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, by\n \n    event Mint(address indexed sender, uint amount0, uint amount1); \n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to); \n    event Swap( \n        address indexed sender, \n        uint amount0In, \n        uint amount1In, \n        uint amount0Out, \n        uint amount1Out, \n        address indexed to \n    ); \n    event Sync(uint112 reserve0, uint112 reserve1); \n \n    function MINIMUM_LIQUIDITY() external pure returns (uint); \n    function factory() external view returns (address); \n    function token0() external view returns (address); \n    function token1() external view returns (address); \n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTim\n    function price0CumulativeLast() external view returns (uint); \n    function price1CumulativeLast() external view returns (uint); \n    function kLast() external view returns (uint); \n \n    function mint(address to) external returns (uint liquidity); \n    function burn(address to) external returns (uint amount0, uint amount1); \n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; \n    function skim(address to) external; \n    function sync() external; \n \n    function initialize(address, address) external; \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-ma\n \nlibrary SafeMathNetswap { \n    function add(uint x, uint y) internal pure returns (uint z) { \n        require((z = x + y) >= x, 'ds-math-add-overflow'); \n    } \n \n    function sub(uint x, uint y) internal pure returns (uint z) { \n        require((z = x - y) <= x, 'ds-math-sub-underflow'); \n    } \n \n    function mul(uint x, uint y) internal pure returns (uint z) { \n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow'); \n    } \n} \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface INetswapFactory { \n    event PairCreated(address indexed token0, address indexed token1, address pair, uint); \n \n    function feeTo() external view returns (address); \n    function feeRate() external view returns (uint); \n    function feeToSetter() external view returns (address); \n \n    function getPair(address tokenA, address tokenB) external view returns (address pair); \n    function allPairs(uint) external view returns (address pair); \n    function allPairsLength() external view returns (uint); \n \n    function createPair(address tokenA, address tokenB) external returns (address pair); \n \n    function setFeeTo(address) external; \n    function setFeeToSetter(address) external; \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \n \n \nlibrary NetswapLibrary { \n    using SafeMathNetswap for uint; \n \n    // returns sorted token addresses, used to handle return values from pairs sorted in this order \n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, addres\n        require(tokenA != tokenB, 'NetswapLibrary: IDENTICAL_ADDRESSES'); \n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); \n        require(token0 != address(0), 'NetswapLibrary: ZERO_ADDRESS'); \n    } \n \n    // calculates the CREATE2 address for a pair without making any external calls \n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address \n        (address token0, address token1) = sortTokens(tokenA, tokenB); \n        pair = address(uint(keccak256(abi.encodePacked( \n                hex'ff', \n                factory, \n                keccak256(abi.encodePacked(token0, token1)), \n                hex'68cc803ebc27f23a62dd9f9251e76a9d6f2c659f76c92ffbd5e62d5b877384d6' // init code ha\n            )))); \n    } \n \n    // fetches and sorts the reserves for a pair \n    function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint \n        (address token0,) = sortTokens(tokenA, tokenB); \n        (uint reserve0, uint reserve1,) = INetswapPair(pairFor(factory, tokenA, tokenB)).getReserves(\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0); \n    } \n \n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other ass\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) { \n        require(amountA > 0, 'NetswapLibrary: INSUFFICIENT_AMOUNT'); \n        require(reserveA > 0 && reserveB > 0, 'NetswapLibrary: INSUFFICIENT_LIQUIDITY'); \n        amountB = amountA.mul(reserveB) / reserveA; \n    } \n \n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut, uint feeRate) internal pure \n        require(amountIn > 0, 'NetswapLibrary: INSUFFICIENT_INPUT_AMOUNT'); \n        require(reserveIn > 0 && reserveOut > 0, 'NetswapLibrary: INSUFFICIENT_LIQUIDITY'); \n        uint amountInWithFee = amountIn.mul(1000 - feeRate); \n        uint numerator = amountInWithFee.mul(reserveOut); \n        uint denominator = reserveIn.mul(1000).add(amountInWithFee); \n        amountOut = numerator / denominator; \n    } \n \n    // given an output amount of an asset and pair reserves, returns a required input amount of the o\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut, uint feeRate) internal pure \n        require(amountOut > 0, 'NetswapLibrary: INSUFFICIENT_OUTPUT_AMOUNT'); \n        require(reserveIn > 0 && reserveOut > 0, 'NetswapLibrary: INSUFFICIENT_LIQUIDITY'); \n        uint numerator = reserveIn.mul(amountOut).mul(1000); \n        uint denominator = reserveOut.sub(amountOut).mul(1000 - feeRate); \n        amountIn = (numerator / denominator).add(1); \n    } \n \n    // performs chained getAmountOut calculations on any number of pairs \n    function getAmountsOut(address factory, uint amountIn, address[] memory path, uint feeRate) inter\n        require(path.length >= 2, 'NetswapLibrary: INVALID_PATH'); \n        amounts = new uint[](path.length); \n        amounts[0] = amountIn; \n        for (uint i; i < path.length - 1; i++) { \n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]); \n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut, feeRate); \n        } \n    } \n \n    // performs chained getAmountIn calculations on any number of pairs \n    function getAmountsIn(address factory, uint amountOut, address[] memory path, uint feeRate) inter\n        require(path.length >= 2, 'NetswapLibrary: INVALID_PATH'); \n        amounts = new uint[](path.length); \n        amounts[amounts.length - 1] = amountOut; \n        for (uint i = path.length - 1; i > 0; i--) { \n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]); \n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut, feeRate); \n        } \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0; \n \n// helper methods for interacting with ERC20 tokens and sending Metis that do not consistently return \nlibrary TransferHelper { \n    function safeApprove(address token, address to, uint value) internal { \n        // bytes4(keccak256(bytes('approve(address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value))\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_F\n    } \n \n    function safeTransfer(address token, address to, uint value) internal { \n        // bytes4(keccak256(bytes('transfer(address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value))\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_\n    } \n \n    function safeTransferFrom(address token, address from, address to, uint value) internal { \n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, v\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_\n    } \n \n    function safeTransferMetis(address to, uint value) internal { \n        (bool success,) = to.call{value:value}(new bytes(0)); \n        require(success, 'TransferHelper: METIS_TRANSFER_FAILED'); \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2; \n \ninterface INetswapRouter { \n    function factory() external pure returns (address); \n    function Metis() external pure returns (address); \n \n    function addLiquidity( \n        address tokenA, \n        address tokenB, \n        uint amountADesired, \n        uint amountBDesired, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB, uint liquidity); \n    function addLiquidityMetis( \n        address token, \n        uint amountTokenDesired, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external payable returns (uint amountToken, uint amountMetis, uint liquidity); \n    function removeLiquidity( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetis( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountToken, uint amountMetis); \n    function removeLiquidityWithPermit( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetisWithPermit( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountToken, uint amountMetis); \n    function swapExactTokensForTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapTokensForExactTokens( \n        uint amountOut, \n        uint amountInMax, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapExactMetisForTokens(uint amountOutMin, address[] calldata path, address to, uint dea\n        external \n        payable \n        returns (uint[] memory amounts); \n    function swapTokensForExactMetis(uint amountOut, uint amountInMax, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapExactTokensForMetis(uint amountIn, uint amountOutMin, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapMetisForExactTokens(uint amountOut, address[] calldata path, address to, uint deadli\n        external \n        payable \n        returns (uint[] memory amounts); \n \n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memo\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memo\n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2; \n \n \ninterface INetswapRouter02 is INetswapRouter { \n    function removeLiquidityMetisSupportingFeeOnTransferTokens( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountMetis); \n    function removeLiquidityMetisWithPermitSupportingFeeOnTransferTokens( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountMetis); \n \n    function swapExactTokensForTokensSupportingFeeOnTransferTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external; \n    function swapExactMetisForTokensSupportingFeeOnTransferTokens( \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external payable; \n    function swapExactTokensForMetisSupportingFeeOnTransferTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external; \n    function swapMining() external pure returns (address); \n} \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface IERC20Netswap { \n    event Approval(address indexed owner, address indexed spender, uint value); \n    event Transfer(address indexed from, address indexed to, uint value); \n \n    function name() external view returns (string memory); \n    function symbol() external view returns (string memory); \n    function decimals() external view returns (uint8); \n    function totalSupply() external view returns (uint); \n    function balanceOf(address owner) external view returns (uint); \n    function allowance(address owner, address spender) external view returns (uint); \n \n    function approve(address spender, uint value) external returns (bool); \n    function transfer(address to, uint value) external returns (bool); \n    function transferFrom(address from, address to, uint value) external returns (bool); \n} \n \ninterface ISwapMining { \n    function swap(address account, address input, address output, uint256 amount) external returns (b\n} \n \ncontract Ownable { \n    address private _owner; \n \n    constructor () internal { \n        _owner = msg.sender; \n        emit OwnershipTransferred(address(0), _owner); \n    } \n \n    function owner() public view returns (address) { \n        return _owner; \n    } \n \n    function isOwner(address account) public view returns (bool) { \n        return account == _owner; \n    } \n \n    function renounceOwnership() public onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    function _transferOwnership(address newOwner) internal { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n \n    function transferOwnership(address newOwner) public onlyOwner { \n        _transferOwnership(newOwner); \n    } \n \n \n    modifier onlyOwner() { \n        require(isOwner(msg.sender), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n} \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2; \n \ninterface INetswapRouter { \n    function factory() external pure returns (address); \n    function Metis() external pure returns (address); \n \n    function addLiquidity( \n        address tokenA, \n        address tokenB, \n        uint amountADesired, \n        uint amountBDesired, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB, uint liquidity); \n    function addLiquidityMetis( \n        address token, \n        uint amountTokenDesired, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external payable returns (uint amountToken, uint amountMetis, uint liquidity); \n    function removeLiquidity( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetis( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountToken, uint amountMetis); \n    function removeLiquidityWithPermit( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetisWithPermit( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountToken, uint amountMetis); \n    function swapExactTokensForTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapTokensForExactTokens( \n        uint amountOut, \n        uint amountInMax, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapExactMetisForTokens(uint amountOutMin, address[] calldata path, address to, uint dea\n        external \n        payable \n        returns (uint[] memory amounts); \n    function swapTokensForExactMetis(uint amountOut, uint amountInMax, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapExactTokensForMetis(uint amountIn, uint amountOutMin, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapMetisForExactTokens(uint amountOut, address[] calldata path, address to, uint deadli\n        external \n        payable \n        returns (uint[] memory amounts); \n \n    function removeLiquidityMetisSupportingFeeOnTransferTokens( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountMetis); \n    function removeLiquidityMetisWithPermitSupportingFeeOnTransferTokens( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountMetis); \n \n    function swapExactTokensForTokensSupportingFeeOnTransferTokens( \n        uint amountIn, \nMulticall.sol\n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external; \n    function swapExactMetisForTokensSupportingFeeOnTransferTokens( \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external payable; \n    function swapExactTokensForMetisSupportingFeeOnTransferTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external; \n \n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memo\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memo\n}\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \npragma experimental ABIEncoderV2; \n \n/// @title Multicall - Aggregate results from multiple read-only function calls \n \ninterface IERC20 { \n    function balanceOf(address user) external view returns (uint256); \n} \n \ncontract Multicall { \n    address public metis = 0xDeadDeAddeAddEAddeadDEaDDEAdDeaDDeAD0000; \n    struct Call { \n        address target; \n        bytes callData; \n    } \n    function aggregate(Call[] memory calls) public returns (uint256 blockNumber, bytes[] memory retur\n        blockNumber = block.number; \n        returnData = new bytes[](calls.length); \n        for(uint256 i = 0; i < calls.length; i++) { \n            (bool success, bytes memory ret) = calls[i].target.call(calls[i].callData); \n            require(success); \n            returnData[i] = ret; \n        } \n    } \n    // Helper functions \n    function getMetisBalance(address addr) public view returns(uint256 balance) { \n        balance = IERC20(metis).balanceOf(addr); \n    } \n    function getCurrentBlockTimestamp() public view returns (uint256 timestamp) { \n        timestamp = block.timestamp; \n    } \n}\nNetswapFactory.sol\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface INetswapFactory { \n    event PairCreated(address indexed token0, address indexed token1, address pair, uint); \n \n    function feeTo() external view returns (address); \n    function feeRate() external view returns (uint); \n    function feeToSetter() external view returns (address); \n \n    function getPair(address tokenA, address tokenB) external view returns (address pair); \n    function allPairs(uint) external view returns (address pair); \n    function allPairsLength() external view returns (uint); \n \n    function createPair(address tokenA, address tokenB) external returns (address pair); \n \n    function setFeeTo(address) external; \n    function setFeeRate(uint) external; \n    function setFeeToSetter(address) external; \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-ma\n \nlibrary SafeMathNetswap { \n    function add(uint x, uint y) internal pure returns (uint z) { \n        require((z = x + y) >= x, 'ds-math-add-overflow'); \n    } \n \n    function sub(uint x, uint y) internal pure returns (uint z) { \n        require((z = x - y) <= x, 'ds-math-sub-underflow'); \n    } \n \n    function mul(uint x, uint y) internal pure returns (uint z) { \n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow'); \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n \ncontract NetswapERC20 { \n    using SafeMathNetswap for uint; \n \n    string public constant name = 'Netswap LP Token'; \n    string public constant symbol = 'NLP'; \n    uint8 public constant decimals = 18; \n    uint  public totalSupply; \n    mapping(address => uint) public balanceOf; \n    mapping(address => mapping(address => uint)) public allowance; \n \n    bytes32 public DOMAIN_SEPARATOR; \n    // keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\n    bytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c6\n    mapping(address => uint) public nonces; \n \n    event Approval(address indexed owner, address indexed spender, uint value); \n    event Transfer(address indexed from, address indexed to, uint value); \n \n    constructor() public { \n        uint chainId; \n        assembly { \n            chainId := chainid() \n        } \n        DOMAIN_SEPARATOR = keccak256( \n            abi.encode( \n                keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingC\n                keccak256(bytes(name)), \n                keccak256(bytes('1')), \n                chainId, \n                address(this) \n            ) \n        ); \n    } \n \n    function _mint(address to, uint value) internal { \n        totalSupply = totalSupply.add(value); \n        balanceOf[to] = balanceOf[to].add(value); \n        emit Transfer(address(0), to, value); \n    } \n \n    function _burn(address from, uint value) internal { \n        balanceOf[from] = balanceOf[from].sub(value); \n        totalSupply = totalSupply.sub(value); \n        emit Transfer(from, address(0), value); \n    } \n \n    function _approve(address owner, address spender, uint value) private { \n        allowance[owner][spender] = value; \n        emit Approval(owner, spender, value); \n    } \n \n    function _transfer(address from, address to, uint value) private { \n        balanceOf[from] = balanceOf[from].sub(value); \n        balanceOf[to] = balanceOf[to].add(value); \n        emit Transfer(from, to, value); \n    } \n \n    function approve(address spender, uint value) external returns (bool) { \n        _approve(msg.sender, spender, value); \n        return true; \n    } \n \n    function transfer(address to, uint value) external returns (bool) { \n        _transfer(msg.sender, to, value); \n        return true; \n    } \n \n    function transferFrom(address from, address to, uint value) external returns (bool) { \n        if (allowance[from][msg.sender] != uint(-1)) { \n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value); \n        } \n        _transfer(from, to, value); \n        return true; \n    } \n \n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, by\n        require(deadline >= block.timestamp, 'Netswap: EXPIRED'); \n        bytes32 digest = keccak256( \n            abi.encodePacked( \n                '\\x19\\x01', \n                DOMAIN_SEPARATOR, \n                keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadlin\n            ) \n        ); \n        address recoveredAddress = ecrecover(digest, v, r, s); \n        require(recoveredAddress != address(0) && recoveredAddress == owner, 'Netswap: INVALID_SIGNAT\n        _approve(owner, spender, value); \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n// a library for performing various math operations \n \nlibrary Math { \n    function min(uint x, uint y) internal pure returns (uint z) { \n        z = x < y ? x : y; \n    } \n \n    // babylonian method (https://en.wikipedia.org/wiki/Methods_of_computing_square_roots#Babylonian_\n    function sqrt(uint y) internal pure returns (uint z) { \n        if (y > 3) { \n            z = y; \n            uint x = y / 2 + 1; \n            while (x < z) { \n                z = x; \n                x = (y / x + x) / 2; \n            } \n        } else if (y != 0) { \n            z = 1; \n        } \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format)\n \n// range: [0, 2**112 - 1] \n// resolution: 1 / 2**112 \n \nlibrary UQ112x112 { \n    uint224 constant Q112 = 2**112; \n \n    // encode a uint112 as a UQ112x112 \n    function encode(uint112 y) internal pure returns (uint224 z) { \n        z = uint224(y) * Q112; // never overflows \n    } \n \n    // divide a UQ112x112 by a uint112, returning a UQ112x112 \n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) { \n        z = x / uint224(y); \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface IERC20Netswap { \n    event Approval(address indexed owner, address indexed spender, uint value); \n    event Transfer(address indexed from, address indexed to, uint value); \n \n    function name() external view returns (string memory); \n    function symbol() external view returns (string memory); \n    function decimals() external view returns (uint8); \n    function totalSupply() external view returns (uint); \n    function balanceOf(address owner) external view returns (uint); \n    function allowance(address owner, address spender) external view returns (uint); \n \n    function approve(address spender, uint value) external returns (bool); \n    function transfer(address to, uint value) external returns (bool); \n    function transferFrom(address from, address to, uint value) external returns (bool); \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0; \n \ninterface INetswapCallee { \n    function netswapCall(address sender, uint amount0, uint amount1, bytes calldata data) external; \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \n \n \n \ncontract NetswapFactory is INetswapFactory { \n    using SafeMathNetswap  for uint; \n    uint public override feeRate = 3; \n    address public override feeTo; \n    address public override feeToSetter; \n \n    mapping(address => mapping(address => address)) public override getPair; \n    address[] public override allPairs; \n \n    event PairCreated(address indexed token0, address indexed token1, address pair, uint); \n \n    constructor(address _feeToSetter) public { \n        feeToSetter = _feeToSetter; \n    } \n \n    function allPairsLength() external override view returns (uint) { \n        return allPairs.length; \n    } \n \n    function pairCodeHash() external pure returns (bytes32) { \n        return keccak256(type(NetswapPair).creationCode); \n    } \n \n    function createPair(address tokenA, address tokenB) external override returns (address pair) { \n        require(tokenA != tokenB, 'Netswap: IDENTICAL_ADDRESSES'); \n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); \n        require(token0 != address(0), 'Netswap: ZERO_ADDRESS'); \n        require(getPair[token0][token1] == address(0), 'Netswap: PAIR_EXISTS'); // single check is su\n        bytes memory bytecode = type(NetswapPair).creationCode; \n        bytes32 salt = keccak256(abi.encodePacked(token0, token1)); \n        assembly { \n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt) \n        } \n        NetswapPair(pair).initialize(token0, token1); \n        getPair[token0][token1] = pair; \n        getPair[token1][token0] = pair; // populate mapping in the reverse direction \n        allPairs.push(pair); \n        emit PairCreated(token0, token1, pair, allPairs.length); \n    } \n \n    function setFeeTo(address _feeTo) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeTo = _feeTo; \n    } \n \n    function setFeeRate(uint _feeRate) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeRate = _feeRate; \n    } \n \n    function setFeeToSetter(address _feeToSetter) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeToSetter = _feeToSetter; \n    } \n \n}\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \nimport \"@openzeppelin/contracts/token/ERC20/presets/ERC20PresetFixedSupply.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\"; \n \ncontract OVG is ERC20PresetFixedSupply,ERC20Permit { \n    constructor(string memory name,string memory symbol,uint256 initialSupply,address owner) ERC20Per\n    } \n} \nAnalysis of audit results\nRe-Entrancy\nArithmetic Over/Under Flows\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.8.4; \n \nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\"; \n \ncontract StakeVR is ReentrancyGuard { \n    using SafeERC20 for IERC20; \n \n    uint32 constant HUNDRED_PERCENT = 1e3; \n \n    struct Stake { \n        bool unstaked; \n        uint128 amount; \n        uint48 lockTimestamp; \n        uint16 lockDays; \n    } \n \n    IERC20 public stakingToken; \n    mapping(address => Stake[]) public stakers; \n    uint192 public totalShares; \n    uint16 public minLockDays; \n    uint16 public maxLockDays; \n    uint16 public shareBonusPerYear; \n    uint16 public shareBonusPer1MTokens; \n \n    event EStake( \n        address staker, \n        uint128 amount, \n        uint192 shares, \n        uint48 lockTimestamp, \n        uint16 lockDays, \n        uint192 totalShares \n    ); \n \n    event EUnstake( \n        address staker, \n        uint stakeIndex, \n        uint192 totalShares \n    ); \n \n    constructor( \n        IERC20 _stakingToken, \n        uint16 _minLockDays, \n        uint16 _maxLockDays, \n        uint16 _shareBonusPerYear, \n        uint16 _shareBonusPer1MTokens \n    ) { \n        require(address(_stakingToken) != address(0)); \n        require(_minLockDays <= _maxLockDays, \"StakeVR: minLockDays > maxLockDays\"); \n        stakingToken = _stakingToken; \n        minLockDays = _minLockDays; \n        maxLockDays = _maxLockDays; \n        shareBonusPerYear = _shareBonusPerYear; \n        shareBonusPer1MTokens = _shareBonusPer1MTokens; \n    } \n \n    function stake(uint128 amount, uint16 lockDays) external nonReentrant { \n        require(lockDays >= minLockDays && lockDays <= maxLockDays, \"StakeVR: invalid lockDays\"); \n        (uint192 shares,) = calculateShares(amount, lockDays); \n        totalShares += shares; \n \n        stakers[msg.sender].push(Stake( \n            false, \n            amount, \n            uint48(block.timestamp), \n            lockDays \n        )); \n        stakingToken.safeTransferFrom(msg.sender, address(this), amount); \n        emit EStake(msg.sender, amount, shares, uint48(block.timestamp), lockDays, totalShares); \n    } \n \n    function unstake(uint stakeIndex) external nonReentrant { \n        require(stakeIndex < stakers[msg.sender].length, \"StakeVR: invalid index\"); \n        Stake storage stakeRef = stakers[msg.sender][stakeIndex]; \n        require(!stakeRef.unstaked, \"StakeVR: unstaked already\"); \n        require(stakeRef.lockTimestamp + uint48(stakeRef.lockDays) * 86400 <= block.timestamp, \"Stake\n \n        (uint192 shares,) = calculateShares(stakeRef.amount, stakeRef.lockDays); \n        totalShares -= shares; \n        stakeRef.unstaked = true; \n        stakingToken.safeTransfer(msg.sender, stakeRef.amount); \n        emit EUnstake(msg.sender, stakeIndex, totalShares); \n    } \n \n    function calculateShares( \n        uint amount,  \n        uint lockDays \n    ) public view returns ( \n        uint192 shares, \n        uint longTermBonus \n    ) { \n        longTermBonus = amount * lockDays * shareBonusPerYear / 365 / HUNDRED_PERCENT; \n        uint stakingMoreBonus = amount * amount * shareBonusPer1MTokens / 1e24 / HUNDRED_PERCENT; \n        shares = uint192(amount + longTermBonus + stakingMoreBonus); \n    } \n \n    function getStakerInfo( \n        address stakerAddress \n    ) public view returns ( \n        uint256 totalStakeAmount, \n        uint256 totalStakerShares \n    ) { \n        for (uint i = 0; i < stakers[stakerAddress].length; i++) { \n            Stake storage stakeRef = stakers[stakerAddress][i]; \n            if (stakeRef.unstaked) continue; \n \n            totalStakeAmount += stakeRef.amount; \n            (uint192 shares,) = calculateShares(stakeRef.amount, stakeRef.lockDays); \n            totalStakerShares += shares; \n        } \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev Interface of the  ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP]. \n * \n * Implementers can declare support of contract interfaces, which can then be \n * queried by others ({ERC165Checker}). \n * \n * For an  implementation, see {ERC165}. \n */  \ninterface IERC165 { \n    /** \n     * @dev Returns true if this contract implements the  interface defined by \n     * `interfaceId`. See the  corresponding \n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces- are -identified[EIP section] \n     * to learn more  about how these ids are  created. \n     * \n     * This function call must use less than 30 000 gas. \n     */  \n    function supportsInterface(bytes4 interfaceId) external view returns (bool); \n} \n \n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (utils/introspection/ERC165.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @dev Implementation of the  {IERC165} interface. \n * \n * Contracts that want to implement ERC165 should  inherit from this contract and overri\n * for the  additional interface id that will  be supported. For\n * \n * solidity \n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); \n * } \n *  \n* \n* Alternatively, {ERC165Storage} provides an  easier to use but\n  */  \n  abstract contract ERC165 is IERC165 { \n  /** \n    * @dev See {IERC165-supportsInterface}. \n      */  \n      function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \n      return interfaceId == type(IERC165).interfaceId; \n      } \n      } \n \n// File: @openzeppelin/contracts/utils/Strings.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (utils/Strings.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n* @dev String operations. \n  */  \n  library Strings { \n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\"; \n \n  /** \n    * @dev Converts a  `uint256` to its ASCII `string` decimal representation. \n      */  \n      function toString(uint256 value) internal pure returns (string memory) { \n      // Inspired by OraclizeAPI's implementation - MIT licence \n      // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oracl\n \n      if (value == 0) { \n      return \"0\"; \n      } \n      uint256 temp = value; \n      uint256 digits; \n      while (temp != 0) { \n      digits++; \n      temp /= 10; \n      } \n      bytes memory buffer = new bytes(digits); \n      while (value != 0) { \n      digits -= 1; \n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); \n      value /= 10; \n      } \n      return string(buffer); \n      } \n \n  /** \n    * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation. \n      */  \n      function toHexString(uint256 value) internal pure returns (string memory) { \n      if (value == 0) { \n      return \"0x00\"; \n      } \n      uint256 temp = value; \n      uint256 length = 0; \n      while (temp != 0) { \n      length++; \n      temp >>= 8; \n      } \n      return toHexString(value, length); \n      } \n \n  /** \n    * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation with fixe\n      */  \n      function toHexString(uint256 value, uint256 length) internal pure returns (string memory) { \n      bytes memory buffer = new bytes(2 * length + 2); \n      buffer[0] = \"0\"; \n      buffer[1] = \"x\"; \n      for (uint256 i = 2 * length + 1; i > 1; --i) { \n      buffer[i] = _HEX_SYMBOLS[value & 0xf]; \n      value >>= 4; \n      } \n      require(value == 0, \"Strings: hex length insufficient\"); \n      return string(buffer); \n      } \n      } \n \n// File: @openzeppelin/contracts/access/IAccessControl.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (access/IAccessControl.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n* @dev External interface of AccessControl declared to support ERC165 detection. \n  */  \n  interface IAccessControl { \n  /** \n    * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` \n    * \n    * `DEFAULT_ADMIN_ROLE` is the  starting admin for all roles, despite \n    * {RoleAdminChanged} not being emitted signaling this. \n    * \n    * _Available since v3.1._ \n      */  \n      event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed \n \n  /** \n    * @dev Emitted when `account` is granted `role`. \n    * \n    * `sender` is the  account that originated the  contract call\n    * bearer except when using {AccessControl-_setupRole}. \n      */  \n      event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender); \n \n  /** \n    * @dev Emitted when `account` is revoked `role`. \n    * \n    * `sender` is the  account that originated the  contract call\n    *   - if using `revokeRole`, it is the  admin role bearer \n    *   - if using `renounceRole`, it is the  role bearer (i.e. `account`) \n          */  \n          event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender); \n \n  /** \n    * @dev Returns `true` if `account` has been granted `role`. \n      */  \n      function hasRole(bytes32 role, address account) external view returns (bool); \n \n  /** \n    * @dev Returns the  admin role that controls `role`. See {grantRole} and \n    * {revokeRole}. \n    * \n    * To change a  role's admin, use {AccessControl-_setRoleAdmin}. \n      */  \n      function getRoleAdmin(bytes32 role) external view returns (bytes32); \n \n  /** \n    * @dev Grants `role` to `account`. \n    * \n    * If `account` had not been already granted `role`, emits a  {RoleGranted} \n    * event. \n    * \n    * Requirements: \n    * \n    * - the  caller must have ``role``'s admin role. \n        */  \n        function grantRole(bytes32 role, address account) external; \n \n  /** \n    * @dev Revokes `role` from `account`. \n    * \n    * If `account` had been granted `role`, emits a  {RoleRevoked} event. \n    * \n    * Requirements: \n    * \n    * - the  caller must have ``role``'s admin role. \n        */  \n        function revokeRole(bytes32 role, address account) external; \n \n  /** \n    * @dev Revokes `role` from the  calling account. \n    * \n    * Roles are  often managed via {grantRole} and {revokeRole}: this function's \n    * purpose is to provide a  mechanism for accounts to lose their privileges \n    * if they  are  compromised ( such\n    * \n    * If the  calling account had been granted `role`, emits a  {\n    * event. \n    * \n    * Requirements: \n    * \n    * - the  caller must be `account`. \n        */  \n        function renounceRole(bytes32 role, address account) external; \n        } \n \n// File: @openzeppelin/contracts/utils/Context.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n* @dev Provides information about the  current execution context, including \n* sender of the  transaction and its data. While these are  ge\n* via msg.sender and msg.data, they  should  not be access\n* manner, since when dealing with meta-transactions the  account sending and \n* paying for execution may not be the  actual sender (as far as an\n* is concerned). \n* \n* This contract is only required for intermediate, library- like  contracts. \n  */  \n  abstract contract Context { \n  function _msgSender() internal view virtual returns (address) { \n  return msg.sender; \n  } \n \n  function _msgData() internal view virtual returns (bytes calldata) { \n  return msg.data; \n  } \n  } \n \n// File: @openzeppelin/contracts/access/AccessControl.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (access/AccessControl.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n* @dev Contract module which allows children to implement an  emergency stop \n* mechanism that can be triggered by an  authorized account. \n* \n* This module is used through inheritance. It will  make available the\n* modifiers `whenNotPaused` and `whenPaused`, which can be applied to \n* the  functions of your  contract. Note that the\n* simply  including this module, only once the  modifiers \n  */  \n  abstract contract Pausable is Context { \n  /** \n    * @dev Emitted when the  pause is triggered by `account`. \n      */  \n      event Paused(address account); \n \n  /** \n    * @dev Emitted when the  pause is lifted by `account`. \n      */  \n      event Unpaused(address account); \n \n  bool private _paused; \n \n  /** \n    * @dev Initializes the  contract in unpaused state. \n      */  \n      constructor() { \n      _paused = false; \n      } \n \n  /** \n    * @dev Returns true if the  contract is paused, and false otherwise. \n      */  \n      function paused() public view virtual returns (bool) { \n      return _paused; \n      } \n \n  /** \n    * @dev Modifier to make a  function callable only when the\n    * \n    * Requirements: \n    * \n    * - The contract must not be paused. \n        */  \n        modifier whenNotPaused() { \n        require(!paused(), \"Pausable: paused\"); \n        _; \n        } \n \n  /** \n    * @dev Modifier to make a  function callable only when the\n    * \n    * Requirements: \n    * \n    * - The contract must be paused. \n        */  \n        modifier whenPaused() { \n        require(paused(), \"Pausable: not paused\"); \n        _; \n        } \n \n  /** \n    * @dev Triggers stopped state. \n    * \n    * Requirements: \n    * \n    * - The contract must not be paused. \n        */  \n        function _pause() internal virtual whenNotPaused { \n        _paused = true; \n        emit Paused(_msgSender()); \n        } \n \n  /** \n    * @dev Returns to normal state. \n    * \n    * Requirements: \n    * \n    * - The contract must be paused. \n        */  \n        function _unpause() internal virtual whenPaused { \n        _paused = false; \n        emit Unpaused(_msgSender()); \n        } \n        } \n \n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n* @dev Interface of the  ERC20 standard as defined in the\n  */  \n  interface IERC20 { \n  /** \n    * @dev Returns the  amount of tokens in existence. \n      */  \n      function totalSupply() external view returns (uint256); \n \n  /** \n    * @dev Returns the  amount of tokens owned by `account`. \n      */  \n      function balanceOf(address account) external view returns (uint256); \n \n  /** \n    * @dev Moves `amount` tokens from the  caller's account to `recipient`. \n    * \n    * Returns a  boolean value indicating whether the  operat\n    * \n    * Emits a  {Transfer} event. \n      */  \n      function transfer(address recipient, uint256 amount) external returns (bool); \n \n  /** \n    * @dev Returns the  remaining number of tokens that `spender` will\n    * allowed to spend on behalf of `owner` through {transferFrom}. This is \n    * zero by default. \n    * \n    * This value changes when {approve} or {transferFrom} are  called. \n      */  \n      function allowance(address owner, address spender) external view returns (uint256); \n \n  /** \n    * @dev Sets `amount` as the  allowance of `spender` over the\n    * \n    * Returns a  boolean value indicating whether the  operat\n    * \n    * IMPORTANT: Beware that changing an  allowance with this method brings \n    * that someone may use both the  old and the  new allow\n    * transaction ordering. One possible solution to mitigate this race \n    * condition is to first reduce the  spender's allowance to 0 and set the\n    * desired value afterwards: \n    * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n    * \n    * Emits an  {Approval} event. \n      */  \n      function approve(address spender, uint256 amount) external returns (bool); \n \n  /** \n    * @dev Moves `amount` tokens from `sender` to `recipient` using the  \n    * allowance mechanism. `amount` is then deducted from the  caller's \n    * allowance. \n    * \n    * Returns a  boolean value indicating whether the  operat\n    * \n    * Emits a  {Transfer} event. \n      */  \n      function transferFrom( \n      address sender, \n      address recipient, \n      uint256 amount \n      ) external returns (bool); \n \n  /** \n    * @dev Emitted when `value` tokens are  moved from one account (`from`) to \n    * another (`to`). \n    * \n    * Note that `value` may be zero. \n      */  \n      event Transfer(address indexed from, address indexed to, uint256 value); \n \n  /** \n    * @dev Emitted when the  allowance of a  `spender` for \n    * a  call to {approve}. `value` is the  new allowance. \n      */  \n      event Approval(address indexed owner, address indexed spender, uint256 value); \n      } \n \n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n* @dev Interface for the  optional metadata functions from the\n* \n* _Available since v4.1._ \n  */  \n  interface IERC20Metadata is IERC20 { \n  /** \n    * @dev Returns the  name of the  token. \n      */  \n      function name() external view returns (string memory); \n \n  /** \n    * @dev Returns the  symbol of the  token. \n      */  \n      function symbol() external view returns (string memory); \n \n  /** \n    * @dev Returns the  decimals places of the  token. \n      */  \n      function decimals() external view returns (uint8); \n      } \n \n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol \n \n \n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol) \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n \n/** \n* @dev Extension of {ERC20} that allows token holders to destroy both their own \n* tokens and those that they  have an  allowance for, in \n* recognized off-chain (via event analysis). \n  */  \n  abstract contract ERC20Burnable is Context, ERC20 { \n  /** \n    * @dev Destroys `amount` tokens from the  caller. \n    * \n    * See {ERC20-_burn}. \n      */  \n      function burn(uint256 amount) public virtual { \n      _burn(_msgSender(), amount); \n      } \n \n  /** \n    * @dev Destroys `amount` tokens from `account`, deducting from the  caller's \n    * allowance. \n    * \n    * See {ERC20-_burn} and {ERC20-allowance}. \n    * \n    * Requirements: \n    * \n    * - the  caller must have allowance for ``accounts``'s tokens of at least \n    * `amount`. \n      */  \n      function burnFrom(address account, uint256 amount) public virtual { \n      uint256 currentAllowance = allowance(account, _msgSender()); \n      require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\"); \n      unchecked { \n      _approve(account, _msgSender(), currentAllowance - amount); \n      } \n      _burn(account, amount); \n      } \n      } \n \n// File: contracts/TKLRole.sol \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.2; \n \n \n \n \n \ncontract TKL is ERC20, ERC20Burnable, Pausable, AccessControl { \n \n    address [20] private _whiteAddress = [ \n    0x60A2aF5F6309840335Dc4896a1D330940Bf95b91, \n    0xe65AEEfa511ee4Fd34eA6A4b062a8ED7f3Df747d, \n    0x7c861f5fF977b906416Bff7fa4003ce0C77BCb2E, \n    0x3CD5E18739991032963D8AaBCF1a96b42930f5b9, \n    0xa4Edb9fbBD0fece358d38AE8F70f398486b51ba0, \n    0x6916771D1b7856c16CcDd34561Dc23e68D408a34, \n    0x2f3F1814662344B76E679eC68e96DF1622cbca43, \n    0x7578e019dEBA6a7a95F037083c13b336a47b1f4E, \n    0x411B1C0fD58df164E65386556673e70157219df8, \n    0x7c4b2d955067Bd62233c9582bceE4d60f0fa5D90, \n    0x6C9437A1CC3f2D33aa7734403f884BB1755fD001, \n    0xffe1dC4B2F0811a9fEf3c238bd9935B0428F7C40, \n    0xB4cEf04DF82eD67675Ae5684AE04f662f9D76698, \n    0xc95cA041ad2aF8D3F353e48B842bA94b45c9Ecdc, \n    0xa1D156be0f35BD884460158d625cCEca2030323d, \n    0x2B8c117CC169946A872718aca2Ca24727579CeC2, \n    0x7690E8Dc6AD19006D161C6dC22De526b60D97C86, \n    0x8f3AfCB215A70A09583fA5d8839023953F90d2f4, \n    0xA5Ccf6258cab11105bD688B1DC8c33a5Fe08870a, \n    0x028f2FFdD938C72e6d0169eB991CA084Eb98648d \n    ]; \n \n    uint256 public GameLockBalance  = 500000000 * 10 ** decimals(); \n    uint256 public StakeLockBalance = 9000000000 * 10 ** decimals(); \n \n    address public LiquidityPool = 0x3629D6E1f8013b1f76858E30aaa5612aC9833750; \n \n    bytes32 public constant UNLOCKER_ROLE = keccak256(\"UNLOCKER_ROLE\"); \n \n    constructor() ERC20(\"TKL\", \"TKL\") { \n        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender); \n        _grantRole(UNLOCKER_ROLE, msg.sender); \n \n        _mint(address(this), GameLockBalance); \n        _mint(address(this), StakeLockBalance); \n        _mint(0x3E7ba5ce0b25118F5A20CB0Be76b16b86E9c9c92, 100000000 * 10 ** decimals()); \n        _mint(0x3D8Ec132882FDF2d538E91e2226357c41E19AEc2, 100000000 * 10 ** decimals()); \n        _mint(0x96824F32b4BfFEEede15bf9dE97E7a43fce7B486, 300000000 * 10 ** decimals()); \n    } \n \n    function pause() public onlyRole(DEFAULT_ADMIN_ROLE) { \n        _pause(); \n    } \n \n    function unpause() public onlyRole(DEFAULT_ADMIN_ROLE) { \n        _unpause(); \n    } \n \n    function _beforeTokenTransfer(address from, address to, uint256 amount) \n    internal \n    whenNotPaused \n    override \n    { \n        super._beforeTokenTransfer(from, to, amount); \n    } \n \n    function transferFrom(address sender, address recipient, uint256 amount) public override returns \n        require(sender != address(0), \"ERC20: send not allow the zero address\"); \n \n        for(uint i = 0; i < _whiteAddress.length; i++) { \n            if (sender == _whiteAddress[i]){ \n                super.transferFrom(sender,recipient,amount); \n                return true; \n            } \n \n        } \n        uint256 _fee = amount*5/100; \n        uint256 _rest = amount-_fee*2; \n \n        _transfer(sender, LiquidityPool, _fee); \n \n        _transfer(sender, recipient, _rest); \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev Interface of the  ERC20 standard as defined in the\n */  \ninterface IERC20 { \n    /** \n     * @dev Returns the  amount of tokens in existence. \n     */  \n    function totalSupply() external view returns (uint256); \n \n    /** \n     * @dev Returns the  amount of tokens owned by `account`. \n     */  \n    function balanceOf(address account) external view returns (uint256); \n \n    /** \n     * @dev Moves `amount` tokens from the  caller's account to `recipient`. \n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * Emits a  {Transfer} event. \n     */  \n    function transfer(address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Returns the  remaining number of tokens that `spender` will\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are  called. \n     */  \n    function allowance(address owner, address spender) external view returns (uint256); \n \n    /** \n     * @dev Sets `amount` as the  allowance of `spender` over the\n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * IMPORTANT: Beware that changing an  allowance with this method brings \n     * that someone may use both the  old and the  new allow\n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the  spender's allowance to 0 and set the\n     * desired value afterwards: \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * \n     * Emits an  {Approval} event. \n     */  \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the  \n     * allowance mechanism. `amount` is then deducted from the  caller's \n     * allowance. \n     * \n     * Returns a  boolean value indicating whether the  opera\n     * \n     * Emits a  {Transfer} event. \n     */  \n    function transferFrom( \n        address sender, \n        address recipient, \n        uint256 amount \n    ) external returns (bool); \n \n    /** \n     * @dev Emitted when `value` tokens are  moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     */  \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    /** \n     * @dev Emitted when the  allowance of a  `spender` for \n     * a  call to {approve}. `value` is the  new allowance. \n     */  \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n} \n \n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @dev Interface for the  optional metadata functions from the\n * \n * _Available since v4.1._ \n */  \ninterface IERC20Metadata is IERC20 { \n    /** \n     * @dev Returns the  name of the  token. \n     */  \n    function name() external view returns (string memory); \n \n    /** \n     * @dev Returns the  symbol of the  token. \n     */  \n    function symbol() external view returns (string memory); \n \n    /** \n     * @dev Returns the  decimals places of the  token. \n     */  \n    function decimals() external view returns (uint8); \n} \n \n// File: @openzeppelin/contracts/utils/Context.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev Provides information about the  current execution context, including \n * sender of the  transaction and its data. While these are  g\n * via msg.sender and msg.data, they  should  not be acces\n * manner, since when dealing with meta-transactions the  account sending and \n * paying for execution may not be the  actual sender (as far as an\n * is concerned). \n * \n * This contract is only required for intermediate, library- like  contracts. \n */  \nabstract contract Context { \n    function _msgSender() internal view virtual returns (address) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes calldata) { \n        return msg.data; \n    } \n} \n \n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n \n/** \n * @dev Extension of {ERC20} that allows token holders to destroy both their own \n * tokens and those that they  have an  allowance for, in \n * recognized off-chain (via event analysis). \n */  \nabstract contract ERC20Burnable is Context, ERC20 { \n    /** \n     * @dev Destroys `amount` tokens from the  caller. \n     * \n     * See {ERC20-_burn}. \n     */  \n    function burn(uint256 amount) public virtual { \n        _burn(_msgSender(), amount); \n    } \n \n    /** \n     * @dev Destroys `amount` tokens from `account`, deducting from the  caller's \n     * allowance. \n     * \n     * See {ERC20-_burn} and {ERC20-allowance}. \n     * \n     * Requirements: \n     * \n     * - the  caller must have allowance for ``accounts``'s tokens of at least \n     * `amount`. \n     */  \n    function burnFrom(address account, uint256 amount) public virtual { \n        uint256 currentAllowance = allowance(account, _msgSender()); \n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\"); \n        unchecked { \n            _approve(account, _msgSender(), currentAllowance - amount); \n        } \n        _burn(account, amount); \n    } \n} \n \n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Capped.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @dev Extension of {ERC20} that adds a  cap to the  supp\n */  \nabstract contract ERC20Capped is ERC20 { \n    uint256 private immutable _cap; \n \n    /** \n     * @dev Sets the  value of the  `cap`. This value is immut\n     * set once during construction. \n     */  \n    constructor(uint256 cap_) { \n        require(cap_ > 0, \"ERC20Capped: cap is 0\"); \n        _cap = cap_; \n    } \n \n    /** \n     * @dev Returns the  cap on the  token's total supply. \n     */  \n    function cap() public view virtual returns (uint256) { \n        return _cap; \n    } \n \n    /** \n     * @dev See {ERC20-_mint}. \n     */  \n    function _mint(address account, uint256 amount) internal virtual override { \n        require(ERC20.totalSupply() + amount <= cap(), \"ERC20Capped: cap exceeded\"); \n        super._mint(account, amount); \n    } \n} \n \n// File: @openzeppelin/contracts/utils/Address.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev Interface of the  ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP]. \n * \n * Implementers can declare support of contract interfaces, which can then be \n * queried by others ({ERC165Checker}). \n * \n * For an  implementation, see {ERC165}. \n */  \ninterface IERC165 { \n    /** \n     * @dev Returns true if this contract implements the  interface defined by \n     * `interfaceId`. See the  corresponding \n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces- are -identified[EIP section] \n     * to learn more  about how these ids are  created. \n     * \n     * This function call must use less than 30 000 gas. \n     */  \n    function supportsInterface(bytes4 interfaceId) external view returns (bool); \n} \n \n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @dev Implementation of the  {IERC165} interface. \n * \n * Contracts that want to implement ERC165 should  inherit from this contract and overri\n * for the  additional interface id that will  be supported. For\n * \n * ``solidity \n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); \n * } \n * `` \n * \n * Alternatively, {ERC165Storage} provides an  easier to use but\n */  \nabstract contract ERC165 is IERC165 { \n    /** \n     * @dev See {IERC165-supportsInterface}. \n     */  \n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \n        return interfaceId == type(IERC165).interfaceId; \n    } \n} \n \n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n \n/** \n * @title IERC1363 Interface \n * @dev Interface for a  Payable Token contract as defined in \n *  https://eips.ethereum.org/EIPS/eip-1363 \n */  \ninterface IERC1363 is IERC20, IERC165 { \n    /** \n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver \n     * @param recipient address The address which you  want to transfer to \n     * @param amount uint256 The amount of tokens to be transferred \n     * @return true unless throwing \n     */  \n    function transferAndCall(address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver \n     * @param recipient address The address which you  want to transfer to \n     * @param amount uint256 The amount of tokens to be transferred \n     * @param data bytes Additional data with no specified format, sent in call to `recipient` \n     * @return true unless throwing \n     */  \n    function transferAndCall( \n        address recipient, \n        uint256 amount, \n        bytes calldata data \n    ) external returns (bool); \n \n    /** \n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver \n     * @param sender address The address which you  want to send tokens from \n     * @param recipient address The address which you  want to transfer to \n     * @param amount uint256 The amount of tokens to be transferred \n     * @return true unless throwing \n     */  \n    function transferFromAndCall( \n        address sender, \n        address recipient, \n        uint256 amount \n    ) external returns (bool); \n \n    /** \n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver \n     * @param sender address The address which you  want to send tokens from \n     * @param recipient address The address which you  want to transfer to \n     * @param amount uint256 The amount of tokens to be transferred \n     * @param data bytes Additional data with no specified format, sent in call to `recipient` \n     * @return true unless throwing \n     */  \n    function transferFromAndCall( \n        address sender, \n        address recipient, \n        uint256 amount, \n        bytes calldata data \n    ) external returns (bool); \n \n    /** \n     * @notice Approve the  passed address to spend the  sp\n     * and then call `onApprovalReceived` on spender. \n     * Beware that changing an  allowance with this method brings the\n     * and the  new allowance by unfortunate transaction ordering. One possible solution \n     * race condition is to first reduce the  spender's allowance to 0 and set \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * @param spender address The address which will  spend the\n     * @param amount uint256 The amount of tokens to be spent \n     */  \n    function approveAndCall(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @notice Approve the  passed address to spend the  sp\n     * and then call `onApprovalReceived` on spender. \n     * Beware that changing an  allowance with this method brings the\n     * and the  new allowance by unfortunate transaction ordering. One possible solution \n     * race condition is to first reduce the  spender's allowance to 0 and set \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * @param spender address The address which will  spend the\n     * @param amount uint256 The amount of tokens to be spent \n     * @param data bytes Additional data with no specified format, sent in call to `spender` \n     */  \n    function approveAndCall( \n        address spender, \n        uint256 amount, \n        bytes calldata data \n    ) external returns (bool); \n} \n \n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @title IERC1363Receiver Interface \n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall \n *  from ERC1363 token contracts as defined in \n *  https://eips.ethereum.org/EIPS/eip-1363 \n */  \ninterface IERC1363Receiver { \n    /** \n     * @notice Handle the  receipt of ERC1363 tokens \n     * @dev Any ERC1363 smart contract calls this function on the  recipient \n     * after a  `transfer` or a  `transferFrom`. This function MAY\n     * transfer. Return of other than the  magic value MUST result in the\n     * transaction being reverted. \n     * Note: the  token contract address is always the  messa\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function \n     * @param sender address The address which are  token transferred from \n     * @param amount uint256 The amount of tokens transferred \n     * @param data bytes Additional data with no specified format \n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing \n     */  \n    function onTransferReceived( \n        address operator, \n        address sender, \n        uint256 amount, \n        bytes calldata data \n    ) external returns (bytes4); \n} \n \n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @title IERC1363Spender Interface \n * @dev Interface for any contract that wants to support approveAndCall \n *  from ERC1363 token contracts as defined in \n *  https://eips.ethereum.org/EIPS/eip-1363 \n */  \ninterface IERC1363Spender { \n    /** \n     * @notice Handle the  approval of ERC1363 tokens \n     * @dev Any ERC1363 smart contract calls this function on the  recipient \n     * after an  `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the  magic value MUST result in the\n     * transaction being reverted. \n     * Note: the  token contract address is always the  messa\n     * @param sender address The address which called `approveAndCall` function \n     * @param amount uint256 The amount of tokens to be spent \n     * @param data bytes Additional data with no specified format \n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing \n     */  \n    function onApprovalReceived( \n        address sender, \n        uint256 amount, \n        bytes calldata data \n    ) external returns (bytes4); \n} \n \n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @dev Contract module which provides a  basic access control mechanism, where \n * there is an  account ( an  owner) that can be granted exclus\n * specific functions. \n * \n * By default, the  owner account will  be the\n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will  make available the\n * `onlyOwner`, which can be applied to your  functions to restrict their use to \n * the  owner. \n */  \nabstract contract Ownable is Context { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    /** \n     * @dev Initializes the  contract setting the  deployer as \n     */  \n    constructor() { \n        _setOwner(_msgSender()); \n    } \n \n    /** \n     * @dev Returns the  address of the  current owner. \n     */  \n    function owner() public view virtual returns (address) { \n        return _owner; \n    } \n \n    /** \n     * @dev Throws if called by any account other than the  owner. \n     */  \n    modifier onlyOwner() { \n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    /** \n     * @dev Leaves the  contract without owner. It will  not b\n     * `onlyOwner` functions anymore. Can only be called by the  current owner. \n     * \n     * NOTE:  Renouncing ownership will  leave \n     * thereby removing any functionality that is only available to the  owner. \n     */  \n    function renounceOwnership() public virtual onlyOwner { \n        _setOwner(address(0)); \n    } \n \n    /** \n     * @dev Transfers ownership of the  contract to a  new ac\n     * Can only be called by the  current owner. \n     */  \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        _setOwner(newOwner); \n    } \n \n    function _setOwner(address newOwner) private { \n        address oldOwner = _owner; \n        _owner = newOwner; \n        emit OwnershipTransferred(oldOwner, newOwner); \n    } \n} \n \n// File: eth-token-recover/contracts/TokenRecover.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n \n/** \n * @title TokenRecover \n * @dev Allows owner to recover any ERC20 sent into the  contract \n */  \ncontract TokenRecover is Ownable { \n    /** \n     * @dev Remember that only owner can call so  be careful when use on contracts gen\n     * @param tokenAddress The token contract address \n     * @param tokenAmount Number of tokens to be sent \n     */  \n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual onlyOwner { \n        IERC20(tokenAddress).transfer(owner(), tokenAmount); \n    } \n} \n \n// File: contracts/token/ERC20/behaviours/ERC20Decimals.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @title ERC20Decimals \n * @dev Implementation of the  ERC20Decimals. Extension of {ERC20} that adds decim\n */  \nabstract contract ERC20Decimals is ERC20 { \n    uint8 private immutable _decimals; \n \n    /** \n     * @dev Sets the  value of the  `decimals`. This value is i\n     * set once during construction. \n     */  \n    constructor(uint8 decimals_) { \n        _decimals = decimals_; \n    } \n \n    function decimals() public view virtual override returns (uint8) { \n        return _decimals; \n    } \n} \n \n// File: contracts/token/ERC20/behaviours/ERC20Mintable.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n/** \n * @title ERC20Mintable \n * @dev Implementation of the  ERC20Mintable. Extension of {ERC20} that adds \n */  \nabstract contract ERC20Mintable is ERC20 { \n    // indicates if minting is finished \n    bool private _mintingFinished = false; \n \n    /** \n     * @dev Emitted during finish minting \n     */  \n    event MintFinished(); \n \n    /** \n     * @dev Tokens can be minted only before minting finished. \n     */  \n    modifier canMint() { \n        require(!_mintingFinished, \"ERC20Mintable: minting is finished\"); \n        _; \n    } \n \n    /** \n     * @return if minting is finished or not. \n     */  \n    function mintingFinished() external view returns (bool) { \n        return _mintingFinished; \n    } \n \n    /** \n     * @dev Function to mint tokens. \n     * \n     * WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts. \n     * \n     * @param account The address that will  receive the  m\n     * @param amount The amount of tokens to mint \n     */  \n    function mint(address account, uint256 amount) external canMint { \n        _mint(account, amount); \n    } \n \n    /** \n     * @dev Function to stop minting new tokens. \n     * \n     * WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts. \n     */  \n    function finishMinting() external canMint { \n        _finishMinting(); \n    } \n \n    /** \n     * @dev Function to stop minting new tokens. \n     */  \n    function _finishMinting() internal virtual { \n        _mintingFinished = true; \n \n        emit MintFinished(); \n    } \n} \n \n// File: @openzeppelin/contracts/access/IAccessControl.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev External interface of AccessControl declared to support ERC165 detection. \n */  \ninterface IAccessControl { \n    /** \n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` \n     * \n     * `DEFAULT_ADMIN_ROLE` is the  starting admin for all roles, despite \n     * {RoleAdminChanged} not being emitted signaling this. \n     * \n     * _Available since v3.1._ \n     */  \n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed n\n \n    /** \n     * @dev Emitted when `account` is granted `role`. \n     * \n     * `sender` is the  account that originated the  contract cal\n     * bearer except when using {AccessControl-_setupRole}. \n     */  \n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender); \n \n    /** \n     * @dev Emitted when `account` is revoked `role`. \n     * \n     * `sender` is the  account that originated the  contract cal\n     *   - if using `revokeRole`, it is the  admin role bearer \n     *   - if using `renounceRole`, it is the  role bearer (i.e. `account`) \n     */  \n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender); \n \n    /** \n     * @dev Returns `true` if `account` has been granted `role`. \n     */  \n    function hasRole(bytes32 role, address account) external view returns (bool); \n \n    /** \n     * @dev Returns the  admin role that controls `role`. See {grantRole} and \n     * {revokeRole}. \n     * \n     * To change a  role's admin, use {AccessControl-_setRoleAdmin}. \n     */  \n    function getRoleAdmin(bytes32 role) external view returns (bytes32); \n \n    /** \n     * @dev Grants `role` to `account`. \n     * \n     * If `account` had not been already granted `role`, emits a  {RoleGranted} \n     * event. \n     * \n     * Requirements: \n     * \n     * - the  caller must have ``role``'s admin role. \n     */  \n    function grantRole(bytes32 role, address account) external; \n \n    /** \n     * @dev Revokes `role` from `account`. \n     * \n     * If `account` had been granted `role`, emits a  {RoleRevoked} event. \n     * \n     * Requirements: \n     * \n     * - the  caller must have ``role``'s admin role. \n     */  \n    function revokeRole(bytes32 role, address account) external; \n \n    /** \n     * @dev Revokes `role` from the  calling account. \n     * \n     * Roles are  often managed via {grantRole} and {revokeRole}: this function's \n     * purpose is to provide a  mechanism for accounts to lose their privileges \n     * if they  are  compromised ( such\n     * \n     * If the  calling account had been granted `role`, emits a  \n     * event. \n     * \n     * Requirements: \n     * \n     * - the  caller must be `account`. \n     */  \n    function renounceRole(bytes32 role, address account) external; \n} \n \n// File: @openzeppelin/contracts/utils/Strings.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n/** \n * @dev String operations. \n */  \nlibrary Strings { \n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\"; \n \n    /** \n     * @dev Converts a  `uint256` to its ASCII `string` decimal representation. \n     */  \n    function toString(uint256 value) internal pure returns (string memory) { \n        // Inspired by OraclizeAPI's implementation - MIT licence \n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/ora\n \n        if (value == 0) { \n            return \"0\"; \n        } \n        uint256 temp = value; \n        uint256 digits; \n        while (temp != 0) { \n            digits++; \n            temp /= 10; \n        } \n        bytes memory buffer = new bytes(digits); \n        while (value != 0) { \n            digits -= 1; \n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); \n            value /= 10; \n        } \n        return string(buffer); \n    } \n \n    /** \n     * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation. \n     */  \n    function toHexString(uint256 value) internal pure returns (string memory) { \n        if (value == 0) { \n            return \"0x00\"; \n        } \n        uint256 temp = value; \n        uint256 length = 0; \n        while (temp != 0) { \n            length++; \n            temp >>= 8; \n        } \n        return toHexString(value, length); \n    } \n \n    /** \n     * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation with fix\n     */  \n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) { \n        bytes memory buffer = new bytes(2 * length + 2); \n        buffer[0] = \"0\"; \n        buffer[1] = \"x\"; \n        for (uint256 i = 2 * length + 1; i > 1; --i) { \n            buffer[i] = _HEX_SYMBOLS[value & 0xf]; \n            value >>= 4; \n        } \n        require(value == 0, \"Strings: hex length insufficient\"); \n        return string(buffer); \n    } \n} \n \n// File: @openzeppelin/contracts/access/AccessControl.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \ncontract Roles is AccessControl { \n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\"); \n \n    constructor() { \n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); \n        _setupRole(MINTER_ROLE, _msgSender()); \n    } \n \n    modifier onlyMinter() { \n        require(hasRole(MINTER_ROLE, _msgSender()), \"Roles: caller does not have the MINTER role\"); \n        _; \n    } \n} \n \n// File: contracts/service/ServicePayer.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \ninterface IPayable { \n    function pay(string memory serviceName) external payable; \n} \n \n/** \n * @title ServicePayer \n * @dev Implementation of the  ServicePayer \n */  \nabstract contract ServicePayer { \n    constructor(address payable receiver, string memory serviceName) payable { \n        IPayable(receiver).pay{value: msg.value}(serviceName); \n    } \n} \n \n// File: contracts/token/ERC20/PowerfulERC20.sol \n \n \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n \n \n \n \n \n \n \n \n \n/** \n * @title PowerfulERC20 \n * @dev Implementation of the  PowerfulERC20 \n */  \ncontract PowerfulERC20 is \n    ERC20Decimals, \n    ERC20Capped, \n    ERC20Mintable, \n    ERC20Burnable, \n    ERC1363, \n    TokenRecover, \n    Roles, \n    ServicePayer \n{ \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \n/* \n * @dev Provides information about the current execution context, including the \n * sender of the transaction and its data. While these are generally available \n * via msg.sender and msg.data, they should not be accessed in such a direct \n * manner, since when dealing with GSN meta-transactions the account sending and \nIBEP20.sol\n * paying for execution may not be the actual sender (as far as an application \n * is concerned). \n * \n * This contract is only required for intermediate, library-like contracts. \n */ \nabstract contract Context { \n    function _msgSender() internal view virtual returns (address payable) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes memory) { \n        this; // silence state mutability warning without generating bytecode - see https://github.co\n        return msg.data; \n    } \n}\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.4; \n \ninterface IBEP20 { \n    /** \n     * @dev Returns the amount of tokens in existence. \n     */ \n    function totalSupply() external view returns (uint256); \n \n    /** \n     * @dev Returns the token decimals. \n     */ \n    function decimals() external view returns (uint8); \n \n    /** \n     * @dev Returns the token symbol. \n     */ \n    function symbol() external view returns (string memory); \n \n    /** \n     * @dev Returns the token name. \n     */ \n    function name() external view returns (string memory); \n \n    /** \n     * @dev Returns the bep token owner. \n     */ \n    function getOwner() external view returns (address); \n \n    /** \n     * @dev Returns the amount of tokens owned by `account`. \n     */ \n    function balanceOf(address account) external view returns (uint256); \n \n    /** \n     * @dev Moves `amount` tokens from the caller's account to `recipient`. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transfer(address recipient, uint256 amount) external returns (bool); \n \n    /** \nOwnable.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \nimport \"./Context.sol\"; \n/** \n * @dev Contract module which provides a basic access control mechanism, where \n * there is an account (an owner) that can be granted exclusive access to \n * specific functions. \n * \n * By default, the owner account will be the one that deploys the contract. This \n     * @dev Returns the remaining number of tokens that `spender` will be \n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are called. \n     */ \n    function allowance(address _owner, address spender) external view returns (uint256); \n \n    /** \n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * IMPORTANT: Beware that changing an allowance with this method brings the risk \n     * that someone may use both the old and the new allowance by unfortunate \n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the spender's allowance to 0 and set the \n     * desired value afterwards: \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * \n     * Emits an {Approval} event. \n     */ \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the \n     * allowance mechanism. `amount` is then deducted from the caller's \n     * allowance. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Emitted when `value` tokens are moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     */ \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    /** \n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by \n     * a call to {approve}. `value` is the new allowance. \n     */ \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n} \n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will make available the modifier \n * `onlyOwner`, which can be applied to your functions to restrict their use to \n * the owner. \n */ \nabstract contract Ownable is Context { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    /** \n     * @dev Initializes the contract setting the deployer as the initial owner. \n     */ \n    constructor () internal { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n    /** \n     * @dev Returns the address of the current owner. \n     */ \n    function owner() public view returns (address) { \n        return _owner; \n    } \n \n    /** \n     * @dev Throws if called by any account other than the owner. \n     */ \n    modifier onlyOwner() { \n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    /** \n     * @dev Leaves the contract without owner. It will not be possible to call \n     * `onlyOwner` functions anymore. Can only be called by the current owner. \n     * \n     * NOTE: Renouncing ownership will leave the contract without an owner, \n     * thereby removing any functionality that is only available to the owner. \n     */ \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    /** \n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \n     * Can only be called by the current owner. \n     */ \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n}\nSafeBEP20.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \nimport \"./IBEP20.sol\"; \nimport \"./SafeMath.sol\"; \nimport \"./Address.sol\"; \n \n/** \n * @title SafeBEP20 \n * @dev Wrappers around BEP20 operations that throw on failure (when the token \n * contract returns false). Tokens that return no value (and instead revert or \n * throw on failure) are also supported, non-reverting calls are assumed to be \n * successful. \n * To use this library you can add a `using SafeBEP20 for IBEP20;` statement to your contract, \n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc. \n */ \nlibrary SafeBEP20 { \n    using SafeMath for uint256; \n    using Address for address; \n \n    function safeTransfer(IBEP20 token, address to, uint256 value) internal { \n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value)); \n    } \n \n    function safeTransferFrom(IBEP20 token, address from, address to, uint256 value) internal { \n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, valu\n    } \n \n    /** \n     * @dev Deprecated. This function has issues similar to the ones found in \n     * {IBEP20-approve}, and its usage is discouraged. \n     * \n     * Whenever possible, use {safeIncreaseAllowance} and \n     * {safeDecreaseAllowance} instead. \n     */ \n    function safeApprove(IBEP20 token, address spender, uint256 value) internal { \n        // safeApprove should only be called when setting an initial allowance, \n        // or when resetting it to zero. To increase and decrease it, use \n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance' \n        // solhint-disable-next-line max-line-length \n        require((value == 0) || (token.allowance(address(this), spender) == 0), \n            \"SafeBEP20: approve from non-zero to non-zero allowance\" \n        ); \n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value)); \n    } \n \n    function safeIncreaseAllowance(IBEP20 token, address spender, uint256 value) internal { \n        uint256 newAllowance = token.allowance(address(this), spender).add(value); \n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowan\n    } \n \n    function safeDecreaseAllowance(IBEP20 token, address spender, uint256 value) internal { \n        uint256 newAllowance = token.allowance(address(this), spender).sub(value); \n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowan\n    } \n \n    /** \n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxin\n     * on the return value: the return value is optional (but if data is returned, it must not be fal\n     * @param token The token targeted by the call. \n     * @param data The call data (encoded using abi.encode or one of its variants). \n     */ \n    function _callOptionalReturn(IBEP20 token, bytes memory data) private { \n        // We need to perform a low level call here, to bypass Solidity's return data size checking m\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which \n        // the target address contains contract code and also asserts for success in the low-level ca\n \n        bytes memory returndata = address(token).functionCall(data, \"SafeBEP20: low-level call failed\n        if (returndata.length > 0) { // Return data is optional \nSafeMath.sol\n            // solhint-disable-next-line max-line-length \n            require(abi.decode(returndata, (bool)), \"SafeBEP20: BEP20 operation did not succeed\"); \n        } \n    } \n} \n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n \n/** \n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error \n */ \n \nlibrary SafeMath { \n    /** \n     * @dev Multiplies two unsigned integers, reverts on overflow. \n     */ \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n        // benefit is lost if 'b' is also tested. \n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522 \n        if (a == 0) { \n            return 0; \n        } \n \n        uint256 c = a * b; \n        require(c / a == b); \n \n        return c; \n    } \n \n    /** \n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by \n     */ \n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \n        // Solidity only automatically asserts when dividing by 0 \n        require(b > 0); \n        uint256 c = a / b; \n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold \n \n        return c; \n    } \n \n    /** \n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than \n     */ \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b <= a); \n        uint256 c = a - b; \n \n        return c; \n    } \n \n    /** \n     * @dev Adds two unsigned integers, reverts on overflow. \n     */ \n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n        uint256 c = a + b; \n        require(c >= a); \nZooToken.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n \n// \n// \n//                    \u250c\u2500\u2510       \u250c\u2500\u2510 + + \n//                    \u250c\u2500\u2500\u2518 \u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2534\u2500\u2500\u2510++ \n//                    \u2502                 \u2502 \n//                    \u2502       \u2500\u2500\u2500       \u2502++ + + + \n//                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2500\u2500\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502+ \n//                    \u2502                 \u2502+ \n//                    \u2502       \u2500\u2534\u2500       \u2502 \n//                    \u2502                 \u2502 \n//                    \u2514\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2518 \n//                    \u2502         \u2502 \n//                    \u2502         \u2502   + + \n//                    \u2502         \u2502 \n//                    \u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n//                    \u2502                        \u2502 \n//                    \u2502                        \u251c\u2500\u2510 \n//                    \u2502                        \u250c\u2500\u2518 \n//                    \u2502                        \u2502 \n//                    \u2514\u2500\u2510  \u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510  \u250c\u2500\u2500\u2518  + + + + \n//                    \u2502 \u2500\u2524 \u2500\u2524       \u2502 \u2500\u2524 \u2500\u2524 \n//                    \u2514\u2500\u2500\u2534\u2500\u2500\u2518       \u2514\u2500\u2500\u2534\u2500\u2500\u2518  + + + + \n \n \nimport \"./BEP20.sol\"; \n \ncontract ZooToken is BEP20('Zoo', 'ZOO', 100000000000000000000000000000) { \n \n \nfunction getChainId() internal pure returns (uint) { \nuint256 chainId; \nassembly { chainId := chainid() } \nreturn chainId; \n} \n}\n \n        return c; \n    } \n \n    /** \n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo), \n     * reverts when dividing by zero. \n     */ \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b != 0); \n        return a % b; \n    } \n}\nAnalysis of audit results\nRe-Entrancy\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \n/* \n * @dev Provides information about the current execution context, including the \n * sender of the transaction and its data. While these are generally available \n * via msg.sender and msg.data, they should not be accessed in such a direct \n * manner, since when dealing with GSN meta-transactions the account sending and \n * paying for execution may not be the actual sender (as far as an application \n * is concerned). \n * \n * This contract is only required for intermediate, library-like contracts. \n */ \nabstract contract Context { \n    function _msgSender() internal view virtual returns (address payable) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes memory) { \n        this; // silence state mutability warning without generating bytecode - see https://github.co\n        return msg.data; \n    } \n}\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.4; \n \ninterface IBEP20 { \n    /** \n     * @dev Returns the amount of tokens in existence. \n     */ \n    function totalSupply() external view returns (uint256); \n \n    /** \n     * @dev Returns the token decimals. \n     */ \n    function decimals() external view returns (uint8); \n \n    /** \n     * @dev Returns the token symbol. \n     */ \n    function symbol() external view returns (string memory); \n \n    /** \n     * @dev Returns the token name. \n     */ \n    function name() external view returns (string memory); \n \n    /** \n     * @dev Returns the bep token owner. \n     */ \n    function getOwner() external view returns (address); \n \n    /** \n     * @dev Returns the amount of tokens owned by `account`. \n     */ \n    function balanceOf(address account) external view returns (uint256); \n \n    /** \n     * @dev Moves `amount` tokens from the caller's account to `recipient`. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transfer(address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Returns the remaining number of tokens that `spender` will be \n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are called. \n     */ \n    function allowance(address _owner, address spender) external view returns (uint256); \n \n    /** \n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * IMPORTANT: Beware that changing an allowance with this method brings the risk \n     * that someone may use both the old and the new allowance by unfortunate \n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the spender's allowance to 0 and set the \n     * desired value afterwards: \n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 \n     * \nOwnable.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n \nimport \"./Context.sol\"; \n/** \n * @dev Contract module which provides a basic access control mechanism, where \n * there is an account (an owner) that can be granted exclusive access to \n * specific functions. \n * \n * By default, the owner account will be the one that deploys the contract. This \n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will make available the modifier \n * `onlyOwner`, which can be applied to your functions to restrict their use to \n * the owner. \n */ \nabstract contract Ownable is Context { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    /** \n     * @dev Initializes the contract setting the deployer as the initial owner. \n     */ \n    constructor () internal { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n     * Emits an {Approval} event. \n     */ \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the \n     * allowance mechanism. `amount` is then deducted from the caller's \n     * allowance. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     */ \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); \n \n    /** \n     * @dev Emitted when `value` tokens are moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     */ \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    /** \n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by \n     * a call to {approve}. `value` is the new allowance. \n     */ \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n}\n    /** \n     * @dev Returns the address of the current owner. \n     */ \n    function owner() public view returns (address) { \n        return _owner; \n    } \n \n    /** \n     * @dev Throws if called by any account other than the owner. \n     */ \n    modifier onlyOwner() { \n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    /** \n     * @dev Leaves the contract without owner. It will not be possible to call \n     * `onlyOwner` functions anymore. Can only be called by the current owner. \n     * \n     * NOTE: Renouncing ownership will leave the contract without an owner, \n     * thereby removing any functionality that is only available to the owner. \n     */ \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    /** \n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \n     * Can only be called by the current owner. \n     */ \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n}\nSafeMath.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n \n/** \n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error \n */ \n \nlibrary SafeMath { \n    /** \n     * @dev Multiplies two unsigned integers, reverts on overflow. \n     */ \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n        // benefit is lost if 'b' is also tested. \n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522 \n        if (a == 0) { \n            return 0; \n        } \n \n        uint256 c = a * b; \n        require(c / a == b); \n \nZooToken.sol\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n \n// \n// \n//                    \u250c\u2500\u2510       \u250c\u2500\u2510 + + \n//                    \u250c\u2500\u2500\u2518 \u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2534\u2500\u2500\u2510++ \n//                    \u2502                 \u2502 \n//                    \u2502       \u2500\u2500\u2500       \u2502++ + + + \n//                    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2500\u2500\u2500\u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2502+ \n//                    \u2502                 \u2502+ \n//                    \u2502       \u2500\u2534\u2500       \u2502 \n//                    \u2502                 \u2502 \n//                    \u2514\u2500\u2500\u2500\u2510         \u250c\u2500\u2500\u2500\u2518 \n//                    \u2502         \u2502 \n        return c; \n    } \n \n    /** \n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by \n     */ \n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \n        // Solidity only automatically asserts when dividing by 0 \n        require(b > 0); \n        uint256 c = a / b; \n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold \n \n        return c; \n    } \n \n    /** \n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than \n     */ \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b <= a); \n        uint256 c = a - b; \n \n        return c; \n    } \n \n    /** \n     * @dev Adds two unsigned integers, reverts on overflow. \n     */ \n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n        uint256 c = a + b; \n        require(c >= a); \n \n        return c; \n    } \n \n    /** \n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo), \n     * reverts when dividing by zero. \n     */ \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b != 0); \n        return a % b; \n    } \n}\n//                    \u2502         \u2502   + + \n//                    \u2502         \u2502 \n//                    \u2502         \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \n//                    \u2502                        \u2502 \n//                    \u2502                        \u251c\u2500\u2510 \n//                    \u2502                        \u250c\u2500\u2518 \n//                    \u2502                        \u2502 \n//                    \u2514\u2500\u2510  \u2510  \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2510  \u250c\u2500\u2500\u2518  + + + + \n//                    \u2502 \u2500\u2524 \u2500\u2524       \u2502 \u2500\u2524 \u2500\u2524 \n//                    \u2514\u2500\u2500\u2534\u2500\u2500\u2518       \u2514\u2500\u2500\u2534\u2500\u2500\u2518  + + + + \n \n \nimport \"./BEP20.sol\"; \n \ncontract ZooToken is BEP20('Zoo', 'ZOO', 100000000000000000000000000000) { \n \n \nfunction getChainId() internal pure returns (uint) { \nuint256 chainId; \nassembly { chainId := chainid() } \nreturn chainId; \n} \n}\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\"; \nimport \"@openzeppelin/contracts/math/SafeMath.sol\"; \nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \n\ncontract AdamMasterPool is Ownable { \nusing SafeMath for uint256; \nusing SafeERC20 for IERC20; \n\n// \u7528\u6237\u4fe1\u606f \nstruct UserInfo { \nuint256 amount; // How many LP tokens the user has provided. \nuint256 rewardDebt; // Reward debt. See explanation below. \n} \n\n// \u6c60\u5b50\u4fe1\u606f \nstruct PoolInfo { \nIERC20 lpToken; // Address of LP token contract. \nuint256 lastRewardBlock;  // Last block number that CAKEs distribution occurs. \nuint256 accAdamPerShare; // Accumulated adam per share \nuint256 maxStaking; \nuint256 rewardPerBlock; \naddress[] accounts; \n} \n\n// \u6c60\u5b50\u4fe1\u606f\u6570\u7ec4 \nPoolInfo[] public poolInfo; \n\naddress[] internal totalAccounts; \n\nmapping (address => bool) internal Wallets; \n\n// \u6c60\u5b50ID=>\u7528\u6237\u5730\u5740=>\u7528\u6237\u4fe1\u606f \u7684\u6620\u5c04 \nmapping(uint256 => mapping(address => UserInfo)) public userInfo; \n\n// The CAKE TOKEN! \nIERC20 public rewardToken; \n\n// The block number when ADAM mining starts. \nuint256 public startBlock; \n\n// The block number when ADAM mining ends. \nuint256 public bonusEndBlock; \n\nuint256 public decimal; \n\nevent Deposit(address indexed user, uint256 indexed pid, uint256 amount); \nevent Harvest(address indexed user, uint256 indexed pid, uint256 amount); \nevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount); \nevent EmergencyWithdraw( \naddress indexed user, \nuint256 indexed pid, \nuint256 amount \n); \n\nconstructor(IERC20 _rewardToken, \nuint256 _startBlock, \nuint256 _bonusEndBlock) public  { \nstartBlock = _startBlock; \nbonusEndBlock = _bonusEndBlock; \nrewardToken = _rewardToken; \ndecimal = 10**10; \n} \n\n\n//add lpToken for pool \nfunction deposit(uint256 _pid, uint256 _amount) public { \nPoolInfo storage pool = poolInfo[_pid]; \nUserInfo storage user = userInfo[_pid][msg.sender]; \n\nupdatePool(_pid); \nif (user.amount > 0) { \nuint256 pending = \nuser.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal).sub( \nuser.rewardDebt \n); \nif (pending > 0) { \nrewardToken.safeTransfer(address(msg.sender), pending); \n} \n} \n\nif (_amount > 0) { \npool.lpToken.safeTransferFrom( \naddress(msg.sender), \naddress(this), \n_amount \n); \nuser.amount = user.amount.add(_amount); \n} \nuser.rewardDebt = user.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal); \n\nif (contains(msg.sender) == false){ \npool.accounts.push(msg.sender); \ntotalAccounts.push(msg.sender); \nsetWallet(msg.sender); \n} \n\nemit Deposit(msg.sender, _pid, _amount); \n} \n\n\n// harvest ADAM tokens from AdamRewardPool. \nfunction emergencyRewardWithdraw(uint256 _amount) public onlyOwner { \nrequire( \n_amount < rewardToken.balanceOf(address(this)), \n\"not enough token\" \n); \n\nrewardToken.safeTransfer(address(msg.sender), _amount); \n} \n\nfunction poolLength() external view returns (uint256) { \nreturn poolInfo.length; \n} \n\nfunction setMaxStaking( \nuint256 _pid, \nuint256 _maxStaking \n) public onlyOwner { \npoolInfo[_pid].maxStaking = _maxStaking; \n} \n\n\nfunction stopReward() public onlyOwner { \nbonusEndBlock = block.number; \n} \n\n//set bounus end bolck \nfunction setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner { \nbonusEndBlock = _bonusEndBlock; \n} \n\n//set reward per bolck \nfunction setRewardPerBlock(uint256 _pid, uint256 _rewardPerBlock) public onlyOwner { \nPoolInfo storage pool = poolInfo[_pid]; \npool.rewardPerBlock = _rewardPerBlock; \n} \n\n//get lp token supply \nfunction getLpSupply(uint256 _pid)  external view returns (uint256) { \nPoolInfo storage pool = poolInfo[_pid]; \nuint256 lpSupply = pool.lpToken.balanceOf(address(this)); \nreturn lpSupply; \n} \n\nfunction getBlockNum()  public view onlyOwner returns (uint256) { \nuint256 blNum = block.number; \nreturn blNum; \n} \n\nfunction getAccounts()  public view onlyOwner returns (address[] memory) { \nreturn totalAccounts; \n} \n\nfunction getAccountsLength()  public view onlyOwner returns (uint256) { \nreturn totalAccounts.length; \n} \n\nfunction getPoolAccounts(uint256 _pid)  public view onlyOwner returns (address[] memory) { \nPoolInfo storage pool = poolInfo[_pid]; \nreturn pool.accounts; \n} \n\nfunction getPoolAccountsLength(uint256 _pid)  public view onlyOwner returns (uint256) { \nPoolInfo storage pool = poolInfo[_pid]; \nreturn pool.accounts.length; \n} \n\nfunction setWallet(address _wallet) internal{ \nWallets[_wallet] = true; \n} \n\nfunction contains(address _wallet) internal view returns (bool){ \nreturn Wallets[_wallet]; \n} \n\n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol'; \nimport {WadRayMath} from '../libraries/math/WadRayMath.sol'; \nimport {Errors} from '../libraries/helpers/Errors.sol'; \nimport {DebtTokenBase} from './base/DebtTokenBase.sol'; \nimport {ILendingPool} from '../../interfaces/ILendingPool.sol'; \nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol'; \n\n/** \n* @title VariableDebtToken \n* @notice Implements a variable debt token to track the borrowing positions of users \n* at variable rate mode \n* @author Aave \n**/ \ncontract VariableDebtToken is DebtTokenBase, IVariableDebtToken { \nusing WadRayMath for uint256; \n\nuint256 public constant DEBT_TOKEN_REVISION = 0x1; \n\nILendingPool internal _pool; \naddress internal _underlyingAsset; \nIAaveIncentivesController internal _incentivesController; \n\n/** \n* @dev Initializes the debt token. \n* @param pool The address of the lending pool where this aToken will be used \n* @param underlyingAsset The address of the underlying asset of this aToken (E.g. WETH for aWETH) \n* @param incentivesController The smart contract managing potential incentives distribution \n* @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's \n* @param debtTokenName The name of the token \n* @param debtTokenSymbol The symbol of the token \n*/ \nfunction initialize( \nILendingPool pool, \naddress underlyingAsset, \nIAaveIncentivesController incentivesController, \nuint8 debtTokenDecimals, \nstring memory debtTokenName, \nstring memory debtTokenSymbol, \nbytes calldata params \n) public override initializer { \n_setName(debtTokenName); \n_setSymbol(debtTokenSymbol); \n_setDecimals(debtTokenDecimals); \n\n_pool = pool; \n_underlyingAsset = underlyingAsset; \n_incentivesController = incentivesController; \n\nemit Initialized( \nunderlyingAsset, \naddress(pool), \naddress(incentivesController), \ndebtTokenDecimals, \ndebtTokenName, \ndebtTokenSymbol, \nparams \n); \n} \n\n/** \n* @dev Gets the revision of the stable debt token implementation \n* @return The debt token implementation revision \n**/ \nfunction getRevision() internal pure virtual override returns (uint256) { \nreturn DEBT_TOKEN_REVISION; \n} \n\n/** \n* @dev Calculates the accumulated debt balance of the user \n* @return The debt balance of the user \n**/ \nfunction balanceOf(address user) public view virtual override returns (uint256) { \nuint256 scaledBalance = super.balanceOf(user); \n\nif (scaledBalance == 0) { \nreturn 0; \n} \n\nreturn scaledBalance.rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset)); \n} \n\n/** \n* @dev Mints debt token to the `onBehalfOf` address \n* -  Only callable by the LendingPool \n* @param user The address receiving the borrowed underlying, being the delegatee in case \n* of credit delegate, or same as `onBehalfOf` otherwise \n* @param onBehalfOf The address receiving the debt tokens \n* @param amount The amount of debt being minted \n* @param index The variable debt index of the reserve \n* @return `true` if the the previous balance of the user is 0 \n**/ \nfunction mint( \naddress user, \naddress onBehalfOf, \nuint256 amount, \nuint256 index \n) external override onlyLendingPool returns (bool) { \nif (user != onBehalfOf) { \n_decreaseBorrowAllowance(onBehalfOf, user, amount); \n} \n\nuint256 previousBalance = super.balanceOf(onBehalfOf); \nuint256 amountScaled = amount.rayDiv(index); \nrequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT); \n\n_mint(onBehalfOf, amountScaled); \n\nemit Transfer(address(0), onBehalfOf, amount); \nemit Mint(user, onBehalfOf, amount, index); \n\nreturn previousBalance == 0; \n} \n\n/** \n* @dev Burns user variable debt \n* - Only callable by the LendingPool \n* @param user The user whose debt is getting burned \n* @param amount The amount getting burned \n* @param index The variable debt index of the reserve \n**/ \nfunction burn( \naddress user, \nuint256 amount, \nuint256 index \n) external override onlyLendingPool { \nuint256 amountScaled = amount.rayDiv(index); \nrequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT); \n\n_burn(user, amountScaled); \n\nemit Transfer(user, address(0), amount); \nemit Burn(user, amount, index); \n} \n\n/** \n* @dev Returns the principal debt balance of the user from \n* @return The debt balance of the user since the last burn/mint action \n**/ \nfunction scaledBalanceOf(address user) public view virtual override returns (uint256) { \nreturn super.balanceOf(user); \n} \n\n/** \n* @dev Returns the total supply of the variable debt token. Represents the total debt accrued by t\n* @return The total supply \n**/ \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn super.totalSupply().rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset)); \n} \n\n/** \n* @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index) \n* @return the scaled total supply \n**/ \nfunction scaledTotalSupply() public view virtual override returns (uint256) { \nreturn super.totalSupply(); \n} \n\n/** \n* @dev Returns the principal balance of the user and principal total supply. \n* @param user The address of the user \n* @return The principal balance of the user \n* @return The principal total supply \n**/ \nfunction getScaledUserBalanceAndSupply(address user) \nexternal \nview \noverride \nreturns (uint256, uint256) \n{ \nreturn (super.balanceOf(user), super.totalSupply()); \n} \n\n/** \n* @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH) \n**/ \nfunction UNDERLYING_ASSET_ADDRESS() public view returns (address) { \nreturn _underlyingAsset; \n} \n\n/** \n* @dev Returns the address of the incentives controller contract \n**/ \nfunction getIncentivesController() external view override returns (IAaveIncentivesController) { \nreturn _getIncentivesController(); \n} \n\n/** \n* @dev Returns the address of the lending pool where this aToken is used \n**/ \nfunction POOL() public view returns (ILendingPool) { \nreturn _pool; \n} \n\nfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) { \nreturn _incentivesController; \n} \n\nfunction _getUnderlyingAssetAddress() internal view override returns (address) { \nreturn _underlyingAsset; \n} \n\nfunction _getLendingPool() internal view override returns (ILendingPool) { \nreturn _pool; \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {IERC20Detailed} from '../dependencies/openzeppelin/contracts/IERC20Detailed.sol'; \nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol'; \nimport {IUiPoolDataProvider} from './interfaces/IUiPoolDataProvider.sol'; \nimport {ILendingPool} from '../interfaces/ILendingPool.sol'; \nimport {IPriceOracleGetter} from '../interfaces/IPriceOracleGetter.sol'; \nimport {IAToken} from '../interfaces/IAToken.sol'; \nimport {IVariableDebtToken} from '../interfaces/IVariableDebtToken.sol'; \nimport {IStableDebtToken} from '../interfaces/IStableDebtToken.sol'; \nimport {WadRayMath} from '../protocol/libraries/math/WadRayMath.sol'; \nimport {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol'; \nimport {UserConfiguration} from '../protocol/libraries/configuration/UserConfiguration.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \nimport { \nDefaultReserveInterestRateStrategy \n} from '../protocol/lendingpool/DefaultReserveInterestRateStrategy.sol'; \n\ncontract UiPoolDataProvider is IUiPoolDataProvider { \nusing WadRayMath for uint256; \nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap; \nusing UserConfiguration for DataTypes.UserConfigurationMap; \n\naddress public constant MOCK_USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96; \n\nfunction getInterestRateStrategySlopes(DefaultReserveInterestRateStrategy interestRateStrategy) \ninternal \nview \nreturns ( \nuint256, \nuint256, \nuint256, \nuint256 \n) \n{ \nreturn ( \ninterestRateStrategy.variableRateSlope1(), \ninterestRateStrategy.variableRateSlope2(), \ninterestRateStrategy.stableRateSlope1(), \ninterestRateStrategy.stableRateSlope2() \n); \n} \n\nfunction getReservesData(ILendingPoolAddressesProvider provider, address user) \nexternal \nview \noverride \nreturns ( \nAggregatedReserveData[] memory, \nUserReserveData[] memory, \nuint256 \n) \n{ \nILendingPool lendingPool = ILendingPool(provider.getLendingPool()); \nIPriceOracleGetter oracle = IPriceOracleGetter(provider.getPriceOracle()); \naddress[] memory reserves = lendingPool.getReservesList(); \nDataTypes.UserConfigurationMap memory userConfig = lendingPool.getUserConfiguration(user); \n\nAggregatedReserveData[] memory reservesData = new AggregatedReserveData[](reserves.length); \nUserReserveData[] memory userReservesData = \nnew UserReserveData[](user != address(0) ? reserves.length : 0); \n\nfor (uint256 i = 0; i < reserves.length; i++) { \nAggregatedReserveData memory reserveData = reservesData[i]; \nreserveData.underlyingAsset = reserves[i]; \n\n// reserve current state \nDataTypes.ReserveData memory baseData = \nlendingPool.getReserveData(reserveData.underlyingAsset); \nreserveData.liquidityIndex = baseData.liquidityIndex; \nreserveData.variableBorrowIndex = baseData.variableBorrowIndex; \nreserveData.liquidityRate = baseData.currentLiquidityRate; \nreserveData.variableBorrowRate = baseData.currentVariableBorrowRate; \nreserveData.stableBorrowRate = baseData.currentStableBorrowRate; \nreserveData.lastUpdateTimestamp = baseData.lastUpdateTimestamp; \nreserveData.aTokenAddress = baseData.aTokenAddress; \nreserveData.stableDebtTokenAddress = baseData.stableDebtTokenAddress; \nreserveData.variableDebtTokenAddress = baseData.variableDebtTokenAddress; \nreserveData.interestRateStrategyAddress = baseData.interestRateStrategyAddress; \nreserveData.priceInEth = oracle.getAssetPrice(reserveData.underlyingAsset); \n\nreserveData.availableLiquidity = IERC20Detailed(reserveData.underlyingAsset).balanceOf( \nreserveData.aTokenAddress \n); \n( \nreserveData.totalPrincipalStableDebt, \n, \nreserveData.averageStableRate, \nreserveData.stableDebtLastUpdateTimestamp \n) = IStableDebtToken(reserveData.stableDebtTokenAddress).getSupplyData(); \nreserveData.totalScaledVariableDebt = IVariableDebtToken(reserveData.variableDebtTokenAddress) \n.scaledTotalSupply(); \n\n// reserve configuration \n\n// we're getting this info from the aToken, because some of assets can be not compliant with ET\nreserveData.symbol = IERC20Detailed(reserveData.aTokenAddress).symbol(); \nreserveData.name = ''; \n\n( \nreserveData.baseLTVasCollateral, \nreserveData.reserveLiquidationThreshold, \nreserveData.reserveLiquidationBonus, \nreserveData.decimals, \nreserveData.reserveFactor \n) = baseData.configuration.getParamsMemory(); \n( \nreserveData.isActive, \nreserveData.isFrozen, \nreserveData.borrowingEnabled, \nreserveData.stableBorrowRateEnabled \n) = baseData.configuration.getFlagsMemory(); \nreserveData.usageAsCollateralEnabled = reserveData.baseLTVasCollateral != 0; \n( \nreserveData.variableRateSlope1, \nreserveData.variableRateSlope2, \nreserveData.stableRateSlope1, \nreserveData.stableRateSlope2 \n) = getInterestRateStrategySlopes( \nDefaultReserveInterestRateStrategy(reserveData.interestRateStrategyAddress) \n); \n\nif (user != address(0)) { \n// user reserve data \nuserReservesData[i].underlyingAsset = reserveData.underlyingAsset; \nuserReservesData[i].scaledATokenBalance = IAToken(reserveData.aTokenAddress) \n.scaledBalanceOf(user); \nuserReservesData[i].usageAsCollateralEnabledOnUser = userConfig.isUsingAsCollateral(i); \n\nif (userConfig.isBorrowing(i)) { \nuserReservesData[i].scaledVariableDebt = IVariableDebtToken( \nreserveData \n.variableDebtTokenAddress \n) \n.scaledBalanceOf(user); \nuserReservesData[i].principalStableDebt = IStableDebtToken( \nreserveData \n.stableDebtTokenAddress \n) \n.principalBalanceOf(user); \nif (userReservesData[i].principalStableDebt != 0) { \nuserReservesData[i].stableBorrowRate = IStableDebtToken( \nreserveData \n.stableDebtTokenAddress \n) \n.getUserStableRate(user); \nuserReservesData[i].stableBorrowLastUpdateTimestamp = IStableDebtToken( \nreserveData \n.stableDebtTokenAddress \n) \n.getUserLastUpdated(user); \n} \n} \n} \n} \nreturn (reservesData, userReservesData, oracle.getAssetPrice(MOCK_USD_ADDRESS)); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {IERC20Detailed} from '../dependencies/openzeppelin/contracts/IERC20Detailed.sol'; \nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol'; \nimport {ILendingPool} from '../interfaces/ILendingPool.sol'; \nimport {IStableDebtToken} from '../interfaces/IStableDebtToken.sol'; \nimport {IVariableDebtToken} from '../interfaces/IVariableDebtToken.sol'; \nimport {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol'; \nimport {UserConfiguration} from '../protocol/libraries/configuration/UserConfiguration.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \n\ncontract AaveProtocolDataProvider { \nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap; \nusing UserConfiguration for DataTypes.UserConfigurationMap; \n\naddress constant MKR = 0x9f8F72aA9304c8B593d555F12eF6589cC3A579A2; \naddress constant ETH = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE; \n\nstruct TokenData { \nstring symbol; \naddress tokenAddress; \n} \n\nILendingPoolAddressesProvider public immutable ADDRESSES_PROVIDER; \n\nconstructor(ILendingPoolAddressesProvider addressesProvider) public { \nADDRESSES_PROVIDER = addressesProvider; \n} \n\nfunction getAllReservesTokens() external view returns (TokenData[] memory) { \nILendingPool pool = ILendingPool(ADDRESSES_PROVIDER.getLendingPool()); \naddress[] memory reserves = pool.getReservesList(); \nTokenData[] memory reservesTokens = new TokenData[](reserves.length); \nfor (uint256 i = 0; i < reserves.length; i++) { \nif (reserves[i] == MKR) { \nreservesTokens[i] = TokenData({symbol: 'MKR', tokenAddress: reserves[i]}); \ncontinue; \n} \nif (reserves[i] == ETH) { \nreservesTokens[i] = TokenData({symbol: 'ETH', tokenAddress: reserves[i]}); \ncontinue; \n} \nreservesTokens[i] = TokenData({ \nsymbol: IERC20Detailed(reserves[i]).symbol(), \ntokenAddress: reserves[i] \n}); \n} \nreturn reservesTokens; \n} \n\nfunction getAllATokens() external view returns (TokenData[] memory) { \nILendingPool pool = ILendingPool(ADDRESSES_PROVIDER.getLendingPool()); \naddress[] memory reserves = pool.getReservesList(); \nTokenData[] memory aTokens = new TokenData[](reserves.length); \nfor (uint256 i = 0; i < reserves.length; i++) { \nDataTypes.ReserveData memory reserveData = pool.getReserveData(reserves[i]); \naTokens[i] = TokenData({ \nsymbol: IERC20Detailed(reserveData.aTokenAddress).symbol(), \ntokenAddress: reserveData.aTokenAddress \n}); \n} \nreturn aTokens; \n} \n\nfunction getReserveConfigurationData(address asset) \nexternal \nview \nreturns ( \nuint256 decimals, \nuint256 ltv, \nuint256 liquidationThreshold, \nuint256 liquidationBonus, \nuint256 reserveFactor, \nbool usageAsCollateralEnabled, \nbool borrowingEnabled, \nbool stableBorrowRateEnabled, \nbool isActive, \nbool isFrozen \n) \n{ \nDataTypes.ReserveConfigurationMap memory configuration = \nILendingPool(ADDRESSES_PROVIDER.getLendingPool()).getConfiguration(asset); \n\n(ltv, liquidationThreshold, liquidationBonus, decimals, reserveFactor) = configuration \n.getParamsMemory(); \n\n(isActive, isFrozen, borrowingEnabled, stableBorrowRateEnabled) = configuration \n.getFlagsMemory(); \n\nusageAsCollateralEnabled = liquidationThreshold > 0; \n} \n\nfunction getReserveData(address asset) \nexternal \nview \nreturns ( \nuint256 availableLiquidity, \nuint256 totalStableDebt, \nuint256 totalVariableDebt, \nuint256 liquidityRate, \nuint256 variableBorrowRate, \nuint256 stableBorrowRate, \nuint256 averageStableBorrowRate, \nuint256 liquidityIndex, \nuint256 variableBorrowIndex, \nuint40 lastUpdateTimestamp \n) \n{ \nDataTypes.ReserveData memory reserve = \nILendingPool(ADDRESSES_PROVIDER.getLendingPool()).getReserveData(asset); \n\nreturn ( \nIERC20Detailed(asset).balanceOf(reserve.aTokenAddress), \nIERC20Detailed(reserve.stableDebtTokenAddress).totalSupply(), \nIERC20Detailed(reserve.variableDebtTokenAddress).totalSupply(), \nreserve.currentLiquidityRate, \nreserve.currentVariableBorrowRate, \nreserve.currentStableBorrowRate, \nIStableDebtToken(reserve.stableDebtTokenAddress).getAverageStableRate(), \nreserve.liquidityIndex, \nreserve.variableBorrowIndex, \nreserve.lastUpdateTimestamp \n); \n} \n\nfunction getUserReserveData(address asset, address user) \nexternal \nview \nreturns ( \nuint256 currentATokenBalance, \nuint256 currentStableDebt, \nuint256 currentVariableDebt, \nuint256 principalStableDebt, \nuint256 scaledVariableDebt, \nuint256 stableBorrowRate, \nuint256 liquidityRate, \nuint40 stableRateLastUpdated, \nbool usageAsCollateralEnabled \n) \n{ \nDataTypes.ReserveData memory reserve = \nILendingPool(ADDRESSES_PROVIDER.getLendingPool()).getReserveData(asset); \n\nDataTypes.UserConfigurationMap memory userConfig = \nILendingPool(ADDRESSES_PROVIDER.getLendingPool()).getUserConfiguration(user); \n\ncurrentATokenBalance = IERC20Detailed(reserve.aTokenAddress).balanceOf(user); \ncurrentVariableDebt = IERC20Detailed(reserve.variableDebtTokenAddress).balanceOf(user); \ncurrentStableDebt = IERC20Detailed(reserve.stableDebtTokenAddress).balanceOf(user); \nprincipalStableDebt = IStableDebtToken(reserve.stableDebtTokenAddress).principalBalanceOf(user); \nscaledVariableDebt = IVariableDebtToken(reserve.variableDebtTokenAddress).scaledBalanceOf(user); \nliquidityRate = reserve.currentLiquidityRate; \nstableBorrowRate = IStableDebtToken(reserve.stableDebtTokenAddress).getUserStableRate(user); \nstableRateLastUpdated = IStableDebtToken(reserve.stableDebtTokenAddress).getUserLastUpdated( \nuser \n); \nusageAsCollateralEnabled = userConfig.isUsingAsCollateral(reserve.id); \n} \n\nfunction getReserveTokensAddresses(address asset) \nexternal \nview \nreturns ( \naddress aTokenAddress, \naddress stableDebtTokenAddress, \naddress variableDebtTokenAddress \n) \n{ \nDataTypes.ReserveData memory reserve = \nILendingPool(ADDRESSES_PROVIDER.getLendingPool()).getReserveData(asset); \n\nreturn ( \nreserve.aTokenAddress, \nreserve.stableDebtTokenAddress, \nreserve.variableDebtTokenAddress \n); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {Ownable} from '../dependencies/openzeppelin/contracts/Ownable.sol'; \nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport {IWETH} from './interfaces/IWETH.sol'; \nimport {IWETHGateway} from './interfaces/IWETHGateway.sol'; \nimport {ILendingPool} from '../interfaces/ILendingPool.sol'; \nimport {IAToken} from '../interfaces/IAToken.sol'; \nimport {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol'; \nimport {UserConfiguration} from '../protocol/libraries/configuration/UserConfiguration.sol'; \nimport {Helpers} from '../protocol/libraries/helpers/Helpers.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \n\ncontract WETHGateway is IWETHGateway, Ownable { \nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap; \nusing UserConfiguration for DataTypes.UserConfigurationMap; \n\nIWETH internal immutable WETH; \n\n/** \n* @dev Sets the WETH address and the LendingPoolAddressesProvider address. Infinite approves lendi\n* @param weth Address of the Wrapped Ether contract \n**/ \nconstructor(address weth) public { \nWETH = IWETH(weth); \n} \n\nfunction authorizeLendingPool(address lendingPool) external onlyOwner { \nWETH.approve(lendingPool, uint256(-1)); \n} \n\n/** \n* @dev deposits WETH into the reserve, using native ETH. A corresponding amount of the overlying a\n* is minted. \n* @param lendingPool address of the targeted underlying lending pool \n* @param onBehalfOf address of the user who will receive the aTokens representing the deposit \n* @param referralCode integrators are assigned a referral code and can potentially receive rewards\n**/ \nfunction depositETH( \naddress lendingPool, \naddress onBehalfOf, \nuint16 referralCode \n) external payable override { \nWETH.deposit{value: msg.value}(); \nILendingPool(lendingPool).deposit(address(WETH), msg.value, onBehalfOf, referralCode); \n} \n\n/** \n* @dev withdraws the WETH _reserves of msg.sender. \n* @param lendingPool address of the targeted underlying lending pool \n* @param amount amount of aWETH to withdraw and receive native ETH \n* @param to address of the user who will receive native ETH \n*/ \nfunction withdrawETH( \naddress lendingPool, \nuint256 amount, \naddress to \n) external override { \nIAToken aWETH = IAToken(ILendingPool(lendingPool).getReserveData(address(WETH)).aTokenAddress); \nuint256 userBalance = aWETH.balanceOf(msg.sender); \nuint256 amountToWithdraw = amount; \n\n// if amount is equal to uint(-1), the user wants to redeem everything \nif (amount == type(uint256).max) { \namountToWithdraw = userBalance; \n} \naWETH.transferFrom(msg.sender, address(this), amountToWithdraw); \nILendingPool(lendingPool).withdraw(address(WETH), amountToWithdraw, address(this)); \nWETH.withdraw(amountToWithdraw); \n_safeTransferETH(to, amountToWithdraw); \n} \n\n/** \n* @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if \n* @param lendingPool address of the targeted underlying lending pool \n* @param amount the amount to repay, or uint256(-1) if the user wants to repay everything \n* @param rateMode the rate mode to repay \n* @param onBehalfOf the address for which msg.sender is repaying \n*/ \nfunction repayETH( \naddress lendingPool, \nuint256 amount, \nuint256 rateMode, \naddress onBehalfOf \n) external payable override { \n(uint256 stableDebt, uint256 variableDebt) = \nHelpers.getUserCurrentDebtMemory( \nonBehalfOf, \nILendingPool(lendingPool).getReserveData(address(WETH)) \n); \n\nuint256 paybackAmount = \nDataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE \n? stableDebt \n: variableDebt; \n\nif (amount < paybackAmount) { \npaybackAmount = amount; \n} \nrequire(msg.value >= paybackAmount, 'msg.value is less than repayment amount'); \nWETH.deposit{value: paybackAmount}(); \nILendingPool(lendingPool).repay(address(WETH), msg.value, rateMode, onBehalfOf); \n\n// refund remaining dust eth \nif (msg.value > paybackAmount) _safeTransferETH(msg.sender, msg.value - paybackAmount); \n} \n\n/** \n* @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approv\n* @param lendingPool address of the targeted underlying lending pool \n* @param amount the amount of ETH to borrow \n* @param interesRateMode the interest rate mode \n* @param referralCode integrators are assigned a referral code and can potentially receive rewards\n*/ \nfunction borrowETH( \naddress lendingPool, \nuint256 amount, \nuint256 interesRateMode, \nuint16 referralCode \n) external override { \nILendingPool(lendingPool).borrow( \naddress(WETH), \namount, \ninteresRateMode, \nreferralCode, \nmsg.sender \n); \nWETH.withdraw(amount); \n_safeTransferETH(msg.sender, amount); \n} \n\n/** \n* @dev transfer ETH to an address, revert if it fails. \n* @param to recipient of the transfer \n* @param value the amount to send \n*/ \nfunction _safeTransferETH(address to, uint256 value) internal { \n(bool success, ) = to.call{value: value}(new bytes(0)); \nrequire(success, 'ETH_TRANSFER_FAILED'); \n} \n\n/** \n* @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due \n* direct transfers to the contract address. \n* @param token token to transfer \n* @param to recipient of the transfer \n* @param amount amount to send \n*/ \nfunction emergencyTokenTransfer( \naddress token, \naddress to, \nuint256 amount \n) external onlyOwner { \nIERC20(token).transfer(to, amount); \n} \n\n/** \n* @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck \n* due selfdestructs or transfer ether to pre-computated contract address before deployment. \n* @param to recipient of the transfer \n* @param amount amount to send \n*/ \nfunction emergencyEtherTransfer(address to, uint256 amount) external onlyOwner { \n_safeTransferETH(to, amount); \n} \n\n/** \n* @dev Get WETH address used by WETHGateway \n*/ \nfunction getWETHAddress() external view returns (address) { \nreturn address(WETH); \n} \n\n/** \n* @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether t\n*/ \nreceive() external payable { \nrequire(msg.sender == address(WETH), 'Receive not allowed'); \n} \n\n/** \n* @dev Revert fallback calls \n*/ \nfallback() external payable { \nrevert('Fallback not allowed'); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.8.0; \n\nimport {SafeMath} from \"../libs/SafeMath.sol\"; \nimport {SafeCast} from \"../libs/SafeCast.sol\"; \nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \nimport {Ownable} from  \"@openzeppelin/contracts/access/Ownable.sol\"; \nimport {IRewardDistributor} from \"../interfaces/IRewardDistributor.sol\"; \n\ncontract FeeCollector is  Ownable { \nusing SafeMath for uint; \nusing SafeCast for uint; \n\nuint totalBNBRecieved; \nuint totalBUSDRecieved; \nuint totalBIBRecieved; \n\nmapping(address=>bool) protocolAddress; \n\nuint public vaultRatio; \nuint public constant FEE_RATIO_DIV = 1000; \n\nIRewardDistributor rewardDistributor; \naddress vault; \n\nIERC20 bibToken; \nIERC20 busdToken; \n\nenum TokenType{ \nTOKEN_TYPE_ETH, \nTOKEN_TYPE_BIB, \nTOKEN_TYPE_BUSD \n}  \n\nevent VaultChanged(address sender, address oldValue, address newValue); \nevent BIBContractChanged(address sender, address oldValue, address newValue); \nevent BUSDContractChanged(address sender, address oldValue, address newValue); \nevent VaultRatioChanged(address sender, uint oldValue, uint newValue); \nevent RewardDistributorChanged(address sender, address oldValue, address newValue); \nevent HandleCollect(address sender, uint vault, uint reward, TokenType tokenType); \n\nconstructor( \naddress _vault, \naddress _bibToken, \naddress _busdToken, \naddress _rewardDistributor \n){ \nvault = _vault; \nbibToken = IERC20(_bibToken); \nbusdToken = IERC20(_busdToken); \nrewardDistributor = IRewardDistributor(_rewardDistributor); \n} \n\nfunction setBIBContract(address _bibToken) public onlyOwner{ \nrequire(address(0) != _bibToken, \"INVALID_ADDRESS\"); \nemit BIBContractChanged(msg.sender, address(bibToken), _bibToken); \nbibToken = IERC20(_bibToken); \n} \n\nfunction setRewardDistributor(address _rewardDistributor) public onlyOwner{ \nrequire(address(0) != _rewardDistributor, \"INVALID_ADDRESS\"); \nemit RewardDistributorChanged(msg.sender, address(rewardDistributor), _rewardDistributor); \nrewardDistributor = IRewardDistributor(_rewardDistributor); \n} \n\nfunction setBUSDContract(address _busdToken) public onlyOwner{ \nrequire(address(0) != _busdToken, \"INVALID_ADDRESS\"); \nemit BUSDContractChanged(msg.sender, address(busdToken), _busdToken); \nbusdToken = IERC20(_busdToken); \n} \n\nfunction setVault(address _vault) public onlyOwner{ \nrequire(address(0) != _vault, \"INVALID_ADDRESS\"); \nemit VaultChanged(msg.sender, address(vault), _vault); \nvault = _vault; \n} \n\nfunction setVaultRatio(uint _vaultRatio) public onlyOwner{ \nrequire(_vaultRatio <= FEE_RATIO_DIV, \"INVALID_RATIO\"); \nemit VaultRatioChanged(msg.sender, vaultRatio, _vaultRatio); \nvaultRatio = _vaultRatio; \n} \n\nfunction addProtocolAdress(address protocolAddr) public onlyOwner{ \nprotocolAddress[protocolAddr] = true; \n} \n\nfunction removeProtocolAddress(address protocolAddr) public onlyOwner{ \ndelete protocolAddress[protocolAddr]; \n} \n\nfunction isProtocolAddress(address protocolAddr) public view returns(bool){ \nreturn protocolAddress[protocolAddr]; \n} \n\nmodifier onlyProtocolAddress(){ \nrequire(protocolAddress[msg.sender], \"ONLY_PROTOCOL_ADDRESS_CAN_CALL\"); \n_; \n} \n\nfunction caculateFees(uint amount) public pure  returns(uint, uint){ \nuint vaultPart =  amount.mul(FEE_RATIO_DIV).div(FEE_RATIO_DIV); \nreturn (vaultPart, amount.sub(vaultPart)); \n} \n\nfunction distributeFees() public onlyOwner(){ \nhandleCollectBIB(bibToken.balanceOf(address(this))); \nhandleCollectBUSD(busdToken.balanceOf(address(this))); \nhandleCollectBNB(address(this).balance); \n} \n\nfunction handleCollectBIB(uint amount) public onlyProtocolAddress{ \nif(address(0) != address(rewardDistributor) && address(0) != vault){ \n(uint vaultPart, uint rewardPart) = caculateFees(amount); \nbibToken.transfer(vault, vaultPart); \nbibToken.transfer(address(rewardDistributor), rewardPart); \nrewardDistributor.distributeBIBReward(amount); \nemit HandleCollect(msg.sender, vaultPart, rewardPart, TokenType.TOKEN_TYPE_BIB); \n} \n} \n\nfunction handleCollectBUSD(uint amount) public onlyProtocolAddress{ \nif(address(0) != address(rewardDistributor) && address(0) != vault){ \n(uint vaultPart, uint rewardPart) = caculateFees(amount); \nbusdToken.transfer(vault, vaultPart); \nbusdToken.transfer(address(rewardDistributor), rewardPart); \nrewardDistributor.distributeBUSDReward(amount); \nemit HandleCollect(msg.sender, vaultPart, rewardPart, TokenType.TOKEN_TYPE_BUSD); \n} \n} \n\nfunction handleCollectBNB(uint amount) public onlyProtocolAddress{ \nif(address(0) != address(rewardDistributor) && address(0) != vault){ \n(uint vaultPart, uint rewardPart) = caculateFees(amount); \npayable(vault).transfer(vaultPart); \nrewardDistributor.distributeETHReward{value:rewardPart}(amount); \nemit HandleCollect(msg.sender, vaultPart, rewardPart, TokenType.TOKEN_TYPE_BUSD); \n} \n} \n} \n\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n// CAUTION \n// This version of SafeMath should only be used with Solidity 0.8 or later, \n// because it relies on the compiler's built in overflow checks. \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations. \n* \n* NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler \n* now has built in overflow checking. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a + b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a * b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n} \n\n\n// File contracts/IBep20.sol \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\nimport \"./libraries/SafeMath.sol\"; \nimport \"./libraries/Address.sol\"; \nimport \"./libraries/Context.sol\"; \nimport \"./interfaces/IVToken.sol\"; \nimport \"./interfaces/IVTokenFactory.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \n\ncontract VToken is IVToken, Context, IERC20 { \naddress public factory; \naddress public override ETHToken; \nusing SafeMath for uint256; \nusing Address for address; \nmapping(address => uint256) private _balances; \nmapping(address => mapping(address => uint256)) private _allowances; \nuint256 private _totalSupply; \nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \nevent Mint(address indexed from, uint256 value); \nevent Burn(address indexed from, uint256 value); \n\nconstructor() { \nfactory = msg.sender; \n} \n\nfunction initialize( \naddress token, \nstring memory tokenName, \nstring memory tokenSymbol, \nuint8 tokenDecimals \n) external override { \nrequire(msg.sender == factory, \"FORBIDDEN\"); \nrequire(token != address(0)); \nETHToken = token; \n_name = tokenName; \n_symbol = tokenSymbol; \n_decimals = tokenDecimals; \n} \n\nuint256 private unlocked = 1; \nmodifier lock() { \nrequire(unlocked == 1, \"LOCKED\"); \nunlocked = 0; \n_; \nunlocked = 1; \n} \n\nbytes4 private constant SELECTOR = \nbytes4(keccak256(bytes(\"transfer(address,uint256)\"))); \n\nfunction _safeTransfer( \naddress token, \naddress to, \nuint256 value \n) private { \n(bool success, bytes memory data) = token.call( \nabi.encodeWithSelector(SELECTOR, to, value) \n); \nrequire( \nsuccess && (data.length == 0 || abi.decode(data, (bool))), \n\"TRANSFER_FAILED\" \n); \n} \n\nfunction mint(address spender, uint256 amount) external override { \nrequire( \nIVTokenFactory(factory).bridgeControl() == msg.sender, \n\"Ownable: caller is not the owner\" \n); \n_mint(spender, amount); \nemit Mint(spender, amount); \n} \n\nfunction burn(address spender, uint256 amount) external override { \nrequire( \nIVTokenFactory(factory).bridgeControl() == msg.sender, \n\"Ownable: caller is not the owner\" \n); \n_burn(spender, amount); \nemit Burn(spender, amount); \n} \n\nfunction name() public view returns (string memory) { \nreturn _name; \n} \n\nfunction symbol() public view returns (string memory) { \nreturn _symbol; \n} \n\nfunction decimals() public view override returns (uint8) { \nreturn _decimals; \n} \n\nfunction totalSupply() public view override returns (uint256) { \nreturn _totalSupply; \n} \n\nfunction balanceOf(address account) public view override returns (uint256) { \nreturn _balances[account]; \n} \n\nfunction transfer(address recipient, uint256 amount) \npublic \nvirtual \noverride \nreturns (bool) \n{ \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\nfunction allowance(address owner, address spender) \npublic \nview \nvirtual \noverride \nreturns (uint256) \n{ \nreturn _allowances[owner][spender]; \n} \n\nfunction approve(address spender, uint256 amount) \npublic \nvirtual \noverride \nreturns (bool) \n{ \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n_approve( \nsender, \n_msgSender(), \n_allowances[sender][_msgSender()].sub( \namount, \n\"ERC20: transfer amount exceeds allowance\" \n) \n); \nreturn true; \n} \n\nfunction increaseAllowance(address spender, uint256 addedValue) \npublic \nvirtual \nreturns (bool) \n{ \n_approve( \n_msgSender(), \nspender, \n_allowances[_msgSender()][spender].add(addedValue) \n); \nreturn true; \n} \n\nfunction decreaseAllowance(address spender, uint256 subtractedValue) \npublic \nvirtual \nreturns (bool) \n{ \n_approve( \n_msgSender(), \nspender, \n_allowances[_msgSender()][spender].sub( \nsubtractedValue, \n\"ERC20: decreased allowance below zero\" \n) \n); \nreturn true; \n} \n\nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub( \namount, \n\"ERC20: transfer amount exceeds balance\" \n); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub( \namount, \n\"ERC20: burn amount exceeds balance\" \n); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\nfunction _setupDecimals(uint8 decimals_) internal { \n_decimals = decimals_; \n} \n\nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\nimport \"./interfaces/IUserProxy.sol\"; \nimport \"./libraries/ECDSA.sol\"; \nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\"; \n\ncontract UserProxy is IUserProxy { \nmapping(uint256 => bool) public nonces; \n\n// keccak256(\"ExecTransaction(address to,uint256 value,bytes data,uint8 operation,uint256 nonce)\"\nbytes32 internal constant EXEC_TX_TYPEHASH = \n0xa609e999e2804ed92314c0c662cfdb3c1d8107df2fb6f2e4039093f20d5e6250; \n// bytes32(uint256(keccak256('eip1967.proxy.admin')) - 1) \nbytes32 internal constant ADMIN_SLOT = \n0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103; \n// bytes32(uint256(keccak256('eip1967.proxy.domain')) - 1) \nbytes32 internal constant DOMAIN_SLOT = \n0x5d29634e15c15fa29be556decae8ee5a34c9fee5f209623aed08a64bf865b694; \n\nfunction initialize(address _owner, bytes32 _DOMAIN_SEPARATOR) \nexternal \noverride \n{ \nrequire(owner() == address(0), \"initialize error\"); \nrequire(_owner != address(0), \"ERC1967: new owner is the zero address\"); \nStorageSlot.getAddressSlot(ADMIN_SLOT).value = _owner; \nStorageSlot.getBytes32Slot(DOMAIN_SLOT).value = _DOMAIN_SEPARATOR; \n} \n\nfunction owner() public view override returns (address) { \nreturn StorageSlot.getAddressSlot(ADMIN_SLOT).value; \n} \n\nfunction domain() public view returns (bytes32) { \nreturn StorageSlot.getBytes32Slot(DOMAIN_SLOT).value; \n} \n\nfunction execTransaction( \naddress to, \nuint256 value, \nbytes calldata data, \nOperation operation, \nuint256 nonce, \nbytes memory signature \n) external override { \nrequire(!nonces[nonce], \"nonce had used\"); \nnonces[nonce] = true; \nbytes32 digest = keccak256( \nabi.encodePacked( \n\"\\x19\\x01\", \ndomain(), \nkeccak256( \nabi.encode( \nEXEC_TX_TYPEHASH, \nto, \nvalue, \nkeccak256(data), \noperation, \nnonce \n) \n) \n) \n); \naddress recoveredAddress = ECDSA.recover(digest, signature); \nrequire( \nrecoveredAddress != address(0) && recoveredAddress == owner(), \n\"ECDSA: invalid signature\" \n); \nexecute(to, value, data, operation); \n} \n\nreceive() external payable {} \n\nfallback() external payable {} \n\nfunction execTransaction( \naddress to, \nuint256 value, \nbytes calldata data, \nOperation operation \n) external override { \nrequire(msg.sender == owner(), \"ECDSA: invalid signature\"); \nexecute(to, value, data, operation); \n} \n\nfunction execute( \naddress to, \nuint256 value, \nbytes memory data, \nOperation operation \n) internal { \nif (operation == Operation.DelegateCall) { \nassembly { \nlet result := delegatecall( \ngas(), \nto, \nadd(data, 0x20), \nmload(data), \n0, \n) \nreturndatacopy(0, 0, returndatasize()) \nswitch result \ncase 0 { \nrevert(0, returndatasize()) \n} \ndefault { \nreturn(0, returndatasize()) \n} \n} \n} else { \nassembly { \nlet result := call( \ngas(), \nto, \nvalue, \nadd(data, 0x20), \nmload(data), \n0, \n) \nreturndatacopy(0, 0, returndatasize()) \nswitch result \ncase 0 { \nrevert(0, returndatasize()) \n} \ndefault { \nreturn(0, returndatasize()) \n} \n} \n} \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \npragma experimental ABIEncoderV2; \n\nimport \"@openzeppelin/contracts/access/Ownable.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\"; \nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\"; \n\ninterface IWETH { \nfunction deposit() external payable; \n\nfunction withdraw(uint256) external; \n} \n\ninterface IERC721 { \nfunction mint(address to) external; \n} \n\ncontract AssetManagement is Ownable { \nusing SafeERC20 for IERC20; \nmapping(address => bool) public activeTokens; \naddress[] private contracts; \nmapping(address => bool) public deposited; \nmapping(bytes32 => bool) transactions; \naddress public WETH; \naddress public BANKCARDNFT; \nuint256 public lastTokenId; \n\nevent Deposit(address sender, address token, uint256 value); \nevent DepositForRepay(address sender, address token, uint256 value); \nevent Widthdraw( \naddress reciver, \naddress token, \nuint256 value, \nstring action, \nbytes32 transactionId \n); \nevent WidthdrawETH( \naddress reciver, \nuint256 value, \nstring action, \nbytes32 transactionId \n); \nevent ActiveToken(address token); \nevent PauseToken(address token); \nevent ChangeSigner(address signer, bool flag); \nevent FeeChange(uint256 fee); \n\nconstructor(address _weth, address _bankCardNFT) { \nrequire(_weth != address(0)); \nrequire(_bankCardNFT != address(0)); \nactiveTokens[_weth] = true; \ncontracts.push(_weth); \nWETH = _weth; \nBANKCARDNFT = _bankCardNFT; \n} \n\nfunction deposit(address token, uint256 amount) external { \nrequire(amount > 0, \"Deposit: amount can not be 0\"); \nif (!deposited[msg.sender]) { \ndeposited[msg.sender] = true; \n_mintNFT(msg.sender); \n} \nrequire(activeTokens[token], \"Deposit: token not support\"); \nIERC20(token).safeTransferFrom(msg.sender, address(this), amount); \nemit Deposit(msg.sender, token, amount); \n} \n\nfunction depositForRepay(address token, uint256 amount) external { \nrequire(amount > 0, \"DepositForRepay: amount can not be 0\"); \nif (!deposited[msg.sender]) { \ndeposited[msg.sender] = true; \n_mintNFT(msg.sender); \n} \nrequire(activeTokens[token], \"DepositForRepay: token not support\"); \nIERC20(token).safeTransferFrom(msg.sender, address(this), amount); \nemit DepositForRepay(msg.sender, token, amount); \n} \n\nfunction depositETHForRepay() external payable { \nrequire(msg.value > 0, \"DepositETHForRepay: amount  zero\"); \nif (!deposited[msg.sender]) { \ndeposited[msg.sender] = true; \n_mintNFT(msg.sender); \n} \nIWETH(WETH).deposit{value: msg.value}(); \nemit DepositForRepay(msg.sender, WETH, msg.value); \n} \n\nfunction depositETH() external payable { \nrequire(msg.value > 0, \"DepositETH: amount  zero\"); \nif (!deposited[msg.sender]) { \ndeposited[msg.sender] = true; \n_mintNFT(msg.sender); \n} \nIWETH(WETH).deposit{value: msg.value}(); \nemit Deposit(msg.sender, WETH, msg.value); \n} \n\nfunction withdraw( \nbytes32 transactionId, \naddress token, \naddress to, \nuint256 amount, \nstring memory action \n) public onlyOwner { \nrequire(!transactions[transactionId], \"repeat transactionId \"); \ntransactions[transactionId] = true; \nIERC20(token).safeTransfer(to, amount); \nemit Widthdraw(to, token, amount, action, transactionId); \n} \n\nfunction withdrawETH( \nbytes32 transactionId, \naddress to, \nuint256 amount, \nstring memory action \n) public onlyOwner { \nrequire(!transactions[transactionId], \"repeat transactionId \"); \ntransactions[transactionId] = true; \nIWETH(WETH).withdraw(amount); \n_safeTransferETH(to, amount); \nemit WidthdrawETH(to, amount, action, transactionId); \n} \n\nfunction activeToken(address token) external onlyOwner { \nrequire(!activeTokens[token], \"AddToken: token already supported\"); \ncontracts.push(token); \nactiveTokens[token] = true; \nemit ActiveToken(token); \n} \n\nfunction pauseToken(address token) external onlyOwner { \nrequire(activeTokens[token], \"PauseToken: token not active\"); \nactiveTokens[token] = false; \nemit PauseToken(token); \n} \n\nfunction supportTokens() public view returns (address[] memory) { \nreturn contracts; \n} \n\nfunction userWalletBalance(address user) \npublic \nview \nreturns ( \naddress[] memory, \nuint256[] memory, \nuint256 \n) \n{ \nuint256[] memory balances = new uint256[](contracts.length); \nfor (uint256 i = 0; i < contracts.length; i++) { \nbalances[i] = IERC20(contracts[i]).balanceOf(user); \n} \nuint256 ETHBalance = user.balance; \nreturn (contracts, balances, ETHBalance); \n} \n\nfunction _safeTransferETH(address to, uint256 value) internal { \n(bool success, ) = to.call{value: value}(new bytes(0)); \nrequire(success, \"ETH_TRANSFER_FAILED\"); \n} \n\nfunction _mintNFT(address to) internal { \nIERC721(BANKCARDNFT).mint(to); \n} \n\nfallback() external payable { \nrevert(\"Fallback not allowed\"); \n} \n\n/** \n* @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMathUpgradeable { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n/** \n* @dev Collection of functions related to the address type \n*/ \nlibrary AddressUpgradeable { \n/** \n* @dev Returns true if `account` is a contract. \n* \n* [IMPORTANT] \n* ==== \n* It is unsafe to assume that an address for which this function returns \n* false is an externally-owned account (EOA) and not a contract. \n* \n* Among others, `isContract` will return false for the following \n* types of addresses: \n* \n*  - an externally-owned account \n*  - a contract in construction \n*  - an address where a contract will be created \n*  - an address where a contract lived, but was destroyed \n* ==== \n*/ \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n/** \n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n* `recipient`, forwarding all available gas and reverting on errors. \n* \n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost \n* of certain opcodes, possibly making contracts go over the 2300 gas limit \n* imposed by `transfer`, making them unable to receive funds via \n* `transfer`. {sendValue} removes this limitation. \n* \n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. \n* \n* IMPORTANT: because control is transferred to `recipient`, care must be \n* taken to not create reentrancy vulnerabilities. Consider using \n* {ReentrancyGuard} or the \n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects\n*/ \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n/** \n* @dev Performs a Solidity function call using a low level `call`. A \n* plain`call` is an unsafe replacement for a function call: use this \n* function instead. \n* \n* If `target` reverts with a revert reason, it is bubbled up by this \n* function (like regular Solidity function calls). \n* \n* Returns the raw returned data. To convert to the expected return value, \n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.de\n* \n* Requirements: \n* \n* - `target` must be a contract. \n* - calling `target` with `data` must not revert. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \n* `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but also transferring `value` wei to `target`. \n* \n* Requirements: \n* \n* - the calling contract must have an ETH balance of at least `value`. \n* - the called Solidity function must be `payable`. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n/** \n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValu\n* with `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nSafeBoxFox::TransparentUpgradeableProxy.sol\nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\nMultiSourceOracle.sol\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n/** \n* @dev Collection of functions related to the address type \n*/ \nlibrary AddressUpgradeable { \n/** \n* @dev Returns true if `account` is a contract. \n* \n* [IMPORTANT] \n* ==== \n* It is unsafe to assume that an address for which this function returns \n* false is an externally-owned account (EOA) and not a contract. \n* \n* Among others, `isContract` will return false for the following \n* types of addresses: \n* \n*  - an externally-owned account \n*  - a contract in construction \n*  - an address where a contract will be created \n*  - an address where a contract lived, but was destroyed \n* ==== \n*/ \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n/** \n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n* `recipient`, forwarding all available gas and reverting on errors. \n* \n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost \n* of certain opcodes, possibly making contracts go over the 2300 gas limit \n* imposed by `transfer`, making them unable to receive funds via \n* `transfer`. {sendValue} removes this limitation. \n* \n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. \n* \n* IMPORTANT: because control is transferred to `recipient`, care must be \n* taken to not create reentrancy vulnerabilities. Consider using \n* {ReentrancyGuard} or the \n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects\n*/ \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n/** \n* @dev Performs a Solidity function call using a low level `call`. A \n* plain`call` is an unsafe replacement for a function call: use this \n* function instead. \n* \n* If `target` reverts with a revert reason, it is bubbled up by this \n* function (like regular Solidity function calls). \n* \n* Returns the raw returned data. To convert to the expected return value, \n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.de\n* \n* Requirements: \n* \n* - `target` must be a contract. \n* - calling `target` with `data` must not revert. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \n* `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but also transferring `value` wei to `target`. \n* \n* Requirements: \n* \n* - the calling contract must have an ETH balance of at least `value`. \n* - the called Solidity function must be `payable`. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n/** \n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValu\n* with `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n// solhint-disable-next-line compiler-version \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nSafeBoxFox.sol\nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\n\n\n// fund fee processing \n// some functions of strategy \ncontract StrategyConfig is Ownable, IStrategyConfig { \nusing SafeMath for uint256; \nusing SafeERC20 for IERC20; \n\naddress public feeGather;           // fee gather \naddress public reservedGather;      // reserved gather \n\nmapping (address => mapping(uint256=>uint256) ) public borrowFactor; \nmapping (address => mapping(uint256=>uint256) ) public liquidationFactor; \nmapping (address => mapping(uint256=>uint256) ) public farmPoolFactor; \n\nmapping (address => mapping(uint256=>uint256) ) public depositFee;  // deposit platform fee \nmapping (address => mapping(uint256=>uint256) ) public refundFee;   // reinvestment platform fee \nmapping (address => mapping(uint256=>uint256) ) public withdrawFee; // withdraw rewards platform \nmapping (address => mapping(uint256=>uint256) ) public claimFee;    // claim fee - no used \nmapping (address => mapping(uint256=>uint256) ) public liquidationFee;  // the hunter fee \n\nconstructor() public { \nfeeGather = msg.sender; \nreservedGather = msg.sender; \n} \n\nfunction setFeeGather(address _feeGather) external onlyOwner { \nemit SetFeeGather(feeGather, _feeGather); \nfeeGather = _feeGather; \n} \n\nfunction setReservedGather(address _reservedGather) external onlyOwner { \nemit SetReservedGather(reservedGather, _reservedGather); \nreservedGather = _reservedGather; \n} \n\n// Lending burst \nfunction getBorrowFactor(address _strategy, uint256 _poolid) public override view returns (uint25\nvalue = borrowFactor[_strategy][_poolid]; \n} \n\nfunction checkBorrowAndLiquidation(address _strategy, uint256 _poolid) internal returns (bool bok\nuint256 v = getBorrowFactor(_strategy, _poolid); \nif(v <= 0) { \nreturn true; \n} \n// MaxBorrowAmount = DepositAmount * BorrowFactor \n// MaxBorrowAmount / (DepositAmount + MaxBorrowAmount) * 100.5% < LiquidationFactor \nbok = v.mul(1005e6).div(v.add(1e9)) < getLiquidationFactor(_strategy, _poolid); \n} \n\nfunction setBorrowFactor(address _strategy, uint256 _poolid, uint256 _borrowFactor) external over\nborrowFactor[_strategy][_poolid] = _borrowFactor; \nemit SetBorrowFactor(_strategy, _poolid, _borrowFactor); \nrequire(checkBorrowAndLiquidation(_strategy, _poolid), 'set error'); \n} \n\nfunction getLiquidationFactor(address _strategy, uint256 _poolid) public override view returns (u\nvalue = liquidationFactor[_strategy][_poolid]; \nif(value <= 0) { \nvalue = 8e8;  // 80% for default , 100% will be liquidation \n} \n} \n\nfunction setLiquidationFactor(address _strategy, uint256 _poolid, uint256 _liquidationFactor) ext\nrequire(_liquidationFactor >= 2e8, 'too lower'); \nliquidationFactor[_strategy][_poolid] = _liquidationFactor; \nemit SetLiquidationFactor(_strategy, _poolid, _liquidationFactor); \nrequire(checkBorrowAndLiquidation(_strategy, _poolid), 'set error'); \n} \n\nfunction getFarmPoolFactor(address _strategy, uint256 _poolid) external override view returns (ui\nvalue = farmPoolFactor[_strategy][_poolid]; \n// == 0 no limit and > 0 limit by lptoken amount \n} \n\nfunction setFarmPoolFactor(address _strategy, uint256 _poolid, uint256 _farmPoolFactor) external \nfarmPoolFactor[_strategy][_poolid] = _farmPoolFactor; \nemit SetFarmPoolFactor(_strategy, _poolid, _farmPoolFactor); \n} \n\n// fee config \nfunction getDepositFee(address _strategy, uint256 _poolid) external override view returns (addres\na = feeGather; \nb = depositFee[_strategy][_poolid]; \n} \n\nfunction setDepositFee(address _strategy, uint256 _poolid, uint256 _depositFee) external override\ndepositFee[_strategy][_poolid] = _depositFee; \nemit SetDepositFee(_strategy, _poolid, _depositFee); \n} \n\nfunction getWithdrawFee(address _strategy, uint256 _poolid) external override view returns (addre\na = feeGather; \nb = withdrawFee[_strategy][_poolid]; \n} \n\nfunction setWithdrawFee(address _strategy, uint256 _poolid, uint256 _withdrawFee) external overri\nwithdrawFee[_strategy][_poolid] = _withdrawFee; \nemit SetWithdrawFee(_strategy, _poolid, _withdrawFee); \n} \n\nfunction getRefundFee(address _strategy, uint256 _poolid) external override view returns (address \na = feeGather; \nb = refundFee[_strategy][_poolid]; \n} \n\nfunction setRefundFee(address _strategy, uint256 _poolid, uint256 _refundFee) external override o\nrefundFee[_strategy][_poolid] = _refundFee; \nemit SetRefundFee(_strategy, _poolid, _refundFee); \n} \n\nfunction getClaimFee(address _strategy, uint256 _poolid) external override view returns (address \na = feeGather; \nb = claimFee[_strategy][_poolid]; \n} \n\nfunction setClaimFee(address _strategy, uint256 _poolid, uint256 _claimFee) external override onl\nclaimFee[_strategy][_poolid] = _claimFee; \nemit SetClaimFee(_strategy, _poolid, _claimFee); \n} \n\nfunction getLiquidationFee(address _strategy, uint256 _poolid) external override view returns (ad\na = reservedGather; \nb = liquidationFee[_strategy][_poolid]; \n} \n\nPriceCheckerLPToken::TransparentUpgradeableProxy.sol\nfunction setLiquidationFee(address _strategy, uint256 _poolid, uint256 _liquidationFee) external \nliquidationFee[_strategy][_poolid] = _liquidationFee; \nemit SetLiquidationFee(_strategy, _poolid, _liquidationFee); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \nTenBankHall::TransparentUpgradeableProxy.sol\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \nPriceCheckerLPToken.sol\n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \nDFOXPools::TransparentUpgradeableProxy.sol\n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n/** \n* @dev This contract implements a  proxy that is upgradeable by an\n* \n* To avoid https://medium.com/nomic-labs-blog/malicious-backdoors-in-ethereum-proxies-62629adf3357[proxy sel\n* clashing], which can potentially be used in an  attack, this contract uses \n* https://blog.openzeppelin.com/ the -transparent-proxy-pattern/[transparent proxy patter\n* things that go hand in hand: \n* \n* 1. If any account other than the  admin calls the  proxy, \n* that call matches one of the  admin functions exposed by the\n* 2. If the  admin calls the  proxy, it can access \n* implementation. If the  admin tries to call a  function on \n* \"admin cannot fallback to proxy target\". \n* \n* These properties mean that the  admin account can only be used for admin actions \n* the  admin, so  it's best if it's a\n* to sudden errors when trying to call a  function from the  p\n* \n* Our recommendation is for the  dedicated account to be an\n* you  should  think of the  `Prox\n*/  \ncontract TransparentUpgradeableProxy is UpgradeableProxy { \n/** \n* @dev Initializes an  upgradeable proxy managed by `_admin`, backed by \n* optionally initialized with `_data` as explained in {UpgradeableProxy-constructor}. \n*/  \nconstructor(address _logic, address admin_, bytes memory _data) public payable UpgradeableProxy(_\nassert(_ADMIN_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.admin\")) - 1)); \n_setAdmin(admin_); \n} \n\n/** \n* @dev Emitted when the  admin account has changed. \n*/  \nevent AdminChanged(address previousAdmin, address newAdmin); \n\n/** \n* @dev Storage slot with the  admin of the  contract. \n* This is the  keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is \n* validated in the  constructor. \n*/  \nbytes32 private constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a71785\n\n/** \n* @dev Modifier used internally that will  delegate the  c\n*/  \nmodifier ifAdmin() { \nif (msg.sender == _admin()) { \n_; \n} else { \n_fallback(); \n} \n} \n\n/** \n* @dev Returns the  current admin. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103` \n*/  \nfunction admin() external ifAdmin returns (address admin_) { \nadmin_ = _admin(); \n} \n\n/** \n* @dev Returns the  current implementation. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n* \n* TIP: To get this value clients can read directly from the  storage slot shown below (s\n* https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call. \n* `0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc` \n*/  \nfunction implementation() external ifAdmin returns (address implementation_) { \nimplementation_ = _implementation(); \n} \n\n/** \n* @dev Changes the  admin of the  proxy. \n* \n* Emits an  {AdminChanged} event. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction changeAdmin(address newAdmin) external virtual ifAdmin { \nrequire(newAdmin != address(0), \"TransparentUpgradeableProxy: new admin is the zero address\")\nemit AdminChanged(_admin(), newAdmin); \n_setAdmin(newAdmin); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\n*/  \nfunction upgradeTo(address newImplementation) external virtual ifAdmin { \n_upgradeTo(newImplementation); \n} \n\n/** \n* @dev Upgrade the  implementation of the  proxy, and t\n* by `data`, which should  be an  encoded function call. T\n* proxied contract. \n* \n* NOTE:  Only the  admin can call this function. See {Prox\nStrategyV2CherrySwapPool.sol\n*/  \nfunction upgradeToAndCall(address newImplementation, bytes calldata data) external payable virtua\n_upgradeTo(newImplementation); \nAddress.functionDelegateCall(newImplementation, data); \n} \n\n/** \n* @dev Returns the  current admin. \n*/  \nfunction _admin() internal view virtual returns (address adm) { \nbytes32 slot = _ADMIN_SLOT; \n// solhint-disable-next-line no-inline-assembly \nassembly { \nadm := sload(slot) \n} \n} \n\n/** \n* @dev Stores a  new address in the  EIP1967 admin slo\n*/  \nfunction _setAdmin(address newAdmin) private { \nbytes32 slot = _ADMIN_SLOT; \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nsstore(slot, newAdmin) \n} \n} \n\n/** \n* @dev Makes sure the  admin cannot access the  fallba\n*/  \nfunction _beforeFallback() internal virtual override { \nrequire(msg.sender != _admin(), \"TransparentUpgradeableProxy: admin cannot fallback to proxy \nsuper._beforeFallback(); \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMathUpgradeable { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.5.16; \n\n// From https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/math/Math.sol \n// Subject to the MIT license. \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, reverting on overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \n\nreturn c; \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting with custom message on overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* - Addition cannot overflow. \n*/ \nfunction add( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, errorMessage); \n\nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on underflow (when the result \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* - Subtraction cannot underflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn sub(a, b, \"SafeMath: subtraction underflow\"); \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on underf\n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* - Subtraction cannot underflow. \n*/ \nfunction sub( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nuint256 c = a - b; \n\nreturn c; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) { \nreturn 0; \n} \n\nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \n\nreturn c; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* - Multiplication cannot overflow. \n*/ \nfunction mul( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) { \nreturn 0; \n} \n\nuint256 c = a * b; \nrequire(c / a == b, errorMessage); \n\nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers. \n* Reverts on division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn div(a, b, \"SafeMath: division by zero\"); \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers. \n* Reverts with custom message on division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* - The divisor cannot be zero. \n*/ \nfunction div( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \n// Solidity only automatically asserts when dividing by 0 \nrequire(b > 0, errorMessage); \nuint256 c = a / b; \n// assert(a == b * c + a % b); // There is no case in which this doesn't hold \n\nreturn c; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* Reverts when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn mod(a, b, \"SafeMath: modulo by zero\"); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* Reverts with custom message when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* - The divisor cannot be zero. \n*/ \nfunction mod( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nrequire(b != 0, errorMessage); \nreturn a % b; \n} \n} \n\n// File: contracts/Timelock.sol \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.5.16; \n\ncontract Timelock { \nusing SafeMath for uint256; \n\nevent NewAdmin(address indexed newAdmin); \nevent NewPendingAdmin(address indexed newPendingAdmin); \nevent NewDelay(uint256 indexed newDelay); \nevent CancelTransaction( \nbytes32 indexed txHash, \naddress indexed target, \nuint256 value, \nstring signature, \nbytes data, \nuint256 eta \n); \nevent ExecuteTransaction( \nbytes32 indexed txHash, \naddress indexed target, \nuint256 value, \nstring signature, \nbytes data, \nuint256 eta \n); \nevent QueueTransaction( \nbytes32 indexed txHash, \naddress indexed target, \nuint256 value, \nstring signature, \nbytes data, \nuint256 eta \n); \n\nuint256 public constant GRACE_PERIOD = 5000 seconds; \nuint256 public constant MINIMUM_DELAY = 60 seconds; \nuint256 public constant MAXIMUM_DELAY = 500 seconds; \n\naddress public admin; \naddress public pendingAdmin; \nuint256 public delay; \nbool public admin_initialized; \n\nmapping(bytes32 => bool) public queuedTransactions; \n\nconstructor(address admin_, uint256 delay_) public { \nrequire( \ndelay_ >= MINIMUM_DELAY, \n\"Timelock::constructor: Delay must exceed minimum delay.\" \n); \nrequire( \ndelay_ <= MAXIMUM_DELAY, \n\"Timelock::constructor: Delay must not exceed maximum delay.\" \n); \n\nadmin = admin_; \ndelay = delay_; \nadmin_initialized = false; \n} \n\nfunction() external payable {} \n\nfunction setDelay(uint256 delay_) public { \nrequire( \nmsg.sender == address(this), \n\"Timelock::setDelay: Call must come from Timelock.\" \n); \nrequire( \ndelay_ >= MINIMUM_DELAY, \n\"Timelock::setDelay: Delay must exceed minimum delay.\" \n); \nrequire( \ndelay_ <= MAXIMUM_DELAY, \n\"Timelock::setDelay: Delay must not exceed maximum delay.\" \n); \ndelay = delay_; \n\nemit NewDelay(delay); \n} \n\nfunction acceptAdmin() public { \nrequire( \nmsg.sender == pendingAdmin, \n\"Timelock::acceptAdmin: Call must come from pendingAdmin.\" \n); \nadmin = msg.sender; \npendingAdmin = address(0); \n\nemit NewAdmin(admin); \n} \n\nfunction setPendingAdmin(address pendingAdmin_) public { \n// allows one time setting of admin for deployment purposes \nif (admin_initialized) { \nrequire( \nmsg.sender == address(this), \n\"Timelock::setPendingAdmin: Call must come from Timelock.\" \n); \n} else { \nrequire( \nmsg.sender == admin, \n\"Timelock::setPendingAdmin: First call must come from admin.\" \n); \nadmin_initialized = true; \n} \npendingAdmin = pendingAdmin_; \n\nemit NewPendingAdmin(pendingAdmin); \n} \n\nfunction queueTransaction( \naddress target, \nuint256 value, \nstring memory signature, \nbytes memory data, \nuint256 eta \n) public returns (bytes32) { \nrequire( \nmsg.sender == admin, \n\"Timelock::queueTransaction: Call must come from admin.\" \n); \nrequire( \neta >= getBlockTimestamp().add(delay), \n\"Timelock::queueTransaction: Estimated execution block must satisfy delay.\" \n); \n\nbytes32 txHash = \nkeccak256(abi.encode(target, value, signature, data, eta)); \nqueuedTransactions[txHash] = true; \n\nemit QueueTransaction(txHash, target, value, signature, data, eta); \nreturn txHash; \n} \n\nfunction cancelTransaction( \naddress target, \nuint256 value, \nstring memory signature, \nbytes memory data, \nuint256 eta \n) public { \nrequire( \nmsg.sender == admin, \n\"Timelock::cancelTransaction: Call must come from admin.\" \n); \n\nbytes32 txHash = \nkeccak256(abi.encode(target, value, signature, data, eta)); \nqueuedTransactions[txHash] = false; \n\nemit CancelTransaction(txHash, target, value, signature, data, eta); \n} \n\nfunction executeTransaction( \naddress target, \nuint256 value, \nstring memory signature, \nbytes memory data, \nuint256 eta \n) public payable returns (bytes memory) { \nrequire( \nmsg.sender == admin, \n\"Timelock::executeTransaction: Call must come from admin.\" \n); \n\nbytes32 txHash = \nkeccak256(abi.encode(target, value, signature, data, eta)); \nrequire( \nqueuedTransactions[txHash], \n\"Timelock::executeTransaction: Transaction hasn't been queued.\" \n); \nrequire( \ngetBlockTimestamp() >= eta, \n\"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\" \n); \nrequire( \ngetBlockTimestamp() <= eta.add(GRACE_PERIOD), \n\"Timelock::executeTransaction: Transaction is stale.\" \n); \n\nqueuedTransactions[txHash] = false; \n\nbytes memory callData; \n\nif (bytes(signature).length == 0) { \ncallData = data; \n} else { \ncallData = abi.encodePacked( \nbytes4(keccak256(bytes(signature))), \ndata \n); \n} \n\n// solium-disable-next-line security/no-call-value \n(bool success, bytes memory returnData) = \ntarget.call.value(value)(callData); \nrequire( \nsuccess, \n\"Timelock::executeTransaction: Transaction execution reverted.\" \n); \n\nemit ExecuteTransaction(txHash, target, value, signature, data, eta); \n\nreturn returnData; \n} \n\nfunction getBlockTimestamp() internal view returns (uint256) { \n// solium-disable-next-line security/no-block-members \nreturn block.timestamp; \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* SafeMath restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's + operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's - operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's * operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's / operator. Note: this function uses a \n* revert opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's % operator. This function uses a revert \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's - operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's / operator. Note: this function uses a \n* revert opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's % operator. This function uses a revert \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n}// SPDX-License-Identifier: MIT \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./interfaces/IERC20.sol\"; \nimport \"./interfaces/IMdexFactory.sol\"; \nimport \"./interfaces/IMdexPair.sol\"; \n\nimport \"./libraries/SafeMath.sol\"; \nimport \"./libraries/TransferHelper.sol\"; \n\ncontract MdexRouter { \nusing SafeMath for uint256; \n\naddress public factory; \n\nconstructor(address _factory) { \nfactory = _factory; \n} \n\nfunction pairFor(address tokenA, address tokenB) \npublic \nview \nreturns (address pair) \n{ \npair = IMdexFactory(factory).pairFor(tokenA, tokenB); \n} \n\n// **** ADD LIQUIDITY **** \nfunction _addLiquidity( \naddress tokenA, \naddress tokenB, \nuint256 amountADesired, \nuint256 amountBDesired, \nuint256 amountAMin, \nuint256 amountBMin \n) internal virtual returns (uint256 amountA, uint256 amountB) { \n// create the pair if it doesn't exist yet \nif (IMdexFactory(factory).getPair(tokenA, tokenB) == address(0)) { \nIMdexFactory(factory).createPair(tokenA, tokenB); \n} \n(uint256 reserveA, uint256 reserveB) = \nIMdexFactory(factory).getReserves(tokenA, tokenB); \nif (reserveA == 0 && reserveB == 0) { \n(amountA, amountB) = (amountADesired, amountBDesired); \n} else { \nuint256 amountBOptimal = \nIMdexFactory(factory).quote(amountADesired, reserveA, reserveB); \nif (amountBOptimal <= amountBDesired) { \nrequire( \namountBOptimal >= amountBMin, \n\"MdexRouter: INSUFFICIENT_B_AMOUNT\" \n); \n(amountA, amountB) = (amountADesired, amountBOptimal); \n} else { \nuint256 amountAOptimal = \nIMdexFactory(factory).quote( \namountBDesired, \nreserveB, \nreserveA \n); \nassert(amountAOptimal <= amountADesired); \nrequire( \namountAOptimal >= amountAMin, \n\"MdexRouter: INSUFFICIENT_A_AMOUNT\" \n); \n(amountA, amountB) = (amountAOptimal, amountBDesired); \n} \n} \n} \n\nfunction addLiquidity( \naddress tokenA, \naddress tokenB, \nuint256 amountADesired, \nuint256 amountBDesired, \nuint256 amountAMin, \nuint256 amountBMin \n) \ninternal \nvirtual \nreturns ( \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) \n{ \n(amountA, amountB) = _addLiquidity( \ntokenA, \ntokenB, \namountADesired, \namountBDesired, \namountAMin, \namountBMin \n); \naddress pair = pairFor(tokenA, tokenB); \nTransferHelper.safeTransferFrom(tokenA, msg.sender, pair, amountA); \nTransferHelper.safeTransferFrom(tokenB, msg.sender, pair, amountB); \nliquidity = IMdexPair(pair).mint(address(this)); \n} \n\n// **** REMOVE LIQUIDITY **** \nfunction removeLiquidity( \naddress tokenA, \naddress tokenB, \nuint256 liquidity, \nuint256 amountAMin, \nuint256 amountBMin, \naddress to \n) internal virtual returns (uint256 amountA, uint256 amountB) { \naddress pair = pairFor(tokenA, tokenB); \nIMdexPair(pair).transfer(pair, liquidity); \n// send liquidity to pair \n(uint256 amount0, uint256 amount1) = IMdexPair(pair).burn(to); \n(address token0, ) = IMdexFactory(factory).sortTokens(tokenA, tokenB); \n(amountA, amountB) = tokenA == token0 \n? (amount0, amount1) \n: (amount1, amount0); \nrequire(amountA >= amountAMin, \"MdexRouter: INSUFFICIENT_A_AMOUNT\"); \nrequire(amountB >= amountBMin, \"MdexRouter: INSUFFICIENT_B_AMOUNT\"); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./libraries/SafeMath.sol\"; \nimport \"./Context.sol\"; \n\ncontract StakeRewardPerDay is Context { \nusing SafeMath for uint256; \n\nuint256 public rewardRate; // Global Reward per Unit \nuint256 public constant blockCountPerDay = 20 * 60 * 24; // 3s - 1 block, 1min - 20 blocks \nuint256 public rewardToday; \nuint256 public rewardPreBlock; // rewardToday / blockCountPerDay \nuint256 public lastUpdateBlock; // last adjust block height \nuint256 public totalStake; \nuint256 public todayStartBlock; \nuint256 public todayEndBlock; // todayStartBlock + blockCountPerDay \nmapping(address => uint256) public userStake; \nmapping(address => uint256) public userReward; \nmapping(address => uint256) public userRate; \n\nconstructor() { \nrewardRate = 0; \nrewardToday = 0; \nrewardPreBlock = 0; \ntotalStake = 0; \nlastUpdateBlock = block.number; \ntodayStartBlock = block.number; \ntodayEndBlock = todayStartBlock + blockCountPerDay; \n} \n\nmodifier updateRate() { \nif ( \nrewardPreBlock > 0 && \ntotalStake > 0 && \nblock.number > lastUpdateBlock && \ntodayEndBlock > lastUpdateBlock \n) { \nuint256 duringBlock; \nif (block.number < todayEndBlock) { \nduringBlock = block.number - lastUpdateBlock; \nlastUpdateBlock = block.number; \n} else { \nduringBlock = todayEndBlock - lastUpdateBlock; \nlastUpdateBlock = todayEndBlock; \n} \nuint256 deltaRate = rewardPreBlock.mul(duringBlock).div(totalStake); \nrewardRate = rewardRate.add(deltaRate); \n} \nif(rewardPreBlock == 0){ \nlastUpdateBlock = block.number; \n} \n_; \n} \n\nmodifier updateEndRate() { \nif ( \nrewardPreBlock > 0 && \ntotalStake > 0 && \ntodayEndBlock > lastUpdateBlock \n) { \nuint256 duringBlock = todayEndBlock - lastUpdateBlock; \nuint256 deltaRate = rewardPreBlock.mul(duringBlock).div(totalStake); \nrewardRate = rewardRate.add(deltaRate); \n} \nif(rewardPreBlock == 0){ \nlastUpdateBlock = block.number; \n} \n_; \n} \n\nmodifier getReward() { \nif (userStake[_msgSender()] > 0 && rewardRate > userRate[_msgSender()]) { \nuint256 deltaReward = \nrewardRate.sub(userRate[_msgSender()]).mul( \nuserStake[_msgSender()] \n); \nuserReward[_msgSender()] = userReward[_msgSender()].add( \ndeltaReward \n); \n} \nuserRate[_msgSender()] = rewardRate; \n_; \n} \n\nfunction _addNewReward(uint256 amount) internal updateEndRate{ \nrewardToday = amount; \nrewardPreBlock = amount.mul(1e18).div(blockCountPerDay); \ntodayStartBlock = block.number; \ntodayEndBlock = todayStartBlock + blockCountPerDay; \n} \n\nfunction _stake(uint256 amount) updateRate getReward internal virtual { \nuserStake[_msgSender()] = userStake[_msgSender()].add(amount); \ntotalStake = totalStake.add(amount); \n} \nfunction _halveNoUpdate() internal returns (uint256 reward){ \nreward = userReward[_msgSender()].div(1e18); \nuserReward[_msgSender()] = 0; \n} \n\nfunction _halve() updateRate getReward internal returns (uint256 reward){ \nreturn _halveNoUpdate(); \n} \n\nfunction _unStake() updateRate getReward internal virtual returns (uint256 stake, uint256 reward)\nstake = userStake[_msgSender()]; \ntotalStake = totalStake.sub(stake); \nuserStake[_msgSender()] = 0; \nreward = _halveNoUpdate(); \n} \n\nfunction _getStake() view internal returns (uint256 stake) { \nstake = userStake[_msgSender()]; \n} \n\nfunction _caleReward() view internal returns (uint256 reward) { \nif(userStake[_msgSender()] == 0){ \nreturn 0; \n} \nuint256 tempRate = rewardRate; \nif ( \nrewardPreBlock > 0 && \ntotalStake > 0 && \nblock.number > lastUpdateBlock && \ntodayEndBlock > lastUpdateBlock \n) { \nuint256 duringBlock; \nif (block.number < todayEndBlock) { \nduringBlock = block.number - lastUpdateBlock; \n} else { \nduringBlock = todayEndBlock - lastUpdateBlock; \n} \nuint256 deltaRate = rewardPreBlock.mul(duringBlock).div(totalStake); \ntempRate = tempRate.add(deltaRate); \n} \nreward = userReward[_msgSender()]; \nif (tempRate > userRate[_msgSender()]) { \nuint256 deltaReward = \ntempRate.sub(userRate[_msgSender()]).mul( \nuserStake[_msgSender()] \n); \nreward = reward.add( \ndeltaReward \n); \n} \nreward = reward.div(1e18); \n} \n\n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./StakeLPRewardPerDay.sol\"; \nimport \"./interfaces/IFidoMember.sol\"; \nimport \"./interfaces/IMFIL.sol\"; \n\ninterface IMFILPool { \nfunction lendFil(uint256 totalT, uint256 userStakeFil) \nexternal \nreturns (uint256 lendAmount); \n\nfunction returnFil(uint256 amount) external; \n} \n\ninterface IMfilIdoTokenLPPoolFactory { \nfunction operator() external view returns (address); \n\nfunction MfilStakePool() external view returns (address); \n\nfunction FidoMember() external view returns (address); \n\nfunction inviteFeeRate() external view returns (uint256); \n\nfunction inviteFeeRateDecimals() external view returns (uint256); \n} \n\ncontract MfilIdoTokenLPPool is StakeLPRewardPerDay { \nusing SafeMath for uint256; \n\naddress public mfil; \naddress public idoToken; \naddress public lpPoolFactory; \n\nuint256 public totalMfilLend; \nmapping(address => uint256) public userMfilLend; \n\nconstructor( \naddress _factory, \naddress fidoOwner, \naddress _mfil, \naddress _idoToken \n) StakeLPRewardPerDay(_factory, fidoOwner, _mfil, _idoToken, _mfil) { \nlpPoolFactory = _msgSender(); \nmfil = _mfil; \nidoToken = _idoToken; \n} \n\nmodifier onlyMfilStakePool() { \nrequire( \n_msgSender() == \nIMfilIdoTokenLPPoolFactory(lpPoolFactory).MfilStakePool(), \n\"MFIL-IDOTOKEN-LP-POOL: caller is not the MfilStakePool\" \n); \n_; \n} \n\nfunction MfilStakePool() external view returns (address) { \nreturn IMfilIdoTokenLPPoolFactory(lpPoolFactory).MfilStakePool(); \n} \n\nfunction FidoMember() external view returns (address) { \nreturn IMfilIdoTokenLPPoolFactory(lpPoolFactory).FidoMember(); \n} \n\nfunction inviteFeeRateDecimals() external view returns (uint256) { \nreturn \nIMfilIdoTokenLPPoolFactory(lpPoolFactory).inviteFeeRateDecimals(); \n} \n\nfunction inviteFeeRate() external view returns (uint256) { \nreturn IMfilIdoTokenLPPoolFactory(lpPoolFactory).inviteFeeRate(); \n} \n\nfunction _lendFil(uint256 totalT, uint256 userStakeFil) \ninternal \nreturns (uint256 lendAmount) \n{ \nlendAmount = IMFILPool(this.MfilStakePool()).lendFil( \ntotalT, \nuserStakeFil \n); \nuserMfilLend[_msgSender()] = userMfilLend[_msgSender()].add(lendAmount); \ntotalMfilLend = totalMfilLend.add(lendAmount); \n} \n\nfunction _returnFIL() internal returns (uint256 amount) { \namount = userMfilLend[_msgSender()]; \nIMFILPool(this.MfilStakePool()).returnFil(amount); \nuserMfilLend[_msgSender()] = 0; \ntotalMfilLend = totalMfilLend.sub(amount); \n} \n\nfunction _stakeHook( \nuint256 amountAIn, \nuint256 amountBIn, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) internal override { \namountB = amountB.mul(stakeRate).div(stakeRate - 1); \n_lendFil(amountB, amountA); \n} \n\nfunction _unStakeHook( \nuint256 reward, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) internal override { \n_returnFIL(); \nuint256 inviteFee = \nreward.mul(this.inviteFeeRate()).div( \n10**uint256(this.inviteFeeRateDecimals()) \n); \n{ \naddress inviter0; \naddress inviter1; \naddress fido; \nuint256 rate0; \nuint256 rate1; \nuint256 fidoRate; \nuint256 fee; \n(inviter0, inviter1, fido, rate0, rate1, fidoRate) = IFidoMember( \nthis.FidoMember() \n) \n.caleInviteRate(_msgSender()); \nfee = inviteFee.mul(rate0).div( \n10**IFidoMember(this.FidoMember()).rateDecimal() \n); \nIMFIL(mfil).mint(inviter0, fee); \nfee = inviteFee.mul(rate1).div( \n10**IFidoMember(this.FidoMember()).rateDecimal() \n); \nIMFIL(mfil).mint(inviter1, fee); \nfee = inviteFee.mul(fidoRate).div( \n10**IFidoMember(this.FidoMember()).rateDecimal() \n); \nIMFIL(mfil).mint(fido, fee); \n} \n} \n\nfunction newReward(uint256 amount) \nexternal \nvirtual \noverride \nonlyMfilStakePool \nwhenNotPaused \n{ \n_addNewReward(amount); \nemit NewReward(block.number, amount); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./StakeRewardPerBlock.sol\"; \nimport \"./MdexRouter.sol\"; \nimport \"./Ownable.sol\"; \nimport \"./Pausable.sol\"; \nimport \"./ReentrancyGuard.sol\"; \nimport \"./interfaces/IERC20Mintable.sol\"; \n\ncontract StakeLPRewardPerBlock is \nStakeRewardPerBlock, \nMdexRouter, \nOwnable, \nPausable, \nReentrancyGuard \n{ \nusing SafeMath for uint256; \n\nuint8 public stakeRate = 5; \n\naddress public tokenA; // for one \naddress public tokenB; // for stakeRate \naddress public rewardToken; // for reward \naddress public operator; \n\nmapping(address => uint256) public userTokenBStake; \nuint256 public totalTokenBStake; \n\nevent Stake( \naddress indexed sender, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n); \nevent UnStake( \naddress indexed receiver, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n); \nevent Reward(address indexed receiver, uint256 reward); \nevent OperatorshipTransferred( \naddress indexed previousOperator, \naddress indexed newOperator \n); \nevent NewReward(uint256 blockHeight, uint256 amount); \n\nconstructor( \naddress _factory, \naddress _operator, \naddress _tokenA, \naddress _tokenB, \naddress _rewardToken \n) \nStakeRewardPerBlock() \nMdexRouter(_factory) \nOwnable() \nPausable() \nReentrancyGuard() \n{ \noperator = _operator; \nemit OperatorshipTransferred(address(0), operator); \ntokenA = _tokenA; \ntokenB = _tokenB; \nrewardToken = _rewardToken; \n} \n\nmodifier onlyOperator() { \nrequire( \n_msgSender() == operator, \n\"Operable: caller is not the operator\" \n); \n_; \n} \n\nfunction transferOperatorship(address newOperator) external onlyOwner { \nrequire( \nnewOperator != address(0), \n\"Operable: new operator is the zero address\" \n); \nemit OperatorshipTransferred(operator, newOperator); \noperator = newOperator; \n} \n\nfunction pause() external onlyOperator { \n_pause(); \n} \n\nfunction unPause() external onlyOperator { \n_unpause(); \n} \n\nfunction caleLiquidity( \nuint256 amountADesired, \nuint256 amountBDesired, \nuint256 amountAMin, \nuint256 amountBMin \n) external view returns (uint256 amountA, uint256 amountB) { \nrequire( \nIMdexFactory(factory).getPair(tokenA, tokenB) != address(0), \n\"MdexRouter: Pair Not Found!\" \n); \n(uint256 reserveA, uint256 reserveB) = \nIMdexFactory(factory).getReserves(tokenA, tokenB); \nif (reserveA == 0 && reserveB == 0) { \n(amountA, amountB) = (amountADesired, amountBDesired); \n} else { \nuint256 amountBOptimal = \nIMdexFactory(factory).quote(amountADesired, reserveA, reserveB); \nif (amountBOptimal <= amountBDesired) { \nrequire( \namountBOptimal >= amountBMin, \n\"MdexRouter: INSUFFICIENT_B_AMOUNT\" \n); \n(amountA, amountB) = (amountADesired, amountBOptimal); \n} else { \nuint256 amountAOptimal = \nIMdexFactory(factory).quote( \namountBDesired, \nreserveB, \nreserveA \n); \nassert(amountAOptimal <= amountADesired); \nrequire( \namountAOptimal >= amountAMin, \n\"MdexRouter: INSUFFICIENT_A_AMOUNT\" \n); \n(amountA, amountB) = (amountAOptimal, amountBDesired); \n} \n} \n} \n\nfunction stake(uint256 amountAIn, uint256 amountBIn) \nexternal \nwhenNotPaused \nnonReentrant \nreturns ( \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) \n{ \nrequire(amountAIn > 0 && amountBIn > 0, \"STAKE: amount is zero\"); \nuint256 tempAmountB = amountBIn.div(stakeRate); \n(amountA, amountB, liquidity) = addLiquidity( \ntokenA, \ntokenB, \namountAIn, \ntempAmountB, \n0, \n); \namountB = amountB.mul(stakeRate - 1); \nTransferHelper.safeTransferFrom( \ntokenB, \n_msgSender(), \naddress(this), \namountB \n); \nuserTokenBStake[_msgSender()] = userTokenBStake[_msgSender()].add( \namountB \n); \ntotalTokenBStake = totalTokenBStake.add(amountB); \n_stake(liquidity); \nemit Stake(_msgSender(), amountA, amountB, liquidity); \n} \n\nfunction getStake() external view whenNotPaused returns (uint256 amount) { \namount = _getStake(); \n} \n\nfunction halve() \nexternal \nwhenNotPaused \nnonReentrant \nreturns (uint256 reward) \n{ \nreward = _Bhalve(); \nIERC20Mintable(rewardToken).mint(_msgSender(), reward); \nemit Reward(_msgSender(), reward); \n} \n\nfunction unStake() \nexternal \nwhenNotPaused \nnonReentrant \nreturns ( \nuint256 reward, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) \n{ \n(liquidity, reward) = _unStake(); \nrequire(liquidity > 0, \"UNSTAKE: no stake\"); \nIERC20Mintable(rewardToken).mint(_msgSender(), reward); \nemit Reward(_msgSender(), reward); \n(amountA, amountB) = removeLiquidity( \ntokenA, \ntokenB, \nliquidity, \n0, \n0, \n_msgSender() \n); \nIERC20(tokenB).transfer(_msgSender(), userTokenBStake[_msgSender()]); \namountB.add(userTokenBStake[_msgSender()]); \nuserTokenBStake[_msgSender()] = 0; \nemit UnStake(_msgSender(), amountA, amountB, liquidity); \n} \n\nfunction adjustReward(uint256 amount) external onlyOperator whenNotPaused { \n_setReward(amount); \nemit NewReward(block.number, amount); \n} \n\nfunction caleReward() external view whenNotPaused returns (uint256 reward) { \nreward = _BcaleReward(); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./StakeRewardPerDay.sol\"; \nimport \"./MdexRouter.sol\"; \nimport \"./Ownable.sol\"; \nimport \"./Pausable.sol\"; \nimport \"./ReentrancyGuard.sol\"; \n\ncontract StakeLPRewardPerDay is \nStakeRewardPerDay, \nMdexRouter, \nOwnable, \nPausable, \nReentrancyGuard \n{ \nusing SafeMath for uint256; \n\nuint8 public stakeRate = 2; \n\naddress public tokenA; // for one \naddress public tokenB; // for stakeRate \naddress public rewardToken; // for reward \naddress public operator; \n\nmapping(address => uint256) public userTokenBStake; \nuint256 public totalTokenBStake; \n\nevent Stake( \naddress indexed sender, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n); \nevent UnStake( \naddress indexed receiver, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n); \nevent Reward(address indexed receiver, uint256 reward); \nevent OperatorshipTransferred( \naddress indexed previousOperator, \naddress indexed newOperator \n); \nevent NewReward(uint256 blockHeight, uint256 amount); \n\nconstructor( \naddress _factory, \naddress _operator, \naddress _tokenA, \naddress _tokenB, \naddress _rewardToken \n) \nStakeRewardPerDay() \nMdexRouter(_factory) \nOwnable() \nPausable() \nReentrancyGuard() \n{ \noperator = _operator; \nemit OperatorshipTransferred(address(0), operator); \ntokenA = _tokenA; \ntokenB = _tokenB; \nrewardToken = _rewardToken; \n} \n\nmodifier onlyOperator() { \nrequire( \n_msgSender() == operator, \n\"Operable: caller is not the operator\" \n); \n_; \n} \n\nfunction transferOperatorship(address newOperator) external onlyOwner { \nrequire( \nnewOperator != address(0), \n\"Operable: new operator is the zero address\" \n); \nemit OperatorshipTransferred(operator, newOperator); \noperator = newOperator; \n} \n\nfunction pause() external onlyOperator { \n_pause(); \n} \n\nfunction unPause() external onlyOperator { \n_unpause(); \n} \n\nfunction caleLiquidity( \nuint256 amountADesired, \nuint256 amountBDesired, \nuint256 amountAMin, \nuint256 amountBMin \n) external view returns (uint256 amountA, uint256 amountB) { \nrequire( \nIMdexFactory(factory).getPair(tokenA, tokenB) != address(0), \n\"MdexRouter: Pair Not Found!\" \n); \n(uint256 reserveA, uint256 reserveB) = \nIMdexFactory(factory).getReserves(tokenA, tokenB); \nif (reserveA == 0 && reserveB == 0) { \n(amountA, amountB) = (amountADesired, amountBDesired); \n} else { \nuint256 amountBOptimal = \nIMdexFactory(factory).quote(amountADesired, reserveA, reserveB); \nif (amountBOptimal <= amountBDesired) { \nrequire( \namountBOptimal >= amountBMin, \n\"MdexRouter: INSUFFICIENT_B_AMOUNT\" \n); \n(amountA, amountB) = (amountADesired, amountBOptimal); \n} else { \nuint256 amountAOptimal = \nIMdexFactory(factory).quote( \namountBDesired, \nreserveB, \nreserveA \n); \nassert(amountAOptimal <= amountADesired); \nrequire( \namountAOptimal >= amountAMin, \n\"MdexRouter: INSUFFICIENT_A_AMOUNT\" \n); \n(amountA, amountB) = (amountAOptimal, amountBDesired); \n} \n} \n} \n\nfunction stake(uint256 amountAIn, uint256 amountBIn) \nexternal \nwhenNotPaused \nnonReentrant \nreturns ( \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) \n{ \nrequire(amountAIn > 0 && amountBIn > 0, \"STAKE: amount is zero\"); \nuint256 tempAmountB = amountBIn.div(stakeRate); \n(amountA, amountB, liquidity) = addLiquidity( \ntokenA, \ntokenB, \namountAIn, \ntempAmountB, \n0, \n); \namountB = amountB.mul(stakeRate - 1); \nTransferHelper.safeTransferFrom( \ntokenB, \n_msgSender(), \naddress(this), \namountB \n); \nuserTokenBStake[_msgSender()] = userTokenBStake[_msgSender()].add( \namountB \n); \ntotalTokenBStake = totalTokenBStake.add(amountB); \n_stake(liquidity); \nemit Stake(_msgSender(), amountA, amountB, liquidity); \n_stakeHook(amountAIn, amountBIn, amountA, amountB, liquidity); \n} \n\nfunction _stakeHook( \nuint256 amountAIn, \nuint256 amountBIn, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) internal virtual {} \n\nfunction getStake() external view whenNotPaused returns (uint256 amount) { \namount = _getStake(); \n} \n\nfunction halve() \nexternal \nwhenNotPaused \nnonReentrant \nreturns (uint256 reward) \n{ \nreward = _halve(); \nIERC20(rewardToken).transfer(_msgSender(), reward); \nemit Reward(_msgSender(), reward); \n} \n\nfunction unStake() \nexternal \nwhenNotPaused \nnonReentrant \nreturns ( \nuint256 reward, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) \n{ \n(liquidity, reward) = _unStake(); \nrequire(liquidity > 0, \"UNSTAKE: no stake\"); \nIERC20(rewardToken).transfer(_msgSender(), reward); \nemit Reward(_msgSender(), reward); \n(amountA, amountB) = removeLiquidity( \ntokenA, \ntokenB, \nliquidity, \n0, \n0, \n_msgSender() \n); \nIERC20(tokenB).transfer(_msgSender(), userTokenBStake[_msgSender()]); \namountB.add(userTokenBStake[_msgSender()]); \nuserTokenBStake[_msgSender()] = 0; \nemit UnStake(_msgSender(), amountA, amountB, liquidity); \n_unStakeHook(reward, amountA, amountB, liquidity); \n} \n\nfunction _unStakeHook( \nuint256 reward, \nuint256 amountA, \nuint256 amountB, \nuint256 liquidity \n) internal virtual {} \n\nfunction newReward(uint256 amount) \nexternal \nvirtual \nonlyOperator \nwhenNotPaused \n{ \n_addNewReward(amount); \nemit NewReward(block.number, amount); \n} \n\nfunction caleReward() external view whenNotPaused returns (uint256 reward) { \nreward = _caleReward(); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./ERC20/ERC20.sol\"; \nimport \"./ERC20/ERC20Burnable.sol\"; \nimport \"./ERC20/ERC20Mintable.sol\"; \nimport \"./libraries/TransferHelper.sol\"; \n\ninterface IIDOFactory { \nfunction operator() external view returns (address); \n} \n\ncontract IDOToken is ERC20Burnable { \nusing SafeMath for uint256; \n\nuint256 private _cap; \nuint256 public dailySaleCap; \nuint256 public price; \nuint256 public gasPrice; \nuint256 public sealPrice; \nuint256 public hardDrivePrice; \nuint256 public idoStartTime; \nuint256 public idoEndTime; \nuint256 private _todayRemaind; \nuint256 public todayStartTime; \naddress public hfil; \naddress public hfilRecipient; \naddress public router; \naddress public factory; \naddress public sender; \n\nstring public node; \n\nbool public idoStatus; \n\nevent IDOStart(uint256 timestamp); \nevent IDOStop(uint256 timestamp, address sender); \nevent IDO(address indexed to, uint256 cost, uint256 amount); \n\nconstructor( \nstring memory _name, \nstring memory _node, \naddress _hfil, \naddress _hfilRecipient, \nuint256 cap_, \nuint256 _dailySaleCap \n) ERC20(_name, \"T\") Pausable() { \n_setupDecimals(6); \nsender = tx.origin; \nfactory = _msgSender(); \nnode = _node; \nhfil = _hfil; \nhfilRecipient = _hfilRecipient; \n_cap = cap_; \ndailySaleCap = _dailySaleCap; \nidoStatus = false; \n_mint(_msgSender(), 1 * 10**4); \n} \n\nmodifier onlyOperator() { \nrequire( \n_msgSender() == IIDOFactory(factory).operator(), \n\"Operable: caller is not the operator\" \n); \n_; \n} \n\nmodifier onlyFactory() { \nrequire(_msgSender() == factory, \"IDOToken: only factory can call\"); \n_; \n} \n\nmodifier onlySender() { \nrequire(_msgSender() == sender, \"IDOToken: only sender can call\"); \n_; \n} \n\nmodifier idoEnabled() { \nrequire(idoStatus, \"IDOToken: ido not start yet\"); \n_; \n} \n\nmodifier idoStarted() { \nrequire(block.timestamp >= idoStartTime, \"IDOToken: ido not start yet\"); \n_; \n} \n\nmodifier idoNotEnded() { \nrequire(block.timestamp <= idoEndTime, \"IDOToken: ido ended\"); \n_; \n} \n\nmodifier updateToday() { \nif (block.timestamp >= todayStartTime + 86400) { \ntodayStartTime = block.timestamp; \n_todayRemaind = dailySaleCap; \n} \n_; \n} \n\nfunction operator() view external returns (address) { \nreturn IIDOFactory(factory).operator(); \n} \n\nfunction setPrice( \nuint256 gasPrice_, \nuint256 sealPrice_, \nuint256 hardDrivePrice_ \n) external onlyFactory { \ngasPrice = gasPrice_; \nsealPrice = sealPrice_; \nhardDrivePrice = hardDrivePrice_; \nprice = gasPrice.add(sealPrice).add(hardDrivePrice); \n} \n\nfunction setTimes(uint256 idoStartTime_, uint256 idoEndTime_) \nexternal \nonlyFactory \n{ \nidoStartTime = idoStartTime_; \nidoEndTime = idoEndTime_; \n} \n\nfunction changerouter(address _router) external onlyOperator { \nrequire(_router != address(0), \"IDO: wrong address\"); \nrouter = _router; \n} \n\nfunction stopIdo() external onlyOperator { \nidoStatus = false; \nidoEndTime = block.timestamp; \nemit IDOStop(block.timestamp, _msgSender()); \n} \n\nfunction stopIdoBySender() external onlySender { \nidoStatus = false; \nidoEndTime = block.timestamp; \nemit IDOStop(block.timestamp, _msgSender()); \n} \n\nfunction todayRemaind() view external returns (uint256) { \nif (block.timestamp >= todayStartTime + 86400) { \nreturn dailySaleCap; \n} \nreturn _todayRemaind; \n} \n\nfunction pause() external onlyOperator { \n_pause(); \n} \n\nfunction unPause() external onlyOperator { \n_unpause(); \n} \n\n/** \n* @dev Returns the cap on the token's total supply. \n*/ \nfunction cap() public view virtual returns (uint256) { \nreturn _cap; \n} \n\n/** \n* @dev See {ERC20-_beforeTokenTransfer}. \n* \n* Requirements: \n* \n* - minted tokens must not cause the total supply to go over the cap. \n*/ \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual override { \nsuper._beforeTokenTransfer(from, to, amount); \n\nif (from == address(0)) { \n// When minting tokens \nrequire(totalSupply().add(amount) <= cap(), \"ERC20: cap exceeded\"); \n} \n} \n\nfunction startIdo(address _router) external onlyOperator { \nrequire(!idoStatus, \"IDO: ido already started!\"); \nrequire(_router != address(0), \"IDO: wrong address\"); \nrouter = _router; \nidoStatus = true; \nemit IDOStart(block.timestamp); \ntodayStartTime = block.timestamp; \n_todayRemaind = dailySaleCap; \n} \n\nfunction ido(address recipient) \nexternal \nidoEnabled \nidoStarted \nidoNotEnded \nupdateToday \nreturns (uint256 amount) \n{ \nrequire(_todayRemaind > 0, \"IDO: sold out today\"); \nrequire(_msgSender() == router, \"IDO: not from fido\"); \nuint256 totalPrice = IERC20(hfil).balanceOf(address(this)); \nuint256 sendBack = 0; \nrequire(totalPrice > 0, \"IDO: no pay no gain\"); \namount = totalPrice.mul(10 ** decimals()).div(price); \nrequire(amount > 0, \"IDO: amount must greater than zero\"); \nif (amount >= _todayRemaind) { \namount = _todayRemaind; \nsendBack = totalPrice.sub(amount.mul(price).div(10**decimals())); \n} \n_todayRemaind = _todayRemaind.sub(amount); \nif (sendBack > 0) { \nTransferHelper.safeTransfer(hfil, recipient, sendBack); \ntotalPrice = totalPrice.sub(sendBack); \n} \nTransferHelper.safeTransfer(hfil, hfilRecipient, totalPrice); \n_mint(recipient, amount); \nemit IDO(recipient, totalPrice, amount); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n// File @openzeppelin/contracts/token/ERC20/ERC20.sol@v3.4.2 \n\n// : MIT \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.5.0 <0.8.0; \n\nlibrary SafeMath { \nuint256 constant WAD = 10 ** 18; \nuint256 constant RAY = 10 ** 27; \n\nfunction wad() public pure returns (uint256) { \nreturn WAD; \n} \n\nfunction ray() public pure returns (uint256) { \nreturn RAY; \n} \n\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \n\nreturn c; \n} \n\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn sub(a, b, \"SafeMath: subtraction overflow\"); \n} \n\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nuint256 c = a - b; \n\nreturn c; \n} \n\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) { \nreturn 0; \n} \n\nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \n\nreturn c; \n} \n\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn div(a, b, \"SafeMath: division by zero\"); \n} \n\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \n// Solidity only automatically asserts when dividing by 0 \nrequire(b > 0, errorMessage); \nuint256 c = a / b; \n// assert(a == b * c + a % b); // There is no case in which this doesn't hold \n\nreturn c; \n} \n\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn mod(a, b, \"SafeMath: modulo by zero\"); \n} \n\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b != 0, errorMessage); \nreturn a % b; \n} \n\nfunction min(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a <= b ? a : b; \n} \n\nfunction max(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a >= b ? a : b; \n} \n\nfunction sqrt(uint256 a) internal pure returns (uint256 b) { \nif (a > 3) { \nb = a; \nuint256 x = a / 2 + 1; \nwhile (x < b) { \nb = x; \nx = (a / x + x) / 2; \n} \n} else if (a != 0) { \nb = 1; \n} \n} \n\nfunction wmul(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn mul(a, b) / WAD; \n} \n\nfunction wmulRound(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn add(mul(a, b), WAD / 2) / WAD; \n} \n\nfunction rmul(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn mul(a, b) / RAY; \n} \n\nfunction rmulRound(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn add(mul(a, b), RAY / 2) / RAY; \n} \n\nfunction wdiv(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn div(mul(a, WAD), b); \n} \n\nfunction wdivRound(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn add(mul(a, WAD), b / 2) / b; \n} \n\nfunction rdiv(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn div(mul(a, RAY), b); \n} \n\nfunction rdivRound(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn add(mul(a, RAY), b / 2) / b; \n} \n\nfunction wpow(uint256 x, uint256 n) internal pure returns (uint256) { \nuint256 result = WAD; \nwhile (n > 0) { \nif (n % 2 != 0) { \nresult = wmul(result, x); \n} \nx = wmul(x, x); \nn /= 2; \n} \nreturn result; \n} \n\nfunction rpow(uint256 x, uint256 n) internal pure returns (uint256) { \nuint256 result = RAY; \nwhile (n > 0) { \nif (n % 2 != 0) { \nresult = rmul(result, x); \n} \nx = rmul(x, x); \nn /= 2; \n} \nreturn result; \n} \n} \n\n\n// File @openzeppelin/contracts/token/ERC20/IERC20.sol@v3.4.2 \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n\n// File @openzeppelin/contracts/utils/Address.sol@v3.4.2 \n\n// -- SPDX-License-Identifier:: MIT \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n/** \n* @dev Wrappers over Solidity's arithmetic operations with added overflow \n* checks. \n* \n* Arithmetic operations in Solidity wrap on overflow. This can easily result \n* in bugs, because programmers usually assume that an overflow raises an \n* error, which is the standard behavior in high level programming languages. \n* `SafeMath` restores this intuition by reverting the transaction when an \n* operation overflows. \n* \n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMathUpgradeable { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n\n// File: @openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n/** \n* @dev Collection of functions related to the address type \n*/ \nlibrary AddressUpgradeable { \n/** \n* @dev Returns true if `account` is a contract. \n* \n* [IMPORTANT] \n* ==== \n* It is unsafe to assume that an address for which this function returns \n* false is an externally-owned account (EOA) and not a contract. \n* \n* Among others, `isContract` will return false for the following \n* types of addresses: \n* \n*  - an externally-owned account \n*  - a contract in construction \n*  - an address where a contract will be created \n*  - an address where a contract lived, but was destroyed \n* ==== \n*/ \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n/** \n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n* `recipient`, forwarding all available gas and reverting on errors. \n* \n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost \n* of certain opcodes, possibly making contracts go over the 2300 gas limit \n* imposed by `transfer`, making them unable to receive funds via \n* `transfer`. {sendValue} removes this limitation. \n* \n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. \n* \n* IMPORTANT: because control is transferred to `recipient`, care must be \n* taken to not create reentrancy vulnerabilities. Consider using \n* {ReentrancyGuard} or the \n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects\n*/ \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n/** \n* @dev Performs a Solidity function call using a low level `call`. A \n* plain`call` is an unsafe replacement for a function call: use this \n* function instead. \n* \n* If `target` reverts with a revert reason, it is bubbled up by this \n* function (like regular Solidity function calls). \n* \n* Returns the raw returned data. To convert to the expected return value, \n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.de\n* \n* Requirements: \n* \n* - `target` must be a contract. \n* - calling `target` with `data` must not revert. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \n* `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but also transferring `value` wei to `target`. \n* \n* Requirements: \n* \n* - the calling contract must have an ETH balance of at least `value`. \n* - the called Solidity function must be `payable`. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n/** \n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValu\n* with `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n// File: @openzeppelin/contracts-upgradeable/proxy/Initializable.sol \n\n\n\n// solhint-disable-next-line compiler-version \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n\nlibrary Address { \n/** \n* @dev Returns true if `account` is a  contract. \n* \n* [IMPORTANT] \n* ==== \n* It is unsafe to assume that an  address for which this function returns \n* false is an  externally-owned account (EOA) and not a  c\n* \n* Among others, `isContract` will  return false for the  fol\n* types of addresses: \n* \n*  - an  externally-owned account \n*  - a  contract in construction \n*  - an  address where a  contract will\n*  - an  address where a  contract lived, but\n* ==== \n*/  \nfunction isContract(address account) internal view returns (bool) { \n// This method relies in extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n/** \n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n* `recipient`, forwarding all available gas and reverting on errors. \n* \n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the  gas cost \n* of certain opcodes, possibly making contracts go over the  2300 gas limit \n* imposed by `transfer`, making them unable to receive funds via \n* `transfer`. {sendValue} removes this limitation. \n* \n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more\n* \n* IMPORTANT: because control is transferred to `recipient`, care must be \n* taken to not create reentrancy vulnerabilities. Consider using \n* {ReentrancyGuard} or the  \n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use- the -che\n*/  \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n/** \n* @dev Performs a  Solidity function call using a  low leve\n* plain`call` is an  unsafe replacement for a  function call: \n* function instead. \n* \n* If `target` reverts with a  revert reason, it is bubbled up by this \n* function ( like  regular Solidity function calls). \n* \n* Returns the  raw returned data. To convert to the  expe\n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding\n* \n* Requirements: \n* \n* - `target` must be a  contract. \n* - calling `target` with `data` must not revert. \n* \n* _Available since v3.1._ \n*/  \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but  with\n* `errorMessage` as a  fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/  \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn _functionCallWithValue(target, data, 0, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but  also transferring `value` wei to `target`. \n* \n* Requirements: \n* \n* - the  calling contract must have an  ETH balance of at l\n* - the  called Solidity function must be `payable`. \n* \n* _Available since v3.1._ \n*/  \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns \nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n/** \n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], \n* with `errorMessage` as a  fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/  \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nreturn _functionCallWithValue(target, data, value, errorMessage); \n} \n\nfunction _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memor\nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: weiValue }(data); \nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n\n\n\n/** \n* @title ERC1363 \n* @dev Implementation of an  ERC1363 interface \n*/  \nabstract contract ERC1363 is ERC20, IERC1363, ERC165 { \nusing Address for address; \n\n/** \n* @dev See {IERC165-supportsInterface}. \n*/  \nfunction supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) retu\nreturn interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId); \n} \n\n/** \n* @dev Transfer tokens to a  specified address and then execute a\n* @param recipient The address to transfer to. \n* @param amount The amount to be transferred. \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction transferAndCall(address recipient, uint256 amount) public virtual override returns (bool\nreturn transferAndCall(recipient, amount, \"\"); \n} \n\n/** \n* @dev Transfer tokens to a  specified address and then execute a\n* @param recipient The address to transfer to \n* @param amount The amount to be transferred \n* @param data Additional data with no specified format \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction transferAndCall( \naddress recipient, \nuint256 amount, \nbytes memory data \n) public virtual override returns (bool) { \ntransfer(recipient, amount); \nrequire(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"ERC1363: _checkAndCall\nreturn true; \n} \n\n/** \n* @dev Transfer tokens from one address to another and then execute a  callback on\n* @param sender The address which you  want to send tokens from \n* @param recipient The address which you  want to transfer to \n* @param amount The amount of tokens to be transferred \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction transferFromAndCall( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \nreturn transferFromAndCall(sender, recipient, amount, \"\"); \n} \n\n/** \n* @dev Transfer tokens from one address to another and then execute a  callback on\n* @param sender The address which you  want to send tokens from \n* @param recipient The address which you  want to transfer to \n* @param amount The amount of tokens to be transferred \n* @param data Additional data with no specified format \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction transferFromAndCall( \naddress sender, \naddress recipient, \nuint256 amount, \nbytes memory data \n) public virtual override returns (bool) { \ntransferFrom(sender, recipient, amount); \nrequire(_checkAndCallTransfer(sender, recipient, amount, data), \"ERC1363: _checkAndCallTransf\nreturn true; \n} \n\n/** \n* @dev Approve spender to transfer tokens and then execute a  callback on recipient\n* @param spender The address allowed to transfer to \n* @param amount The amount allowed to be transferred \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\nreturn approveAndCall(spender, amount, \"\"); \n} \n\n/** \n* @dev Approve spender to transfer tokens and then execute a  callback on recipient\n* @param spender The address allowed to transfer to. \n* @param amount The amount allowed to be transferred. \n* @param data Additional data with no specified format. \n* @return A boolean that indicates if the  operation was successful. \n*/  \nfunction approveAndCall( \naddress spender, \nuint256 amount, \nbytes memory data \n) public virtual override returns (bool) { \napprove(spender, amount); \nrequire(_checkAndCallApprove(spender, amount, data), \"ERC1363: _checkAndCallApprove reverts\")\nreturn true; \n} \n\n/** \n* @dev Internal function to invoke `onTransferReceived` on a  target address \n*  The call is not executed if the  target address is not a  c\n* @param sender address Representing the  previous owner of the\n* @param recipient address Target address that will  receive the\n* @param amount uint256 The amount mount of tokens to be transferred \n* @param data bytes Optional data to send along with the  call \n* @return whether the  call correctly returned the  expect\n*/  \nfunction _checkAndCallTransfer( \naddress sender, \naddress recipient, \nuint256 amount, \nbytes memory data \n) internal virtual returns (bool) { \nif (!recipient.isContract()) { \nreturn false; \n} \nbytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, \nreturn (retval == IERC1363Receiver(recipient).onTransferReceived.selector); \n} \n\n/** \n* @dev Internal function to invoke `onApprovalReceived` on a  target address \n*  The call is not executed if the  target address is not a  c\n* @param spender address The address which will  spend the\n* @param amount uint256 The amount of tokens to be spent \n* @param data bytes Optional data to send along with the  call \n* @return whether the  call correctly returned the  expect\n*/  \nfunction _checkAndCallApprove( \naddress spender, \nuint256 amount, \nbytes memory data \n) internal virtual returns (bool) { \nif (!spender.isContract()) { \nreturn false; \n} \nbytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data); \nreturn (retval == IERC1363Spender(spender).onApprovalReceived.selector); \n} \n} \n\n// File: @openzeppelin/contracts/access/Ownable.sol \n\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n\n/** \n* @dev Contract module that allows children to implement role-based access \n* control mechanisms. This is a  lightweight version that doesn't\n* members except through off-chain means by accessing the  contract event logs. Som\n* applications may benefit from on-chain enumerability, for those cases see \n* {AccessControlEnumerable}. \n* \n* Roles are  referred to by their `bytes32` identifier. These should\n* in the  external API and be unique. The best way to achieve this is by \n* using `public constant` hash digests: \n* \n* `` \n* bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); \n* `` \n* \n* Roles can be used to represent a  set of permissions. To restrict access to \n* function call, use {hasRole}: \n* \n* `` \n* function foo() public { \n*     require(hasRole(MY_ROLE, msg.sender)); \n*     ... \n* } \n* `` \n* \n* Roles can be granted and revoked dynamically via the  {grantRole} and \n* {revokeRole} functions. Each role has an  associated admin role, and only \n* accounts that have a  role's admin role can call {grantRole} and {revokeRole}. \n* \n* By default, the  admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means \n* that only accounts with this role will  be able to grant or revoke other \n* roles. More complex role relationships can be created by using \n* {_setRoleAdmin}. \n* \n* WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to \n* grant and revoke this role. Extra precautions should  be taken to secure \n* accounts that have been granted it. \n*/  \nabstract contract AccessControl is Context, IAccessControl, ERC165 { \nstruct RoleData { \nmapping(address => bool) members; \nbytes32 adminRole; \n} \n\nmapping(bytes32 => RoleData) private _roles; \n\nbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; \n\n/** \n* @dev Modifier that checks that an  account has a  speci\n* with a  standardized message including the  required ro\n* \n* The format of the  revert reason is given by the  followin\n* \n*  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/ \n* \n* _Available since v4.1._ \n*/  \nmodifier onlyRole(bytes32 role) { \n_checkRole(role, _msgSender()); \n_; \n} \n\n/** \n* @dev See {IERC165-supportsInterface}. \n*/  \nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \nreturn interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId\n} \n\n/** \n* @dev Returns `true` if `account` has been granted `role`. \n*/  \nfunction hasRole(bytes32 role, address account) public view override returns (bool) { \nreturn _roles[role].members[account]; \n} \n\n/** \n* @dev Revert with a  standard message if `account` is missing `role`. \n* \n* The format of the  revert reason is given by the  followin\n* \n*  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/ \n*/  \nfunction _checkRole(bytes32 role, address account) internal view { \nif (!hasRole(role, account)) { \nrevert( \nstring( \nabi.encodePacked( \n\"AccessControl: account \", \nStrings.toHexString(uint160(account), 20), \n\" is missing role \", \nStrings.toHexString(uint256(role), 32) \n) \n) \n); \n} \n} \n\n/** \n* @dev Returns the  admin role that controls `role`. See {grantRole} and \n* {revokeRole}. \n* \n* To change a  role's admin, use {_setRoleAdmin}. \n*/  \nfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) { \nreturn _roles[role].adminRole; \n} \n\n/** \n* @dev Grants `role` to `account`. \n* \n* If `account` had not been already granted `role`, emits a  {RoleGranted} \n* event. \n* \n* Requirements: \n* \n* - the  caller must have ``role``'s admin role. \n*/  \nfunction grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(r\n_grantRole(role, account); \n} \n\n/** \n* @dev Revokes `role` from `account`. \n* \n* If `account` had been granted `role`, emits a  {RoleRevoked} event. \n* \n* Requirements: \n* \n* - the  caller must have ``role``'s admin role. \n*/  \nfunction revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(\n_revokeRole(role, account); \n} \n\n/** \n* @dev Revokes `role` from the  calling account. \n* \n* Roles are  often managed via {grantRole} and {revokeRole}: this function's \n* purpose is to provide a  mechanism for accounts to lose their privileges \n* if they  are  compromised ( such\n* \n* If the  calling account had been granted `role`, emits a  \n* event. \n* \n* Requirements: \n* \n* - the  caller must be `account`. \n*/  \nfunction renounceRole(bytes32 role, address account) public virtual override { \nrequire(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); \n\n_revokeRole(role, account); \n} \n\n/** \n* @dev Grants `role` to `account`. \n* \n* If `account` had not been already granted `role`, emits a  {RoleGranted} \n* event. Note that unlike {grantRole}, this function doesn't  perform any \n* checks on the  calling account. \n* \n* [WARNING] \n* ==== \n* This function should  only be called from the  constructo\n* up the  initial roles for the  system. \n* \n* Using this function in any other way is effectively circumventing the  admin \n* system imposed by {AccessControl}. \n* ==== \n*/  \nfunction _setupRole(bytes32 role, address account) internal virtual { \n_grantRole(role, account); \n} \n\n/** \n* @dev Sets `adminRole` as ``role``'s admin role. \n* \n* Emits a  {RoleAdminChanged} event. \n*/  \nfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual { \nbytes32 previousAdminRole = getRoleAdmin(role); \n_roles[role].adminRole = adminRole; \nemit RoleAdminChanged(role, previousAdminRole, adminRole); \n} \n\nfunction _grantRole(bytes32 role, address account) private { \nif (!hasRole(role, account)) { \n_roles[role].members[account] = true; \nemit RoleGranted(role, account, _msgSender()); \n} \n} \n\nfunction _revokeRole(bytes32 role, address account) private { \nif (hasRole(role, account)) { \n_roles[role].members[account] = false; \nemit RoleRevoked(role, account, _msgSender()); \n} \n} \n} \n\n// File: contracts/access/Roles.sol \n\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n/** \n* @dev Collection of functions related to the address type \n*/ \nlibrary Address { \n/** \n* @dev Returns true if `account` is a contract. \n* \n* [IMPORTANT] \n* ==== \n* It is unsafe to assume that an address for which this function returns \n* false is an externally-owned account (EOA) and not a contract. \n* \n* Among others, `isContract` will return false for the following \n* types of addresses: \n* \n*  - an externally-owned account \n*  - a contract in construction \n*  - an address where a contract will be created \n*  - an address where a contract lived, but was destroyed \n* ==== \n*/ \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n/** \n* @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n* `recipient`, forwarding all available gas and reverting on errors. \n* \n* https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost \n* of certain opcodes, possibly making contracts go over the 2300 gas limit \n* imposed by `transfer`, making them unable to receive funds via \n* `transfer`. {sendValue} removes this limitation. \n* \n* https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more]. \n* \n* IMPORTANT: because control is transferred to `recipient`, care must be \n* taken to not create reentrancy vulnerabilities. Consider using \n* {ReentrancyGuard} or the \n* https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects\n*/ \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n/** \n* @dev Performs a Solidity function call using a low level `call`. A \n* plain`call` is an unsafe replacement for a function call: use this \n* function instead. \n* \n* If `target` reverts with a revert reason, it is bubbled up by this \n* function (like regular Solidity function calls). \n* \n* Returns the raw returned data. To convert to the expected return value, \n* use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.de\n* \n* Requirements: \n* \n* - `target` must be a contract. \n* - calling `target` with `data` must not revert. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \n* `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but also transferring `value` wei to `target`. \n* \n* Requirements: \n* \n* - the calling contract must have an ETH balance of at least `value`. \n* - the called Solidity function must be `payable`. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns \nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n/** \n* @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValu\n* with `errorMessage` as a fallback revert reason when `target` reverts. \n* \n* _Available since v3.1._ \n*/ \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nBEP20.sol\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n/** \n* @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \n* but performing a static call. \n* \n* _Available since v3.3._ \n*/ \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n}\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol'; \nimport {WadRayMath} from '../libraries/math/WadRayMath.sol'; \nimport {Errors} from '../libraries/helpers/Errors.sol'; \nimport {DebtTokenBase} from './base/DebtTokenBase.sol'; \nimport {ILendingPool} from '../../interfaces/ILendingPool.sol'; \nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol'; \n\n/** \n\ncontract VariableDebtToken is DebtTokenBase, IVariableDebtToken { \nusing WadRayMath for uint256; \n\nuint256 public constant DEBT_TOKEN_REVISION = 0x1; \n\nILendingPool internal _pool; \naddress internal _underlyingAsset; \nIAaveIncentivesController internal _incentivesController; \n\n/** \n* @param debtTokenDecimals The decimals of the debtToken, same as the underlying asset's \n* @param debtTokenName The name of the token \n* @param debtTokenSymbol The symbol of the token \n*/ \nfunction initialize( \nILendingPool pool, \naddress underlyingAsset, \nIAaveIncentivesController incentivesController, \nuint8 debtTokenDecimals, \nstring memory debtTokenName, \nstring memory debtTokenSymbol, \nbytes calldata params \n) public override initializer { \n_setName(debtTokenName); \n_setSymbol(debtTokenSymbol); \n_setDecimals(debtTokenDecimals); \n\n_pool = pool; \n_underlyingAsset = underlyingAsset; \n_incentivesController = incentivesController; \n\nemit Initialized( \nunderlyingAsset, \naddress(pool), \naddress(incentivesController), \ndebtTokenDecimals, \ndebtTokenName, \ndebtTokenSymbol, \nparams \n); \n} \n\n/** \n* @dev Gets the revision of the stable debt token implementation \n* @return The debt token implementation revision \n**/ \nfunction getRevision() internal pure virtual override returns (uint256) { \nreturn DEBT_TOKEN_REVISION; \n} \n\n/** \n* @dev Calculates the accumulated debt balance of the user \n* @return The debt balance of the user \n**/ \nfunction balanceOf(address user) public view virtual override returns (uint256) { \nuint256 scaledBalance = super.balanceOf(user); \n\nif (scaledBalance == 0) { \nreturn 0; \n} \n\nreturn scaledBalance.rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset)); \n} \n\n/** \n* @dev Mints debt token to the `onBehalfOf` address \n* -  Only callable by the LendingPool \n* @param user The address receiving the borrowed underlying, being the delegatee in case \n* of credit delegate, or same as `onBehalfOf` otherwise \n* @param onBehalfOf The address receiving the debt tokens \n* @param amount The amount of debt being minted \n* @param index The variable debt index of the reserve \n* @return `true` if the the previous balance of the user is 0 \n**/ \nfunction mint( \naddress user, \naddress onBehalfOf, \nuint256 amount, \nuint256 index \n) external override onlyLendingPool returns (bool) { \nif (user != onBehalfOf) { \n_decreaseBorrowAllowance(onBehalfOf, user, amount); \n} \n\nuint256 previousBalance = super.balanceOf(onBehalfOf); \nuint256 amountScaled = amount.rayDiv(index); \nrequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT); \n\n_mint(onBehalfOf, amountScaled); \n\nemit Transfer(address(0), onBehalfOf, amount); \nemit Mint(user, onBehalfOf, amount, index); \n\nreturn previousBalance == 0; \n} \n\n/** \n* @dev Burns user variable debt \n* - Only callable by the LendingPool \n* @param user The user whose debt is getting burned \n* @param amount The amount getting burned \n* @param index The variable debt index of the reserve \n**/ \nfunction burn( \naddress user, \nuint256 amount, \nuint256 index \n) external override onlyLendingPool { \nuint256 amountScaled = amount.rayDiv(index); \nrequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT); \n\n_burn(user, amountScaled); \n\nemit Transfer(user, address(0), amount); \nemit Burn(user, amount, index); \n} \n\n/** \n* @dev Returns the principal debt balance of the user from \n* @return The debt balance of the user since the last burn/mint action \n**/ \nfunction scaledBalanceOf(address user) public view virtual override returns (uint256) { \nreturn super.balanceOf(user); \n} \n\n/** \n* @dev Returns the total supply of the variable debt token. Represents the total debt accrued by t\n* @return The total supply \n**/ \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn super.totalSupply().rayMul(_pool.getReserveNormalizedVariableDebt(_underlyingAsset)); \n} \n\n/** \n* @dev Returns the scaled total supply of the variable debt token. Represents sum(debt/index) \n* @return the scaled total supply \n**/ \nfunction scaledTotalSupply() public view virtual override returns (uint256) { \nreturn super.totalSupply(); \n} \n\n/** \n* @dev Returns the principal balance of the user and principal total supply. \n* @param user The address of the user \n* @return The principal balance of the user \n* @return The principal total supply \n**/ \nfunction getScaledUserBalanceAndSupply(address user) \nexternal \nview \noverride \nreturns (uint256, uint256) \n{ \nreturn (super.balanceOf(user), super.totalSupply()); \n} \n\n/** \n* @dev Returns the address of the underlying asset of this aToken (E.g. WETH for aWETH) \n**/ \nfunction UNDERLYING_ASSET_ADDRESS() public view returns (address) { \nreturn _underlyingAsset; \n} \n\n/** \n* @dev Returns the address of the incentives controller contract \n**/ \nfunction getIncentivesController() external view override returns (IAaveIncentivesController) { \nreturn _getIncentivesController(); \n} \n\n/** \n* @dev Returns the address of the lending pool where this aToken is used \n**/ \nfunction POOL() public view returns (ILendingPool) { \nreturn _pool; \n} \n\nfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) { \nreturn _incentivesController; \n} \n\nfunction _getUnderlyingAssetAddress() internal view override returns (address) { \nreturn _underlyingAsset; \n} \n\nfunction _getLendingPool() internal view override returns (ILendingPool) { \nreturn _pool; \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n/** \n*  \n\n* Using this library instead of the unchecked operations eliminates an entire \n* class of bugs, so it's recommended to use it always. \n*/ \nlibrary SafeMath { \n/** \n\n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the substraction of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's + operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's - operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b <= a, \"SafeMath: subtraction overflow\"); \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's * operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) return 0; \nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \nreturn c; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's / operator. Note: this function uses a \n* revert opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: division by zero\"); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's % operator. This function uses a revert \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nrequire(b > 0, \"SafeMath: modulo by zero\"); \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's - operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryDiv}. \n* \n* Counterpart to Solidity's / operator. Note: this function uses a \n* revert opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's % operator. This function uses a revert \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n}// SPDX-License-Identifier: MIT \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n//  \n@dev Wrappers over Solidity's arithmetic operations. \n* \n* NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler \n* now has built in overflow checking. \n*/ \nlibrary SafeMath { \n/** \n* @dev Returns the addition of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nuint256 c = a + b; \nif (c < a) return (false, 0); \nreturn (true, c); \n} \n} \n\n/** \n\n* _Available since v3.4._ \n*/ \nfunction trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b > a) return (false, 0); \nreturn (true, a - b); \n} \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, with an overflow flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) return (true, 0); \nuint256 c = a * b; \nif (c / a != b) return (false, 0); \nreturn (true, c); \n} \n} \n\n/** \n* @dev Returns the division of two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b == 0) return (false, 0); \nreturn (true, a / b); \n} \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag. \n* \n* _Available since v3.4._ \n*/ \nfunction tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) { \nunchecked { \nif (b == 0) return (false, 0); \nreturn (true, a % b); \n} \n} \n\n/** \n* @dev Returns the addition of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `+` operator. \n* \n* Requirements: \n* \n* - Addition cannot overflow. \n*/ \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a + b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting on \n* overflow (when the result is negative). \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a - b; \n} \n\n/** \n* @dev Returns the multiplication of two unsigned integers, reverting on \n* overflow. \n* \n* Counterpart to Solidity's `*` operator. \n* \n* Requirements: \n* \n* - Multiplication cannot overflow. \n*/ \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a * b; \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a / b; \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting when dividing by zero. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn a % b; \n} \n\n/** \n* @dev Returns the subtraction of two unsigned integers, reverting with custom message on \n* overflow (when the result is negative). \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {trySub}. \n* \n* Counterpart to Solidity's `-` operator. \n* \n* Requirements: \n* \n* - Subtraction cannot overflow. \n*/ \nfunction sub( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b <= a, errorMessage); \nreturn a - b; \n} \n} \n\n/** \n* @dev Returns the integer division of two unsigned integers, reverting with custom message on \n* division by zero. The result is rounded towards zero. \n* \n* Counterpart to Solidity's `/` operator. Note: this function uses a \n* `revert` opcode (which leaves remaining gas untouched) while Solidity \n* uses an invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction div( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b > 0, errorMessage); \nreturn a / b; \n} \n} \n\n/** \n* @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo), \n* reverting with custom message when dividing by zero. \n* \n* CAUTION: This function is deprecated because it requires allocating memory for the error \n* message unnecessarily. For custom revert reasons use {tryMod}. \n* \n* Counterpart to Solidity's `%` operator. This function uses a `revert` \n* opcode (which leaves remaining gas untouched) while Solidity uses an \n* invalid opcode to revert (consuming all remaining gas). \n* \n* Requirements: \n* \n* - The divisor cannot be zero. \n*/ \nfunction mod( \nuint256 a, \nuint256 b, \nstring memory errorMessage \n) internal pure returns (uint256) { \nunchecked { \nrequire(b > 0, errorMessage); \nreturn a % b; \n} \n} \n} \n\n\n// File contracts/IBep20.sol \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {Ownable} from '../dependencies/openzeppelin/contracts/Ownable.sol'; \nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport {IWETH} from './interfaces/IWETH.sol'; \nimport {IWETHGateway} from './interfaces/IWETHGateway.sol'; \nimport {ILendingPool} from '../interfaces/ILendingPool.sol'; \nimport {IAToken} from '../interfaces/IAToken.sol'; \nimport {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol'; \nimport {UserConfiguration} from '../protocol/libraries/configuration/UserConfiguration.sol'; \nimport {Helpers} from '../protocol/libraries/helpers/Helpers.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \n\ncontract WETHGateway is IWETHGateway, Ownable { \nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap; \nusing UserConfiguration for DataTypes.UserConfigurationMap; \n\nIWETH internal immutable WETH; \n\n/** \n* @dev Sets the WETH address and the LendingPoolAddressesProvider address. Infinite approves lendi\n* @param weth Address of the Wrapped Ether contract \n**/ \nconstructor(address weth) public { \nWETH = IWETH(weth); \n} \n\nfunction authorizeLendingPool(address lendingPool) external onlyOwner { \nWETH.approve(lendingPool, uint256(-1)); \n} \n\n/** \n\n* @param lendingPool address of the targeted underlying lending pool \n* @param onBehalfOf address of the user who will receive the aTokens representing the deposit \n\nfunction depositETH( \naddress lendingPool, \naddress onBehalfOf, \nuint16 referralCode \n) external payable override { \nWETH.deposit{value: msg.value}(); \nILendingPool(lendingPool).deposit(address(WETH), msg.value, onBehalfOf, referralCode); \n} \n\n/** \n* @dev withdraws the WETH _reserves of msg.sender. \n* @param to address of the user who will receive native ETH \n*/ \nfunction withdrawETH( \naddress lendingPool, \nuint256 amount, \naddress to \n) external override { \nIAToken aWETH = IAToken(ILendingPool(lendingPool).getReserveData(address(WETH)).aTokenAddress); \nuint256 userBalance = aWETH.balanceOf(msg.sender); \nuint256 amountToWithdraw = amount; \n\n// if amount is equal to uint(-1), the user wants to redeem everything \nif (amount == type(uint256).max) { \namountToWithdraw = userBalance; \n} \naWETH.transferFrom(msg.sender, address(this), amountToWithdraw); \nILendingPool(lendingPool).withdraw(address(WETH), amountToWithdraw, address(this)); \nWETH.withdraw(amountToWithdraw); \n_safeTransferETH(to, amountToWithdraw); \n} \n\n/** \n* @dev repays a borrow on the WETH reserve, for the specified amount (or for the whole amount, if \n* @param lendingPool address of the targeted underlying lending pool \n* @param amount the amount to repay, or uint256(-1) if the user wants to repay everything \n* @param rateMode the rate mode to repay \n* @param onBehalfOf the address for which msg.sender is repaying \n*/ \nfunction repayETH( \naddress lendingPool, \nuint256 amount, \nuint256 rateMode, \naddress onBehalfOf \n) external payable override { \n(uint256 stableDebt, uint256 variableDebt) = \nHelpers.getUserCurrentDebtMemory( \nonBehalfOf, \nILendingPool(lendingPool).getReserveData(address(WETH)) \n); \n\nuint256 paybackAmount = \nDataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE \n? stableDebt \n: variableDebt; \n\nif (amount < paybackAmount) { \npaybackAmount = amount; \n} \nrequire(msg.value >= paybackAmount, 'msg.value is less than repayment amount'); \nWETH.deposit{value: paybackAmount}(); \nILendingPool(lendingPool).repay(address(WETH), msg.value, rateMode, onBehalfOf); \n\n// refund remaining dust eth \nif (msg.value > paybackAmount) _safeTransferETH(msg.sender, msg.value - paybackAmount); \n} \n\n/** \n* @dev borrow WETH, unwraps to ETH and send both the ETH and DebtTokens to msg.sender, via `approv\n* @param lendingPool address of the targeted underlying lending pool \n* @param amount the amount of ETH to borrow \n* @param interesRateMode the interest rate mode \n* @param referralCode integrators are assigned a referral code and can potentially receive rewards\n*/ \nfunction borrowETH( \naddress lendingPool, \nuint256 amount, \nuint256 interesRateMode, \nuint16 referralCode \n) external override { \nILendingPool(lendingPool).borrow( \naddress(WETH), \namount, \ninteresRateMode, \nreferralCode, \nmsg.sender \n); \nWETH.withdraw(amount); \n_safeTransferETH(msg.sender, amount); \n} \n\n/** \n* @dev transfer ETH to an address, revert if it fails. \n* @param to recipient of the transfer \n\nfunction _safeTransferETH(address to, uint256 value) internal { \n(bool success, ) = to.call{value: value}(new bytes(0)); \nrequire(success, 'ETH_TRANSFER_FAILED'); \n} \n\n/** \n* @dev transfer ERC20 from the utility contract, for ERC20 recovery in case of stuck tokens due \n* direct transfers to the contract address. \n* @param token token to transfer \n* @param to recipient of the transfer \n* @param amount amount to send \n*/ \nfunction emergencyTokenTransfer( \naddress token, \naddress to, \nuint256 amount \n) external onlyOwner { \nIERC20(token).transfer(to, amount); \n} \n\n/** \n* @dev transfer native Ether from the utility contract, for native Ether recovery in case of stuck \n* due selfdestructs or transfer ether to pre-computated contract address before deployment. \n* @param to recipient of the transfer \n* @param amount amount to send \n*/ \nfunction emergencyEtherTransfer(address to, uint256 amount) external onlyOwner { \n_safeTransferETH(to, amount); \n} \n\n/** \n* @dev Get WETH address used by WETHGateway \n*/ \nfunction getWETHAddress() external view returns (address) { \nreturn address(WETH); \n} \n\n/** \n* @dev Only WETH contract is allowed to transfer ETH here. Prevent other addresses to send Ether t\n*/ \nreceive() external payable { \nrequire(msg.sender == address(WETH), 'Receive not allowed'); \n} \n\n/** \n* @dev Revert fallback calls \n*/ \nfallback() external payable { \nrevert('Fallback not allowed'); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n\n/** \n* control mechanisms. This is a  lightweight version that doesn't\n* members except through off-chain means by accessing the  contract event logs. Som\n* applications may benefit from on-chain enumerability, for those cases see \n* {AccessControlEnumerable}. \n* \n* Roles are  referred to by their `bytes32` identifier. These should\n* in the  external API and be unique. The best way to achieve this is by \n* using `public constant` hash digests: \n* \n* `` \n* bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\"); \n* `` \n* \n* Roles can be used to represent a  set of permissions. To restrict access to \n* function call, use {hasRole}: \n* \n* `` \n* function foo() public { \n*     require(hasRole(MY_ROLE, msg.sender)); \n*     ... \n* } \n* `` \n* \n* Roles can be granted and revoked dynamically via the  {grantRole} and \n* {revokeRole} functions. Each role has an  associated admin role, and only \n* accounts that have a  role's admin role can call {grantRole} and {revokeRole}. \n* \n* By default, the  admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means \n* that only accounts with this role will  be able to grant or revoke other \n* roles. More complex role relationships can be created by using \n* {_setRoleAdmin}. \n* \n* WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to \n* grant and revoke this role. Extra precautions should  be taken to secure \n* accounts that have been granted it. \n*/  \nabstract contract AccessControl is Context, IAccessControl, ERC165 { \nstruct RoleData { \nmapping(address => bool) members; \nbytes32 adminRole; \n} \n\nmapping(bytes32 => RoleData) private _roles; \n\nbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; \n\n/** \n*  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/ \n* \n* _Available since v4.1._ \n*/  \nmodifier onlyRole(bytes32 role) { \n_checkRole(role, _msgSender()); \n_; \n} \n\n/** \n\nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \nreturn interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId\n} \n\n/** \n\nfunction hasRole(bytes32 role, address account) public view override returns (bool) { \nreturn _roles[role].members[account]; \n} \n\n/** \n\n\n*  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/ \n*/  \nfunction _checkRole(bytes32 role, address account) internal view { \nif (!hasRole(role, account)) { \nrevert( \nstring( \nabi.encodePacked( \n\"AccessControl: account \", \nStrings.toHexString(uint160(account), 20), \n\" is missing role \", \nStrings.toHexString(uint256(role), 32) \n) \n) \n); \n} \n} \n\n/** \n* @dev Returns the  admin role that controls `role`. See {grantRole} and \n* {revokeRole}. \n* \n* To change a  role's admin, use {_setRoleAdmin}. \n*/  \nfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) { \nreturn _roles[role].adminRole; \n} \n\n/** \n* @dev Grants `role` to `account`. \n* \n* If `account` had not been already granted `role`, emits a  {RoleGranted} \n* event. \n* \n* Requirements: \n* \n* - the  caller must have ``role``'s admin role. \n*/  \nfunction grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(r\n_grantRole(role, account); \n} \n\n/** \n* @dev Revokes `role` from `account`. \n* \n* If `account` had been granted `role`, emits a  {RoleRevoked} event. \n* \n* Requirements: \n* \n* - the  caller must have ``role``'s admin role. \n*/  \nfunction revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(\n_revokeRole(role, account); \n} \n\n/** \n* @dev Revokes `role` from the  calling account. \n* \n* Roles are  often managed via {grantRole} and {revokeRole}: this function's \n* purpose is to provide a  mechanism for accounts to lose their privileges \n* if they  are  compromised ( such\n* \n* If the  calling account had been granted `role`, emits a  \n* event. \n* \n* Requirements: \n* \n* - the  caller must be `account`. \n*/  \nfunction renounceRole(bytes32 role, address account) public virtual override { \nrequire(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); \n\n_revokeRole(role, account); \n} \n\n/** \n* @dev Grants `role` to `account`. \n* \n* If `account` had not been already granted `role`, emits a  {RoleGranted} \n* event. Note that unlike {grantRole}, this function doesn't  perform any \n* checks on the  calling account. \n* \n* [WARNING] \n* ==== \n* This function should  only be called from the  constructo\n* up the  initial roles for the  system. \n* \n* Using this function in any other way is effectively circumventing the  admin \n* system imposed by {AccessControl}. \n* ==== \n*/  \nfunction _setupRole(bytes32 role, address account) internal virtual { \n_grantRole(role, account); \n} \n\n/** \n* @dev Sets `adminRole` as ``role``'s admin role. \n* \n* Emits a  {RoleAdminChanged} event. \n*/  \nfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual { \nbytes32 previousAdminRole = getRoleAdmin(role); \n_roles[role].adminRole = adminRole; \nemit RoleAdminChanged(role, previousAdminRole, adminRole); \n} \n\nfunction _grantRole(bytes32 role, address account) private { \nif (!hasRole(role, account)) { \n_roles[role].members[account] = true; \nemit RoleGranted(role, account, _msgSender()); \n} \n} \n\nfunction _revokeRole(bytes32 role, address account) private { \nif (hasRole(role, account)) { \n_roles[role].members[account] = false; \nemit RoleRevoked(role, account, _msgSender()); \n} \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./ERC20/ERC20.sol\"; \nimport \"./ERC20/ERC20Burnable.sol\"; \nimport \"./ERC20/ERC20Mintable.sol\"; \nimport \"./libraries/TransferHelper.sol\"; \n\ninterface IIDOFactory { \nfunction operator() external view returns (address); \n} \n\ncontract IDOToken is ERC20Burnable { \nusing SafeMath for uint256; \n\nuint256 private _cap; \nuint256 public dailySaleCap; \nuint256 public price; \nuint256 public gasPrice; \nuint256 public sealPrice; \nuint256 public hardDrivePrice; \nuint256 public idoStartTime; \nuint256 public idoEndTime; \nuint256 private _todayRemaind; \nuint256 public todayStartTime; \naddress public hfil; \naddress public hfilRecipient; \naddress public router; \naddress public factory; \naddress public sender; \n\nstring public node; \n\nbool public idoStatus; \n\nevent IDOStart(uint256 timestamp); \nevent IDOStop(uint256 timestamp, address sender); \nevent IDO(address indexed to, uint256 cost, uint256 amount); \n\nconstructor( \nstring memory _name, \nstring memory _node, \naddress _hfil, \naddress _hfilRecipient, \nuint256 cap_, \nuint256 _dailySaleCap \n) ERC20(_name, \"T\") Pausable() { \n_setupDecimals(6); \nsender = tx.origin; \nfactory = _msgSender(); \nnode = _node; \nhfil = _hfil; \nhfilRecipient = _hfilRecipient; \n_cap = cap_; \ndailySaleCap = _dailySaleCap; \nidoStatus = false; \n_mint(_msgSender(), 1 * 10**4); \n} \n\nmodifier onlyOperator() { \nrequire( \n_msgSender() == IIDOFactory(factory).operator(), \n\"Operable: caller is not the operator\" \n); \n_; \n} \n\nmodifier onlyFactory() { \nrequire(_msgSender() == factory, \"IDOToken: only factory can call\"); \n_; \n} \n\nmodifier onlySender() { \nrequire(_msgSender() == sender, \"IDOToken: only sender can call\"); \n_; \n} \n\nmodifier idoEnabled() { \nrequire(idoStatus, \"IDOToken: ido not start yet\"); \n_; \n} \n\nmodifier idoStarted() { \nrequire(block.timestamp >= idoStartTime, \"IDOToken: ido not start yet\"); \n_; \n} \n\nmodifier idoNotEnded() { \nrequire(block.timestamp <= idoEndTime, \"IDOToken: ido ended\"); \n_; \n} \n\nmodifier updateToday() { \nif (block.timestamp >= todayStartTime + 86400) { \ntodayStartTime = block.timestamp; \n_todayRemaind = dailySaleCap; \n} \n_; \n} \n\nfunction operator() view external returns (address) { \nreturn IIDOFactory(factory).operator(); \n} \n\nfunction setPrice( \nuint256 gasPrice_, \nuint256 sealPrice_, \nuint256 hardDrivePrice_ \n) external onlyFactory { \ngasPrice = gasPrice_; \nsealPrice = sealPrice_; \nhardDrivePrice = hardDrivePrice_; \nprice = gasPrice.add(sealPrice).add(hardDrivePrice); \n} \n\nfunction setTimes(uint256 idoStartTime_, uint256 idoEndTime_) \nexternal \nonlyFactory \n{ \nidoStartTime = idoStartTime_; \nidoEndTime = idoEndTime_; \n} \n\nfunction changerouter(address _router) external onlyOperator { \nrequire(_router != address(0), \"IDO: wrong address\"); \nrouter = _router; \n} \n\nfunction stopIdo() external onlyOperator { \nidoStatus = false; \nidoEndTime = block.timestamp; \nemit IDOStop(block.timestamp, _msgSender()); \n} \n\nfunction stopIdoBySender() external onlySender { \nidoStatus = false; \nidoEndTime = block.timestamp; \nemit IDOStop(block.timestamp, _msgSender()); \n} \n\nfunction todayRemaind() view external returns (uint256) { \nif (block.timestamp >= todayStartTime + 86400) { \nreturn dailySaleCap; \n} \nreturn _todayRemaind; \n} \n\nfunction pause() external onlyOperator { \n_pause(); \n} \n\nfunction unPause() external onlyOperator { \n_unpause(); \n} \n\n/** \n\nfunction cap() public view virtual returns (uint256) { \nreturn _cap; \n} \n\n/** \n* @dev See {ERC20-_beforeTokenTransfer}. \n* \n* Requirements: \n* \n* - minted tokens must not cause the total supply to go over the cap. \n*/ \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual override { \nsuper._beforeTokenTransfer(from, to, amount); \n\nif (from == address(0)) { \n\nrequire(totalSupply().add(amount) <= cap(), \"ERC20: cap exceeded\"); \n} \n} \n\nfunction startIdo(address _router) external onlyOperator { \nrequire(!idoStatus, \"IDO: ido already started!\"); \nrequire(_router != address(0), \"IDO: wrong address\"); \nrouter = _router; \nidoStatus = true; \nemit IDOStart(block.timestamp); \ntodayStartTime = block.timestamp; \n_todayRemaind = dailySaleCap; \n} \n\nfunction ido(address recipient) \nexternal \nidoEnabled \nidoStarted \nidoNotEnded \nupdateToday \nreturns (uint256 amount) \n{ \nrequire(_todayRemaind > 0, \"IDO: sold out today\"); \nrequire(_msgSender() == router, \"IDO: not from fido\"); \nuint256 totalPrice = IERC20(hfil).balanceOf(address(this)); \nuint256 sendBack = 0; \nrequire(totalPrice > 0, \"IDO: no pay no gain\"); \namount = totalPrice.mul(10 ** decimals()).div(price); \nrequire(amount > 0, \"IDO: amount must greater than zero\"); \nif (amount >= _todayRemaind) { \namount = _todayRemaind; \nsendBack = totalPrice.sub(amount.mul(price).div(10**decimals())); \n} \n_todayRemaind = _todayRemaind.sub(amount); \nif (sendBack > 0) { \nTransferHelper.safeTransfer(hfil, recipient, sendBack); \ntotalPrice = totalPrice.sub(sendBack); \n} \nTransferHelper.safeTransfer(hfil, hfilRecipient, totalPrice); \n_mint(recipient, amount); \nemit IDO(recipient, totalPrice, amount); \n} \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {ILendingPoolAddressesProvider} from './ILendingPoolAddressesProvider.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \n\ninterface ILendingPool { \n \nevent Deposit( \naddress indexed reserve, \naddress user, \naddress indexed onBehalfOf, \nuint256 amount, \nuint16 indexed referral \n); \n\n \nevent Withdraw(address indexed reserve, address indexed user, address indexed to, uint256 amount); \n\n \nevent Borrow( \naddress indexed reserve, \naddress user, \naddress indexed onBehalfOf, \nuint256 amount, \nuint256 borrowRateMode, \nuint256 borrowRate, \nuint16 indexed referral \n); \n\n \nevent Repay( \naddress indexed reserve, \naddress indexed user, \naddress indexed repayer, \nuint256 amount \n); \n\n \nevent Swap(address indexed reserve, address indexed user, uint256 rateMode); \n\n \nevent ReserveUsedAsCollateralEnabled(address indexed reserve, address indexed user); \n\n \nevent ReserveUsedAsCollateralDisabled(address indexed reserve, address indexed user); \n\n \nevent RebalanceStableBorrowRate(address indexed reserve, address indexed user); \n\n \nevent FlashLoan( \naddress indexed target, \naddress indexed initiator, \naddress indexed asset, \nuint256 amount, \nuint256 premium, \nuint16 referralCode \n); \n\n \nevent Paused(); \n\n \nevent Unpaused(); \n\n \nevent LiquidationCall( \naddress indexed collateralAsset, \naddress indexed debtAsset, \naddress indexed user, \nuint256 debtToCover, \nuint256 liquidatedCollateralAmount, \naddress liquidator, \nbool receiveAToken \n); \n\n \nevent ReserveDataUpdated( \naddress indexed reserve, \nuint256 liquidityRate, \nuint256 stableBorrowRate, \nuint256 variableBorrowRate, \nuint256 liquidityIndex, \nuint256 variableBorrowIndex \n); \n\n \nfunction deposit( \naddress asset, \nuint256 amount, \naddress onBehalfOf, \nuint16 referralCode \n) external; \n\n \nfunction withdraw( \naddress asset, \nuint256 amount, \naddress to \n) external returns (uint256); \n\n \nfunction borrow( \naddress asset, \nuint256 amount, \nuint256 interestRateMode, \nuint16 referralCode, \naddress onBehalfOf \n) external; \n\n \nfunction repay( \naddress asset, \nuint256 amount, \nuint256 rateMode, \naddress onBehalfOf \n) external returns (uint256); \n\n \nfunction swapBorrowRateMode(address asset, uint256 rateMode) external; \n\n \nfunction rebalanceStableBorrowRate(address asset, address user) external; \n\n \nfunction setUserUseReserveAsCollateral(address asset, bool useAsCollateral) external; \n\n \nfunction liquidationCall( \naddress collateralAsset, \naddress debtAsset, \naddress user, \nuint256 debtToCover, \nbool receiveAToken \n) external; \n\n \nfunction flashLoan( \naddress receiverAddress, \naddress[] calldata assets, \nuint256[] calldata amounts, \nuint256[] calldata modes, \naddress onBehalfOf, \nbytes calldata params, \nuint16 referralCode \n) external; \n\n \nfunction getUserAccountData(address user) \nexternal \nview \nreturns ( \nuint256 totalCollateralETH, \nuint256 totalDebtETH, \nuint256 availableBorrowsETH, \nuint256 currentLiquidationThreshold, \nuint256 ltv, \nuint256 healthFactor \n); \n\nfunction initReserve( \naddress reserve, \naddress aTokenAddress, \naddress stableDebtAddress, \naddress variableDebtAddress, \naddress interestRateStrategyAddress \n) external; \n\nfunction setReserveInterestRateStrategyAddress(address reserve, address rateStrategyAddress) \nexternal; \n\nfunction setConfiguration(address reserve, uint256 configuration) external; \n\n \nfunction getConfiguration(address asset) \nexternal \nview \nreturns (DataTypes.ReserveConfigurationMap memory); \n\n \nfunction getUserConfiguration(address user) \nexternal \nview \nreturns (DataTypes.UserConfigurationMap memory); \n\n \nfunction getReserveNormalizedIncome(address asset) external view returns (uint256); \n\n \nfunction getReserveNormalizedVariableDebt(address asset) external view returns (uint256); \n\n \nfunction getReserveData(address asset) external view returns (DataTypes.ReserveData memory); \n\nfunction finalizeTransfer( \naddress asset, \naddress from, \naddress to, \nuint256 amount, \nuint256 balanceFromAfter, \nuint256 balanceToBefore \n) external; \n\nfunction getReservesList() external view returns (address[] memory); \n\nfunction getAddressesProvider() external view returns (ILendingPoolAddressesProvider); \n\nfunction setPause(bool val) external; \n\nfunction paused() external view returns (bool); \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {BaseUniswapAdapter} from './BaseUniswapAdapter.sol'; \nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol'; \nimport {IUniswapV2Router02} from '../interfaces/IUniswapV2Router02.sol'; \nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \n\n \ncontract UniswapRepayAdapter is BaseUniswapAdapter { \nstruct RepayParams { \naddress collateralAsset; \nuint256 collateralAmount; \nuint256 rateMode; \nPermitSignature permitSignature; \nbool useEthPath; \n} \n\nconstructor( \nILendingPoolAddressesProvider addressesProvider, \nIUniswapV2Router02 uniswapRouter, \naddress wethAddress \n) public BaseUniswapAdapter(addressesProvider, uniswapRouter, wethAddress) {} \n\n \nfunction executeOperation( \naddress[] calldata assets, \nuint256[] calldata amounts, \nuint256[] calldata premiums, \naddress initiator, \nbytes calldata params \n) external override returns (bool) { \nrequire(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL'); \n\nRepayParams memory decodedParams = _decodeParams(params); \n\n_swapAndRepay( \ndecodedParams.collateralAsset, \nassets[0], \namounts[0], \ndecodedParams.collateralAmount, \ndecodedParams.rateMode, \ninitiator, \npremiums[0], \ndecodedParams.permitSignature, \ndecodedParams.useEthPath \n); \n\nreturn true; \n} \n\n \nfunction swapAndRepay( \naddress collateralAsset, \naddress debtAsset, \nuint256 collateralAmount, \nuint256 debtRepayAmount, \nuint256 debtRateMode, \nPermitSignature calldata permitSignature, \nbool useEthPath \n) external { \nDataTypes.ReserveData memory collateralReserveData = _getReserveData(collateralAsset); \nDataTypes.ReserveData memory debtReserveData = _getReserveData(debtAsset); \n\naddress debtToken = \nDataTypes.InterestRateMode(debtRateMode) == DataTypes.InterestRateMode.STABLE \n? debtReserveData.stableDebtTokenAddress \n: debtReserveData.variableDebtTokenAddress; \n\nuint256 currentDebt = IERC20(debtToken).balanceOf(msg.sender); \nuint256 amountToRepay = debtRepayAmount <= currentDebt ? debtRepayAmount : currentDebt; \n\nif (collateralAsset != debtAsset) { \nuint256 maxCollateralToSwap = collateralAmount; \nif (amountToRepay < debtRepayAmount) { \nmaxCollateralToSwap = maxCollateralToSwap.mul(amountToRepay).div(debtRepayAmount); \n} \n\n// Get exact collateral needed for the swap to avoid leftovers \nuint256[] memory amounts = \n_getAmountsIn(collateralAsset, debtAsset, amountToRepay, useEthPath); \nrequire(amounts[0] <= maxCollateralToSwap, 'slippage too high'); \n\n// Pull aTokens from user \n_pullAToken( \ncollateralAsset, \ncollateralReserveData.aTokenAddress, \nmsg.sender, \namounts[0], \npermitSignature \n); \n\n// Swap collateral for debt asset \n_swapTokensForExactTokens(collateralAsset, debtAsset, amounts[0], amountToRepay, useEthPath); \n} else { \n// Pull aTokens from user \n_pullAToken( \ncollateralAsset, \ncollateralReserveData.aTokenAddress, \nmsg.sender, \namountToRepay, \npermitSignature \n); \n} \n\n// Repay debt. Approves 0 first to comply with tokens that implement the anti frontrunning approv\nIERC20(debtAsset).safeApprove(address(LENDING_POOL), 0); \nIERC20(debtAsset).safeApprove(address(LENDING_POOL), amountToRepay); \nLENDING_POOL.repay(debtAsset, amountToRepay, debtRateMode, msg.sender); \n} \n\n \nfunction _swapAndRepay( \naddress collateralAsset, \naddress debtAsset, \nuint256 amount, \nuint256 collateralAmount, \nuint256 rateMode, \naddress initiator, \nuint256 premium, \nPermitSignature memory permitSignature, \nbool useEthPath \n) internal { \nDataTypes.ReserveData memory collateralReserveData = _getReserveData(collateralAsset); \n\n// Repay debt. Approves for 0 first to comply with tokens that implement the anti frontrunning app\nIERC20(debtAsset).safeApprove(address(LENDING_POOL), 0); \nIERC20(debtAsset).safeApprove(address(LENDING_POOL), amount); \nuint256 repaidAmount = IERC20(debtAsset).balanceOf(address(this)); \nLENDING_POOL.repay(debtAsset, amount, rateMode, initiator); \nrepaidAmount = repaidAmount.sub(IERC20(debtAsset).balanceOf(address(this))); \n\nif (collateralAsset != debtAsset) { \nuint256 maxCollateralToSwap = collateralAmount; \nif (repaidAmount < amount) { \nmaxCollateralToSwap = maxCollateralToSwap.mul(repaidAmount).div(amount); \n} \n\nuint256 neededForFlashLoanDebt = repaidAmount.add(premium); \nuint256[] memory amounts = \n_getAmountsIn(collateralAsset, debtAsset, neededForFlashLoanDebt, useEthPath); \nrequire(amounts[0] <= maxCollateralToSwap, 'slippage too high'); \n\n// Pull aTokens from user \n_pullAToken( \ncollateralAsset, \ncollateralReserveData.aTokenAddress, \ninitiator, \namounts[0], \npermitSignature \n); \n\n// Swap collateral asset to the debt asset \n_swapTokensForExactTokens( \ncollateralAsset, \ndebtAsset, \namounts[0], \nneededForFlashLoanDebt, \nuseEthPath \n); \n} else { \n// Pull aTokens from user \n_pullAToken( \ncollateralAsset, \ncollateralReserveData.aTokenAddress, \ninitiator, \nrepaidAmount.add(premium), \npermitSignature \n); \n} \n\n// Repay flashloan. Approves for 0 first to comply with tokens that implement the anti frontrunni\nIERC20(debtAsset).safeApprove(address(LENDING_POOL), 0); \nIERC20(debtAsset).safeApprove(address(LENDING_POOL), amount.add(premium)); \n} \n\n \nfunction _decodeParams(bytes memory params) internal pure returns (RepayParams memory) { \n( \naddress collateralAsset, \nuint256 collateralAmount, \nuint256 rateMode, \nuint256 permitAmount, \nuint256 deadline, \nuint8 v, \nbytes32 r, \nbytes32 s, \nbool useEthPath \n) = \nabi.decode( \nparams, \n(address, uint256, uint256, uint256, uint256, uint8, bytes32, bytes32, bool) \n); \n\nreturn \nRepayParams( \ncollateralAsset, \ncollateralAmount, \nrateMode, \nPermitSignature(permitAmount, deadline, v, r, s), \nuseEthPath \n); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \npragma experimental ABIEncoderV2; \n\nimport {BaseUniswapAdapter} from './BaseUniswapAdapter.sol'; \nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol'; \nimport {IUniswapV2Router02} from '../interfaces/IUniswapV2Router02.sol'; \nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport {DataTypes} from '../protocol/libraries/types/DataTypes.sol'; \nimport {Helpers} from '../protocol/libraries/helpers/Helpers.sol'; \nimport {IPriceOracleGetter} from '../interfaces/IPriceOracleGetter.sol'; \nimport {IAToken} from '../interfaces/IAToken.sol'; \nimport {ReserveConfiguration} from '../protocol/libraries/configuration/ReserveConfiguration.sol'; \n\n \ncontract FlashLiquidationAdapter is BaseUniswapAdapter { \nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap; \nuint256 internal constant LIQUIDATION_CLOSE_FACTOR_PERCENT = 5000; \n\nstruct LiquidationParams { \naddress collateralAsset; \naddress borrowedAsset; \naddress user; \nuint256 debtToCover; \nbool useEthPath; \n} \n\nstruct LiquidationCallLocalVars { \nuint256 initFlashBorrowedBalance; \nuint256 diffFlashBorrowedBalance; \nuint256 initCollateralBalance; \nuint256 diffCollateralBalance; \nuint256 flashLoanDebt; \nuint256 soldAmount; \nuint256 remainingTokens; \nuint256 borrowedAssetLeftovers; \n} \n\nconstructor( \nILendingPoolAddressesProvider addressesProvider, \nIUniswapV2Router02 uniswapRouter, \naddress wethAddress \n) public BaseUniswapAdapter(addressesProvider, uniswapRouter, wethAddress) {} \n\n \nfunction executeOperation( \naddress[] calldata assets, \nuint256[] calldata amounts, \nuint256[] calldata premiums, \naddress initiator, \nbytes calldata params \n) external override returns (bool) { \nrequire(msg.sender == address(LENDING_POOL), 'CALLER_MUST_BE_LENDING_POOL'); \n\nLiquidationParams memory decodedParams = _decodeParams(params); \n\nrequire(assets.length == 1 && assets[0] == decodedParams.borrowedAsset, 'INCONSISTENT_PARAMS'); \n\n_liquidateAndSwap( \ndecodedParams.collateralAsset, \ndecodedParams.borrowedAsset, \ndecodedParams.user, \ndecodedParams.debtToCover, \ndecodedParams.useEthPath, \namounts[0], \npremiums[0], \ninitiator \n); \n\nreturn true; \n} \n\n \nfunction _liquidateAndSwap( \naddress collateralAsset, \naddress borrowedAsset, \naddress user, \nuint256 debtToCover, \nbool useEthPath, \nuint256 flashBorrowedAmount, \nuint256 premium, \naddress initiator \n) internal { \nLiquidationCallLocalVars memory vars; \nvars.initCollateralBalance = IERC20(collateralAsset).balanceOf(address(this)); \nif (collateralAsset != borrowedAsset) { \nvars.initFlashBorrowedBalance = IERC20(borrowedAsset).balanceOf(address(this)); \n\n// Track leftover balance to rescue funds in case of external transfers into this contract \nvars.borrowedAssetLeftovers = vars.initFlashBorrowedBalance.sub(flashBorrowedAmount); \n} \nvars.flashLoanDebt = flashBorrowedAmount.add(premium); \n\n// Approve LendingPool to use debt token for liquidation \nIERC20(borrowedAsset).approve(address(LENDING_POOL), debtToCover); \n\n// Liquidate the user position and release the underlying collateral \nLENDING_POOL.liquidationCall(collateralAsset, borrowedAsset, user, debtToCover, false); \n\n// Discover the liquidated tokens \nuint256 collateralBalanceAfter = IERC20(collateralAsset).balanceOf(address(this)); \n\n// Track only collateral released, not current asset balance of the contract \nvars.diffCollateralBalance = collateralBalanceAfter.sub(vars.initCollateralBalance); \n\nif (collateralAsset != borrowedAsset) { \n// Discover flash loan balance after the liquidation \nuint256 flashBorrowedAssetAfter = IERC20(borrowedAsset).balanceOf(address(this)); \n\n// Use only flash loan borrowed assets, not current asset balance of the contract \nvars.diffFlashBorrowedBalance = flashBorrowedAssetAfter.sub(vars.borrowedAssetLeftovers); \n\n// Swap released collateral into the debt asset, to repay the flash loan \nvars.soldAmount = _swapTokensForExactTokens( \ncollateralAsset, \nborrowedAsset, \nvars.diffCollateralBalance, \nvars.flashLoanDebt.sub(vars.diffFlashBorrowedBalance), \nuseEthPath \n); \nvars.remainingTokens = vars.diffCollateralBalance.sub(vars.soldAmount); \n} else { \nvars.remainingTokens = vars.diffCollateralBalance.sub(premium); \n} \n\n// Allow repay of flash loan \nIERC20(borrowedAsset).approve(address(LENDING_POOL), vars.flashLoanDebt); \n\n// Transfer remaining tokens to initiator \nif (vars.remainingTokens > 0) { \nIERC20(collateralAsset).transfer(initiator, vars.remainingTokens); \n} \n} \n\n \nfunction _decodeParams(bytes memory params) internal pure returns (LiquidationParams memory) { \n( \naddress collateralAsset, \naddress borrowedAsset, \naddress user, \nuint256 debtToCover, \nbool useEthPath \n) = abi.decode(params, (address, address, address, uint256, bool)); \n\nreturn LiquidationParams(collateralAsset, borrowedAsset, user, debtToCover, useEthPath); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport {Context} from '../../dependencies/openzeppelin/contracts/Context.sol'; \nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport {IERC20Detailed} from '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol'; \nimport {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol'; \nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol'; \n\n \nabstract contract IncentivizedERC20 is Context, IERC20, IERC20Detailed { \nusing SafeMath for uint256; \n\nmapping(address => uint256) internal _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \nuint256 internal _totalSupply; \nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\nconstructor( \nstring memory name, \nstring memory symbol, \nuint8 decimals \n) public { \n_name = name; \n_symbol = symbol; \n_decimals = decimals; \n} \n\n \nfunction name() public view override returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view override returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view override returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction _getIncentivesController() internal view virtual returns(IAaveIncentivesController); \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nemit Transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) \npublic \nview \nvirtual \noverride \nreturns (uint256) \n{ \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n_approve( \nsender, \n_msgSender(), \n_allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance') \n); \nemit Transfer(sender, recipient, amount); \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) \npublic \nvirtual \nreturns (bool) \n{ \n_approve( \n_msgSender(), \nspender, \n_allowances[_msgSender()][spender].sub( \nsubtractedValue, \n'ERC20: decreased allowance below zero' \n) \n); \nreturn true; \n} \n\nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), 'ERC20: transfer from the zero address'); \nrequire(recipient != address(0), 'ERC20: transfer to the zero address'); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\nuint256 oldSenderBalance = _balances[sender]; \n_balances[sender] = oldSenderBalance.sub(amount, 'ERC20: transfer amount exceeds balance'); \nuint256 oldRecipientBalance = _balances[recipient]; \n_balances[recipient] = _balances[recipient].add(amount); \n\nif (address(_getIncentivesController()) != address(0)) { \nuint256 currentTotalSupply = _totalSupply; \n_getIncentivesController().handleAction(sender, currentTotalSupply, oldSenderBalance); \nif (sender != recipient) { \n_getIncentivesController().handleAction(recipient, currentTotalSupply, oldRecipientBalance); \n} \n} \n} \n\nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), 'ERC20: mint to the zero address'); \n\n_beforeTokenTransfer(address(0), account, amount); \n\nuint256 oldTotalSupply = _totalSupply; \n_totalSupply = oldTotalSupply.add(amount); \n\nuint256 oldAccountBalance = _balances[account]; \n_balances[account] = oldAccountBalance.add(amount); \n\nif (address(_getIncentivesController()) != address(0)) { \n_getIncentivesController().handleAction(account, oldTotalSupply, oldAccountBalance); \n} \n} \n\nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), 'ERC20: burn from the zero address'); \n\n_beforeTokenTransfer(account, address(0), amount); \n\nuint256 oldTotalSupply = _totalSupply; \n_totalSupply = oldTotalSupply.sub(amount); \n\nuint256 oldAccountBalance = _balances[account]; \n_balances[account] = oldAccountBalance.sub(amount, 'ERC20: burn amount exceeds balance'); \n\nif (address(_getIncentivesController()) != address(0)) { \n_getIncentivesController().handleAction(account, oldTotalSupply, oldAccountBalance); \n} \n} \n\nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), 'ERC20: approve from the zero address'); \nrequire(spender != address(0), 'ERC20: approve to the zero address'); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\nfunction _setName(string memory newName) internal { \n_name = newName; \n} \n\nfunction _setSymbol(string memory newSymbol) internal { \n_symbol = newSymbol; \n} \n\nfunction _setDecimals(uint8 newDecimals) internal { \n_decimals = newDecimals; \n} \n\nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport {Ownable} from '../../dependencies/openzeppelin/contracts/Ownable.sol'; \n\n// Prettier ignore to prevent buidler flatter bug \n// prettier-ignore \nimport {InitializableImmutableAdminUpgradeabilityProxy} from '../libraries/aave-upgradeability/Initia\n\nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol'; \n\n \ncontract LendingPoolAddressesProvider is Ownable, ILendingPoolAddressesProvider { \nstring private _marketId; \nmapping(bytes32 => address) private _addresses; \n\nbytes32 private constant LENDING_POOL = 'LENDING_POOL'; \nbytes32 private constant LENDING_POOL_CONFIGURATOR = 'LENDING_POOL_CONFIGURATOR'; \nbytes32 private constant POOL_ADMIN = 'POOL_ADMIN'; \nbytes32 private constant EMERGENCY_ADMIN = 'EMERGENCY_ADMIN'; \nbytes32 private constant LENDING_POOL_COLLATERAL_MANAGER = 'COLLATERAL_MANAGER'; \nbytes32 private constant PRICE_ORACLE = 'PRICE_ORACLE'; \nbytes32 private constant LENDING_RATE_ORACLE = 'LENDING_RATE_ORACLE'; \n\nconstructor(string memory marketId) public { \n_setMarketId(marketId); \n} \n\n \nfunction getMarketId() external view override returns (string memory) { \nreturn _marketId; \n} \n\n \nfunction setMarketId(string memory marketId) external override onlyOwner { \n_setMarketId(marketId); \n} \n\n \nfunction setAddressAsProxy(bytes32 id, address implementationAddress) \nexternal \noverride \nonlyOwner \n{ \n_updateImpl(id, implementationAddress); \nemit AddressSet(id, implementationAddress, true); \n} \n\n \nfunction setAddress(bytes32 id, address newAddress) external override onlyOwner { \n_addresses[id] = newAddress; \nemit AddressSet(id, newAddress, false); \n} \n\n \nfunction getAddress(bytes32 id) public view override returns (address) { \nreturn _addresses[id]; \n} \n\n \nfunction getLendingPool() external view override returns (address) { \nreturn getAddress(LENDING_POOL); \n} \n\n \nfunction setLendingPoolImpl(address pool) external override onlyOwner { \n_updateImpl(LENDING_POOL, pool); \nemit LendingPoolUpdated(pool); \n} \n\n \nfunction getLendingPoolConfigurator() external view override returns (address) { \nreturn getAddress(LENDING_POOL_CONFIGURATOR); \n} \n\n \nfunction setLendingPoolConfiguratorImpl(address configurator) external override onlyOwner { \n_updateImpl(LENDING_POOL_CONFIGURATOR, configurator); \nemit LendingPoolConfiguratorUpdated(configurator); \n} \n\n \n\nfunction getLendingPoolCollateralManager() external view override returns (address) { \nreturn getAddress(LENDING_POOL_COLLATERAL_MANAGER); \n} \n\n \nfunction setLendingPoolCollateralManager(address manager) external override onlyOwner { \n_addresses[LENDING_POOL_COLLATERAL_MANAGER] = manager; \nemit LendingPoolCollateralManagerUpdated(manager); \n} \n\n \n\nfunction getPoolAdmin() external view override returns (address) { \nreturn getAddress(POOL_ADMIN); \n} \n\nfunction setPoolAdmin(address admin) external override onlyOwner { \n_addresses[POOL_ADMIN] = admin; \nemit ConfigurationAdminUpdated(admin); \n} \n\nfunction getEmergencyAdmin() external view override returns (address) { \nreturn getAddress(EMERGENCY_ADMIN); \n} \n\nfunction setEmergencyAdmin(address emergencyAdmin) external override onlyOwner { \n_addresses[EMERGENCY_ADMIN] = emergencyAdmin; \nemit EmergencyAdminUpdated(emergencyAdmin); \n} \n\nfunction getPriceOracle() external view override returns (address) { \nreturn getAddress(PRICE_ORACLE); \n} \n\nfunction setPriceOracle(address priceOracle) external override onlyOwner { \n_addresses[PRICE_ORACLE] = priceOracle; \nemit PriceOracleUpdated(priceOracle); \n} \n\nfunction getLendingRateOracle() external view override returns (address) { \nreturn getAddress(LENDING_RATE_ORACLE); \n} \n\nfunction setLendingRateOracle(address lendingRateOracle) external override onlyOwner { \n_addresses[LENDING_RATE_ORACLE] = lendingRateOracle; \nemit LendingRateOracleUpdated(lendingRateOracle); \n} \n\n \nfunction _updateImpl(bytes32 id, address newAddress) internal { \naddress payable proxyAddress = payable(_addresses[id]); \n\nInitializableImmutableAdminUpgradeabilityProxy proxy = \nInitializableImmutableAdminUpgradeabilityProxy(proxyAddress); \nbytes memory params = abi.encodeWithSignature('initialize(address)', address(this)); \n\nif (proxyAddress == address(0)) { \nproxy = new InitializableImmutableAdminUpgradeabilityProxy(address(this)); \nproxy.initialize(newAddress, params); \n_addresses[id] = address(proxy); \nemit ProxyCreated(id, address(proxy)); \n} else { \nproxy.upgradeToAndCall(newAddress, params); \n} \n} \n\nfunction _setMarketId(string memory marketId) internal { \n_marketId = marketId; \nemit MarketIdSet(marketId); \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \n\nimport './Context.sol'; \nimport './IERC20.sol'; \nimport './SafeMath.sol'; \nimport './Address.sol'; \n\n \ncontract ERC20 is Context, IERC20 { \nusing SafeMath for uint256; \nusing Address for address; \n\nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor(string memory name, string memory symbol) public { \n_name = name; \n_symbol = symbol; \n_decimals = 18; \n} \n\n \nfunction name() public view returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) \npublic \nview \nvirtual \noverride \nreturns (uint256) \n{ \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n_approve( \nsender, \n_msgSender(), \n_allowances[sender][_msgSender()].sub(amount, 'ERC20: transfer amount exceeds allowance') \n); \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) \npublic \nvirtual \nreturns (bool) \n{ \n_approve( \n_msgSender(), \nspender, \n_allowances[_msgSender()][spender].sub( \nsubtractedValue, \n'ERC20: decreased allowance below zero' \n) \n); \nreturn true; \n} \n\n \nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), 'ERC20: transfer from the zero address'); \nrequire(recipient != address(0), 'ERC20: transfer to the zero address'); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, 'ERC20: transfer amount exceeds balance'); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), 'ERC20: mint to the zero address'); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), 'ERC20: burn from the zero address'); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, 'ERC20: burn amount exceeds balance'); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), 'ERC20: approve from the zero address'); \nrequire(spender != address(0), 'ERC20: approve to the zero address'); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _setupDecimals(uint8 decimals_) internal { \n_decimals = decimals_; \n} \n\n \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.4.22 <=0.6.12; \n\ncontract WETH9 { \nstring public name = 'Wrapped Ether'; \nstring public symbol = 'WETH'; \nuint8 public decimals = 18; \n\nevent Approval(address indexed src, address indexed guy, uint256 wad); \nevent Transfer(address indexed src, address indexed dst, uint256 wad); \nevent Deposit(address indexed dst, uint256 wad); \nevent Withdrawal(address indexed src, uint256 wad); \n\nmapping(address => uint256) public balanceOf; \nmapping(address => mapping(address => uint256)) public allowance; \n\nreceive() external payable { \ndeposit(); \n} \n\nfunction deposit() public payable { \nbalanceOf[msg.sender] += msg.value; \nemit Deposit(msg.sender, msg.value); \n} \n\nfunction withdraw(uint256 wad) public { \nrequire(balanceOf[msg.sender] >= wad); \nbalanceOf[msg.sender] -= wad; \nmsg.sender.transfer(wad); \nemit Withdrawal(msg.sender, wad); \n} \n\nfunction totalSupply() public view returns (uint256) { \nreturn address(this).balance; \n} \n\nfunction approve(address guy, uint256 wad) public returns (bool) { \nallowance[msg.sender][guy] = wad; \nemit Approval(msg.sender, guy, wad); \nreturn true; \n} \n\nfunction transfer(address dst, uint256 wad) public returns (bool) { \nreturn transferFrom(msg.sender, dst, wad); \n} \n\nfunction transferFrom( \naddress src, \naddress dst, \nuint256 wad \n) public returns (bool) { \nrequire(balanceOf[src] >= wad); \n\nif (src != msg.sender && allowance[src][msg.sender] != uint256(-1)) { \nrequire(allowance[src][msg.sender] >= wad); \nallowance[src][msg.sender] -= wad; \n} \n\nbalanceOf[src] -= wad; \nbalanceOf[dst] += wad; \n\nemit Transfer(src, dst, wad); \n\nreturn true; \n} \n} \n\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.10; \n\n\n\ncontract CoriteToken is Context, IBEP20, Ownable { \nusing SafeMath for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nevent TransferToNative(address indexed from, bytes32 indexed to, uint256 value); \nevent TransferFromNative(address indexed to, bytes32 indexed refID, uint256 value); \n\nuint256 private _totalSupply; \nuint8 private _decimals; \nstring private _symbol; \nstring private _name; \n\nconstructor(uint256 theTotalSupply, address owner) { \n_name = \"CO\"; \n_symbol = \"CO\"; \n_decimals = 6; \n_totalSupply = theTotalSupply; \n_balances[owner] = theTotalSupply; \nemit Transfer(address(0), owner, _totalSupply); \n\ntransferOwnership(owner); \n} \n\n \nfunction getOwner() override external view returns (address) { \nreturn owner(); \n} \n\n \nfunction decimals() override external view returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction symbol() override external view returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction name() override external view returns (string memory) { \nreturn _name; \n} \n\n \nfunction totalSupply() override external view returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) override external view returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) override external returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) override external view returns (uint256) { \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) override external returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom(address sender, address recipient, uint256 amount) override external returns \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amo\nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue)  public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: d\nreturn true; \n} \n\n \nfunction _transfer(address sender, address recipient, uint256 amount) internal { \nrequire(sender != address(0), \"BEP20: transfer from the zero address\"); \nrequire(recipient != address(0), \"BEP20: transfer to the zero address\"); \n\n_balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal { \nrequire(account != address(0), \"BEP20: mint to the zero address\"); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction transferToNative(bytes32 to, uint256 value) public { \n_burn(msg.sender, value); \nemit TransferToNative(msg.sender, to, value); \n} \n\n \nfunction transferFromNative(address to, uint256 value, bytes32 refID) public onlyOwner returns (b\n_mint(to, value); \nemit TransferFromNative(to, refID, value); \nreturn true; \n} \n\n \nfunction _burn(address account, uint256 amount) internal { \nrequire(account != address(0), \"BEP20: burn from the zero address\"); \n\n_balances[account] = _balances[account].sub(amount, \"BEP20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve(address owner, address spender, uint256 amount) internal { \nrequire(owner != address(0), \"BEP20: approve from the zero address\"); \nrequire(spender != address(0), \"BEP20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _burnFrom(address account, uint256 amount) internal { \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n \ncontract ERC20 is Context, IERC20 { \nusing SafeMath for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor (string memory name_, string memory symbol_) public { \n_name = name_; \n_symbol = symbol_; \n_decimals = 18; \n} \n\n \nfunction name() public view virtual returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view virtual returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view virtual returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public view virtual override returns (uint256)\nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC2\nreturn true; \n} \n\n \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _setupDecimals(uint8 decimals_) internal virtual { \n_decimals = decimals_; \n} \n\n \nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n  \nlibrary Address { \n  \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n  \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n  \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n  \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n  \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns \nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n  \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n  \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n  \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n  \nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \nreturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\"); \n} \n\n  \nfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) inte\nrequire(isContract(target), \"Address: delegate call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.delegatecall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n \ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable { \nusing SafeMathUpgradeable for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nfunction __ERC20_init(string memory name_, string memory symbol_) internal initializer { \n__Context_init_unchained(); \n__ERC20_init_unchained(name_, symbol_); \n} \n\nfunction __ERC20_init_unchained(string memory name_, string memory symbol_) internal initializer \n_name = name_; \n_symbol = symbol_; \n_decimals = 18; \n} \n\n \nfunction name() public view virtual returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view virtual returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view virtual returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public view virtual override returns (uint256)\nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC2\nreturn true; \n} \n\n \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _setupDecimals(uint8 decimals_) internal virtual { \n_decimals = decimals_; \n} \n\n \nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } \nuint256[44] private __gap; \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n \nlibrary Address { \n \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns\nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n \nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \nreturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\"); \n} \n\n \nfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) inte\nrequire(isContract(target), \"Address: delegate call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.delegatecall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\nimport \"./IERC20.sol\"; \nimport \"./IERC20Metadata.sol\"; \nimport \"./Context.sol\"; \n\n \ncontract ERC20 is Context, IERC20, IERC20Metadata { \nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n//\u6388\u6743 \n\nuint256 private _totalSupply; \n//\u4ee3\u5e01\u603b\u91cf \n\nstring public _name; \n//\u4ee3\u5e01\u540d\u79f0 \u7b80\u79f0 \nstring public _symbol; \n\n \nconstructor(string memory name_, string memory symbol_) { \n_name = name_; \n_symbol = symbol_; \n} \n\n \nfunction name() public view virtual override returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view virtual override returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view virtual override returns (uint8) { \nreturn 18; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public view virtual override returns (uint256) \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n\nuint256 currentAllowance = _allowances[sender][_msgSender()]; \nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\"); \nunchecked { \n_approve(sender, _msgSender(), currentAllowance - amount); \n} \n\nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\nuint256 currentAllowance = _allowances[_msgSender()][spender]; \nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\"); \nunchecked { \n_approve(_msgSender(), spender, currentAllowance - subtractedValue); \n} \n\nreturn true; \n} \n\n \nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\nuint256 senderBalance = _balances[sender]; \nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\"); \nunchecked { \n_balances[sender] = senderBalance - amount; \n} \n_balances[recipient] += amount; \n\nemit Transfer(sender, recipient, amount); \n\n_afterTokenTransfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply += amount; \n_balances[account] += amount; \nemit Transfer(address(0), account, amount); \n\n_afterTokenTransfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\nuint256 accountBalance = _balances[account]; \nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\"); \nunchecked { \n_balances[account] = accountBalance - amount; \n} \n_totalSupply -= amount; \n\nemit Transfer(account, address(0), amount); \n\n_afterTokenTransfer(account, address(0), amount); \n} \n\n \nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\nimport \"./ERC20/ERC20.sol\"; \nimport \"./ERC20/ERC20Burnable.sol\"; \nimport \"./ERC20/ERC20Mintable.sol\"; \nimport \"./Ownable.sol\"; \n\ncontract FIDO is ERC20Mintable, ERC20Burnable, Ownable { \nusing SafeMath for uint256; \n\naddress public operator; \n\nuint256 private _cap = 210000000 * 10**18; \nuint256 public shareRateDecimal = 4; // 10000 \nuint8 public totalReleaseWeek = 25; \nuint8 public releasedWeek = 0; \nuint256 public lastRealeaseTime = 0; \naddress[] public releaseRecipient; \nmapping(address => uint256) public releaseShareRate; \nevent Release(uint256 timestamp, uint8 releaseCount); \nevent OperatorshipTransferred( \naddress indexed previousOperator, \naddress indexed newOperator \n); \n\nconstructor(address _operator) ERC20(\"FIDO\", \"FIDO\") Pausable() Ownable() { \noperator = _operator; \nemit OperatorshipTransferred(address(0), operator); \n_setupDecimals(18); \naddReleaseRecipient(0x9Dafc698200B9Bb509612ae39f007855d1c26B3D, 605); \naddReleaseRecipient(0xAf9736eC4814a2947B7B64354c612A41Be518b9f, 110);  \naddReleaseRecipient(0x6fc89Ac788A31880f020AabA39dB49e05D803670, 100); \naddReleaseRecipient(0x6B8A58B626dE1Aa35b9E24d4e9012E33d7084CD5, 100); // 1% \naddReleaseRecipient(0xeb8d2AC91A66b8A7790c808a5B172E647a81103a, 60); \naddReleaseRecipient(0x90d5111f4C736Ac4A0B0f90589149cD25A894537, 57); \naddReleaseRecipient(0xF3DFAcED2aE482473BEC9Ab00863C51B132e8169, 50); \naddReleaseRecipient(0x78CfF87757fbE3a18a23d28A3Ad216b5F1d26a7F, 40); \naddReleaseRecipient(0xC6D294310A8D9946c458dD886A51EFA3DA04593f, 40); \naddReleaseRecipient(0x6CA91d3f8675D83bBEf4bb3C522CF75b1B4AAD1C, 40); \naddReleaseRecipient(0xA73558c94cBDB42eF189E68C9D993D252f6F252B, 40); \naddReleaseRecipient(0xE9088899D6b8b1082A051d6bC06AD2B6e7AECe31, 40); \naddReleaseRecipient(0xf6c062b71344650e0A23Ff7D10e00842147e5e21, 30); \naddReleaseRecipient(0xf1c0091B3eFEC6e621E285b6a980734b9C437b85, 30); \naddReleaseRecipient(0x3Fc3f768c5eDC881690b33292F499964917b8189, 30); \naddReleaseRecipient(0x71192f0df65a58982fFA4e413296389f98c853B7, 20); \naddReleaseRecipient(0xf0f9b88B3e66D61469DB584712B52372C1e55E69, 15); \naddReleaseRecipient(0xeb84d5762ba1A68c3d0723518D12Ad417Df49363, 15); \naddReleaseRecipient(0xB2c04a3B20B5a498bcAE1576900A000971EDb6Dd, 10); \naddReleaseRecipient(0x52abb7EC70685b0C484F3fbc20Cce473A6c00dD3, 10); \naddReleaseRecipient(0x1cBb40e2137741Dbf6A1aFc1fa0a95fB1016b30f, 10); \naddReleaseRecipient(0xBe19c8eCf41a3F38664827C89aAD87f16dF3De38, 10); \naddReleaseRecipient(0x1F6361D690789761035585338826E4F89cbA9a44, 10); // 0.1% \naddReleaseRecipient(0xe674816FD0C0e4062B7e43dC72c34cb3023fB825, 10); \naddReleaseRecipient(0x6924F8E39623a1f5aA776637d2008Ad1c4e16598, 5); \naddReleaseRecipient(0x979cAE9260C799E73cd320936b5c5A902D291636, 5); \naddReleaseRecipient(0x7Facf41272d5a8c490Cb79CfE84981169259d935, 5); \naddReleaseRecipient(0x0299386481015Ce66FC3818DE9E7d5302FFf5278, 3); \n} \n\nmodifier onlyOperator() { \nrequire( \n_msgSender() == operator, \n\"Operable: caller is not the operator\" \n); \n_; \n} \n\nfunction transferOperatorship(address newOperator) external onlyOwner { \nrequire( \nnewOperator != address(0), \n\"Operable: new operator is the zero address\" \n); \nemit OperatorshipTransferred(operator, newOperator); \noperator = newOperator; \n} \n\nfunction pause() external onlyOperator { \n_pause(); \n} \n\nfunction unPause() external onlyOperator { \n_unpause(); \n} \n\nfunction addMinter(address minter) external onlyOperator { \n_addMinter(minter); \n} \n\nfunction removeMinter(address minter) external onlyOperator { \n_removeMinter(minter); \n} \n\nfunction addReleaseRecipient(address recipient, uint256 shareRate) \ninternal \n{ \nrequire(releaseShareRate[recipient] == 0, \"already a releaseRecipient\"); \nreleaseRecipient.push(recipient); \nreleaseShareRate[recipient] = shareRate; \n} \n\nfunction releaseShare() external onlyOperator() { \nrequire( \nblock.timestamp - lastRealeaseTime > 1 weeks, \n\"FIDO: see you next week\" \n); \nrequire( \nreleasedWeek < totalReleaseWeek, \n\"FIDO: no share needs to release\" \n); \nuint256 amount; \nfor (uint256 index = 0; index < releaseRecipient.length; index++) { \namount = releaseShareRate[releaseRecipient[index]] \n.mul(_cap) \n.div(10**shareRateDecimal) \n.div(totalReleaseWeek); \n_mint(releaseRecipient[index], amount); \n} \nreleasedWeek += 1; \nlastRealeaseTime = block.timestamp; \nemit Release(block.timestamp, releasedWeek); \n} \n\n \nfunction cap() public view virtual returns (uint256) { \nreturn _cap; \n} \n\n \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual override { \nsuper._beforeTokenTransfer(from, to, amount); \n\nif (from == address(0)) { \n// When minting tokens \nrequire(totalSupply().add(amount) <= cap(), \"ERC20: cap exceeded\"); \n} \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\nimport \"../Context.sol\"; \nimport \"../interfaces/IERC20.sol\"; \nimport \"../libraries/SafeMath.sol\"; \n\n \ncontract ERC20 is Context, IERC20 { \nusing SafeMath for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor (string memory name_, string memory symbol_) { \n_name = name_; \n_symbol = symbol_; \n_decimals = 18; \n} \n\n \nfunction name() public view virtual returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view virtual returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view virtual returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public view virtual override returns (uint256)\nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC2\nreturn true; \n} \n\n \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _setupDecimals(uint8 decimals_) internal virtual { \n_decimals = decimals_; \n} \n\n \nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n\n\n \ncontract ERC20 is Context, IERC20 { \nusing SafeMath for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor (string memory name_, string memory symbol_) public { \n_name = name_; \n_symbol = symbol_; \n_decimals = 18; \n} \n\n \nfunction name() public view virtual returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public view virtual returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public view virtual returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public view virtual override returns (uint256) \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC2\nreturn true; \n} \n\n \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _setupDecimals(uint8 decimals_) internal virtual { \n_decimals = decimals_; \n} \n\n library EnumerableSet { // To implement this library for multiple types\nwith as little code // repetition as possible, we write it in terms of a generic Set type with // bytes32 values. // The\nSet implementation uses private functions, and user-facing // implementations (such as AddressSet) are just\nwrappers around the // underlying Set. // This means that we can only create new EnumerableSets for types that\nfit // in bytes32.\nstruct Set {\n* @dev Hook that is called before any transfer of tokens. This includes \n* minting and burning. \n* \n* Calling conditions: \n* \n* - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens \n* will be to transferred to `to`. \n* - when `from` is zero, `amount` tokens will be minted for `to`. \n* - when `to` is zero, `amount` of ``from``'s tokens will be burned. \n* - `from` and `to` are never both zero. \n* \n* To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks]\n*/ \nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } \n} \n\n\n// File @openzeppelin/contracts/utils/EnumerableSet.sol@v3.4.2 \n\n// : MIT \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.0 <0.8.0; \n\n function add(Set storage set, bytes32 value) private returns (bool) { if (!contains(set,\nvalue)) {\nset._values.push(value); \n// The value is stored at length-1, but we add 1 to all indexes \n// and use 0 as a sentinel value \nset._indexes[value] = set._values.length; \nreturn true;\n} else {\nreturn false;\n} }\n function remove(Set storage set, bytes32 value) private returns (bool) { // We read and store the\nvalue's index to prevent multiple reads from the same storage slot uint256 valueIndex = set.indexes[value];\nif (valueIndex != 0) { // Equivalent to contains(set, value)\n// To delete an element from the _values array in O(1), we swap the element to delete with t\n// the array, and then remove the last element (sometimes called as 'swap and pop'). \n// This modifies the order of the array, as noted in {at}. \n\nuint256 toDeleteIndex = valueIndex - 1; \nuint256 lastIndex = set._values.length - 1; \n\n// When the value to delete is the last one, the swap operation is unnecessary. However, sin\n// so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement. \n\nbytes32 lastvalue = set._values[lastIndex]; \n\n// Move the last value to the index where the value to delete is \nset._values[toDeleteIndex] = lastvalue; \n// Update the index for the moved value \nset._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based \n\n} else {\nreturn false;\n} }\n function contains(Set storage set, bytes32 value) private\nview returns (bool) { return set.indexes[value] != 0; }\n function length(Set storage set) private view returns\n(uint256) { return set.values.length; }\n function at(Set storage set, uint256 index) private view\nreturns (bytes32) { require(set.values.length > index, \"EnumerableSet: index out of bounds\"); return\nset._values[index]; }\n// Bytes32Set\nstruct Bytes32Set { Set _inner; }\n function add(Bytes32Set storage set, bytes32 value) internal returns (bool) { return\nadd(set.inner, value); }\n function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) { return\nremove(set.inner, value); }\n function contains(Bytes32Set storage set, bytes32\nvalue) internal view returns (bool) { return contains(set.inner, value); }\n function length(Bytes32Set storage set) internal\nview returns (uint256) { return length(set.inner); }\n function at(Bytes32Set storage set, uint256 index) internal\nview returns (bytes32) { return at(set.inner, index); }\n// AddressSet\nstruct AddressSet { Set _inner; }\n function add(AddressSet storage set, address value) internal returns (bool) { return\nadd(set.inner, bytes32(uint256(uint160(value)))); }\n function remove(AddressSet storage set, address value) internal returns (bool) { return\nremove(set.inner, bytes32(uint256(uint160(value)))); }\n function contains(AddressSet storage set, address\nvalue) internal view returns (bool) { return contains(set.inner, bytes32(uint256(uint160(value)))); }\n function length(AddressSet storage set) internal\nview returns (uint256) { return length(set.inner); }\n function at(AddressSet storage set, uint256 index) internal\nview returns (address) { return address(uint160(uint256(at(set.inner, index)))); }\n// UintSet \n\nstruct UintSet { \nSet _inner; \n} \n\n \nfunction add(UintSet storage set, uint256 value) internal returns (bool) { \nreturn _add(set._inner, bytes32(value)); \n} \n\n \nfunction remove(UintSet storage set, uint256 value) internal returns (bool) { \nreturn _remove(set._inner, bytes32(value)); \n} \n\n \nfunction contains(UintSet storage set, uint256 value) internal view returns (bool) { \nreturn _contains(set._inner, bytes32(value)); \n} \n\n \nfunction length(UintSet storage set) internal view returns (uint256) { \nreturn _length(set._inner); \n}\n \nfunction at(UintSet storage set, uint256 index) internal view returns (uint256) { \nreturn uint256(_at(set._inner, index)); \n}\n}\n// File @openzeppelin/contracts/access/Ownable.sol@v3.4.2\n// : MIT\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.6.2 <0.8.0; \n\n \nlibrary Address { \n \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \n// solhint-disable-next-line no-inline-assembly \nassembly { size := extcodesize(account) } \nreturn size > 0; \n} \n\n \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n// solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n(bool success, ) = recipient.call{ value: amount }(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n \nfunction functionCall(address target, bytes memory data, string memory errorMessage) internal ret\nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n \nfunction functionCallWithValue(address target, bytes memory data, uint256 value) internal returns \nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n \nfunction functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.call{ value: value }(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n \nfunction functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\n \nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \nreturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\"); \n} \n\n \nfunction functionDelegateCall(address target, bytes memory data, string memory errorMessage) inte\nrequire(isContract(target), \"Address: delegate call to non-contract\"); \n\n// solhint-disable-next-line avoid-low-level-calls \n(bool success, bytes memory returndata) = target.delegatecall(data); \nreturn _verifyCallResult(success, returndata, errorMessage); \n} \n\nfunction _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\n// solhint-disable-next-line no-inline-assembly \nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n\n// File @openzeppelin/contracts/token/ERC20/SafeERC20.sol@v3.4.2 \n\n// -- SPDX-License-Identifier:: MIT \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.0; \ncontract ERC20 is Context, IERC20 { \nusing SafeMath for uint256; \nusing Address for address; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n  \nconstructor (string memory name, string memory symbol) public { \n_name = name; \n_symbol = symbol; \n_decimals = 18; \n} \n\n  \nfunction name() public view returns (string memory) { \nreturn _name; \n} \n\n  \nfunction symbol() public view returns (string memory) { \nreturn _symbol; \n} \n\n  \nfunction decimals() public view returns (uint8) { \nreturn _decimals; \n} \n\n  \nfunction totalSupply() public view override returns (uint256) { \nreturn _totalSupply; \n} \n\n  \nfunction balanceOf(address account) public view override returns (uint256) { \nreturn _balances[account]; \n} \n\n  \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n  \nfunction allowance(address owner, address spender) public view virtual override returns (uint256) \nreturn _allowances[owner][spender]; \n} \n\n  \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n  \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer \nreturn true; \n} \n\n  \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n  \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC2\nreturn true; \n} \n\n  \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n  \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n  \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n  \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n  \nfunction _setupDecimals(uint8 decimals_) internal { \n_decimals = decimals_; \n} \n\n  \nfunction _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { } \n} \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12; \npragma experimental ABIEncoderV2; \n\n// import \"@openzeppelin/contracts/token/ERC20/ERC20.sol\"; \n// import \"@openzeppelin/contracts/access/Ownable.sol\"; \n// import \"@openzeppelin/contracts/utils/EnumerableSet.sol\"; \n\nabstract contract DelegateERC20 is ERC20 { \n// A record of each accounts delegate \nmapping(address => address) internal _delegates; \n\n// A checkpoint for marking number of votes from a given block \nstruct Checkpoint { \nuint32 fromBlock; \nuint256 votes; \n} \n\n// A record of votes checkpoints for each account, by index \nmapping(address => mapping(uint32 => Checkpoint)) public checkpoints; \n\n// The number of checkpoints for each account \nmapping(address => uint32) public numCheckpoints; \n\n// The EIP-712 typehash for the contract's domain \nbytes32 public constant DOMAIN_TYPEHASH = \nkeccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"); \n\n// The EIP-712 typehash for the delegation struct used by the contract \nbytes32 public constant DELEGATION_TYPEHASH = \nkeccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\"); \n\n// A record of states for signing / validating signatures \nmapping(address => uint256) public nonces; \n\n// support delegates mint \nfunction _mint(address account, uint256 amount) internal virtual override { \nsuper._mint(account, amount); \n\n// add delegates to the minter \n_moveDelegates(address(0), _delegates[account], amount); \n} \n\nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual override { \nsuper._transfer(sender, recipient, amount); \n_moveDelegates(_delegates[sender], _delegates[recipient], amount); \n} \n\n \nfunction delegate(address delegatee) external { \nreturn _delegate(msg.sender, delegatee); \n} \n\n \nfunction delegateBySig( \naddress delegatee, \nuint256 nonce, \nuint256 expiry, \nuint8 v, \nbytes32 r, \nbytes32 s \n) external { \nbytes32 domainSeparator = \nkeccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name())), getChainId(), address(thi\n\nbytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)); \n\nbytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)); \n\naddress signatory = ecrecover(digest, v, r, s); \nrequire(signatory != address(0), \"PPXswapToken::delegateBySig: invalid signature\"); \nrequire(nonce == nonces[signatory]++, \"PPXswapToken::delegateBySig: invalid nonce\"); \nrequire(now <= expiry, \"PPXswapToken::delegateBySig: signature expired\"); \nreturn _delegate(signatory, delegatee); \n} \n\n \nfunction getCurrentVotes(address account) external view returns (uint256) { \nuint32 nCheckpoints = numCheckpoints[account]; \nreturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0; \n} \n\n \nfunction getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) { \nrequire(blockNumber < block.number, \"PPXswapToken::getPriorVotes: not yet determined\"); \n\nuint32 nCheckpoints = numCheckpoints[account]; \nif (nCheckpoints == 0) { \nreturn 0; \n} \n\n// First check most recent balance \nif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { \nreturn checkpoints[account][nCheckpoints - 1].votes; \n} \n\n// Next check implicit zero balance \nif (checkpoints[account][0].fromBlock > blockNumber) { \nreturn 0; \n} \n\nuint32 lower = 0; \nuint32 upper = nCheckpoints - 1; \nwhile (upper > lower) { \nuint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow \nCheckpoint memory cp = checkpoints[account][center]; \nif (cp.fromBlock == blockNumber) { \nreturn cp.votes; \n} else if (cp.fromBlock < blockNumber) { \nlower = center; \n} else { \nupper = center - 1; \n} \n} \nreturn checkpoints[account][lower].votes; \n} \n\nfunction _delegate(address delegator, address delegatee) internal { \naddress currentDelegate = _delegates[delegator]; \nuint256 delegatorBalance = balanceOf(delegator); // balance of underlying balances (not scale\n_delegates[delegator] = delegatee; \n\n_moveDelegates(currentDelegate, delegatee, delegatorBalance); \n\nemit DelegateChanged(delegator, currentDelegate, delegatee); \n} \n\nfunction _moveDelegates( \naddress srcRep, \naddress dstRep, \nuint256 amount \n) internal { \nif (srcRep != dstRep && amount > 0) { \nif (srcRep != address(0)) { \n// decrease old representative \nuint32 srcRepNum = numCheckpoints[srcRep]; \nuint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0; \nuint256 srcRepNew = srcRepOld.sub(amount); \n_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew); \n} \n\nif (dstRep != address(0)) { \n// increase new representative \nuint32 dstRepNum = numCheckpoints[dstRep]; \nuint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0; \nuint256 dstRepNew = dstRepOld.add(amount); \n_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew); \n} \n} \n} \n\nfunction _writeCheckpoint( \naddress delegatee, \nuint32 nCheckpoints, \nuint256 oldVotes, \nuint256 newVotes \n) internal { \nuint32 blockNumber = safe32(block.number, \"PPXswapToken::_writeCheckpoint: block number excee\n\nif (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) { \ncheckpoints[delegatee][nCheckpoints - 1].votes = newVotes; \n} else { \ncheckpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes); \nnumCheckpoints[delegatee] = nCheckpoints + 1; \n} \n\nemit DelegateVotesChanged(delegatee, oldVotes, newVotes); \n} \n\nfunction safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) { \nrequire(n < 2**32, errorMessage); \nreturn uint32(n); \n} \n\nfunction getChainId() internal pure returns (uint256) { \nuint256 chainId; \nassembly { \nchainId := chainid() \n} \n\nreturn chainId; \n} \n\n/// @notice An event thats emitted when an account changes its delegate \nevent DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed to\n\n/// @notice An event thats emitted when a delegate account's vote balance changes \nevent DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance)\n} \n\ncontract PPXswapToken is DelegateERC20, Ownable { \nuint256 private constant preMineSupply = 500000 * 1e18; \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n\n  \nabstract contract AccessControl is Context, IAccessControl, ERC165 { \nstruct RoleData { \nmapping(address => bool) members; \nbytes32 adminRole; \n} \n\nmapping(bytes32 => RoleData) private _roles; \n\nbytes32 public constant DEFAULT_ADMIN_ROLE = 0x00; \n\n  \nmodifier onlyRole(bytes32 role) { \n_checkRole(role, _msgSender()); \n_; \n} \n\n  \nfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { \nreturn interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n} \n\n  \nfunction hasRole(bytes32 role, address account) public view override returns (bool) { \nreturn _roles[role].members[account]; \n} \n\n  \nfunction _checkRole(bytes32 role, address account) internal view { \nif (!hasRole(role, account)) { \nrevert( \nstring( \nabi.encodePacked( \n\"AccessControl: account \", \nStrings.toHexString(uint160(account), 20), \n\" is missing role \", \nStrings.toHexString(uint256(role), 32) \n) \n) \n); \n} \n} \n\n  \nfunction getRoleAdmin(bytes32 role) public view override returns (bytes32) { \nreturn _roles[role].adminRole; \n} \n\n  \nfunction grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdm\n_grantRole(role, account); \n} \n\n  \nfunction revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAd\n_revokeRole(role, account); \n} \n\n  \nfunction renounceRole(bytes32 role, address account) public virtual override { \nrequire(account == _msgSender(), \"AccessControl: can only renounce roles for self\"); \n\n_revokeRole(role, account); \n} \n\n  \nfunction _setupRole(bytes32 role, address account) internal virtual { \n_grantRole(role, account); \n} \n\n  \nfunction _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual { \nbytes32 previousAdminRole = getRoleAdmin(role); \n_roles[role].adminRole = adminRole; \nemit RoleAdminChanged(role, previousAdminRole, adminRole); \n} \n\n  \nfunction _grantRole(bytes32 role, address account) internal virtual { \nif (!hasRole(role, account)) { \n_roles[role].members[account] = true; \nemit RoleGranted(role, account, _msgSender()); \n} \n} \n\n  \nfunction _revokeRole(bytes32 role, address account) internal virtual { \nif (hasRole(role, account)) { \n_roles[role].members[account] = false; \nemit RoleRevoked(role, account, _msgSender()); \n} \n} \n} \n\n// File: @openzeppelin/contracts/security/Pausable.sol \n\n\n// OpenZeppelin Contracts v4.4.0 (security/Pausable.sol) \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n  \ncontract ERC20 is Context, IERC20, IERC20Metadata { \nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \n\n  \nconstructor(string memory name_, string memory symbol_) { \n_name = name_; \n_symbol = symbol_; \n} \n\n  \nfunction name() public view virtual override returns (string memory) { \nreturn _name; \n} \n\n  \nfunction symbol() public view virtual override returns (string memory) { \nreturn _symbol; \n} \n\n  \nfunction decimals() public view virtual override returns (uint8) { \nreturn 18; \n} \n\n  \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n  \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n  \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n  \nfunction allowance(address owner, address spender) public view virtual override returns (uint25\nreturn _allowances[owner][spender]; \n} \n\n  \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n  \nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n\nuint256 currentAllowance = _allowances[sender][_msgSender()]; \nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\"); \nunchecked { \n_approve(sender, _msgSender(), currentAllowance - amount); \n} \n\nreturn true; \n} \n\n  \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); \nreturn true; \n} \n\n  \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bo\nuint256 currentAllowance = _allowances[_msgSender()][spender]; \nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\"); \nunchecked { \n_approve(_msgSender(), spender, currentAllowance - subtractedValue); \n} \n\nreturn true; \n} \n\n  \nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\nuint256 senderBalance = _balances[sender]; \nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\"); \nunchecked { \n_balances[sender] = senderBalance - amount; \n} \n_balances[recipient] += amount; \n\nemit Transfer(sender, recipient, amount); \n\n_afterTokenTransfer(sender, recipient, amount); \n} \n\n  \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply += amount; \n_balances[account] += amount; \nemit Transfer(address(0), account, amount); \n\n_afterTokenTransfer(address(0), account, amount); \n} \n\n  \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\nuint256 accountBalance = _balances[account]; \nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\"); \nunchecked { \n_balances[account] = accountBalance - amount; \n} \n_totalSupply -= amount; \n\nemit Transfer(account, address(0), amount); \n\n_afterTokenTransfer(account, address(0), amount); \n} \n\n  \nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n  \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n\n  \nfunction _afterTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n} \n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol \n\n\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/ERC20Burnable.sol) \n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.4.18; \n\n// File: zeppelin-solidity/contracts/math/SafeMath.sol \n\n \nlibrary SafeMath { \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \nif (a == 0) { \nreturn 0; \n} \nuint256 c = a * b; \nassert(c / a == b); \nreturn c; \n} \n\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \n// assert(b > 0); // Solidity automatically throws when dividing by 0 \nuint256 c = a / b; \n// assert(a == b * c + a % b); // There is no case in which this doesn't hold \nreturn c; \n} \n\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nassert(b <= a); \nreturn a - b; \n} \n\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nassert(c >= a); \nreturn c; \n} \n} \n\n// File: zeppelin-solidity/contracts/token/ERC20Basic.sol \n\n \ncontract ERC20Basic { \nuint256 public totalSupply; \nfunction balanceOf(address who) public view returns (uint256); \nfunction transfer(address to, uint256 value) public returns (bool); \nevent Transfer(address indexed from, address indexed to, uint256 value); \n} \n\n// File: zeppelin-solidity/contracts/token/BasicToken.sol \n\n \ncontract BasicToken is ERC20Basic { \nusing SafeMath for uint256; \n\nmapping(address => uint256) balances; \n\n \nfunction transfer(address _to, uint256 _value) public returns (bool) { \n\n\nrequire(_to != address(0)); \nrequire(_value <= balances[msg.sender]); \n\n// SafeMath.sub will throw if there is not enough balance. \nbalances[msg.sender] = balances[msg.sender].sub(_value); \nbalances[_to] = balances[_to].add(_value); \nTransfer(msg.sender, _to, _value); \nreturn true; \n} \n\n \nfunction balanceOf(address _owner) public view returns (uint256 balance) { \nreturn balances[_owner]; \n} \n\n} \n\n// File: zeppelin-solidity/contracts/token/ERC20.sol \n\n \ncontract ERC20 is ERC20Basic { \nfunction allowance(address owner, address spender) public view returns (uint256); \nfunction transferFrom(address from, address to, uint256 value) public returns (bool); \nfunction approve(address spender, uint256 value) public returns (bool); \nevent Approval(address indexed owner, address indexed spender, uint256 value); \n} \n\n// File: zeppelin-solidity/contracts/token/StandardToken.sol \n\n \ncontract StandardToken is ERC20, BasicToken { \n\nmapping (address => mapping (address => uint256)) internal allowed; \n\n\n \nfunction transferFrom(address _from, address _to, uint256 _value) public returns (bool) { \nrequire(_to != address(0)); \nrequire(_value <= balances[_from]); \nrequire(_value <= allowed[_from][msg.sender]); \n\nbalances[_from] = balances[_from].sub(_value); \nbalances[_to] = balances[_to].add(_value); \nallowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value); \nTransfer(_from, _to, _value); \nreturn true; \n} \n\n \nfunction approve(address _spender, uint256 _value) public returns (bool) { \nallowed[msg.sender][_spender] = _value; \nApproval(msg.sender, _spender, _value); \nreturn true; \n} \n\n \nfunction allowance(address _owner, address _spender) public view returns (uint256) { \nreturn allowed[_owner][_spender]; \n} \n\n \nfunction increaseApproval(address _spender, uint _addedValue) public returns (bool) { \nallowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue); \nApproval(msg.sender, _spender, allowed[msg.sender][_spender]); \nreturn true; \n} \n\n \nfunction decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) { \nuint oldValue = allowed[msg.sender][_spender]; \nif (_subtractedValue > oldValue) { \nallowed[msg.sender][_spender] = 0; \n} else { \nallowed[msg.sender][_spender] = oldValue.sub(_subtractedValue); \n} \nApproval(msg.sender, _spender, allowed[msg.sender][_spender]); \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n\n\n\n  \ncontract ERC20 is Context, IERC20, IERC20Metadata { \nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \n\n  \nconstructor(string memory name_, string memory symbol_) { \n_name = name_; \n_symbol = symbol_; \n} \n\n  \nfunction name() public view virtual override returns (string memory) { \nreturn _name; \n} \n\n  \nfunction symbol() public view virtual override returns (string memory) { \nreturn _symbol; \n} \n\n  \nfunction decimals() public view virtual override returns (uint8) { \nreturn 18; \n} \n\n  \nfunction totalSupply() public view virtual override returns (uint256) { \nreturn _totalSupply; \n} \n\n  \nfunction balanceOf(address account) public view virtual override returns (uint256) { \nreturn _balances[account]; \n} \n\n  \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n  \nfunction allowance(address owner, address spender) public view virtual override returns (uint256) \nreturn _allowances[owner][spender]; \n} \n\n  \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n  \nfunction transferFrom( \naddress sender, \naddress recipient, \nuint256 amount \n) public virtual override returns (bool) { \n_transfer(sender, recipient, amount); \n\nuint256 currentAllowance = _allowances[sender][_msgSender()]; \nrequire(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\"); \nunchecked { \n_approve(sender, _msgSender(), currentAllowance - amount); \n} \n\nreturn true; \n} \n\n  \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue); \nreturn true; \n} \n\n  \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\nuint256 currentAllowance = _allowances[_msgSender()][spender]; \nrequire(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\"); \nunchecked { \n_approve(_msgSender(), spender, currentAllowance - subtractedValue); \n} \n\nreturn true; \n} \n\n  \nfunction _transfer( \naddress sender, \naddress recipient, \nuint256 amount \n) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\nuint256 senderBalance = _balances[sender]; \nrequire(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\"); \nunchecked { \n_balances[sender] = senderBalance - amount; \n} \n_balances[recipient] += amount; \n\nemit Transfer(sender, recipient, amount); \n\n_afterTokenTransfer(sender, recipient, amount); \n} \n\n  \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply += amount; \n_balances[account] += amount; \nemit Transfer(address(0), account, amount); \n\n_afterTokenTransfer(address(0), account, amount); \n} \n\n  \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\nuint256 accountBalance = _balances[account]; \nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\"); \nunchecked { \n_balances[account] = accountBalance - amount; \n} \n_totalSupply -= amount; \n\nemit Transfer(account, address(0), amount); \n\n_afterTokenTransfer(account, address(0), amount); \n} \n\n  \nfunction _approve( \naddress owner, \naddress spender, \nuint256 amount \n) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n  \nfunction _beforeTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n\n  \nfunction _afterTokenTransfer( \naddress from, \naddress to, \nuint256 amount \n) internal virtual {} \n} \n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol \n\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0; \n\n  \nlibrary Address { \n  \nfunction isContract(address account) internal view returns (bool) { \n// This method relies on extcodesize, which returns 0 for contracts in \n// construction, since the code is only stored at the end of the \n// constructor execution. \n\nuint256 size; \nassembly { \nsize := extcodesize(account) \n} \nreturn size > 0; \n} \n\n  \nfunction sendValue(address payable recipient, uint256 amount) internal { \nrequire(address(this).balance >= amount, \"Address: insufficient balance\"); \n\n(bool success, ) = recipient.call{value: amount}(\"\"); \nrequire(success, \"Address: unable to send value, recipient may have reverted\"); \n} \n\n  \nfunction functionCall(address target, bytes memory data) internal returns (bytes memory) { \nreturn functionCall(target, data, \"Address: low-level call failed\"); \n} \n\n  \nfunction functionCall( \naddress target, \nbytes memory data, \nstring memory errorMessage \n) internal returns (bytes memory) { \nreturn functionCallWithValue(target, data, 0, errorMessage); \n} \n\n  \nfunction functionCallWithValue( \naddress target, \nbytes memory data, \nuint256 value \n) internal returns (bytes memory) { \nreturn functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n} \n\n  \nfunction functionCallWithValue( \naddress target, \nbytes memory data, \nuint256 value, \nstring memory errorMessage \n) internal returns (bytes memory) { \nrequire(address(this).balance >= value, \"Address: insufficient balance for call\"); \nrequire(isContract(target), \"Address: call to non-contract\"); \n\n(bool success, bytes memory returndata) = target.call{value: value}(data); \nreturn verifyCallResult(success, returndata, errorMessage); \n} \n\n  \nfunction functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\nreturn functionStaticCall(target, data, \"Address: low-level static call failed\"); \n} \n\n  \nfunction functionStaticCall( \naddress target, \nbytes memory data, \nstring memory errorMessage \n) internal view returns (bytes memory) { \nrequire(isContract(target), \"Address: static call to non-contract\"); \n\n(bool success, bytes memory returndata) = target.staticcall(data); \nreturn verifyCallResult(success, returndata, errorMessage); \n} \n\n  \nfunction functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) \nreturn functionDelegateCall(target, data, \"Address: low-level delegate call failed\"); \n} \n\n  \nfunction functionDelegateCall( \naddress target, \nbytes memory data, \nstring memory errorMessage \n) internal returns (bytes memory) { \nrequire(isContract(target), \"Address: delegate call to non-contract\"); \n\n(bool success, bytes memory returndata) = target.delegatecall(data); \nreturn verifyCallResult(success, returndata, errorMessage); \n} \n\n  \nfunction verifyCallResult( \nbool success, \nbytes memory returndata, \nstring memory errorMessage \n) internal pure returns (bytes memory) { \nif (success) { \nreturn returndata; \n} else { \n// Look for revert reason and bubble it up if present \nif (returndata.length > 0) { \n// The easiest way to bubble the revert reason is using memory via assembly \n\nassembly { \nlet returndata_size := mload(returndata) \nrevert(add(32, returndata), returndata_size) \n} \n} else { \nrevert(errorMessage); \n} \n} \n} \n} \n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol \n\n\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6; \n\n  \ninterface IERC20 { \n  \nfunction totalSupply() external view returns (uint256); \n\n  \nfunction balanceOf(address account) external view returns (uint256); \n\n  \nfunction transfer(address recipient, uint256 amount) external returns (bool); \n\n  \nfunction allowance(address owner, address spender) external view returns (uint256); \n\n  \nfunction approve(address spender, uint256 amount) external returns (bool); \n\n  \nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n  \nevent Transfer(address indexed from, address indexed to, uint256 value); \n\n  \nevent Approval(address indexed owner, address indexed spender, uint256 value); \n} \n\n// File: contracts\\libraries\\SafeMath.sol \n\n  \nlibrary SafeMath { \n  \nfunction add(uint256 a, uint256 b) internal pure returns (uint256) { \nuint256 c = a + b; \nrequire(c >= a, \"SafeMath: addition overflow\"); \n\nreturn c; \n} \n\n  \nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn sub(a, b, \"SafeMath: subtraction overflow\"); \n} \n\n  \nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b <= a, errorMessage); \nuint256 c = a - b; \n\nreturn c; \n} \n\n  \nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) { \n// Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n// benefit is lost if 'b' is also tested. \n// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522 \nif (a == 0) { \nreturn 0; \n} \n\nuint256 c = a * b; \nrequire(c / a == b, \"SafeMath: multiplication overflow\"); \n\nreturn c; \n} \n\n  \nfunction div(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn div(a, b, \"SafeMath: division by zero\"); \n} \n\n  \nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b > 0, errorMessage); \nuint256 c = a / b; \n// assert(a == b * c + a % b); // There is no case in which this doesn't hold \n\nreturn c; \n} \n\n  \nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) { \nreturn mod(a, b, \"SafeMath: modulo by zero\"); \n} \n\n  \nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) { \nrequire(b != 0, errorMessage); \nreturn a % b; \n} \n} \n\n// File: contracts\\tokens\\ERC20.sol \n\n\n  \ncontract ERC20 is IERC20 { \nusing SafeMath for uint256; \n\nmapping (address => uint256) private _balances; \n\nmapping (address => mapping (address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n  \nconstructor (string memory name_, string memory symbol_) { \n_name = name_; \n_symbol = symbol_; \n_decimals = 18; \n} \n\n  \nfunction name() public view returns (string memory) { \nreturn _name; \n} \n\n  \nfunction symbol() public view returns (string memory) { \nreturn _symbol; \n} \n\n  \nfunction decimals() public view returns (uint8) { \nreturn _decimals; \n} \n\n  \nfunction totalSupply() public view override returns (uint256) { \nreturn _totalSupply; \n} \n\n  \nfunction balanceOf(address account) public view override returns (uint256) { \nreturn _balances[account]; \n} \n\n  \nfunction transfer(address recipient, uint256 amount) public virtual override returns (bool) { \n_transfer(msg.sender, recipient, amount); \nreturn true; \n} \n\n  \nfunction allowance(address owner, address spender) public view virtual override returns (uint256) \nreturn _allowances[owner][spender]; \n} \n\n  \nfunction approve(address spender, uint256 amount) public virtual override returns (bool) { \n_approve(msg.sender, spender, amount); \nreturn true; \n} \n\n  \nfunction transferFrom(address sender, address recipient, uint256 amount) public virtual override \n_transfer(sender, recipient, amount); \n_approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amo\nreturn true; \n} \n\n  \nfunction increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) { \n_approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue)); \nreturn true; \n} \n\n  \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool\n_approve(msg.sender, spender, _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: d\nreturn true; \n} \n\n  \nfunction _transfer(address sender, address recipient, uint256 amount) internal virtual { \nrequire(sender != address(0), \"ERC20: transfer from the zero address\"); \nrequire(recipient != address(0), \"ERC20: transfer to the zero address\"); \n\n_beforeTokenTransfer(sender, recipient, amount); \n\n_balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\"); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n  \nfunction _mint(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: mint to the zero address\"); \n\n_beforeTokenTransfer(address(0), account, amount); \n\n_totalSupply = _totalSupply.add(amount); \n_balances[account] = _balances[account].add(amount); \nemit Transfer(address(0), account, amount); \n} \n\n  \nfunction _burn(address account, uint256 amount) internal virtual { \nrequire(account != address(0), \"ERC20: burn from the zero address\"); \n\n_beforeTokenTransfer(account, address(0), amount); \n\n_balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\"); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n  \nfunction _approve(address owner, address spender, uint256 amount) internal virtual { \nrequire(owner != address(0), \"ERC20: approve from the zero address\"); \nrequire(spender != address(0), \"ERC20: approve to the zero address\"); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n  \nfunction _setupDecimals(uint8 decimals_) internal { \n_decimals = decimals_; \n} \n\n \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.4.0; \n\nimport './Ownable.sol'; \nimport './Context.sol'; \nimport './IBEP20.sol'; \nimport './SafeMath.sol'; \n\n \ncontract BEP20 is Context, IBEP20, Ownable { \nusing SafeMath for uint256; \n\nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor(string memory name, string memory symbol, uint256 totalSupply) public { \n_name = name; \n_symbol = symbol; \n_totalSupply = totalSupply; \n_decimals = 18; \n_balances[msg.sender] = _totalSupply; \nemit Transfer(address(0), msg.sender, _totalSupply); \n} \n\n \nfunction getOwner() external override view returns (address) { \nreturn owner(); \n} \n\n \nfunction name() public override view returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public override view returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public override view returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public override view returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public override view returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public override view returns (uint256) { \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom (address sender, address recipient, uint256 amount) public override returns \n_transfer(sender, recipient, amount); \n_approve( \nsender, \n_msgSender(), \n_allowances[sender][_msgSender()].sub(amount) \n); \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue)); \nreturn true; \n} \n\n\n \nfunction _transfer (address sender, address recipient, uint256 amount) internal { \nrequire(sender != address(0), 'BEP20: transfer from the zero address'); \nrequire(recipient != address(0), 'BEP20: transfer to the zero address'); \n\n_balances[sender] = _balances[sender].sub(amount); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n\nContext.sol\n \nfunction _burn(address account, uint256 amount) internal { \nrequire(account != address(0), 'BEP20: burn from the zero address'); \n\n_balances[account] = _balances[account].sub(amount); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve (address owner, address spender, uint256 amount) internal { \nrequire(owner != address(0), 'BEP20: approve from the zero address'); \nrequire(spender != address(0), 'BEP20: approve to the zero address'); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _burnFrom(address account, uint256 amount) internal { \n_burn(account, amount); \n_approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount)); \n} \n}\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.4.0; \n\nimport './Ownable.sol'; \nimport './Context.sol'; \nimport './IBEP20.sol'; \nimport './SafeMath.sol'; \n\n \ncontract BEP20 is Context, IBEP20, Ownable { \nusing SafeMath for uint256; \n\nmapping(address => uint256) private _balances; \n\nmapping(address => mapping(address => uint256)) private _allowances; \n\nuint256 private _totalSupply; \n\nstring private _name; \nstring private _symbol; \nuint8 private _decimals; \n\n \nconstructor(string memory name, string memory symbol, uint256 totalSupply) public { \n_name = name; \n_symbol = symbol; \n_totalSupply = totalSupply; \n_decimals = 18; \n_balances[msg.sender] = _totalSupply; \nemit Transfer(address(0), msg.sender, _totalSupply); \n} \n\n \nfunction getOwner() external override view returns (address) { \nreturn owner(); \n} \n\n \nfunction name() public override view returns (string memory) { \nreturn _name; \n} \n\n \nfunction symbol() public override view returns (string memory) { \nreturn _symbol; \n} \n\n \nfunction decimals() public override view returns (uint8) { \nreturn _decimals; \n} \n\n \nfunction totalSupply() public override view returns (uint256) { \nreturn _totalSupply; \n} \n\n \nfunction balanceOf(address account) public override view returns (uint256) { \nreturn _balances[account]; \n} \n\n \nfunction transfer(address recipient, uint256 amount) public override returns (bool) { \n_transfer(_msgSender(), recipient, amount); \nreturn true; \n} \n\n \nfunction allowance(address owner, address spender) public override view returns (uint256) { \nreturn _allowances[owner][spender]; \n} \n\n \nfunction approve(address spender, uint256 amount) public override returns (bool) { \n_approve(_msgSender(), spender, amount); \nreturn true; \n} \n\n \nfunction transferFrom (address sender, address recipient, uint256 amount) public override returns \n_transfer(sender, recipient, amount); \n_approve( \nsender, \n_msgSender(), \n_allowances[sender][_msgSender()].sub(amount) \n); \nreturn true; \n} \n\n \nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue)); \nreturn true; \n} \n\n \nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) { \n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue)); \nreturn true; \n} \n\n\n \nfunction _transfer (address sender, address recipient, uint256 amount) internal { \nrequire(sender != address(0), 'BEP20: transfer from the zero address'); \nrequire(recipient != address(0), 'BEP20: transfer to the zero address'); \n\n_balances[sender] = _balances[sender].sub(amount); \n_balances[recipient] = _balances[recipient].add(amount); \nemit Transfer(sender, recipient, amount); \n} \n\n\n \nfunction _burn(address account, uint256 amount) internal { \nrequire(account != address(0), 'BEP20: burn from the zero address'); \n\n_balances[account] = _balances[account].sub(amount); \n_totalSupply = _totalSupply.sub(amount); \nemit Transfer(account, address(0), amount); \n} \n\n \nfunction _approve (address owner, address spender, uint256 amount) internal { \nrequire(owner != address(0), 'BEP20: approve from the zero address'); \nrequire(spender != address(0), 'BEP20: approve to the zero address'); \n\n_allowances[owner][spender] = amount; \nemit Approval(owner, spender, amount); \n} \n\n \nfunction _burnFrom(address account, uint256 amount) internal { \n_burn(account, amount); \n_approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount)); \n} \n}\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \n\nimport {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol'; \nimport {IReserveInterestRateStrategy} from '../../interfaces/IReserveInterestRateStrategy.sol'; \nimport {WadRayMath} from '../libraries/math/WadRayMath.sol'; \nimport {PercentageMath} from '../libraries/math/PercentageMath.sol'; \nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol'; \nimport {ILendingRateOracle} from '../../interfaces/ILendingRateOracle.sol'; \nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol'; \nimport 'hardhat/console.sol'; \n\n \ncontract DefaultReserveInterestRateStrategy is IReserveInterestRateStrategy { \nusing WadRayMath for uint256; \nusing SafeMath for uint256; \nusing PercentageMath for uint256; \n\n \nuint256 public immutable OPTIMAL_UTILIZATION_RATE; \n\n \n\nuint256 public immutable EXCESS_UTILIZATION_RATE; \n\nILendingPoolAddressesProvider public immutable addressesProvider; \n\n\nuint256 internal immutable _baseVariableBorrowRate; \n\n\nuint256 internal immutable _variableRateSlope1; \n\n\nuint256 internal immutable _variableRateSlope2; \n\n\nuint256 internal immutable _stableRateSlope1; \n\n\nuint256 internal immutable _stableRateSlope2; \n\nconstructor( \nILendingPoolAddressesProvider provider, \nuint256 optimalUtilizationRate, \nuint256 baseVariableBorrowRate, \nuint256 variableRateSlope1, \nuint256 variableRateSlope2, \nuint256 stableRateSlope1, \nuint256 stableRateSlope2 \n) public { \nOPTIMAL_UTILIZATION_RATE = optimalUtilizationRate; \nEXCESS_UTILIZATION_RATE = WadRayMath.ray().sub(optimalUtilizationRate); \naddressesProvider = provider; \n_baseVariableBorrowRate = baseVariableBorrowRate; \n_variableRateSlope1 = variableRateSlope1; \n_variableRateSlope2 = variableRateSlope2; \n_stableRateSlope1 = stableRateSlope1; \n_stableRateSlope2 = stableRateSlope2; \n} \n\nfunction variableRateSlope1() external view returns (uint256) { \nreturn _variableRateSlope1; \n} \n\nfunction variableRateSlope2() external view returns (uint256) { \nreturn _variableRateSlope2; \n} \n\nfunction stableRateSlope1() external view returns (uint256) { \nreturn _stableRateSlope1; \n} \n\nfunction stableRateSlope2() external view returns (uint256) { \nreturn _stableRateSlope2; \n} \n\nfunction baseVariableBorrowRate() external view override returns (uint256) { \nreturn _baseVariableBorrowRate; \n} \n\nfunction getMaxVariableBorrowRate() external view override returns (uint256) { \nreturn _baseVariableBorrowRate.add(_variableRateSlope1).add(_variableRateSlope2); \n} \n\n \nfunction calculateInterestRates( \naddress reserve, \naddress aToken, \nuint256 liquidityAdded, \nuint256 liquidityTaken, \nuint256 totalStableDebt, \nuint256 totalVariableDebt, \nuint256 averageStableBorrowRate, \nuint256 reserveFactor \n) \nexternal \nview \noverride \nreturns ( \nuint256, \nuint256, \nuint256 \n) \n{ \nuint256 availableLiquidity = IERC20(reserve).balanceOf(aToken); \n\navailableLiquidity = availableLiquidity.add(liquidityAdded).sub(liquidityTaken); \n\nreturn \ncalculateInterestRates( \nreserve, \navailableLiquidity, \ntotalStableDebt, \ntotalVariableDebt, \naverageStableBorrowRate, \nreserveFactor \n); \n} \n\nstruct CalcInterestRatesLocalVars { \nuint256 totalDebt; \nuint256 currentVariableBorrowRate; \nuint256 currentStableBorrowRate; \nuint256 currentLiquidityRate; \nuint256 utilizationRate; \n} \n\n \nfunction calculateInterestRates( \naddress reserve, \nuint256 availableLiquidity, \nuint256 totalStableDebt, \nuint256 totalVariableDebt, \nuint256 averageStableBorrowRate, \nuint256 reserveFactor \n) \npublic \nview \noverride \nreturns ( \nuint256, \nuint256, \nuint256 \n) \n{ \nCalcInterestRatesLocalVars memory vars; \n\nvars.totalDebt = totalStableDebt.add(totalVariableDebt); \nvars.currentVariableBorrowRate = 0; \nvars.currentStableBorrowRate = 0; \nvars.currentLiquidityRate = 0; \n\nvars.utilizationRate = vars.totalDebt == 0 \n? 0 \n: vars.totalDebt.rayDiv(availableLiquidity.add(vars.totalDebt)); \n\nvars.currentStableBorrowRate = ILendingRateOracle(addressesProvider.getLendingRateOracle()) \n.getMarketBorrowRate(reserve); \n\nif (vars.utilizationRate > OPTIMAL_UTILIZATION_RATE) { \nuint256 excessUtilizationRateRatio = \nvars.utilizationRate.sub(OPTIMAL_UTILIZATION_RATE).rayDiv(EXCESS_UTILIZATION_RATE); \n\nvars.currentStableBorrowRate = vars.currentStableBorrowRate.add(_stableRateSlope1).add( \n_stableRateSlope2.rayMul(excessUtilizationRateRatio) \n); \n\nvars.currentVariableBorrowRate = _baseVariableBorrowRate.add(_variableRateSlope1).add( \n_variableRateSlope2.rayMul(excessUtilizationRateRatio) \n); \n} else { \nvars.currentStableBorrowRate = vars.currentStableBorrowRate.add( \n_stableRateSlope1.rayMul(vars.utilizationRate.rayDiv(OPTIMAL_UTILIZATION_RATE)) \n); \nvars.currentVariableBorrowRate = _baseVariableBorrowRate.add( \nvars.utilizationRate.rayMul(_variableRateSlope1).rayDiv(OPTIMAL_UTILIZATION_RATE) \n); \n} \n\nvars.currentLiquidityRate = _getOverallBorrowRate( \ntotalStableDebt, \ntotalVariableDebt, \nvars \n.currentVariableBorrowRate, \naverageStableBorrowRate \n) \n.rayMul(vars.utilizationRate) \n.percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(reserveFactor)); \n\nreturn ( \nvars.currentLiquidityRate, \nvars.currentStableBorrowRate, \nvars.currentVariableBorrowRate \n); \n} \n\n \nfunction _getOverallBorrowRate( \nuint256 totalStableDebt, \nuint256 totalVariableDebt, \nuint256 currentVariableBorrowRate, \nuint256 currentAverageStableBorrowRate \n) internal pure returns (uint256) { \nuint256 totalDebt = totalStableDebt.add(totalVariableDebt); \n\nif (totalDebt == 0) return 0; \n\nuint256 weightedVariableRate = totalVariableDebt.wadToRay().rayMul(currentVariableBorrowRate); \n\nuint256 weightedStableRate = totalStableDebt.wadToRay().rayMul(currentAverageStableBorrowRate); \n\nuint256 overallBorrowRate = \nweightedVariableRate.add(weightedStableRate).rayDiv(totalDebt.wadToRay()); \n\nreturn overallBorrowRate; \n} \n} \n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12; \nimport \"./SafeMath.sol\"; \nimport \"./IBEP20.sol\"; \nimport \"./SafeBEP20.sol\"; \nimport \"./Ownable.sol\"; \n\nimport \"./ZooToken.sol\"; \n\n\n\n\n\n\n\n\ncontract Zoo is Ownable { \nusing SafeMath for uint256; \nusing SafeBEP20 for IBEP20; \n\n\nstruct UserInfo { \nuint256 stakeAmount;         \nuint256 balance; \nuint256 pledgeTime; \nbool isExist; \n} \n\n\nstruct PoolInfo { \nIBEP20 poolToken;           \nuint256 zooRewardRate; \nuint256 totalStakeAmount; \nuint256 openTime; \nbool isOpen; \n} \n\n\n\nZooToken public zoo; \n\n\nPoolInfo[] public poolInfo; \n\nmapping (uint256 => mapping (address => UserInfo)) public userInfo; \n\nevent Stake(address indexed user, uint256 indexed pid, uint256 amount); \nevent CancelStake(address indexed user, uint256 indexed pid, uint256 amount); \nevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount); \n\nconstructor( \naddress _zooTokenAddress \n) public { \nzoo = ZooToken(_zooTokenAddress); \n} \n\nfunction poolLength() external view returns (uint256) { \nreturn poolInfo.length; \n} \n\n\n\nfunction addPool(address _poolAddress, uint256 _zooRewardRate, uint256 _openTime, bool _isOpen) p\nIBEP20 _poolToken = IBEP20(_poolAddress); \npoolInfo.push(PoolInfo({ \npoolToken: _poolToken, \nzooRewardRate: _zooRewardRate, \ntotalStakeAmount: 0, \nopenTime: _openTime, \nisOpen: _isOpen \n})); \n} \n\nfunction updatePool(uint256 _pid, uint256 _zooRewardRate, uint256 _openTime, bool _isOpen) public \npoolInfo[_pid].zooRewardRate = _zooRewardRate; \npoolInfo[_pid].openTime = _openTime; \npoolInfo[_pid].isOpen = _isOpen; \n} \n\n\nfunction addUser(uint256 _pid, uint256 _amount) private { \nuserInfo[_pid][msg.sender] = UserInfo( \n_amount, \n0, \nblock.timestamp, \ntrue \n); \n} \n\nfunction stake(uint256 _pid, uint256 _amount) public { \nPoolInfo storage pool = poolInfo[_pid]; \nUserInfo storage user = userInfo[_pid][msg.sender]; \npool.poolToken.transferFrom(address(msg.sender), address(this), _amount); \n\nif(!user.isExist){ \naddUser(_pid, _amount); \n}else{ \nuser.stakeAmount = user.stakeAmount.add(_amount); \nuint256 profit = getUserProfit(_pid, false); \n\nif (profit > 0) { \nuser.balance = user.balance.add(profit); \n} \n\nuser.pledgeTime = block.timestamp; \n} \n\npool.totalStakeAmount = pool.totalStakeAmount.add(_amount); \n\nemit Stake(msg.sender, _pid, _amount); \n} \n\nfunction cancelStake(uint256 _pid) public { \nPoolInfo storage pool = poolInfo[_pid]; \nUserInfo storage user = userInfo[_pid][msg.sender]; \n\nrequire( user.isExist && user.stakeAmount > 0,\"user not exist or no profit\")  ; \n\n\nuint256 stakeAmount = user.stakeAmount; \nuint256 profitAmount = getUserProfit(_pid, true); \n\nuser.stakeAmount = 0; \nuser.balance = 0; \npool.totalStakeAmount = pool.totalStakeAmount.sub(stakeAmount); \n\npool.poolToken.safeTransfer(address(msg.sender), stakeAmount); \n\nif (profitAmount > 0) { \nsafeZooTransfer(address(msg.sender), profitAmount); \n} \n\nemit CancelStake(msg.sender, _pid, stakeAmount); \n} \n\nfunction withdraw(uint256 _pid) public { \nuint256 profitAmount = getUserProfit(_pid, true); \nrequire(profitAmount > 0,\"profit must gt 0\"); \nUserInfo storage user = userInfo[_pid][msg.sender]; \nuser.pledgeTime = block.timestamp; \nuser.balance = 0; \nsafeZooTransfer(address(msg.sender), profitAmount); \nemit Withdraw(msg.sender, _pid, profitAmount); \n} \n\n\nfunction getUserProfit(uint256 _pid, bool _withBalance) private view returns (uint256) { \nPoolInfo storage pool = poolInfo[_pid]; \nUserInfo storage user = userInfo[_pid][msg.sender]; \n\nuint256 profit = 0; \n\nif (user.stakeAmount > 0) { \nuint256 totalStakeAmount = pool.totalStakeAmount; \nif (totalStakeAmount > 0) { \nuint256 time = block.timestamp; \nuint256 hour = time.sub(user.pledgeTime).div(3600); \n\nif (hour >= 1) { \nuint256 rate = user.stakeAmount.mul(1e18).div(totalStakeAmount); \nuint256 profitAmount = rate.mul(pool.zooRewardRate).mul(hour).div(1e18); \nif (profitAmount > 0) { \nprofit = profit.add(profitAmount); \n} \n} \n} \n} \n\nif (_withBalance) { \nprofit = profit.add(user.balance); \n} \n\nreturn profit; \n} \n\nfunction getProfit(uint256 _pid) public view returns (uint256) { \nuint256 profit = getUserProfit(_pid, true); \nreturn profit; \n} \n\nfunction getPoolStake(uint256 _pid) public view returns (uint256) { \nPoolInfo memory pool = poolInfo[_pid]; \nreturn pool.totalStakeAmount; \n} \n\nfunction getUserStake(uint256 _pid) public view returns (uint256){ \nUserInfo storage user = userInfo[_pid][msg.sender]; \nreturn user.stakeAmount; \n} \n\nfunction safeZooTransfer(address _to, uint256 _amount) internal { \nuint256 zooBalance = zoo.balanceOf(address(this)); \nif (_amount > zooBalance) { \nzoo.transfer(_to, zooBalance); \n} else { \nzoo.transfer(_to, _amount); \n} \n} \n}\nAddress.sol\n\n\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.6.7;\npragma experimental ABIEncoderV2;\nimport \"./../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./../openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"./../openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./../openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./../openzeppelin/contracts/access/Ownable.sol\";\nimport \"./../seascape_nft/SeascapeNft.sol\";\nimport \"./ReentrancyGuard.sol\";\ncontract NftMarket is IERC721Receiver, ReentrancyGuard, Ownable { \nusing SafeERC20 for IERC20;\nusing SafeMath for uint256;\nstruct SalesObject { \nuint256 id;\nuint256 tokenId;\naddress nft;\naddress currency;\naddress payable seller;\naddress payable buyer;\nuint256 startTime;\nuint256 price;\nuint8 status;\n} \nuint256 public salesAmount;\nmapping(address => mapping(uint256 => SalesObject)) salesObjects;\nmapping(address => bool) public supportedNft;\nmapping(address => bool) public supportedCurrency;\nbool public salesEnabled;\nuint256 public feeRate;\naddress payable feeReceiver;\nevent Buy( \nuint256 indexed id, \nuint256 tokenId, \naddress buyer, \nuint256 price, \nuint256 tipsFee, \naddress currency \n);\nevent Sell( \nuint256 indexed id, \nuint256 tokenId, \naddress nft, \naddress currency, \naddress seller, \naddress buyer, \nuint256 startTime, \nuint256 price \n);\nevent SaleCanceled(uint256 indexed id, uint256 tokenId);\nevent NftReceived(address operator, address from, uint256 tokenId, bytes data);\nconstructor(address payable _feeReceiver, uint256 _feeRate) public { \nfeeReceiver = _feeReceiver;\nfeeRate = _feeRate;\ninitReentrancyStatus();\n} \nfunction enableSales(bool _salesEnabled) external onlyOwner { salesEnabled = _salesEnabled;} \nfunction addSupportedNft(address _nftAddress) external onlyOwner { \nrequire(_nftAddress != address(0x0), \"invalid address\");\nsupportedNft[_nftAddress] = true;\n} \nfunction removeSupportedNft(address _nftAddress) external onlyOwner { \nrequire(_nftAddress != address(0x0), \"invalid address\");\nsupportedNft[_nftAddress] = false;\n} \nfunction addSupportedCurrency(address _currencyAddress) external onlyOwner { \nrequire(_currencyAddress != address(0x0), \"invalid address\");\nrequire(!supportedCurrency[_currencyAddress], \"currency already supported\");\nsupportedCurrency[_currencyAddress] = true;\n} \nfunction removeSupportedCurrency(address _currencyAddress) external onlyOwner { \nrequire(_currencyAddress != address(0x0), \"invalid address\");\nrequire(supportedCurrency[_currencyAddress], \"currency already removed\");\nsupportedCurrency[_currencyAddress] = false;\n} \nfunction setFeeReceiver(address payable _walletAddress) external onlyOwner { \nrequire(_walletAddress != address(0x0), \"invalid address\");\nfeeReceiver = _walletAddress;\n} \nfunction setFeeRate(uint256 _rate) external onlyOwner { \nrequire(_rate <= 100, \"Rate should be bellow 100 (10%)\");\nfeeRate = _rate;\n} \nfunction getSalesAmount() external view returns(uint) { return salesAmount;} \nfunction cancelSell(uint _tokenId, address _nftAddress) public nonReentrant { \nSalesObject storage obj = salesObjects[_nftAddress][_tokenId];\nrequire(obj.status == 0, \"status: sold or canceled\");\nrequire(obj.seller == msg.sender, \"seller not nft owner\");\nrequire(salesEnabled, \"sales are closed\");\nobj.status = 2;\nIERC721 nft = IERC721(obj.nft);\nnft.safeTransferFrom(address(this), obj.seller, obj.tokenId);\nemit SaleCanceled(_tokenId, obj.tokenId);\n} \nfunction sell(uint256 _tokenId, uint256 _price, address _nftAddress, address _currency) \npublic \nnonReentrant \nreturns(uint) \n{ \nrequire(_nftAddress != address(0x0), \"invalid nft address\");\nrequire(_tokenId != 0, \"invalid nft token\");\nrequire(salesEnabled, \"sales are closed\");\nrequire(supportedNft[_nftAddress], \"nft address unsupported\");\nrequire(supportedCurrency[_currency], \"currency not supported\");\nIERC721(_nftAddress).safeTransferFrom(msg.sender, address(this), _tokenId);\nsalesAmount++;\nsalesObjects[_nftAddress][_tokenId] = SalesObject( \nsalesAmount, \n_tokenId, \n_nftAddress, \n_currency, \nmsg.sender, \naddress(0x0), \nnow, \n_price, \n);\nemit Sell( \nsalesAmount, \n_tokenId, \n_nftAddress, \n_currency, \nmsg.sender, \naddress(0x0), \nnow, \n_price \n);\nreturn salesAmount;\n} \nfunction onERC721Received( \naddress operator, \naddress from, \nuint256 tokenId, \nbytes memory data \n) \npublic \noverride \nreturns (bytes4) \n{ \nif (address(this) != operator) { \nreturn 0;\n} \nemit NftReceived(operator, from, tokenId, data);\nreturn bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n} \nfunction buy(uint _tokenId, address _nftAddress, address _currency) \npublic \nnonReentrant \npayable \n{ \nSalesObject storage obj = salesObjects[_nftAddress][_tokenId];\nrequire(obj.status == 0, \"status: sold or canceled\");\nrequire(obj.startTime <= now, \"not yet for sale\");\nrequire(salesEnabled, \"sales are closed\");\nrequire(msg.sender != obj.seller, \"cant buy from yourself\");\nrequire(obj.currency == _currency, \"must pay same currency as sold\");\nuint256 price = this.getSalesPrice(_tokenId, _nftAddress);\nuint256 tipsFee = price.mul(feeRate).div(1000);\nuint256 purchase = price.sub(tipsFee);\nif (obj.currency == address(0x0)) { \nrequire (msg.value >= price, \"your price is too low\");\nuint256 returnBack = msg.value.sub(price);\nif (returnBack > 0) \nmsg.sender.transfer(returnBack);\nif (tipsFee > 0) \nfeeReceiver.transfer(tipsFee);\nobj.seller.transfer(purchase);\n} else { \nIERC20(obj.currency).safeTransferFrom(msg.sender, feeReceiver, tipsFee);\nIERC20(obj.currency).safeTransferFrom(msg.sender, obj.seller, purchase);\n} \nIERC721 nft = IERC721(obj.nft);\nnft.safeTransferFrom(address(this), msg.sender, obj.tokenId);\nobj.buyer = msg.sender;\nobj.status = 1;\nemit Buy(obj.id, obj.tokenId, msg.sender, price, tipsFee, obj.currency);\n} \nfunction getSales(uint _tokenId, address _nftAddress) \npublic \nview \nreturns(SalesObject memory) \n{ \nreturn salesObjects[_nftAddress][_tokenId];\n} \nfunction getSalesPrice(uint _tokenId, address _nftAddress) public view returns (uint256) { \nSalesObject storage obj = salesObjects[_nftAddress][_tokenId];\nreturn obj.price;\n} \n} \n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6;\nimport \"./Ownable.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./interfaces/IFidoUsdtLPPool.sol\";\ninterface IMFILPool {\nfunction userStake(address) external view returns (uint256);\n}\ncontract FidoMember is Ownable {\nusing SafeMath for uint256;\naddress public operator;\naddress public fidoOfficial;\naddress public pool;\naddress public mfilPool;\nuint256 public baseRate = 40;\nuint256 public multiRate = 40;\nuint256 public rateDecimal = 2;\nuint256 public stakeMin = 0;\nmapping(address => bool) public isMember;\nmapping(address => bool) public isInvited;\nmapping(address => address) public inviter;\nmapping(address => uint256) public joinBlockHeight;\nmapping(address => address[]) public followers;\nevent NewMember(\naddress indexed member,\naddress indexed inviter,\nuint256 joinBlockHeight\n);\nevent OperatorshipTransferred(\naddress indexed previousOperator,\naddress indexed newOperator\n);\nevent AdjustRate(uint256 baseRate, uint256 multiRate);\nevent AdjustStakeMin(uint256 stakeMin);\nconstructor(\naddress _operator,\naddress _fidoOfficial,\naddress _pool\n) Ownable() {\noperator = _operator;\nemit OperatorshipTransferred(address(0), operator);\nfidoOfficial = _fidoOfficial;\npool = _pool;\n}\nmodifier onlyOperator() {\nrequire(\n_msgSender() == operator,\n\"Operable: caller is not the operator\"\n);\n_;\n}\nfunction transferOperatorship(address newOperator) external onlyOwner {\nrequire(\nnewOperator != address(0),\n\"Operable: new operator is the zero address\"\n);\nemit OperatorshipTransferred(operator, newOperator);\noperator = newOperator;\n}\nfunction adjustRate(uint256 _baseRate, uint256 _multiRate)\nexternal\nonlyOperator\n{\nbaseRate = _baseRate;\nmultiRate = _multiRate;\nemit AdjustRate(baseRate, multiRate);\n}\nfunction changeRateDecimal(uint256 newRateDecimal) external onlyOperator {\nrateDecimal = newRateDecimal;\n}\nfunction changeStakeMin(uint256 newStakeMin) external onlyOperator {\nstakeMin = newStakeMin;\nemit AdjustStakeMin(stakeMin);\n}\nfunction joinFido(address _inviter) external {\nrequire(!isMember[_msgSender()], \"FidoMember: already joined\");\nif (_inviter != address(0)) {\nrequire(isMember[_inviter], \"FidoMember: inviter not joined\");\nisInvited[_msgSender()] = true;\ninviter[_msgSender()] = _inviter;\nfollowers[_inviter].push(_msgSender());\n}\nisMember[_msgSender()] = true;\njoinBlockHeight[_msgSender()] = block.number;\nemit NewMember(_msgSender(), _inviter, block.number);\n}\nfunction changeMFILPool(address newMfilpool) external onlyOwner {\nmfilPool = newMfilpool;\n}\nfunction changeFidoOfficial(address newFidoOfficial) external onlyOwner {\nfidoOfficial = newFidoOfficial;\n}\nfunction changePool(address newPool) external onlyOwner {\npool = newPool;\n}\nfunction getFollowerCount(address member) external view returns (uint256) {\nreturn followers[member].length;\n}\nfunction caleInviteRate(address member)\nexternal\nview\nreturns (\naddress inviter0,\naddress inviter1,\naddress fido,\nuint256 rate0,\nuint256 rate1,\nuint256 fidoRate\n)\n{\nrequire(isMember[member], \"FidoMember: not FIDO member.\");\nuint256 mfilStake0;\nuint256 mfilStake1;\nuint256 mfilStake2 = IMFILPool(mfilPool).userStake(member);\nuint256 fullRate = 10**rateDecimal;\nif (!isInvited[member]) {\nreturn (fidoOfficial, fidoOfficial, fidoOfficial, 0, 0, fullRate);\n}\ninviter0 = inviter[member];\nuint256 stake0 = IFidoUsdtLPPool(pool).userTokenBStake(inviter0);\ninviter1 = isInvited[inviter0] ? inviter[inviter0] : fidoOfficial;\nif (inviter1 == fidoOfficial) {\nif (stake0 >= stakeMin) {\nif (mfilStake2 == 0) {\nreturn (\ninviter0,\nfidoOfficial,\nfidoOfficial,\nbaseRate + multiRate,\n0,\nfullRate.sub(baseRate + multiRate)\n);\n}\nmfilStake0 = IMFILPool(mfilPool).userStake(inviter0);\nrate0 = baseRate + multiRate;\nif (mfilStake0 < mfilStake2) {\nrate0 = rate0.mul(mfilStake0).div(mfilStake2);\n}\nreturn (\ninviter0,\nfidoOfficial,\nfidoOfficial,\nrate0,\n0,\nfullRate.sub(rate0)\n);\n} else {\nreturn (\nfidoOfficial,\nfidoOfficial,\nfidoOfficial,\n0,\n0,\nfullRate\n);\n}\n}\nuint256 stake1 = IFidoUsdtLPPool(pool).userTokenBStake(inviter1);\nif (stake0 < stakeMin) {\nif (stake1 < stakeMin) {\nreturn (\nfidoOfficial,\nfidoOfficial,\nfidoOfficial,\n0,\n0,\nfullRate\n);\n} else {\nrate1 = fullRate.sub(baseRate);\nif (mfilStake2 == 0) {\nreturn (\nfidoOfficial,\ninviter1,\nfidoOfficial,\n0,\nrate1,\nfullRate.sub(rate1)\n);\n}\nmfilStake1 = IMFILPool(mfilPool).userStake(inviter1);\nif (mfilStake1 < mfilStake2) {\nrate1 = rate1.mul(mfilStake1).div(mfilStake2);\n}\nreturn (\nfidoOfficial,\ninviter1,\nfidoOfficial,\n0,\nrate1,\nfullRate.sub(rate1)\n);\n}\n}\nif (stake1 < stakeMin) {\ninviter1 = fidoOfficial;\nif (stake0 < stakeMin) {\nreturn (\nfidoOfficial,\nfidoOfficial,\nfidoOfficial,\n0,\n0,\nfullRate\n);\n} else {\nif (mfilStake2 == 0) {\nreturn (\ninviter0,\nfidoOfficial,\nfidoOfficial,\nbaseRate + multiRate,\n0,\nfullRate.sub(baseRate + multiRate)\n);\n}\nrate0 = baseRate + multiRate;\nmfilStake0 = IMFILPool(mfilPool).userStake(inviter0);\nif (mfilStake0 < mfilStake2) {\nrate0 = rate0.mul(mfilStake0).div(mfilStake2);\n}\nreturn (\ninviter0,\nfidoOfficial,\nfidoOfficial,\nrate0,\n0,\nfullRate.sub(rate0)\n);\n}\n}\nfido = fidoOfficial;\nrate0 = baseRate.add(\nstake0.mul(multiRate).mul(fullRate).div(stake0.add(stake1)).div(\nfullRate\n)\n);\nrate1 = fullRate.sub(rate0);\nif (mfilStake2 > 0) {\nmfilStake0 = IMFILPool(mfilPool).userStake(inviter0);\nmfilStake1 = IMFILPool(mfilPool).userStake(inviter1);\nif (mfilStake0 < mfilStake2) {\nrate0 = rate0.mul(mfilStake0).div(mfilStake2);\n}\nif (mfilStake1 < mfilStake2) {\nrate1 = rate1.mul(mfilStake1).div(mfilStake2);\n}\nfidoRate = fullRate.sub(rate0.add(rate1));\n}\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.5.16;\ninterface IHRC20 {\nfunction totalSupply() external view returns (uint256);\nfunction decimals() external view returns (uint8);\nfunction symbol() external view returns (string memory);\nfunction name() external view returns (string memory);\nfunction getOwner() external view returns (address);\nfunction balanceOf(address account) external view returns (uint256);\nfunction transfer(address recipient, uint256 amount) external returns (bool);\nfunction allowance(address _owner, address spender) external view returns (uint256);\nfunction approve(address spender, uint256 amount) external returns (bool);\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\ncontract Context {\nconstructor () internal { }\nfunction _msgSender() internal view returns (address payable) {\nreturn msg.sender;\n}\nfunction _msgData() internal view returns (bytes memory) {\nthis;\nreturn msg.data;\n}\n}\nlibrary SafeMath {\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\nuint256 c = a + b;\nrequire(c >= a, \"SafeMath: addition overflow\");\nreturn c;\n}\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\nreturn sub(a, b, \"SafeMath: subtraction overflow\");\n}\nfunction sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\nrequire(b <= a, errorMessage);\nuint256 c = a - b;\nreturn c;\n}\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\nif (a == 0) {\nreturn 0;\n}\nuint256 c = a * b;\nrequire(c / a == b, \"SafeMath: multiplication overflow\");\nreturn c;\n}\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\nreturn div(a, b, \"SafeMath: division by zero\");\n}\nfunction div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\nrequire(b > 0, errorMessage);\nuint256 c = a / b;\nreturn c;\n}\nfunction mod(uint256 a, uint256 b) internal pure returns (uint256) {\nreturn mod(a, b, \"SafeMath: modulo by zero\");\n}\nfunction mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\nrequire(b != 0, errorMessage);\nreturn a % b;\n}\n}\ncontract Ownable is Context {\naddress private _owner;\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\nconstructor () internal {\naddress msgSender = _msgSender();\n_owner = msgSender;\nemit OwnershipTransferred(address(0), msgSender);\n}\nfunction owner() public view returns (address) {\nreturn _owner;\n}\nmodifier onlyOwner() {\nrequire(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n_;\n}\nfunction renounceOwnership() public onlyOwner {\nemit OwnershipTransferred(_owner, address(0));\n_owner = address(0);\n}\nfunction transferOwnership(address newOwner) public onlyOwner {\n_transferOwnership(newOwner);\n}\nfunction _transferOwnership(address newOwner) internal {\nrequire(newOwner != address(0), \"Ownable: new owner is the zero address\");\nemit OwnershipTransferred(_owner, newOwner);\n_owner = newOwner;\n}\n}\ncontract HRC20Token is Context, IHRC20, Ownable {\nusing SafeMath for uint256;\nmapping (address => uint256) private _balances;\nmapping (address => mapping (address => uint256)) private _allowances;\nuint256 private _totalSupply;\nuint8 private _decimals;\nstring private _symbol;\nstring private _name;\nconstructor() public {\n_name = \"Rabbit\";\n_symbol = \"RBT\";\n_decimals = 18;\n_totalSupply = 100000000000*(10**18);\n_balances[msg.sender] = _totalSupply;\nemit Transfer(address(0), msg.sender, _totalSupply);\n}\nfunction getOwner() external view returns (address) {\nreturn owner();\n}\nfunction decimals() external view returns (uint8) {\nreturn _decimals;\n}\nfunction symbol() external view returns (string memory) {\nreturn _symbol;\n}\nfunction name() external view returns (string memory) {\nreturn _name;\n}\nfunction totalSupply() external view returns (uint256) {\nreturn _totalSupply;\n}\nfunction balanceOf(address account) external view returns (uint256) {\nreturn _balances[account];\n}\nfunction transfer(address recipient, uint256 amount) external returns (bool) {\n_transfer(_msgSender(), recipient, amount);\nreturn true;\n}\nfunction allowance(address owner, address spender) external view returns (uint256) {\nreturn _allowances[owner][spender];\n}\nfunction approve(address spender, uint256 amount) external returns (bool) {\n_approve(_msgSender(), spender, amount);\nreturn true;\n}\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool) {\n_transfer(sender, recipient, amount);\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"HRC20: transfer amo\nreturn true;\n}\nfunction increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\nreturn true;\n}\nfunction decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n_approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"HRC20: d\nreturn true;\n}\nfunction mint(uint256 amount) public onlyOwner returns (bool) {\n_mint(_msgSender(), amount);\nreturn true;\n}\nfunction _transfer(address sender, address recipient, uint256 amount) internal {\nrequire(sender != address(0), \"HRC20: transfer from the zero address\");\nrequire(recipient != address(0), \"HRC20: transfer to the zero address\");\n_balances[sender] = _balances[sender].sub(amount, \"HRC20: transfer amount exceeds balance\");\n_balances[recipient] = _balances[recipient].add(amount);\nemit Transfer(sender, recipient, amount);\n}\nfunction _mint(address account, uint256 amount) internal {\nrequire(account != address(0), \"HRC20: mint to the zero address\");\n_totalSupply = _totalSupply.add(amount);\n_balances[account] = _balances[account].add(amount);\nemit Transfer(address(0), account, amount);\n}\nfunction _burn(address account, uint256 amount) internal {\nrequire(account != address(0), \"HRC20: burn from the zero address\");\n_balances[account] = _balances[account].sub(amount, \"HRC20: burn amount exceeds balance\");\n_totalSupply = _totalSupply.sub(amount);\nemit Transfer(account, address(0), amount);\n}\nfunction _approve(address owner, address spender, uint256 amount) internal {\nrequire(owner != address(0), \"HRC20: approve from the zero address\");\nrequire(spender != address(0), \"HRC20: approve to the zero address\");\n_allowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\ncontract AdamRewardPool is Ownable {\nusing SafeMath for uint256;\nusing SafeERC20 for IERC20;\nstruct UserInfo {\nuint256 amount;\nuint256 rewardDebt;\n}\nstruct PoolInfo {\nIERC20 lpToken;\nuint256 lastRewardBlock;\nuint256 accAdamPerShare;\nuint256 maxStaking;\nuint256 lpSupply;\nuint256 rewardPerBlock;\naddress[] accounts;\n}\nPoolInfo[] public poolInfo;\naddress[] internal totalAccounts;\nmapping (address => bool) internal Wallets;\nmapping(uint256 => mapping(address => UserInfo)) public userInfo;\nIERC20 public rewardToken;\nuint256 public startBlock;\nuint256 public bonusEndBlock;\nuint256 public decimal;\nevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\nevent Harvest(address indexed user, uint256 indexed pid, uint256 amount);\nevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\nevent EmergencyWithdraw(\naddress indexed user,\nuint256 indexed pid,\nuint256 amount\n);\nconstructor(IERC20 _rewardToken,\nuint256 _startBlock,\nuint256 _bonusEndBlock) public {\nstartBlock = _startBlock;\nbonusEndBlock = _bonusEndBlock;\nrewardToken = _rewardToken;\ndecimal = 10**10;\n}\nfunction add(\nIERC20 _lpToken,\nuint256 _maxStaking\n) public onlyOwner{\npoolInfo.push(\nPoolInfo({\nlpToken: _lpToken,\nlastRewardBlock: startBlock,\naccAdamPerShare: 0,\nlpSupply: 0,\nmaxStaking:_maxStaking,\nrewardPerBlock:85611000000000000,\naccounts:totalAccounts\n})\n);\n}\nfunction getMultiplier(uint256 _from, uint256 _to)\npublic\nview\nreturns (uint256)\n{\nif (_to <= bonusEndBlock) {\nreturn _to.sub(_from);\n} else if (_from >= bonusEndBlock) {\nreturn 0;\n} else {\nreturn bonusEndBlock.sub(_from);\n}\n}\nfunction updatePool(uint256 _pid) internal {\nPoolInfo storage pool = poolInfo[_pid];\nif (block.number <= pool.lastRewardBlock) {\nreturn;\n}\nif (pool.lpSupply == 0) {\npool.lastRewardBlock = block.number;\nreturn;\n}\nuint256 multiplier = getMultiplier(pool.lastRewardBlock, block.number);\nuint256 adamReward = multiplier.mul(pool.rewardPerBlock);\npool.accAdamPerShare = pool.accAdamPerShare.add(\nadamReward.mul(1e12).div(pool.lpSupply)\n);\npool.lastRewardBlock = block.number;\n}\nffunction deposit(uint256 _pid, uint256 _amount) public {\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][msg.sender];\nupdatePool(_pid);\nif (user.amount > 0) {\nuint256 pending =\nuser.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal).sub(\nuser.rewardDebt\n);\nif (pending > 0) {\nrewardToken.safeTransfer(address(msg.sender), pending);\n}\n}\nif (_amount > 0) {\npool.lpToken.safeTransferFrom(\naddress(msg.sender),\naddress(this),\n_amount\n);\nuser.amount = user.amount.add(_amount);\npool.lpSupply = pool.lpSupply.add(_amount);\n}\nuser.rewardDebt = user.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal);\nif (contains(msg.sender) == false){\npool.accounts.push(msg.sender);\ntotalAccounts.push(msg.sender);\nsetWallet(msg.sender);\n}\nemit Deposit(msg.sender, _pid, _amount);\n}\nffunction exit(uint256 _pid) public {\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][msg.sender];\nrequire(user.amount >= 0, \"withdraw: not good\");\nupdatePool(_pid);\nuint256 pending =\nuser.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal).sub(\nuser.rewardDebt\n);\nif (pending > 0) {\nrewardToken.safeTransfer(address(msg.sender), pending);\n}\nuint256 _amount = user.amount;\nif (_amount > 0) {\nuser.amount = 0;\npool.lpToken.safeTransfer(address(msg.sender), _amount);\npool.lpSupply = pool.lpSupply.sub(_amount);\n}\nuser.rewardDebt = user.amount.mul(pool.accAdamPerShare).div(1e12).div(decimal);\nemit Withdraw(msg.sender, _pid, _amount);\n}\nfunction emergencyRewardWithdraw(uint256 _amount) public onlyOwner {\nrequire(\n_amount < rewardToken.balanceOf(address(this)),\n\"not enough token\"\n);\nrewardToken.safeTransfer(address(msg.sender), _amount);\n}\nfunction stopReward() public onlyOwner {\nbonusEndBlock = block.number;\n}\nfunction setBonusEndBlock(uint256 _bonusEndBlock) public onlyOwner {\nbonusEndBlock = _bonusEndBlock;\n}\nfunction setRewardPerBlock(uint256 _pid, uint256 _rewardPerBlock) public onlyOwner {\nPoolInfo storage pool = poolInfo[_pid];\npool.rewardPerBlock = _rewardPerBlock;\n}\nfunction getLpSupply(uint256 _pid) external view returns (uint256) {\nPoolInfo storage pool = poolInfo[_pid];\nuint256 lpSupply = pool.lpToken.balanceOf(address(this));\nreturn lpSupply;\n}\nfunction getBlockNum() public view onlyOwner returns (uint256) {\nuint256 blNum = block.number;\nreturn blNum;\n}\nfunction getAccounts() public view onlyOwner returns (address[] memory) {\nreturn totalAccounts;\n}\nfunction getAccountsLength() public view onlyOwner returns (uint256) {\nreturn totalAccounts.length;\n}\nfunction getPoolAccounts(uint256 _pid) public view onlyOwner returns (address[] memory) {\nPoolInfo storage pool = poolInfo[_pid];\nreturn pool.accounts;\n}\nfunction getPoolAccountsLength(uint256 _pid) public view onlyOwner returns (uint256) {\nPoolInfo storage pool = poolInfo[_pid];\nreturn pool.accounts.length;\n}\nfunction setWallet(address _wallet) internal{\nWallets[_wallet] = true;\n}\nfunction contains(address _wallet) internal view returns (bool){\nreturn Wallets[_wallet];\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nimport {BaseUniswapAdapter} from './BaseUniswapAdapter.sol';\nimport {ILendingPoolAddressesProvider} from '../interfaces/ILendingPoolAddressesProvider.sol';\nimport {IUniswapV2Router02} from '../interfaces/IUniswapV2Router02.sol';\nimport {IERC20} from '../dependencies/openzeppelin/contracts/IERC20.sol';\ncontract UniswapLiquiditySwapAdapter is BaseUniswapAdapter {\nstruct PermitParams {\nuint256[] amount;\nuint256[] deadline;\nuint8[] v;\nbytes32[] r;\nbytes32[] s;\n}\nstruct SwapParams {\naddress[] assetToSwapToList;\nuint256[] minAmountsToReceive;\nbool[] swapAllBalance;\nPermitParams permitParams;\nbool[] useEthPath;\n}\nconstructor(\nILendingPoolAddressesProvider addressesProvider,\nIUniswapV2Router02 uniswapRouter,\naddress wethAddress\n) public BaseUniswapAdapter(addressesProvider, uniswapRouter, wethAddress) {}\nfunction swapAndDeposit(\naddress[] calldata assetToSwapFromList,\naddress[] calldata assetToSwapToList,\nuint256[] calldata amountToSwapList,\nuint256[] calldata minAmountsToReceive,\nPermitSignature[] calldata permitParams,\nbool[] calldata useEthPath\n) external {\nrequire(\nassetToSwapFromList.length == assetToSwapToList.length &&\nassetToSwapFromList.length == amountToSwapList.length &&\nassetToSwapFromList.length == minAmountsToReceive.length &&\nassetToSwapFromList.length == permitParams.length,\n'INCONSISTENT_PARAMS'\n);\nSwapAndDepositLocalVars memory vars;\nfor (vars.i = 0;vars.i < assetToSwapFromList.length;vars.i++) {\nvars.aToken = _getReserveData(assetToSwapFromList[vars.i]).aTokenAddress;\nvars.aTokenInitiatorBalance = IERC20(vars.aToken).balanceOf(msg.sender);\nvars.amountToSwap = amountToSwapList[vars.i] > vars.aTokenInitiatorBalance\n? vars.aTokenInitiatorBalance\n: amountToSwapList[vars.i];\n_pullAToken(\nassetToSwapFromList[vars.i],\nvars.aToken,\nmsg.sender,\nvars.amountToSwap,\npermitParams[vars.i]\n);\nvars.receivedAmount = _swapExactTokensForTokens(\nassetToSwapFromList[vars.i],\nassetToSwapToList[vars.i],\nvars.amountToSwap,\nminAmountsToReceive[vars.i],\nuseEthPath[vars.i]\n);\nIERC20(assetToSwapToList[vars.i]).safeApprove(address(LENDING_POOL), 0);\nIERC20(assetToSwapToList[vars.i]).safeApprove(address(LENDING_POOL), vars.receivedAmount);\nLENDING_POOL.deposit(assetToSwapToList[vars.i], vars.receivedAmount, msg.sender, 0);\n}\n}\nstruct SwapLiquidityLocalVars {\naddress aToken;\nuint256 aTokenInitiatorBalance;\nuint256 amountToSwap;\nuint256 receivedAmount;\nuint256 flashLoanDebt;\nuint256 amountToPull;\n}\nfunction _swapLiquidity(\naddress assetFrom,\naddress assetTo,\nuint256 amount,\nuint256 premium,\naddress initiator,\nuint256 minAmountToReceive,\nbool swapAllBalance,\nPermitSignature memory permitSignature,\nbool useEthPath\n) internal {\nSwapLiquidityLocalVars memory vars;\nvars.aToken = _getReserveData(assetFrom).aTokenAddress;\nvars.aTokenInitiatorBalance = IERC20(vars.aToken).balanceOf(initiator);\nvars.amountToSwap = swapAllBalance && vars.aTokenInitiatorBalance.sub(premium) <= amount\n? vars.aTokenInitiatorBalance.sub(premium)\n: amount;\nvars.receivedAmount = _swapExactTokensForTokens(\nassetFrom,\nassetTo,\nvars.amountToSwap,\nminAmountToReceive,\nuseEthPath\n);\nIERC20(assetTo).safeApprove(address(LENDING_POOL), 0);\nIERC20(assetTo).safeApprove(address(LENDING_POOL), vars.receivedAmount);\nLENDING_POOL.deposit(assetTo, vars.receivedAmount, initiator, 0);\nvars.flashLoanDebt = amount.add(premium);\nvars.amountToPull = vars.amountToSwap.add(premium);\n_pullAToken(assetFrom, vars.aToken, initiator, vars.amountToPull, permitSignature);\nIERC20(assetFrom).safeApprove(address(LENDING_POOL), 0);\nIERC20(assetFrom).safeApprove(address(LENDING_POOL), vars.flashLoanDebt);\n}\nfunction _decodeParams(bytes memory params) internal pure returns (SwapParams memory) {\n(\naddress[] memory assetToSwapToList,\nuint256[] memory minAmountsToReceive,\nbool[] memory swapAllBalance,\nuint256[] memory permitAmount,\nuint256[] memory deadline,\nuint8[] memory v,\nbytes32[] memory r,\nbytes32[] memory s,\nbool[] memory useEthPath\n) =\nabi.decode(\nparams,\n(address[], uint256[], bool[], uint256[], uint256[], uint8[], bytes32[], bytes32[], bool[])\n);\nreturn\nSwapParams(\nassetToSwapToList,\nminAmountsToReceive,\nswapAllBalance,\nPermitParams(permitAmount, deadline, v, r, s),\nuseEthPath\n);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport {SafeMath} from '../../dependencies/openzeppelin/contracts\nimport {IERC20} from '../../dependencies/openzeppelin/contracts\nimport {IAToken} from '../../interfaces/IAToken.sol';\nimport {IStableDebtToken} from '../../interfaces/IStableDebtToken.sol';\nimport {IVariableDebtToken} from '../../interfaces/IVariableDebtToken.sol';\nimport {IPriceOracleGetter} from '../../interfaces/IPriceOracleGetter.sol';\nimport {ILendingPoolCollateralManager} from '../../interfaces/ILendingPoolCollateralManager.sol';\nimport {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';\nimport {GenericLogic} from '../libraries/logic/GenericLogic.sol';\nimport {Helpers} from '../libraries/helpers/Helpers.sol';\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\nimport {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\nimport {Errors} from '../libraries/helpers/Errors.sol';\nimport {ValidationLogic} from '../libraries/logic/ValidationLogic.sol';\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\nimport {LendingPoolStorage} from './LendingPoolStorage.sol';\ncontract LendingPoolCollateralManager is\nILendingPoolCollateralManager,\nVersionedInitializable,\nLendingPoolStorage\n{\nusing SafeERC20 for IERC20;\nusing SafeMath for uint256;\nusing WadRayMath for uint256;\nusing PercentageMath for uint256;\nuint256 internal constant LIQUIDATION_CLOSE_FACTOR_PERCENT = 5000;\nstruct LiquidationCallLocalVars {\nuint256 userCollateralBalance;\nuint256 userStableDebt;\nuint256 userVariableDebt;\nuint256 maxLiquidatableDebt;\nuint256 actualDebtToLiquidate;\nuint256 liquidationRatio;\nuint256 maxAmountCollateralToLiquidate;\nuint256 userStableRate;\nuint256 maxCollateralToLiquidate;\nuint256 debtAmountNeeded;\nuint256 healthFactor;\nuint256 liquidatorPreviousATokenBalance;\nIAToken collateralAtoken;\nbool isCollateralEnabled;\nDataTypes.InterestRateMode borrowRateMode;\nuint256 errorCode;\nstring errorMsg;\n}\nfunction _calculateAvailableCollateralToLiquidate(\nDataTypes.ReserveData storage collateralReserve,\nDataTypes.ReserveData storage debtReserve,\naddress collateralAsset,\naddress debtAsset,\nuint256 debtToCover,\nuint256 userCollateralBalance\n) internal view returns (uint256, uint256) {\nuint256 collateralAmount = 0;\nuint256 debtAmountNeeded = 0;\nIPriceOracleGetter oracle = IPriceOracleGetter(_addressesProvider.getPriceOracle());\nAvailableCollateralToLiquidateLocalVars memory vars;\nvars.collateralPrice = oracle.getAssetPrice(collateralAsset);\nvars.debtAssetPrice = oracle.getAssetPrice(debtAsset);\n(, , vars.liquidationBonus, vars.collateralDecimals, ) = collateralReserve\n.configuration\n.getParams();\nvars.debtAssetDecimals = debtReserve.configuration.getDecimals();\nvars.maxAmountCollateralToLiquidate = vars\n.debtAssetPrice\n.mul(debtToCover)\n.mul(10**vars.collateralDecimals)\n.percentMul(vars.liquidationBonus)\n.div(vars.collateralPrice.mul(10**vars.debtAssetDecimals));\nif (vars.maxAmountCollateralToLiquidate > userCollateralBalance) {\ncollateralAmount = userCollateralBalance;\ndebtAmountNeeded = vars\n.collateralPrice\n.mul(collateralAmount)\n.mul(10**vars.debtAssetDecimals)\n.div(vars.debtAssetPrice.mul(10**vars.collateralDecimals))\n.percentDiv(vars.liquidationBonus);\n} else {\ncollateralAmount = vars.maxAmountCollateralToLiquidate;\ndebtAmountNeeded = debtToCover;\n}\nreturn (collateralAmount, debtAmountNeeded);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport {IERC20} from '../../dependencies/openzeppelin/contracts/IERC20.sol';\nimport {SafeERC20} from '../../dependencies/openzeppelin/contracts/SafeERC20.sol';\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\nimport {IAToken} from '../../interfaces/IAToken.sol';\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\nimport {Errors} from '../libraries/helpers/Errors.sol';\nimport {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';\nimport {IncentivizedERC20} from './IncentivizedERC20.sol';\nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';\ncontract AToken is\nVersionedInitializable,\nIncentivizedERC20('ATOKEN_IMPL', 'ATOKEN_IMPL', 0),\nIAToken\n{\nusing WadRayMath for uint256;\nusing SafeERC20 for IERC20;\nbytes public constant EIP712_REVISION = bytes('1');\nbytes32 internal constant EIP712_DOMAIN =\nkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\nbytes32 public constant PERMIT_TYPEHASH =\nkeccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\nuint256 public constant ATOKEN_REVISION = 0x1;\nmapping(address => uint256) public _nonces;\nbytes32 public DOMAIN_SEPARATOR;\nILendingPool internal _pool;\naddress internal _treasury;\naddress internal _underlyingAsset;\nIAaveIncentivesController internal _incentivesController;\nmodifier onlyLendingPool {\nrequire(_msgSender() == address(_pool), Errors.CT_CALLER_MUST_BE_LENDING_POOL);\n_;\n}\nfunction initialize(\nILendingPool pool,\naddress treasury,\naddress underlyingAsset,\nIAaveIncentivesController incentivesController,\nuint8 aTokenDecimals,\nstring calldata aTokenName,\nstring calldata aTokenSymbol,\nbytes calldata params\n) external override initializer {\nuint256 chainId;\nassembly {\nchainId := chainid()\n}\nDOMAIN_SEPARATOR = keccak256(\nabi.encode(\nEIP712_DOMAIN,\nkeccak256(bytes(aTokenName)),\nkeccak256(EIP712_REVISION),\nchainId,\naddress(this)\n)\n);\n_setName(aTokenName);\n_setSymbol(aTokenSymbol);\n_setDecimals(aTokenDecimals);\n_pool = pool;\n_treasury = treasury;\n_underlyingAsset = underlyingAsset;\n_incentivesController = incentivesController;\nemit Initialized(\nunderlyingAsset,\naddress(pool),\ntreasury,\naddress(incentivesController),\naTokenDecimals,\naTokenName,\naTokenSymbol,\nparams\n);\n}\nfunction burn(\naddress user,\naddress receiverOfUnderlying,\nuint256 amount,\nuint256 index\n) external override onlyLendingPool {\nuint256 amountScaled = amount.rayDiv(index);\nrequire(amountScaled != 0, Errors.CT_INVALID_BURN_AMOUNT);\n_burn(user, amountScaled);\nIERC20(_underlyingAsset).safeTransfer(receiverOfUnderlying, amount);\nemit Transfer(user, address(0), amount);\nemit Burn(user, receiverOfUnderlying, amount, index);\n}\nfunction mint(\naddress user,\nuint256 amount,\nuint256 index\n) external override onlyLendingPool returns (bool) {\nuint256 previousBalance = super.balanceOf(user);\nuint256 amountScaled = amount.rayDiv(index);\nrequire(amountScaled != 0, Errors.CT_INVALID_MINT_AMOUNT);\n_mint(user, amountScaled);\nemit Transfer(address(0), user, amount);\nemit Mint(user, amount, index);\nreturn previousBalance == 0;\n}\nfunction transferOnLiquidation(\naddress from,\naddress to,\nuint256 value\n) external override onlyLendingPool {\n_transfer(from, to, value, false);\nemit Transfer(from, to, value);\n}\nfunction RESERVE_TREASURY_ADDRESS() public view returns (address) {\nreturn _treasury;\n}\nfunction UNDERLYING_ASSET_ADDRESS() public override view returns (address) {\nreturn _underlyingAsset;\n}\nfunction POOL() public view returns (ILendingPool) {\nreturn _pool;\n}\nfunction _getIncentivesController() internal view override returns (IAaveIncentivesController) {\nreturn _incentivesController;\n}\nfunction getIncentivesController() external view override returns (IAaveIncentivesController) {\nreturn _getIncentivesController();\n}\nfunction transferUnderlyingTo(address target, uint256 amount)\nexternal\noverride\nonlyLendingPool\nreturns (uint256)\n{\nIERC20(_underlyingAsset).safeTransfer(target, amount);\nreturn amount;\n}\nfunction handleRepayment(address user, uint256 amount) external override onlyLendingPool {}\nfunction _transfer(\naddress from,\naddress to,\nuint256 amount,\nbool validate\n) internal {\naddress underlyingAsset = _underlyingAsset;\nILendingPool pool = _pool;\nuint256 index = pool.getReserveNormalizedIncome(underlyingAsset);\nuint256 fromBalanceBefore = super.balanceOf(from).rayMul(index);\nuint256 toBalanceBefore = super.balanceOf(to).rayMul(index);\nsuper._transfer(from, to, amount.rayDiv(index));\nif (validate) {\npool.finalizeTransfer(underlyingAsset, from, to, amount, fromBalanceBefore, toBalanceBefore);\n}\nemit BalanceTransfer(from, to, amount, index);\n}\nfunction _transfer(\naddress from,\naddress to,\nuint256 amount\n) internal override {\n_transfer(from, to, amount, true);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nlibrary Errors {\nstring public constant CALLER_NOT_POOL_ADMIN = '33';\nstring public constant BORROW_ALLOWANCE_NOT_ENOUGH = '59';\nstring public constant VL_INVALID_AMOUNT = '1';\nstring public constant VL_NO_ACTIVE_RESERVE = '2';\nstring public constant VL_RESERVE_FROZEN = '3';\nstring public constant VL_CURRENT_AVAILABLE_LIQUIDITY_NOT_ENOUGH = '4';\nstring public constant VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE = '5';\nstring public constant VL_TRANSFER_NOT_ALLOWED = '6';\nstring public constant CT_CALLER_MUST_BE_LENDING_POOL = '29';\nstring public constant CT_CANNOT_GIVE_ALLOWANCE_TO_HIMSELF = '30';\nstring public constant CT_TRANSFER_AMOUNT_NOT_GT_0 = '31';\nstring public constant RL_RESERVE_ALREADY_INITIALIZED = '32';\nstring public constant LPC_RESERVE_LIQUIDITY_NOT_0 = '34';\nstring public constant LPC_INVALID_ATOKEN_POOL_ADDRESS = '35';\nstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_POOL_ADDRESS = '36';\nstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_POOL_ADDRESS = '37';\nstring public constant LPC_INVALID_STABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '38';\nstring public constant LPC_INVALID_VARIABLE_DEBT_TOKEN_UNDERLYING_ADDRESS = '39';\nstring public constant LPC_INVALID_ADDRESSES_PROVIDER_ID = '40';\nstring public constant LPC_INVALID_CONFIGURATION = '75';\nstring public constant LPC_CALLER_NOT_EMERGENCY_ADMIN = '76';\nstring public constant LPAPR_PROVIDER_NOT_REGISTERED = '41';\nstring public constant LPCM_HEALTH_FACTOR_NOT_BELOW_THRESHOLD = '42';\nstring public constant LPCM_COLLATERAL_CANNOT_BE_LIQUIDATED = '43';\nstring public constant LPCM_SPECIFIED_CURRENCY_NOT_BORROWED_BY_USER = '44';\nstring public constant LPCM_NOT_ENOUGH_LIQUIDITY_TO_LIQUIDATE = '45';\nstring public constant LPCM_NO_ERRORS = '46';\nstring public constant LP_INVALID_FLASHLOAN_MODE = '47';\nstring public constant MATH_MULTIPLICATION_OVERFLOW = '48';\nstring public constant MATH_ADDITION_OVERFLOW = '49';\nstring public constant MATH_DIVISION_BY_ZERO = '50';\nstring public constant RL_LIQUIDITY_INDEX_OVERFLOW = '51';\nstring public constant RL_VARIABLE_BORROW_INDEX_OVERFLOW = '52';\nstring public constant RL_LIQUIDITY_RATE_OVERFLOW = '53';\nstring public constant RL_VARIABLE_BORROW_RATE_OVERFLOW = '54';\nstring public constant RL_STABLE_BORROW_RATE_OVERFLOW = '55';\nstring public constant CT_INVALID_MINT_AMOUNT = '56';\nstring public constant LP_FAILED_REPAY_WITH_COLLATERAL = '57';\nstring public constant CT_INVALID_BURN_AMOUNT = '58';\nstring public constant LP_FAILED_COLLATERAL_SWAP = '60';\nstring public constant LP_INVALID_EQUAL_ASSETS_TO_SWAP = '61';\nstring public constant LP_REENTRANCY_NOT_ALLOWED = '62';\nstring public constant LP_CALLER_MUST_BE_AN_ATOKEN = '63';\nstring public constant LP_IS_PAUSED = '64';\nstring public constant LP_NO_MORE_RESERVES_ALLOWED = '65';\nstring public constant LP_INVALID_FLASH_LOAN_EXECUTOR_RETURN = '66';\nstring public constant RC_INVALID_LTV = '67';\nstring public constant RC_INVALID_LIQ_THRESHOLD = '68';\nstring public constant RC_INVALID_LIQ_BONUS = '69';\nstring public constant RC_INVALID_DECIMALS = '70';\nstring public constant RC_INVALID_RESERVE_FACTOR = '71';\nstring public constant LPAPR_INVALID_ADDRESSES_PROVIDER_ID = '72';\nstring public constant VL_INCONSISTENT_FLASHLOAN_PARAMS = '73';\nstring public constant LP_INCONSISTENT_PARAMS_LENGTH = '74';\nstring public constant UL_INVALID_INDEX = '77';\nstring public constant LP_NOT_CONTRACT = '78';\nstring public constant SDT_STABLE_DEBT_OVERFLOW = '79';\nstring public constant SDT_BURN_EXCEEDS_BALANCE = '80';\nenum CollateralManagerErrors {\nNO_ERROR,\nNO_COLLATERAL_AVAILABLE,\nCOLLATERAL_CANNOT_BE_LIQUIDATED,\nCURRRENCY_NOT_BORROWED,\nHEALTH_FACTOR_ABOVE_THRESHOLD,\nNOT_ENOUGH_LIQUIDITY,\nNO_ACTIVE_RESERVE,\nHEALTH_FACTOR_LOWER_THAN_LIQUIDATION_THRESHOLD,\nINVALID_EQUAL_ASSETS_TO_SWAP,\nFROZEN_RESERVE\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\nimport {ReserveLogic} from './ReserveLogic.sol';\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\nimport {WadRayMath} from '../math/WadRayMath.sol';\nimport {PercentageMath} from '../math/PercentageMath.sol';\nimport {IPriceOracleGetter} from '../../../interfaces/IPriceOracleGetter.sol';\nimport {DataTypes} from '../types/DataTypes.sol';\nlibrary GenericLogic {\nusing ReserveLogic for DataTypes.ReserveData;\nusing SafeMath for uint256;\nusing WadRayMath for uint256;\nusing PercentageMath for uint256;\nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\nusing UserConfiguration for DataTypes.UserConfigurationMap;\nuint256 public constant HEALTH_FACTOR_LIQUIDATION_THRESHOLD = 1 ether;\nstruct balanceDecreaseAllowedLocalVars {\nuint256 decimals;\nuint256 liquidationThreshold;\nuint256 totalCollateralInETH;\nuint256 totalDebtInETH;\nuint256 avgLiquidationThreshold;\nuint256 amountToDecreaseInETH;\nuint256 collateralBalanceAfterDecrease;\nuint256 liquidationThresholdAfterDecrease;\nuint256 healthFactorAfterDecrease;\nbool reserveUsageAsCollateralEnabled;\n}\nfunction calculateUserAccountData(\naddress user,\nmapping(address => DataTypes.ReserveData) storage reservesData,\nDataTypes.UserConfigurationMap memory userConfig,\nmapping(uint256 => address) storage reserves,\nuint256 reservesCount,\naddress oracle\n)\ninternal\nview\nreturns (\nuint256,\nuint256,\nuint256,\nuint256,\nuint256\n)\n{\nCalculateUserAccountDataVars memory vars;\nif (userConfig.isEmpty()) {\nreturn (0, 0, 0, 0, uint256(-1));\n}\nfor (vars.i = 0;vars.i < reservesCount;vars.i++) {\nif (!userConfig.isUsingAsCollateralOrBorrowing(vars.i)) {\ncontinue;\n}\nvars.currentReserveAddress = reserves[vars.i];\nDataTypes.ReserveData storage currentReserve = reservesData[vars.currentReserveAddress];\n(vars.ltv, vars.liquidationThreshold, , vars.decimals, ) = currentReserve\n.configuration\n.getParams();\nvars.tokenUnit = 10**vars.decimals;\nvars.reserveUnitPrice = IPriceOracleGetter(oracle).getAssetPrice(vars.currentReserveAddress);\nif (vars.liquidationThreshold != 0 && userConfig.isUsingAsCollateral(vars.i)) {\nvars.compoundedLiquidityBalance = IERC20(currentReserve.aTokenAddress).balanceOf(user);\nuint256 liquidityBalanceETH =\nvars.reserveUnitPrice.mul(vars.compoundedLiquidityBalance).div(vars.tokenUnit);\nvars.totalCollateralInETH = vars.totalCollateralInETH.add(liquidityBalanceETH);\nvars.avgLtv = vars.avgLtv.add(liquidityBalanceETH.mul(vars.ltv));\nvars.avgLiquidationThreshold = vars.avgLiquidationThreshold.add(\nliquidityBalanceETH.mul(vars.liquidationThreshold)\n);\n}\nif (userConfig.isBorrowing(vars.i)) {\nvars.compoundedBorrowBalance = IERC20(currentReserve.stableDebtTokenAddress).balanceOf(\nuser\n);\nvars.compoundedBorrowBalance = vars.compoundedBorrowBalance.add(\nIERC20(currentReserve.variableDebtTokenAddress).balanceOf(user)\n);\nvars.totalDebtInETH = vars.totalDebtInETH.add(\nvars.reserveUnitPrice.mul(vars.compoundedBorrowBalance).div(vars.tokenUnit)\n);\n}\n}\nvars.avgLtv = vars.totalCollateralInETH > 0 ? vars.avgLtv.div(vars.totalCollateralInETH) : 0;\nvars.avgLiquidationThreshold = vars.totalCollateralInETH > 0\n? vars.avgLiquidationThreshold.div(vars.totalCollateralInETH)\n: 0;\nvars.healthFactor = calculateHealthFactorFromBalances(\nvars.totalCollateralInETH,\nvars.totalDebtInETH,\nvars.avgLiquidationThreshold\n);\nreturn (\nvars.totalCollateralInETH,\nvars.totalDebtInETH,\nvars.avgLtv,\nvars.avgLiquidationThreshold,\nvars.healthFactor\n);\n}\nfunction calculateHealthFactorFromBalances(\nuint256 totalCollateralInETH,\nuint256 totalDebtInETH,\nuint256 liquidationThreshold\n) internal pure returns (uint256) {\nif (totalDebtInETH == 0) return uint256(-1);\nreturn (totalCollateralInETH.percentMul(liquidationThreshold)).wadDiv(totalDebtInETH);\n}\nfunction calculateAvailableBorrowsETH(\nuint256 totalCollateralInETH,\nuint256 totalDebtInETH,\nuint256 ltv\n) internal pure returns (uint256) {\nuint256 availableBorrowsETH = totalCollateralInETH.percentMul(ltv);\nif (availableBorrowsETH < totalDebtInETH) {\nreturn 0;\n}\navailableBorrowsETH = availableBorrowsETH.sub(totalDebtInETH);\nreturn availableBorrowsETH;\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\nimport {ReserveLogic} from './ReserveLogic.sol';\nimport {GenericLogic} from './GenericLogic.sol';\nimport {WadRayMath} from '../math/WadRayMath.sol';\nimport {PercentageMath} from '../math/PercentageMath.sol';\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\nimport {UserConfiguration} from '../configuration/UserConfiguration.sol';\nimport {Errors} from '../helpers/Errors.sol';\nimport {Helpers} from '../helpers/Helpers.sol';\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\nimport {DataTypes} from '../types/DataTypes.sol';\nlibrary ValidationLogic {\nusing ReserveLogic for DataTypes.ReserveData;\nusing SafeMath for uint256;\nusing WadRayMath for uint256;\nusing PercentageMath for uint256;\nusing SafeERC20 for IERC20;\nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\nusing UserConfiguration for DataTypes.UserConfigurationMap;\nuint256 public constant REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD = 4000;\nuint256 public constant REBALANCE_UP_USAGE_RATIO_THRESHOLD = 0.95 * 1e27;\nfunction validateDeposit(DataTypes.ReserveData storage reserve, uint256 amount) external view {\n(bool isActive, bool isFrozen, , ) = reserve.configuration.getFlags();\nrequire(amount != 0, Errors.VL_INVALID_AMOUNT);\nrequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\nrequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\n}\nfunction validateWithdraw(\naddress reserveAddress,\nuint256 amount,\nuint256 userBalance,\nmapping(address => DataTypes.ReserveData) storage reservesData,\nDataTypes.UserConfigurationMap storage userConfig,\nmapping(uint256 => address) storage reserves,\nuint256 reservesCount,\naddress oracle\n) external view {\nrequire(amount != 0, Errors.VL_INVALID_AMOUNT);\nrequire(amount <= userBalance, Errors.VL_NOT_ENOUGH_AVAILABLE_USER_BALANCE);\n(bool isActive, , , ) = reservesData[reserveAddress].configuration.getFlags();\nrequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\nrequire(\nGenericLogic.balanceDecreaseAllowed(\nreserveAddress,\nmsg.sender,\namount,\nreservesData,\nuserConfig,\nreserves,\nreservesCount,\noracle\n),\nErrors.VL_TRANSFER_NOT_ALLOWED\n);\n}\nstruct ValidateBorrowLocalVars {\nuint256 currentLtv;\nuint256 currentLiquidationThreshold;\nuint256 amountOfCollateralNeededETH;\nuint256 userCollateralBalanceETH;\nuint256 userBorrowBalanceETH;\nuint256 availableLiquidity;\nuint256 healthFactor;\nbool isActive;\nbool isFrozen;\nbool borrowingEnabled;\nbool stableRateBorrowingEnabled;\n}\nffunction validateRepay(\nDataTypes.ReserveData storage reserve,\nuint256 amountSent,\nDataTypes.InterestRateMode rateMode,\naddress onBehalfOf,\nuint256 stableDebt,\nuint256 variableDebt\n) external view {\nbool isActive = reserve.configuration.getActive();\nrequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\nrequire(amountSent > 0, Errors.VL_INVALID_AMOUNT);\nrequire(\n(stableDebt > 0 &&\nDataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.STABLE) ||\n(variableDebt > 0 &&\nDataTypes.InterestRateMode(rateMode) == DataTypes.InterestRateMode.VARIABLE),\nErrors.VL_NO_DEBT_OF_SELECTED_TYPE\n);\nrequire(\namountSent != uint256(-1) || msg.sender == onBehalfOf,\nErrors.VL_NO_EXPLICIT_AMOUNT_TO_REPAY_ON_BEHALF\n);\n}\nfunction validateSwapRateMode(\nDataTypes.ReserveData storage reserve,\nDataTypes.UserConfigurationMap storage userConfig,\nuint256 stableDebt,\nuint256 variableDebt,\nDataTypes.InterestRateMode currentRateMode\n) external view {\n(bool isActive, bool isFrozen, , bool stableRateEnabled) = reserve.configuration.getFlags();\nrequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\nrequire(!isFrozen, Errors.VL_RESERVE_FROZEN);\nif (currentRateMode == DataTypes.InterestRateMode.STABLE) {\nrequire(stableDebt > 0, Errors.VL_NO_STABLE_RATE_LOAN_IN_RESERVE);\n} else if (currentRateMode == DataTypes.InterestRateMode.VARIABLE) {\nrequire(variableDebt > 0, Errors.VL_NO_VARIABLE_RATE_LOAN_IN_RESERVE);\nrequire(stableRateEnabled, Errors.VL_STABLE_BORROWING_NOT_ENABLED);\nrequire(\n!userConfig.isUsingAsCollateral(reserve.id) ||\nreserve.configuration.getLtv() == 0 ||\nstableDebt.add(variableDebt) > IERC20(reserve.aTokenAddress).balanceOf(msg.sender),\nErrors.VL_COLLATERAL_SAME_AS_BORROWING_CURRENCY\n);\n} else {\nrevert(Errors.VL_INVALID_INTEREST_RATE_MODE_SELECTED);\n}\n}\nfunction validateRebalanceStableBorrowRate(\nDataTypes.ReserveData storage reserve,\naddress reserveAddress,\nIERC20 stableDebtToken,\nIERC20 variableDebtToken,\naddress aTokenAddress\n) external view {\n(bool isActive, , , ) = reserve.configuration.getFlags();\nrequire(isActive, Errors.VL_NO_ACTIVE_RESERVE);\nuint256 totalDebt =\nstableDebtToken.totalSupply().add(variableDebtToken.totalSupply()).wadToRay();\nuint256 availableLiquidity = IERC20(reserveAddress).balanceOf(aTokenAddress).wadToRay();\nuint256 usageRatio = totalDebt == 0 ? 0 : totalDebt.rayDiv(availableLiquidity.add(totalDebt));\nuint256 currentLiquidityRate = reserve.currentLiquidityRate;\nuint256 maxVariableBorrowRate =\nIReserveInterestRateStrategy(reserve.interestRateStrategyAddress).getMaxVariableBorrowRate();\nrequire(\nusageRatio >= REBALANCE_UP_USAGE_RATIO_THRESHOLD &&\ncurrentLiquidityRate <=\nmaxVariableBorrowRate.percentMul(REBALANCE_UP_LIQUIDITY_RATE_THRESHOLD),\nErrors.LP_INTEREST_RATE_REBALANCE_CONDITIONS_NOT_MET\n);\n}\nfunction validateFlashloan(address[] memory assets, uint256[] memory amounts) internal pure {\nrequire(assets.length == amounts.length, Errors.VL_INCONSISTENT_FLASHLOAN_PARAMS);\n}\nfunction validateTransfer(\naddress from,\nmapping(address => DataTypes.ReserveData) storage reservesData,\nDataTypes.UserConfigurationMap storage userConfig,\nmapping(uint256 => address) storage reserves,\nuint256 reservesCount,\naddress oracle\n) internal view {\n(, , , , uint256 healthFactor) =\nGenericLogic.calculateUserAccountData(\nfrom,\nreservesData,\nuserConfig,\nreserves,\nreservesCount,\noracle\n);\nrequire(\nhealthFactor >= GenericLogic.HEALTH_FACTOR_LIQUIDATION_THRESHOLD,\nErrors.VL_TRANSFER_NOT_ALLOWED\n);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport {SafeMath} from '../../../dependencies/openzeppelin/contracts/SafeMath.sol';\nimport {IERC20} from '../../../dependencies/openzeppelin/contracts/IERC20.sol';\nimport {SafeERC20} from '../../../dependencies/openzeppelin/contracts/SafeERC20.sol';\nimport {IAToken} from '../../../interfaces/IAToken.sol';\nimport {IStableDebtToken} from '../../../interfaces/IStableDebtToken.sol';\nimport {IVariableDebtToken} from '../../../interfaces/IVariableDebtToken.sol';\nimport {IReserveInterestRateStrategy} from '../../../interfaces/IReserveInterestRateStrategy.sol';\nimport {ReserveConfiguration} from '../configuration/ReserveConfiguration.sol';\nimport {MathUtils} from '../math/MathUtils.sol';\nimport {WadRayMath} from '../math/WadRayMath.sol';\nimport {PercentageMath} from '../math/PercentageMath.sol';\nimport {Errors} from '../helpers/Errors.sol';\nimport {DataTypes} from '../types/DataTypes.sol';\nlibrary ReserveLogic {\nusing SafeMath for uint256;\nusing WadRayMath for uint256;\nusing PercentageMath for uint256;\nusing SafeERC20 for IERC20;\nevent ReserveDataUpdated(\naddress indexed asset,\nuint256 liquidityRate,\nuint256 stableBorrowRate,\nuint256 variableBorrowRate,\nuint256 liquidityIndex,\nuint256 variableBorrowIndex\n);\nusing ReserveLogic for DataTypes.ReserveData;\nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\nfunction init(\nDataTypes.ReserveData storage reserve,\naddress aTokenAddress,\naddress stableDebtTokenAddress,\naddress variableDebtTokenAddress,\naddress interestRateStrategyAddress\n) external {\nrequire(reserve.aTokenAddress == address(0), Errors.RL_RESERVE_ALREADY_INITIALIZED);\nreserve.liquidityIndex = uint128(WadRayMath.ray());\nreserve.variableBorrowIndex = uint128(WadRayMath.ray());\nreserve.aTokenAddress = aTokenAddress;\nreserve.stableDebtTokenAddress = stableDebtTokenAddress;\nreserve.variableDebtTokenAddress = variableDebtTokenAddress;\nreserve.interestRateStrategyAddress = interestRateStrategyAddress;\n}\nstruct UpdateInterestRatesLocalVars {\naddress stableDebtTokenAddress;\nuint256 availableLiquidity;\nuint256 totalStableDebt;\nuint256 newLiquidityRate;\nuint256 newStableRate;\nuint256 newVariableRate;\nuint256 avgStableRate;\nuint256 totalVariableDebt;\n}\nfunction _mintToTreasury(\nDataTypes.ReserveData storage reserve,\nuint256 scaledVariableDebt,\nuint256 previousVariableBorrowIndex,\nuint256 newLiquidityIndex,\nuint256 newVariableBorrowIndex,\nuint40 timestamp\n) internal {\nMintToTreasuryLocalVars memory vars;\nvars.reserveFactor = reserve.configuration.getReserveFactor();\nif (vars.reserveFactor == 0) {\nreturn;\n}\n(\nvars.principalStableDebt,\nvars.currentStableDebt,\nvars.avgStableRate,\nvars.stableSupplyUpdatedTimestamp\n) = IStableDebtToken(reserve.stableDebtTokenAddress).getSupplyData();\nvars.previousVariableDebt = scaledVariableDebt.rayMul(previousVariableBorrowIndex);\nvars.currentVariableDebt = scaledVariableDebt.rayMul(newVariableBorrowIndex);\nvars.cumulatedStableInterest = MathUtils.calculateCompoundedInterest(\nvars.avgStableRate,\nvars.stableSupplyUpdatedTimestamp,\ntimestamp\n);\nvars.previousStableDebt = vars.principalStableDebt.rayMul(vars.cumulatedStableInterest);\nvars.totalDebtAccrued = vars\n.currentVariableDebt\n.add(vars.currentStableDebt)\n.sub(vars.previousVariableDebt)\n.sub(vars.previousStableDebt);\nvars.amountToMint = vars.totalDebtAccrued.percentMul(vars.reserveFactor);\nif (vars.amountToMint != 0) {\nIAToken(reserve.aTokenAddress).mintToTreasury(vars.amountToMint, newLiquidityIndex);\n}\n}\nfunction _updateIndexes(\nDataTypes.ReserveData storage reserve,\nuint256 scaledVariableDebt,\nuint256 liquidityIndex,\nuint256 variableBorrowIndex,\nuint40 timestamp\n) internal returns (uint256, uint256) {\nuint256 currentLiquidityRate = reserve.currentLiquidityRate;\nuint256 newLiquidityIndex = liquidityIndex;\nuint256 newVariableBorrowIndex = variableBorrowIndex;\nif (currentLiquidityRate > 0) {\nuint256 cumulatedLiquidityInterest =\nMathUtils.calculateLinearInterest(currentLiquidityRate, timestamp);\nnewLiquidityIndex = cumulatedLiquidityInterest.rayMul(liquidityIndex);\nrequire(newLiquidityIndex <= type(uint128).max, Errors.RL_LIQUIDITY_INDEX_OVERFLOW);\nreserve.liquidityIndex = uint128(newLiquidityIndex);\nif (scaledVariableDebt != 0) {\nuint256 cumulatedVariableBorrowInterest =\nMathUtils.calculateCompoundedInterest(reserve.currentVariableBorrowRate, timestamp);\nnewVariableBorrowIndex = cumulatedVariableBorrowInterest.rayMul(variableBorrowIndex);\nrequire(\nnewVariableBorrowIndex <= type(uint128).max,\nErrors.RL_VARIABLE_BORROW_INDEX_OVERFLOW\n);\nreserve.variableBorrowIndex = uint128(newVariableBorrowIndex);\n}\n}\nreserve.lastUpdateTimestamp = uint40(block.timestamp);\nreturn (newLiquidityIndex, newVariableBorrowIndex);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport {Errors} from '../helpers/Errors.sol';\nimport {DataTypes} from '../types/DataTypes.sol';\nlibrary ReserveConfiguration {\nuint256 constant LTV_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nuint256 constant LIQUIDATION_THRESHOLD_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nuint256 constant LIQUIDATION_BONUS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nuint256 constant DECIMALS_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0\nuint256 constant ACTIVE_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEF\nuint256 constant FROZEN_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFDF\nuint256 constant BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFBF\nuint256 constant STABLE_BORROWING_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7F\nuint256 constant RESERVE_FACTOR_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000FFF\nuint256 constant LIQUIDATION_THRESHOLD_START_BIT_POSITION = 16;\nuint256 constant LIQUIDATION_BONUS_START_BIT_POSITION = 32;\nuint256 constant RESERVE_DECIMALS_START_BIT_POSITION = 48;\nuint256 constant IS_ACTIVE_START_BIT_POSITION = 56;\nuint256 constant IS_FROZEN_START_BIT_POSITION = 57;\nuint256 constant BORROWING_ENABLED_START_BIT_POSITION = 58;\nuint256 constant STABLE_BORROWING_ENABLED_START_BIT_POSITION = 59;\nuint256 constant RESERVE_FACTOR_START_BIT_POSITION = 64;\nuint256 constant MAX_VALID_LTV = 65535;\nuint256 constant MAX_VALID_LIQUIDATION_THRESHOLD = 65535;\nuint256 constant MAX_VALID_LIQUIDATION_BONUS = 65535;\nuint256 constant MAX_VALID_DECIMALS = 255;\nuint256 constant MAX_VALID_RESERVE_FACTOR = 65535;\nffunction setActive(DataTypes.ReserveConfigurationMap memory self, bool active) internal pure {\nself.data =\n(self.data & ACTIVE_MASK) |\n(uint256(active ? 1 : 0) << IS_ACTIVE_START_BIT_POSITION);\n}\nfunction getActive(DataTypes.ReserveConfigurationMap storage self) internal view returns (bool) {\nreturn (self.data & ~ACTIVE_MASK) != 0;\n}\nfunction setFrozen(DataTypes.ReserveConfigurationMap memory self, bool frozen) internal pure {\nself.data =\n(self.data & FROZEN_MASK) |\n(uint256(frozen ? 1 : 0) << IS_FROZEN_START_BIT_POSITION);\n}\nfunction getStableRateBorrowingEnabled(DataTypes.ReserveConfigurationMap storage self)\ninternal\nview\nreturns (bool)\n{\nreturn (self.data & ~STABLE_BORROWING_MASK) != 0;\n}\nfunction setReserveFactor(DataTypes.ReserveConfigurationMap memory self, uint256 reserveFactor)\ninternal\npure\n{\nrequire(reserveFactor <= MAX_VALID_RESERVE_FACTOR, Errors.RC_INVALID_RESERVE_FACTOR);\nself.data =\n(self.data & RESERVE_FACTOR_MASK) |\n(reserveFactor << RESERVE_FACTOR_START_BIT_POSITION);\n}\nfunction getReserveFactor(DataTypes.ReserveConfigurationMap storage self)\ninternal\nview\nreturns (uint256)\n{\nreturn (self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION;\n}\nfunction getFlags(DataTypes.ReserveConfigurationMap storage self)\ninternal\nview\nreturns (\nbool,\nbool,\nbool,\nbool\n)\n{\nuint256 dataLocal = self.data;\nreturn (\n(dataLocal & ~ACTIVE_MASK) != 0,\n(dataLocal & ~FROZEN_MASK) != 0,\n(dataLocal & ~BORROWING_MASK) != 0,\n(dataLocal & ~STABLE_BORROWING_MASK) != 0\n);\n}\nfunction getParams(DataTypes.ReserveConfigurationMap storage self)\ninternal\nview\nreturns (\nuint256,\nuint256,\nuint256,\nuint256,\nuint256\n)\n{\nuint256 dataLocal = self.data;\nreturn (\ndataLocal & ~LTV_MASK,\n(dataLocal & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n(dataLocal & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n(dataLocal & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n(dataLocal & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n);\n}\nfunction getParamsMemory(DataTypes.ReserveConfigurationMap memory self)\ninternal\npure\nreturns (\nuint256,\nuint256,\nuint256,\nuint256,\nuint256\n)\n{\nreturn (\nself.data & ~LTV_MASK,\n(self.data & ~LIQUIDATION_THRESHOLD_MASK) >> LIQUIDATION_THRESHOLD_START_BIT_POSITION,\n(self.data & ~LIQUIDATION_BONUS_MASK) >> LIQUIDATION_BONUS_START_BIT_POSITION,\n(self.data & ~DECIMALS_MASK) >> RESERVE_DECIMALS_START_BIT_POSITION,\n(self.data & ~RESERVE_FACTOR_MASK) >> RESERVE_FACTOR_START_BIT_POSITION\n);\n}\nfunction getFlagsMemory(DataTypes.ReserveConfigurationMap memory self)\ninternal\npure\nreturns (\nbool,\nbool,\nbool,\nbool\n)\n{\nreturn (\n(self.data & ~ACTIVE_MASK) != 0,\n(self.data & ~FROZEN_MASK) != 0,\n(self.data & ~BORROWING_MASK) != 0,\n(self.data & ~STABLE_BORROWING_MASK) != 0\n);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.5.17;\nlibrary SafeMath {\nfunction allowance(address account, address spender) external view returns (uint256) {\nreturn allowances[account][spender];\n}\nfunction approve(address spender, uint256 rawAmount) external returns (bool) {\nuint96 amount;\nif (rawAmount == uint256(-1)) {\namount = uint96(-1);\n} else {\namount = safe96(rawAmount, \"Ba::approve: amount exceeds 96 bits\");\n}\nallowances[msg.sender][spender] = amount;\nemit Approval(msg.sender, spender, amount);\nreturn true;\n}\nfunction permit(address owner, address spender, uint256 rawAmount, uint256 deadline, uint8 v, byt\nuint96 amount;\nif (rawAmount == uint256(-1)) {\namount = uint96(-1);\n} else {\namount = safe96(rawAmount, \"Ba::permit: amount exceeds 96 bits\");\n}\nbytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getCh\nbytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, rawAmount, nonces[\nbytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\naddress signatory = ecrecover(digest, v, r, s);\nrequire(signatory != address(0), \"Ba::permit: invalid signature\");\nrequire(signatory == owner, \"Ba::permit: unauthorized\");\nrequire(now <= deadline, \"Ba::permit: signature expired\");\nallowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n}\nfunction balanceOf(address account) external view returns (uint256) {\nreturn balances[account];\n}\nfunction transfer(address dst, uint256 rawAmount) external returns (bool) {\nuint96 amount = safe96(rawAmount, \"Ba::transfer: amount exceeds 96 bits\");\n_transferTokens(msg.sender, dst, amount);\nreturn true;\n}\nfunction transferFrom(address src, address dst, uint256 rawAmount) external returns (bool) {\naddress spender = msg.sender;\nuint96 spenderAllowance = allowances[src][spender];\nuint96 amount = safe96(rawAmount, \"Ba::approve: amount exceeds 96 bits\");\nif (spender != src && spenderAllowance != uint96(-1)) {\nuint96 newAllowance = sub96(spenderAllowance, amount, \"Ba::transferFrom: transfer amount\nallowances[src][spender] = newAllowance;\nemit Approval(src, spender, newAllowance);\n}\n_transferTokens(src, dst, amount);\nreturn true;\n}\nfunction delegate(address delegatee) public {\nreturn _delegate(msg.sender, delegatee);\n}\nfunction delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, byte\nbytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getCh\nbytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\nbytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\naddress signatory = ecrecover(digest, v, r, s);\nrequire(signatory != address(0), \"Ba::delegateBySig: invalid signature\");\nrequire(nonce == nonces[signatory]++, \"Ba::delegateBySig: invalid nonce\");\nrequire(now <= expiry, \"Ba::delegateBySig: signature expired\");\nreturn _delegate(signatory, delegatee);\n}\nfunction getCurrentVotes(address account) external view returns (uint96) {\nuint32 nCheckpoints = numCheckpoints[account];\nreturn nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n}\nfunction getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\nrequire(blockNumber < block.number, \"Ba::getPriorVotes: not yet determined\");\nuint32 nCheckpoints = numCheckpoints[account];\nif (nCheckpoints == 0) {return 0;}\nif (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) { return checkpoints[acc\nif (checkpoints[account][0].fromBlock > blockNumber) { return 0;}\nuint32 lower = 0;\nuint32 upper = nCheckpoints - 1;\nwhile (upper > lower) {\nuint32 center = upper - (upper - lower) / 2;\nCheckpoint memory cp = checkpoints[account][center];\nif (cp.fromBlock == blockNumber) {\nreturn cp.votes;\n} else if (cp.fromBlock < blockNumber) {\nlower = center;\n} else {\nupper = center - 1;\n}\n}\nreturn checkpoints[account][lower].votes;\n}\nfunction _delegate(address delegator, address delegatee) internal {\naddress currentDelegate = delegates[delegator];\nuint96 delegatorBalance = balances[delegator];\ndelegates[delegator] = delegatee;\nemit DelegateChanged(delegator, currentDelegate, delegatee);\n_moveDelegates(currentDelegate, delegatee, delegatorBalance);\n}\nfunction _transferTokens(address src, address dst, uint96 amount) internal {\nrequire(src != address(0), \"Ba::_transferTokens: cannot transfer from the zero address\");\nrequire(dst != address(0), \"Ba::_transferTokens: cannot transfer to the zero address\");\nbalances[src] = sub96(balances[src], amount, \"Ba::_transferTokens: transfer amount exceeds ba\nbalances[dst] = add96(balances[dst], amount, \"Ba::_transferTokens: transfer amount overflows\"\nemit Transfer(src, dst, amount);\n_moveDelegates(delegates[src], delegates[dst], amount);\n}\nfunction safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\nrequire(n < 2**32, errorMessage);\nreturn uint32(n);\n}\nfunction safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\nrequire(n < 2**96, errorMessage);\nreturn uint96(n);\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\nimport {SafeMath} from \"../libs/SafeMath.sol\";\nimport {SafeCast} from \"../libs/SafeCast.sol\";\nimport {IComposedSoccerStarNft} from \"../interfaces/IComposedSoccerStarNft.sol\";\nimport {ISoccerStarNft} from \"../interfaces/ISoccerStarNft.sol\";\ncontract ComposedSoccerStarNft is IComposedSoccerStarNft, Ownable {\nusing SafeMath for uint;\naddress constant public BLOCK_HOLE = address(0x0000000000000000000000000000000000000001);\nISoccerStarNft public tokenContract;\nIERC20 public bibContract;\nIERC20 public busdContract;\nIUniswapV2Router02 public router;\nuint[12] public feeRates = [360000, 730000, 1200000, 2200000,\n1800000, 3650000, 6000000, 11000000,\n9000000, 18250000, 30000000, 55000000];\naddress public treasury;\nuint constant public MAX_STARLEVEL = 4;\nuint constant public STARLEVEL_RANGE = 4;\nuint constant public ORACLE_PRECISION = 1e18;\nevent TokenContractChanged(address sender, address oldValue, address newValue);\nevent BIBContractChanged(address sender, address oldValue, address newValue);\nevent BUSDContractChanged(address sender, address oldValue, address newValue);\nevent TreasuryChanged(address sender, address oldValue, address newValue);\nevent SwapRouterChanged(address sender, address oldValue, address newValue);\nevent FeeRateChanged(address sender, uint[12] oldValue, uint[12] newValue);\nconstructor(\naddress _tokenContract,\naddress _bibContract,\naddress _busdContract,\naddress _treasury,\naddress _router\n){\ntokenContract = ISoccerStarNft(_tokenContract);\nbibContract = IERC20(_bibContract);\nbusdContract = IERC20(_busdContract);\ntreasury = _treasury;\nrouter = IUniswapV2Router02(_router);\n}\nfunction setTokenContract(address _tokenContract) public onlyOwner{\nrequire(address(0) != _tokenContract, \"INVLID_ADDRESS\");\nemit TokenContractChanged(msg.sender, address(tokenContract), _tokenContract);\ntokenContract = ISoccerStarNft(_tokenContract);\n}\nfunction setBIBContract(address _bibContract) public onlyOwner{\nrequire(address(0) != _bibContract, \"INVLID_ADDRESS\");\nemit BIBContractChanged(msg.sender, address(bibContract), _bibContract);\nbibContract = IERC20(_bibContract);\n}\nfunction setTreasury(address _treasury) public onlyOwner{\nrequire(address(0) != _treasury, \"INVLID_ADDRESS\");\nemit TreasuryChanged(msg.sender, treasury, _treasury);\ntreasury = _treasury;\n}\nfunction caculateBurnAmount(uint starLevel, uint gradient) public view returns(uint){\nuint decimals = IERC20Metadata(address(bibContract)).decimals();\nreturn feeRates[(starLevel - 1) * STARLEVEL_RANGE + (gradient - 1)].exp(decimals);\n}\nfunction caculateBUSDAmount(uint bibAmount) public view returns(uint){\naddress[] memory path = new address[](2);\npath[0] = address(bibContract);\npath[1] = address(busdContract);\nreturn router.getAmountsOut(bibAmount, path)[1];\n}\nfunction validOwnership(uint[] memory tokensToValid) internal view {\nfor(uint i = 0;i < tokensToValid.length;i++){\nrequire(msg.sender == IERC721(address(tokenContract)).ownerOf(tokensToValid[i]), \"TOKEN_N\n}\n}\nfunction validStarLevel(uint tokenId) internal view returns(bool){\nreturn tokenContract.getCardProperty(tokenId).starLevel < MAX_STARLEVEL;\n}\nfunction validToken(uint base, uint[] memory tokensToValid) internal view returns(bool){\nif(0 == tokensToValid.length){\nreturn false;\n}\nISoccerStarNft.SoccerStar memory baseProperty = tokenContract.getCardProperty(base);\nfor(uint i = 0;i < tokensToValid.length;i++){\nif(!cmpProperty(baseProperty, tokenContract.getCardProperty(tokensToValid[i]))){\nreturn false;\n}\n}\nreturn true;\n}\nfunction cmpProperty (\nISoccerStarNft.SoccerStar memory a,\nISoccerStarNft.SoccerStar memory b) internal pure returns(bool){\nreturn keccak256(bytes(a.name)) == keccak256(bytes(b.name))\n&& keccak256(bytes(a.country)) == keccak256(bytes(b.country))\n&& keccak256(bytes(a.position)) == keccak256(bytes(b.position))\n&& a.gradient == b.gradient;\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport {SafeMath} from \"../libs/SafeMath.sol\";\nimport {SafeCast} from \"../libs/SafeCast.sol\";\nimport {ISoccerStarNft} from \"../interfaces/ISoccerStarNft.sol\";\nimport {ISoccerStarNftMarket} from \"../interfaces/ISoccerStarNftMarket.sol\";\nimport {IFeeCollector} from \"../interfaces/IFeeCollector.sol\";\ncontract SoccerStarNftMarket is ISoccerStarNftMarket, Ownable{\nusing SafeMath for uint;\naddress public treasury;\nIERC20 public bibContract;\nIERC20 public busdContract;\nISoccerStarNft public tokenContract;\nIFeeCollector feeCollector;\nevent TokenContractChanged(address sender, address oldValue, address newValue);\nevent BIBContractChanged(address sender, address oldValue, address newValue);\nevent BUSDContractChanged(address sender, address oldValue, address newValue);\nevent FeeRatioChanged(address sender, uint oldValue, uint newValue);\nevent RoyaltyRatioChanged(address sender, uint oldValue, uint newValue);\nevent FeeCollectorChanged(address sender, address oldValue, address newValue);\nuint public nextOrderIndex;\nuint public nextOfferIndex;\nuint public feeRatio = 25;\nuint public royaltyRatio = 75;\nuint public constant FEE_RATIO_DIV = 1000;\nuint[] public orders;\nmapping(uint=>Order) public orderTb;\nmapping(address=>uint[]) public userOrderTb;\nmapping(uint=>uint[]) public orderOfferTb;\nmapping(uint=>Offer) public offerTb;\nconstructor(\naddress _treasury,\naddress _tokenContract,\naddress _bibContract,\naddress _busdContract\n){\ntreasury = _treasury;\ntokenContract = ISoccerStarNft(_tokenContract);\nbibContract = IERC20(_bibContract);\nbusdContract = IERC20(_busdContract);\n}\nffunction setTokenContract(address _tokenContract) public onlyOwner{\nrequire(address(0) != _tokenContract, \"INVALID_ADDRESS\");\nemit TokenContractChanged(msg.sender, address(tokenContract), _tokenContract);\ntokenContract = ISoccerStarNft(_tokenContract);\n}\nfunction getOrdersByPage(uint pageSt, uint pageSz)\npublic view override returns(Order[] memory){\nOrder[] memory ret;\nif(pageSt < orders.length){\nuint end = pageSt + pageSz;\nend = end > orders.length ? orders.length : end;\nret = new Order[](end - pageSt);\nfor(uint i = 0;pageSt < end;i++){\nret[i] = orderTb[orders[pageSt]];\npageSt++;\n}\n}\nreturn ret;\n}\nfunction getOrderOffersByPage(uint orderId, uint pageSt, uint pageSz)\npublic view override returns(Offer[] memory){\nuint[] storage offers = orderOfferTb[orderId];\nOffer[] memory ret;\nif(pageSt < offers.length){\nuint end = pageSt + pageSz;\nend = end > offers.length ? offers.length : end;\nret = new Offer[](end - pageSt);\nfor(uint i = 0;pageSt < end;i++){\nret[i] = offerTb[offers[pageSt]];\npageSt++;\n}\n}\nreturn ret;\n}\nfunction caculateFees(uint amount) view public returns(uint, uint ){\nreturn (amount.mul(feeRatio).div(FEE_RATIO_DIV), amount.mul(royaltyRatio).div(FEE_RATIO_DIV))\n}\nfunction updateOrderPrice(uint orderId, uint price) public override payable{\nOrder storage order = orderTb[orderId];\nrequire(address(0) != order.issuer,\"INVALID_ORDER\");\nrequire(msg.sender == order.owner, \"SHOULD_BE_ORDER_OWNER\");\nrequire(order.expiration > block.timestamp, \"ORDER_EXPIRED\");\nrequire(price > 0, \"PRICE_LTE_ZERO\");\nemit UpdateOrderPrice(msg.sender, orderId, order.price, price);\norder.price = price;\n}\nfunction acceptAndRefundOffer(Order storage order, uint[] storage offers, uint acceptOfferId) int\nfor(uint i = 0;i < offers.length;i++){\nOffer storage offer = offerTb[offers[i]];\nif(acceptOfferId == offer.offerId) {\ncontinue;\n}\nif(order.payMethod == PayMethod.PAY_BNB){\npayable(address(offer.buyer)).transfer(offer.bid);\n} else if(order.payMethod == PayMethod.PAY_BUSD){\nbusdContract.transfer(offer.buyer, offer.bid);\n} else {\nbibContract.transfer(offer.buyer, offer.bid);\n}\n}\n}\nfunction cancelOffer(uint orderId, uint offerId) public override{\nOrder storage order = orderTb[orderId];\nrequire(address(0) != order.issuer,\"INVALID_ORDER\");\nOffer storage offer = offerTb[offerId];\nrequire(msg.sender == offer.buyer, \"SHOULD_BE_BUYER\");\nif(order.payMethod == PayMethod.PAY_BNB){\npayable(address(offer.buyer)).transfer(offer.bid);\n} else if(order.payMethod == PayMethod.PAY_BUSD){\nbusdContract.transfer(offer.buyer, offer.bid);\n} else {\nbibContract.transfer(offer.buyer, offer.bid);\n}\nuint[] storage offers = orderOfferTb[orderId];\nuint indexToRm = offers.length;\nfor(uint i = 0;i < offers.length;i++){\nif(offerTb[offers[i]].offerId == offerId){\nindexToRm = i;\n}\n}\nrequire(indexToRm < offers.length, \"OFFER_NOT_EXIST\");\nfor(uint i = indexToRm;i < offers.length - 1;i++){\noffers[i] = offers[i+1];\n}\noffers.pop();\ndelete offerTb[offerId];\nemit CancelOffer(msg.sender, orderId, offerId);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.8.0;\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport '@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol';\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\";\nimport \"../interfaces/ISoccerStarNft.sol\";\nimport \"erc721a/contracts/ERC721A.sol\";\nimport {SafeMath} from \"../libs/SafeMath.sol\";\ncontract SoccerStarNft is\nISoccerStarNft,\nERC721A,\nOwnable {\nusing Strings for uint;\nusing SafeMath for uint;\nIERC20 public bibContract;\nIERC20 public busdContract;\nIUniswapV2Router02 public router;\nstring public baseURI;\nstring public notRevealedURI;\nstring public constant BASE_EXTENSION = \".json\";\nbool public revealed = false;\nuint constant public ORACLE_PRECISION = 1e18;\naddress constant public BLACK_HOLE = 0x0000000000000000000000000000000000000001;\nuint public maxMintSupply;\nuint constant public PRE_SELL_ROUND = 0;\nuint constant public PUB_SELL_ROUND1 = 1;\nuint constant public PUB_SELL_ROUND2 = 2;\nuint constant public PUB_SELL_ROUND3 = 3;\nuint constant public PUB_SELL_ROUND4 = 4;\nuint constant public PUB_SELL_ROUND5 = 5;\nuint constant public MAX_ROUND = PUB_SELL_ROUND5;\nevent BIBContractChanged(address sender, address oldValue, address newValue);\nevent BUSDContractChanged(address sender, address oldValue, address newValue);\nevent TreasuryChanged(address sender, address oldValue, address newValue);\nevent SwapRouterChanged(address sender, address oldValue, address newValue);\nevent ComposerChanged(address sender, address oldValue, address newValue);\nevent SellTimeChanged(address sender, uint oldValue, uint newValue);\nevent Changed(address sender, uint oldValue, uint newValue);\nevent UpdateStarLevel(address sender, uint oldValue, uint newValue);\naddress public treasury;\nuint256 public maxPubicsaleUserMintAmount;\nuint constant public MAX_PROPERTY_VALUE = 4;\nmapping(uint256 => bool) public isOwnerMint;\nmapping(uint256 => SoccerStar) public cardProperty;\nmapping(uint=>mapping(BlindBoxesType=>uint)) public mintPriceTb;\nmapping(uint=>mapping(BlindBoxesType=>uint)) public maxAmountTb;\nmapping(uint=>mapping(BlindBoxesType=>uint)) public mintAmountTb;\nmapping(address=>mapping(uint=>uint)) public mintAmountPerAddrTb;\nmapping(uint=>TimeInfo) public timeInfoTb;\nmapping(address=>bool) public allowProtocolToCallTb;\nmapping(address=>bool) public allowToCallTb;\nstruct QuotaTracker {\nuint quota;\nuint used;\n}\nmapping(uint=>QuotaTracker) public busdQuotaPerPubRoundTb;\nmapping(address=>QuotaTracker) public userQutaPreRoundTb;\nconstructor(uint _maxMintSupply,\naddress _bibContract,\naddress _busdContract,\naddress _treasury,\naddress _router)ERC721A(\"BIBMetaSuperstar\", \"BMSTAR\"){\nmaxMintSupply = _maxMintSupply;\nbibContract = IERC20(_bibContract);\nbusdContract = IERC20(_busdContract);\ntreasury = _treasury;\nrouter = IUniswapV2Router02(_router);\nmaxPubicsaleUserMintAmount = 10;\nrevealed = false;\n}\nfunction setAllowProtocolToCall(address _protAddr, bool value)\npublic onlyOwner{\nallowProtocolToCallTb[_protAddr] = value;\n}\nmodifier onlyAllowProtocolToCall() {\nrequire(allowProtocolToCallTb[msg.sender], \"ONLY_PROTOCOL_CALL\");\n_;\n}\nfunction isPublicRound(uint round) public pure returns(bool){\nreturn (round >= PUB_SELL_ROUND1) && (round <= PUB_SELL_ROUND5);\n}\nfunction getPubicRoundMintAmountByUser(address user, uint round) public view returns(uint){\nreturn mintAmountPerAddrTb[user][round];\n}\nfunction publicSellMint(\nuint round,\nBlindBoxesType boxType,\nuint256 quantity,\nPayMethod payMethod) public {\nrequire(isPublicRound(round), \"NOT_PUBLIC_ROUND_NUM\");\nrequire(isRoundOpen(round), \"ROUND_NOT_OPEN\");\nrequire(boxType != BlindBoxesType.presale, \"PRESALE_BOX_NOT_ALLOWED\");\nrequire(getPubicRoundMintAmountByUser(msg.sender, round).add(quantity) <= getMaxAmountPerAddr\n\"EXCEED_ADDRESS_MAX_MINT_AMOUNT\");\nrequire(getRemainingAmount(round, boxType) >= quantity,\n\"EXCEED_MAX_MINT_AMOUNT\");\nuint sales = quantity.mul(getMintPrice(round, boxType));\nif(payMethod == PayMethod.PAY_BIB){\nbibContract.transferFrom(msg.sender, BLACK_HOLE, sales);\n} else {\nrequire(getBUSDRemainningQuotaPerPubRound(round) >= quantity, \"EXCEED_MAX_BUSD_QUOTA\");\nsales = caculateBUSDAmount(sales);\nbusdContract.transferFrom(msg.sender, treasury, sales);\nbusdQuotaPerPubRoundTb[round].used = busdQuotaPerPubRoundTb[round].used.add(quantity);\n}\n_safeMint(msg.sender, quantity);\nmintAmountTb[round][boxType] = mintAmountTb[round][boxType].add(quantity);\nmintAmountPerAddrTb[msg.sender][round] = mintAmountPerAddrTb[msg.sender][round].add(quantity)\nemit Mint(msg.sender,\nround,\nboxType,\n_nextTokenId().sub(quantity),\nquantity,\npayMethod,\nsales);\n}\nfunction ownerMint(uint256 quantity) external onlyOwner {\nrequire(\n_totalMinted() + quantity <= getMaxMintSupply(),\n\"MAX_SUPPLY_REACHED\"\n);\n_safeMint(msg.sender, quantity);\nfor (uint256 i = _nextTokenId() - quantity;i < _nextTokenId();i++) {\nisOwnerMint[i] = true;\n}\nemit Mint(msg.sender,\nPRE_SELL_ROUND,\nBlindBoxesType.presale,\n_nextTokenId().sub(quantity),\nquantity,\nPayMethod.PAY_BIB,\n0);\n}\nfunction currentTime() public view returns(uint) {\nreturn block.timestamp;\n}\nfunction _startTokenId() internal view virtual override returns (uint256) {\nreturn 1;\n}\nfunction tokenURI(uint _nftId) public view override(ERC721A) returns (string memory) {\nrequire(_exists(_nftId), \"This NFT doesn't exist.\");\nif(revealed == false) {\nreturn notRevealedURI;\n}\nstring memory currentBaseURI = _baseURI();\nreturn\nbytes(currentBaseURI).length > 0\n? string(abi.encodePacked(currentBaseURI, _nftId.toString(), BASE_EXTENSION))\n: \"\";\n}\nfunction _baseURI() internal view override returns (string memory) {\nreturn baseURI;\n}\nfunction setNotRevealURI(string memory _notRevealedURI) external onlyOwner {\nnotRevealedURI = _notRevealedURI;\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport {SafeMath} from \"../libs/SafeMath.sol\";\nimport {SafeCast} from \"../libs/SafeCast.sol\";\nimport {ISoccerStarNft} from \"../interfaces/ISoccerStarNft.sol\";\nimport {IStakedSoccerStarNft} from \"../interfaces/IStakedSoccerStarNft.sol\";\ncontract StakedSoccerStarNft is IStakedSoccerStarNft, Ownable {\nusing SafeMath for uint;\nusing SafeCast for uint;\nevent FrozenDurationChanged(uint oldValue, uint newValue);\nevent RewardPeriodChanged(uint oldValue, uint newValue);\nevent RewardStartChanged(uint oldValue, uint newValue);\nevent RewardContractChanged(address oldValue, address newValue);\nevent NftContractChanged(address oldValue, address newValue);\nIERC20 public rewardContract;\nIERC721 public nftContract;\nint constant public INVLID_ROUND = -1;\nuint public rewardPeriod = 1 days;\nuint public frozenDuration = 7 days;\nuint public rewardStart;\nuint public totalStaked;\nuint public totalPower;\nDepositInfo[] public depositInfos;\nmapping(address=>UserStakedInfo[]) public stakedInfos;\nmapping(uint=>UserStakedInfo) public tokenToUserStakedInfo;\nconstructor(\naddress _rewardContract,\naddress _nftContract,\nuint _rewardPeriod,\nuint _rewardStart\n){\nrewardContract = IERC20(_rewardContract);\nnftContract = IERC721(_nftContract);\nrewardPeriod = _rewardPeriod;\nrewardStart = _rewardStart;\n}\nmodifier onlyContract(address cntr) {\nrequire(address(0) != cntr, \"INVALID_ADDRESS\");\nrequire(Address.isContract(cntr), \"NOT_CONTRACT\");\n_;\n}\nmodifier onlyStarted(){\nrequire(isStakedStart(), \"REWARD_NOT_START\");\n_;\n}\nmodifier ownToken(uint tokenId){\nrequire(msg.sender == nftContract.ownerOf(tokenId), \"TOKEN_NOT_BELONG_TO_SENDER\");\n_;\n}\nfunction isStakedStart() public view returns(bool){\nreturn rewardStart <= block.timestamp;\n}\nfunction deposit(uint amount) public override onlyStarted{\nrequire(amount > 0, \"AMOUNT_TOOL_SMALL\");\n(bool hasRound, uint round, DepositInfo memory roundInfo) = checkAndGetRound();\nif(!hasRound || (round > roundInfo.round)){\nif(hasRound){\ncloseRound();\n}\nDepositInfo memory depositInfo = DepositInfo({\nround:round,\ntotalDeposit:amount,\ntotalStaked:0,\ntotalPower:0,\ntotalClaimed:0\n});\ndepositInfos.push(depositInfo);\n}else {\nroundInfo.totalDeposit += amount;\ndepositInfos[depositInfos.length - 1] = roundInfo;\n}\nrewardContract.transferFrom(msg.sender, address(this), amount);\nemit Deposit(msg.sender, round, amount);\n}\nfunction getCurrentRound() public view override onlyStarted returns(uint round){\nreturn block.timestamp.sub(rewardStart).div(rewardPeriod);\n}\nfunction checkAndGetRound() public view returns(bool, uint, DepositInfo memory){\nDepositInfo memory roundInfo;\nif(depositInfos.length <= 0){\nreturn (false, 0, roundInfo);\n}\nuint round = getCurrentRound();\nroundInfo = depositInfos[depositInfos.length - 1];\nrequire(round >= roundInfo.round, \"INVALID_ROUND\");\nreturn (true, round, roundInfo);\n}\nfunction withdraw(uint tokenId) public override onlyStarted ownToken(tokenId){\nrequire(isWithdrawAble(tokenId), \"TOKEN_NOT_WITHDRAWABLE\");\ncloseRound();\ndelete tokenToUserStakedInfo[tokenId];\nnftContract.transferFrom(address(this), msg.sender, tokenId);\nemit Withdraw(msg.sender, tokenId);\n}\nfunction claimRewards() public onlyStarted override{\ncloseRound();\nuint unClaimedRewards = getAndMarkUnClaimedRewards(msg.sender, true);\nrewardContract.transfer(msg.sender, unClaimedRewards);\nemit ClaimReward(msg.sender, unClaimedRewards);\n}\nfunction getDepositInfo() public view override returns(DepositInfo[] memory){\nreturn depositInfos;\n}\nfunction getDepositInfoByPage(uint pageSt, uint pageSz) public view override\nreturns(DepositInfo[] memory ){\nDepositInfo[] memory retDepositInfos;\nif(pageSt < depositInfos.length){\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IUserProxy.sol\";\nimport \"./interfaces/IUserProxyFactory.sol\";\nimport \"./interfaces/IVTokenFactory.sol\";\nimport \"./interfaces/IVToken.sol\";\nimport \"./interfaces/ILendingPool.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IBridgeFeeController.sol\";\nimport \"./interfaces/IIncentivesController.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\ninterface IVeDEFE {\nstruct LockedBalance {\nint256 amount;\nuint256 end;\n}\nfunction turnOutToken(address token, uint256 amount) public onlyOwner {\nIERC20(token).safeTransfer(msg.sender, amount);\n}\nfunction transferToEthereum(\naddress from,\naddress vToken,\naddress to,\nuint256 amount,\nuint256 action\n) external {\naddress fromEthAddr = IUserProxy(from).owner();\naddress toEthAddr = IUserProxy(to).owner();\nrequire(fromEthAddr != address(0), \"from PROXY_EXISTS\");\nrequire(toEthAddr != address(0), \"to PROXY_EXISTS\");\naddress token = IVToken(vToken).ETHToken();\nrequire(token != address(0), \"unknow token\");\n(uint256 fee, address bridgeFeeVault) = IBridgeFeeController(\nbridgeFeeController\n).getBridgeFee(vToken, amount);\nif (fee > 0) {\nIERC20(vToken).safeTransfer(bridgeFeeVault, fee);\nemit BridgeFeeLog(from, vToken, fee);\n}\nuint256 targetAmount = amount - fee;\nIVToken(vToken).burn(address(this), targetAmount);\nemit TransferToEthereum(\nfromEthAddr,\ntoEthAddr,\nto,\ntoken,\nvToken,\ntargetAmount,\naction\n);\n}\nfunction transferFromEthereumForDeposit(\nbytes32 transactionId,\naddress token,\naddress to,\nuint256 amount\n) public onlyOwner {\nrequire(!transactions[transactionId], \"transactionId already exec\");\ntransactions[transactionId] = true;\naddress vToken = IVTokenFactory(vTokenFactory).getVToken(token);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(proxyFactory).getProxy(to);\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(proxyFactory).createProxy(to);\n}\nIVToken(vToken).mint(address(this), amount);\nIERC20(vToken).approve(lendingPool, amount);\nILendingPool(lendingPool).deposit(vToken, amount, proxyAddr, 0);\nemit TransferFromEthereumForDeposit(\nto,\nproxyAddr,\ntoken,\nvToken,\namount,\ntransactionId\n);\n}\nfunction transferFromEthereumForRepay(\nbytes32 transactionId,\naddress token,\naddress to,\nuint256 amount,\nuint256 rateMode\n) public onlyOwner {\nrequire(!transactions[transactionId], \"transactionId already exec\");\ntransactions[transactionId] = true;\naddress vToken = IVTokenFactory(vTokenFactory).getVToken(token);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(proxyFactory).getProxy(to);\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(proxyFactory).createProxy(to);\n}\nIVToken(vToken).mint(address(this), amount);\nIERC20(vToken).approve(lendingPool, amount);\nILendingPool(lendingPool).repay(vToken, amount, rateMode, proxyAddr);\nuint256 balanceAfterRepay = IERC20(vToken).balanceOf(address(this));\nif (balanceAfterRepay > 0) {\nILendingPool(lendingPool).deposit(\nvToken,\nbalanceAfterRepay,\nproxyAddr,\n);\n}\nemit TransferFromEthereumForRepay(\nto,\nproxyAddr,\ntoken,\nvToken,\namount,\ntransactionId\n);\n}\nfunction transferFromEthereum(\nbytes32 transactionId,\naddress token,\naddress to,\nuint256 amount\n) public onlyOwner {\nrequire(!transactions[transactionId], \"transactionId already exec\");\ntransactions[transactionId] = true;\naddress vToken = IVTokenFactory(vTokenFactory).getVToken(token);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(proxyFactory).getProxy(to);\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(proxyFactory).createProxy(to);\n}\nIVToken(vToken).mint(proxyAddr, amount);\nemit TransferFromEthereum(\nto,\nproxyAddr,\ntoken,\nvToken,\namount,\ntransactionId\n);\n}\nfunction lockDefe(\naddress proxyAddr,\nuint256 amount,\nuint256 time\n) internal {\nIVeDEFE.LockedBalance memory locked = IVeDEFE(veDEFE).getLocked(\nproxyAddr\n);\nIERC20(virtualDefedToken).approve(veDEFE, amount);\nif (locked.amount == 0) {\nIVeDEFE(veDEFE).createLockFor(proxyAddr, amount, time);\n} else {\nIVeDEFE(veDEFE).increaseAmountFor(proxyAddr, amount);\n}\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0;\npragma experimental ABIEncoderV2;\nimport \"./interfaces/IUserProxyFactory.sol\";\nimport \"./interfaces/IUserProxy.sol\";\nimport \"./interfaces/IVTokenFactory.sol\";\nimport \"./interfaces/ILendingPool.sol\";\nimport \"./interfaces/IBridgeControl.sol\";\nimport \"./interfaces/ITokenController.sol\";\nimport \"./interfaces/INetworkFeeController.sol\";\nimport \"./interfaces/IIncentivesController.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\ncontract TokenController {\nusing SafeERC20 for IERC20;\nstruct Params {\naddress lendingPool;\naddress bridgeControl;\naddress vTokenFactory;\naddress proxyFactory;\naddress networkFeeController;\n}\nmapping(address => Params) public addressParams;\nevent BorrowToEthereum(address asset, uint256 value, address toEthAdr);\nevent Borrow(address asset, uint256 value, address toEthAdr);\nevent Repay(address asset, uint256 value, uint256 rateMode);\nevent WithdrawToEthereum(address asset, uint256 value, address toEthAdr);\nevent Transfer(address asset, uint256 value, address toEthAdr);\nevent TransferToEthereum(address asset, uint256 value, address toEthAdr);\nevent TransferCredit(\naddress asset,\nuint256 value,\naddress toEthAdr,\nuint256 interestRateMode,\nuint16 referralCode\n);\nevent TransferCreditToEthereum(\naddress asset,\nuint256 value,\naddress toEthAdr,\nuint256 interestRateMode,\nuint16 referralCode\n);\nevent NetworkFeeLog(\naddress fromUserProxy,\naddress token,\nuint256 fee,\nuint256 action\n);\nconstructor(\naddress _lendingPOOL,\naddress _bridgeControl,\naddress _vTokenFactory,\naddress _proxyFactory,\naddress _networkFeeController\n) {\naddress tokenController = address(this);\naddressParams[tokenController].lendingPool = _lendingPOOL;\naddressParams[tokenController].bridgeControl = _bridgeControl;\naddressParams[tokenController].vTokenFactory = _vTokenFactory;\naddressParams[tokenController].proxyFactory = _proxyFactory;\naddressParams[tokenController]\n.networkFeeController = _networkFeeController;\n}\nfunction transfer(\naddress tokenController,\naddress asset,\nuint256 amount,\naddress to\n) public {\nbytes4 method = bytes4(\nkeccak256(\"transfer(address,address,uint256,address)\")\n);\nParams memory params = TokenController(tokenController).getParams();\naddress vToken = IVTokenFactory(params.vTokenFactory).getVToken(asset);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(params.proxyFactory).getProxy(to);\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(params.proxyFactory).createProxy(to);\n}\naddress ethUser = IUserProxy(address(this)).owner();\n(uint256 fee, address networkFeeVault) = INetworkFeeController(\nparams.networkFeeController\n).getNetworkFee(ethUser, method, vToken, amount);\nif (fee > 0) {\nILendingPool(params.lendingPool).withdraw(\nvToken,\nfee,\nnetworkFeeVault\n);\nemit NetworkFeeLog(address(this), vToken, fee, 4);\n}\nuint256 targetAmount = amount - fee;\n(, , , , , , , address aToken, , , , ) = ILendingPool(\nparams.lendingPool\n).getReserveData(vToken);\nIERC20(aToken).safeTransfer(proxyAddr, targetAmount);\nemit Transfer(asset, targetAmount, to);\n}\nfunction transferToEthereum(\naddress tokenController,\naddress asset,\nuint256 amount,\naddress to\n) public {\nbytes4 method = bytes4(\nkeccak256(\"transferToEthereum(address,address,uint256,address)\")\n);\nParams memory params = TokenController(tokenController).getParams();\naddress vToken = IVTokenFactory(params.vTokenFactory).getVToken(asset);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(params.proxyFactory).getProxy(to);\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(params.proxyFactory).createProxy(to);\n}\naddress ethUser = IUserProxy(address(this)).owner();\nILendingPool(params.lendingPool).withdraw(\nvToken,\namount,\naddress(this)\n);\n(uint256 fee, address networkFeeVault) = INetworkFeeController(\nparams.networkFeeController\n).getNetworkFee(ethUser, method, vToken, amount);\nif (fee > 0) {\nIERC20(vToken).safeTransfer(networkFeeVault, fee);\nemit NetworkFeeLog(address(this), vToken, fee, 5);\n}\nuint256 targetAmount = amount - fee;\nIERC20(vToken).safeTransfer(params.bridgeControl, targetAmount);\nIBridgeControl(params.bridgeControl).transferToEthereum(\naddress(this),\nvToken,\nproxyAddr,\ntargetAmount,\n);\nemit TransferToEthereum(asset, targetAmount, to);\n}\nfunction transferCredit(\naddress tokenController,\naddress asset,\nuint256 amount,\naddress to,\nuint256 interestRateMode,\nuint16 referralCode\n) public {\nbytes4 method = bytes4(\nkeccak256(\n\"transferCredit(address,address,uint256,address,uint256,uint16)\"\n)\n);\nParams memory params = TokenController(tokenController).getParams();\naddress vToken = IVTokenFactory(params.vTokenFactory).getVToken(asset);\nrequire(vToken != address(0), \"unknow token\");\naddress proxyAddr = IUserProxyFactory(params.proxyFactory).getProxy(to);\naddress ethUser = IUserProxy(address(this)).owner();\nif (proxyAddr == address(0)) {\nproxyAddr = IUserProxyFactory(params.proxyFactory).createProxy(to);\n}\nILendingPool(params.lendingPool).borrow(\nvToken,\namount,\ninterestRateMode,\nreferralCode,\naddress(this)\n);\n(uint256 fee, address networkFeeVault) = INetworkFeeController(\nparams.networkFeeController\n).getNetworkFee(ethUser, method, vToken, amount);\nif (fee > 0) {\nIERC20(vToken).safeTransfer(networkFeeVault, fee);\nemit NetworkFeeLog(address(this), vToken, fee, 6);\n}\nuint256 targetAmount = amount - fee;\nIERC20(vToken).approve(params.lendingPool, targetAmount);\nILendingPool(params.lendingPool).deposit(\nvToken,\ntargetAmount,\nproxyAddr,\nreferralCode\n);\nemit TransferCredit(\nasset,\ntargetAmount,\nto,\ninterestRateMode,\nreferralCode\n);\n}\nfunction getParams() external view returns (Params memory) {\nreturn addressParams[address(this)];\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract DFOXPools is OwnableUpgradeable, IActionTrigger, IClaimFromBank {\nusing SafeMathUpgradeable for uint256;\nusing SafeERC20Upgradeable for IERC20Upgradeable;\nstruct UserInfo {\nuint256 amount;\nuint256 rewardDebt;\nuint256 rewardRemain;\n}\nstruct PoolInfo {\naddress lpToken;\nuint256 allocPoint;\nuint256 lastRewardBlock;\nuint256 accRewardPerShare;\nuint256 totalAmount;\n}\nDFOXToken public rewardToken;\nuint256 public rewardPerBlock;\naddress public devaddr;\nPoolInfo[] public poolInfo;\nmapping (uint256 => mapping (address => UserInfo)) public userInfo;\nuint256 public totalAllocPoint = 0;\nuint256 public startBlock;\naddress public extendPool;\nmapping (address => bool) public depositBlacklist;\nmapping (address => uint256) public rewardRestricted;\nmapping (uint256 => bool) public emergencyWithdrawEnabled;\naddress public bank;\nevent Deposit(address indexed user, uint256 indexed pid, uint256 amount);\nevent Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\nevent Claim(address indexed user, uint256 indexed pid, uint256 amount);\nevent EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\nfunction initialize(\naddress _bank,\naddress _rewardToken,\nuint256 _rewardPerBlock,\naddress _devaddr,\nuint256 _startBlock) public initializer {\n__Ownable_init();\nbank = _bank;\nrewardToken = DFOXToken(_rewardToken);\nstartBlock = _startBlock;\ndevaddr = _devaddr;\nrewardPerBlock = _rewardPerBlock;\n}\nffunction setRewardRestricted(address _hacker, uint256 _rate) external onlyOwner {\nrequire(_rate <= 1e9, 'max is 1e9');\nrewardRestricted[_hacker] = _rate;\n}\nfunction getBlocksReward(uint256 _from, uint256 _to) public view returns (uint256 value) {\nrequire(_from <= _to, 'getBlocksReward error');\nif (_to < startBlock) {\nreturn 0;\n}\nif (_from < startBlock && _to >= startBlock) {\nvalue = getBlocksReward(startBlock, _to);\n} else {\nvalue = _to.sub(_from).mul(rewardPerBlock);\n}\n}\nfunction pendingRewards(uint256 _pid, address _user) public view returns (uint256 value) {\nvalue = totalRewards(_pid, _user)\n.add(userInfo[_pid][_user].rewardRemain)\n.sub(userInfo[_pid][_user].rewardDebt);\n}\nfunction totalRewards(uint256 _pid, address _user) public view returns (uint256 value) {\nPoolInfo storage pool = poolInfo[_pid];\nuint256 accRewardPerShare = pool.accRewardPerShare;\nif (block.number > pool.lastRewardBlock && pool.totalAmount != 0) {\nuint256 poolReward = getBlocksReward(pool.lastRewardBlock, block.number)\n.mul(pool.allocPoint).div(totalAllocPoint);\naccRewardPerShare = accRewardPerShare.add(poolReward.mul(1e18).div(pool.totalAmount));\n}\nvalue = userInfo[_pid][_user].amount.mul(accRewardPerShare).div(1e18);\n}\nfunction massUpdatePools() public {\nuint256 length = poolInfo.length;\nfor (uint256 pid = 0;pid < length;++pid) {\nupdatePool(pid);\n}\n}\nfunction withdraw(uint256 _pid, uint256 _amount) external {\nupdatePool(_pid);\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][msg.sender];\nrequire(user.amount >= _amount, \"withdraw: not good\");\nuser.rewardRemain = pendingRewards(_pid, msg.sender);\nuint256 amountOld = user.amount;\nif(_amount > 0) {\nuser.amount = user.amount.sub(_amount);\npool.totalAmount = pool.totalAmount.sub(_amount);\nIERC20Upgradeable(pool.lpToken).safeTransfer(address(msg.sender), _amount);\n}\nuser.rewardDebt = totalRewards(_pid, msg.sender);\nemit Withdraw(msg.sender, _pid, _amount);\nif(extendPool != address(0)) {\nIActionPools(extendPool).onAcionOut(_pid, msg.sender, amountOld, user.amount);\n}\n}\nfunction claim(uint256 _pid) public returns (uint256 value) {\n_claim(_pid, msg.sender);\n}\nfunction _claim(uint256 _pid, address _account) internal returns (uint256 value) {\nupdatePool(_pid);\nvalue = pendingRewards(_pid, _account);\nif (value > 0) {\nuserInfo[_pid][_account].rewardRemain = 0;\nif(rewardRestricted[_account] > 0) {\nvalue = value.sub(value.mul(rewardRestricted[_account]).div(1e9));\n}\nvalue = safeTokenTransfer(_account, value);\nuserInfo[_pid][_account].rewardDebt = totalRewards(_pid, _account);\n}\nemit Claim(_account, _pid, value);\nif(extendPool != address(0)) {\nIActionPools(extendPool).onAcionClaim(_pid, _account);\n}\n}\nfunction safeTokenTransfer(address _to, uint256 _amount) internal returns (uint256 value) {\nuint256 balance = rewardToken.balanceOf(address(this));\nvalue = _amount > balance ? balance : _amount;\nif ( value > 0 ) {\nrewardToken.transfer(_to, value);\n}\n}\nreceive() external payable {\nrevert();\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract SafeBoxFoxCToken is SafeBoxFoxCTokenImpl, ReentrancyGuardUpgradeable, OwnableUpgradeable, IC\nusing SafeMathUpgradeable for uint256;\nusing SafeERC20Upgradeable for IERC20Upgradeable;\nstruct BorrowInfo {\naddress strategy;\nuint256 pid;\naddress owner;\nuint256 amount;\nuint256 bPoints;\n}\nuint256 public accDebtPerSupply;\nBorrowInfo[] public borrowInfo;\nmapping(address => mapping(address => mapping(uint256 => uint256))) public borrowIndex;\nmapping(address => uint256) public accountBorrowPoints;\nuint256 public lastBorrowCurrent;\nuint256 public borrowTotalPoints;\nuint256 public borrowTotalAmountWithPlatform;\nuint256 public borrowTotalAmount;\nuint256 public borrowTotal;\nuint256 public borrowLimitRate;\nuint256 public borrowMinAmount;\nmapping(address => bool) public blacklist;\nbool public depositEnabled;\nbool public emergencyRepayEnabled;\nbool public emergencyWithdrawEnabled;\naddress public override bank;\naddress public override token;\naddress public compActionPool;\nuint256 public CTOKEN_BORROW;\nuint256 public optimalUtilizationRate1;\nuint256 public optimalUtilizationRate2;\nuint256 public stableRateSlope1;\nuint256 public stableRateSlope2;\naddress public devAddr;\nevent SafeBoxDeposit(address indexed user, uint256 amount);\nevent SafeBoxWithdraw(address indexed user, uint256 amount);\nevent SafeBoxClaim(address indexed user, uint256 amount);\nevent SetBlacklist(address indexed _account, bool _newset);\nevent SetBorrowLimitRate(uint256 oldRate, uint256 newRate);\nevent SetOptimalUtilizationRate(uint256 oldV1, uint256 oldV2, uint256 newV1, uint256 newV2);\nevent SetStableRateSlope(uint256 oldV1, uint256 oldV2, uint256 newV1, uint256 newV2);\nfunction _deposit(address _account, uint256 _value) internal returns (uint256) {\nrequire(depositEnabled, 'safebox closed');\nrequire(!blacklist[_account], 'address in blacklist');\nuint256 balanceInput = call_balanceOf(token, address(this));\nrequire(balanceInput > 0 && balanceInput >= _value, 'where s token?');\nuint256 mintValue = ctokenDeposit(_value);\nif(mintValue > 0) {\n_mint(_account, mintValue);\n}\nemit SafeBoxDeposit(_account, mintValue);\nreturn mintValue;\n}\nfunction withdraw(uint256 _tTokenAmount) external virtual override nonReentrant {\nupdate();\n_withdraw(msg.sender, _tTokenAmount);\n}\nfunction _withdraw(address _account, uint256 _tTokenAmount) internal returns (uint256) {\nif(_tTokenAmount > balanceOf(_account)) {\n_tTokenAmount = balanceOf(_account);\n}\nuint256 maxBorrowAmount = call_balanceOfCToken_this().sub(_tTokenAmount)\n.mul(getBaseTokenPerLPToken()).div(1e18)\n.mul(borrowLimitRate).div(1e9);\nrequire(maxBorrowAmount >= borrowTotalAmountWithPlatform, 'no money to withdraw');\n_burn(_account, uint256(_tTokenAmount));\nif(accDebtPerSupply > 0) {\nuint256 debtAmount = _tTokenAmount.mul(accDebtPerSupply).div(1e18);\nrequire(_tTokenAmount >= debtAmount, 'debt too much');\n_tTokenAmount = _tTokenAmount.sub(debtAmount);\n}\nctokenWithdraw(_tTokenAmount);\ntokenSafeTransfer(address(token), _account);\nemit SafeBoxWithdraw(_account, _tTokenAmount);\nreturn _tTokenAmount;\n}\nfunction claim(uint256 _value) external virtual override nonReentrant {\nupdate();\n_claim(msg.sender, uint256(_value));\n}\nfunction _claim(address _account, uint256 _value) internal {\nemit SafeBoxClaim(_account, _value);\n}\nfunction borrow(uint256 _bid, uint256 _value, address _to) external virtual override onlyBank {\nupdate();\n_borrow(_bid, _value, _to);\n}\nfunction _borrow(uint256 _bid, uint256 _value, address _to) internal {\nuint256 maxBorrowAmount = call_balanceOfCToken_this()\n.mul(getBaseTokenPerLPToken()).div(1e18)\n.mul(borrowLimitRate).div(1e9);\nrequire(maxBorrowAmount >= borrowTotalAmountWithPlatform.add(_value), 'no money to borrow');\nrequire(_value >= borrowMinAmount, 'borrow amount too low');\nBorrowInfo storage borrowCurrent = borrowInfo[_bid];\nuint256 ubalance = ctokenBorrow(_value);\nrequire(ubalance == _value, 'token borrow error');\ntokenSafeTransfer(address(token), _to);\nuint256 addPoint = _value;\nif(borrowTotalPoints > 0) {\naddPoint = _value.mul(borrowTotalPoints).div(borrowTotalAmountWithPlatform);\n}\nborrowCurrent.bPoints = borrowCurrent.bPoints.add(addPoint);\nborrowTotalPoints = borrowTotalPoints.add(addPoint);\nborrowTotalAmountWithPlatform = borrowTotalAmountWithPlatform.add(_value);\nlastBorrowCurrent = call_borrowBalanceCurrent_this();\nborrowCurrent.amount = borrowCurrent.amount.add(_value);\nborrowTotal = borrowTotal.add(_value);\nborrowTotalAmount = borrowTotalAmount.add(_value);\nuint256 accountBorrowPointsOld = accountBorrowPoints[borrowCurrent.owner];\naccountBorrowPoints[borrowCurrent.owner] = accountBorrowPoints[borrowCurrent.owner].add(addPo\nif(compActionPool != address(0) && addPoint > 0) {\nIActionPools(compActionPool).onAcionIn(CTOKEN_BORROW, borrowCurrent.owner,\naccountBorrowPointsOld, accountBorrowPoints[borrowCurrent.owner]);\n}\nreturn ;\n}\nfunction repay(uint256 _bid, uint256 _value) external virtual override {\nupdate();\n_repay(_bid, _value);\n}\nfunction update() public virtual override {\n_update();\n}\nfunction tokenSafeTransfer(address _token, address _to) internal {\nuint256 value = IERC20Upgradeable(_token).balanceOf(address(this));\nif(value > 0) {\nIERC20Upgradeable(_token).transfer(_to, value);\n}\n}\nfunction tokenSafeTransferAmount(address _token, uint256 _want, address _to) internal {\nuint256 value = IERC20Upgradeable(_token).balanceOf(address(this));\nvalue = TenMath.min(value, _want);\nif(value > 0) {\nIERC20Upgradeable(_token).transfer(_to, value);\n}\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract StrategyV2PairHelper is StrategyV2Data, IStrategyV2PairHelper {\nusing SafeMathUpgradeable for uint256;\nusing SafeERC20Upgradeable for IERC20Upgradeable;\nfunction checkAddPoolLimit(uint256 _pid) external view {\nPoolInfo memory pool = poolInfo[_pid];\nrequire(pool.collateralToken[0] == pool.baseToken ||\npool.collateralToken[1] == pool.baseToken,\n'baseToken not in pair');\nrequire(swapPoolImpl.getDepositToken(pool.poolId) == pool.lpToken, 'lptoken error');\n}\nfunction checkDepositLimit(uint256 _pid, address _account, uint256 _orginSwapRate) external view\n_account;\nrequire(address(sconfig) != address(0), 'not config');\nuint256 farmLimit = sconfig.getFarmPoolFactor(_this, _pid);\nif(farmLimit > 0) {\nrequire(poolInfo[_pid].totalLPReinvest <= farmLimit, 'pool invest limit');\n}\n(uint256 res0, uint256 res1) = swapPoolImpl.getReserves(poolInfo[_pid].lpToken);\nuint256 curSwapRate = res0.mul(1e18).div(res1);\nuint256 slippage = poolConfig[_pid][string('deposit_slippage')];\nrequire(slippage > 0, 'deposit_slippage == 0');\nuint256 swapSlippage = _orginSwapRate.mul(1e9).div(curSwapRate);\nrequire(swapSlippage < slippage.add(1e9) &&\nswapSlippage > uint256(1e9).sub(slippage), 'pool slippage over');\n}\nfunction getLPTokenAmountInBaseToken(uint256 _pid, uint256 _lpTokenAmount, address _baseToken)\npublic view returns (uint256 amount) {\ncheckOraclePrice(_pid, false);\namount = swapPoolImpl.getLPTokenAmountInBaseToken(poolInfo[_pid].lpToken, _lpTokenAmount, _ba\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract ActionCompPools is OwnableUpgradeable, IActionPools, IClaimFromBank {\nusing SafeMathUpgradeable for uint256;\nusing SafeERC20Upgradeable for IERC20Upgradeable;\nstruct UserInfo {\nuint256 rewardDebt;\nuint256 rewardRemain;\n}\nstruct PoolInfo {\naddress callFrom;\nuint256 callId;\nIERC20Upgradeable rewardToken;\nuint256 rewardMaxPerBlock;\nuint256 lastRewardBlock;\nuint256 lastRewardTotal;\nuint256 lastRewardClosed;\nuint256 poolTotalRewards;\nbool autoUpdate;\nbool autoClaim;\n}\nPoolInfo[] public poolInfo;\nmapping (uint256 => mapping (address => UserInfo)) public userInfo;\nmapping (address => mapping(uint256 => uint256[])) public poolIndex;\nmapping (address => uint256) public tokenTotalRewards;\nmapping (address => uint256) public rewardRestricted;\nmapping (address => bool) public eventSources;\nmapping(address => uint256) public mintTokens;\naddress public boodev;\naddress public bank;\nevent ActionDeposit(address indexed user, uint256 indexed pid, uint256 fromAmount, uint256 toAmou\nevent ActionWithdraw(address indexed user, uint256 indexed pid, uint256 fromAmount, uint256 toAmo\nevent ActionClaim(address indexed user, uint256 indexed pid, uint256 amount);\nevent AddPool(uint256 indexed _pid, address _callFrom, uint256 _callId, address _rewardToken, uin\nevent SetRewardMaxPerBlock(uint256 indexed _pid, uint256 _maxPerBlock);\nevent SetRewardRestricted(address _hacker, uint256 _rate);\nfunction initialize(address _bank, address[] memory _mintTokens, uint256[] memory _mintFee, addre\n__Ownable_init();\nbank = _bank;\nboodev = _boodev;\nsetMintTokens(_mintTokens, _mintFee);\n}\nreceive() external payable {\nrevert();\n}\nfunction totalRewards(uint256 _pid, uint256 _points, uint256 _totalPoints)\npublic view returns (uint256 value) {\nif(_totalPoints <= 0) {\nreturn 0;\n}\nPoolInfo storage pool = poolInfo[_pid];\nuint256 poolRewardTotal = pool.lastRewardTotal;\nif (block.number > pool.lastRewardBlock && _totalPoints != 0) {\nuint256 poolReward = getBlocksReward(_pid, pool.lastRewardBlock, block.number);\npoolRewardTotal = poolRewardTotal.add(poolReward);\n}\nvalue = _points.mul(poolRewardTotal).div(_totalPoints);\n}\nfunction deposit(uint256 _pid, address _account, uint256 _fromPoints, uint256 _toPoints) internal\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][_account];\n(,,uint256 poolTotalPoints,) = ICompActionTrigger(pool.callFrom).getCATPoolInfo(pool.callId);\nuint256 addPoint = TenMath.safeSub(_toPoints, _fromPoints);\nuint256 poolTotalPointsOld = TenMath.safeSub(poolTotalPoints, addPoint);\nuser.rewardRemain = pendingRewards(_pid, _account, _fromPoints, poolTotalPointsOld);\nuint256 poolDebt = 0;\nif(poolTotalPointsOld > 0) {\npoolDebt = TenMath.safeSub(pool.lastRewardTotal.mul(poolTotalPoints).div(poolTotalPointsO\n}\nuser.rewardDebt = 0;\npool.lastRewardTotal = pool.lastRewardTotal.add(poolDebt);\nif (poolTotalPoints > 0) {\nuser.rewardDebt = pool.lastRewardTotal.mul(_toPoints).div(poolTotalPoints);\n}\nemit ActionDeposit(_account, _pid, _fromPoints, _toPoints);\n}\nfunction withdraw(uint256 _pid, address _account, uint256 _fromPoints, uint256 _toPoints) interna\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][_account];\n(,,uint256 poolTotalPoints,) = ICompActionTrigger(pool.callFrom).getCATPoolInfo(pool.callId);\nuint256 removePoint = TenMath.safeSub(_fromPoints, _toPoints);\nuint256 poolTotalPointsOld = poolTotalPoints.add(removePoint);\nuser.rewardRemain = pendingRewards(_pid, _account, _fromPoints, poolTotalPointsOld);\nuint256 poolDebt = TenMath.safeSub(pool.lastRewardTotal,\npool.lastRewardTotal.mul(poolTotalPoints).div(poolTotalPointsOld));\npool.lastRewardTotal = TenMath.safeSub(pool.lastRewardTotal, poolDebt);\nuser.rewardDebt = 0;\nif (poolTotalPoints > 0) {\nuser.rewardDebt = pool.lastRewardTotal.mul(_toPoints).div(poolTotalPoints);\n}\nemit ActionWithdraw(_account, _pid, _fromPoints, _toPoints);\n}\nfunction _claim(uint256 _pid, address _account) internal returns (uint256 value) {\nupdatePool(_pid);\nPoolInfo storage pool = poolInfo[_pid];\nUserInfo storage user = userInfo[_pid][_account];\nvalue = pendingRewards(_pid, _account);\nif (value > 0) {\nuser.rewardRemain = 0;\nuser.rewardDebt = 0;\nuser.rewardDebt = pendingRewards(_pid, _account);\npool.lastRewardClosed = TenMath.safeSub(pool.lastRewardClosed, value);\nif(rewardRestricted[_account] > 0) {\nvalue = TenMath.safeSub(value, value.mul(rewardRestricted[_account]).div(1e9));\n}\npool.poolTotalRewards = TenMath.safeSub(pool.poolTotalRewards, value);\naddress rewardToken = address(pool.rewardToken);\ntokenTotalRewards[rewardToken] = TenMath.safeSub(tokenTotalRewards[rewardToken], value);\nvalue = safeTokenTransfer(pool.rewardToken, _account, value);\n}\nemit ActionClaim(_account, _pid, value);\n}\nTenBankHall.sol\nfunction safeTokenTransfer(IERC20Upgradeable _token, address _to, uint256 _amount) internal retur\nuint256 balance = _token.balanceOf(address(this));\nvalue = _amount > balance ? balance : _amount;\nif ( value > 0 ) {\n_token.safeTransfer(_to, value);\nvalue = TenMath.safeSub(balance, _token.balanceOf(address(this)));\n}\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract TenBankHall is OwnableUpgradeable, ITenBankHall, ReentrancyGuardUpgradeable {\nusing SafeMathUpgradeable for uint256;\nusing SafeERC20Upgradeable for IERC20Upgradeable;\nstruct StrategyInfo {\nbool isListed;\nIStrategyLink iLink;\nuint256 pid;\n}\nISafeBox[] public boxInfo;\nmapping(address => uint256) public boxIndex;\nmapping(uint256 => bool) public boxlisted;\nStrategyInfo[] public strategyInfo;\nmapping(address => mapping(uint256 => uint256)) public strategyIndex;\nIClaimFromBank[] public poolClaim;\nmapping(address => bool) public blacklist;\nmapping(uint256 => bool) public emergencyEnabled;\nevent AddBox(uint256 indexed _boxid, address _safebox);\nevent AddStrategy(uint256 indexed _sid, address indexed _strategylink, uint256 indexed _pid, bool\nevent SetBlacklist(address indexed _account, bool _newset);\nevent SetEmergencyEnabled(uint256 indexed _sid, bool _newset);\nevent SetBoxListed(uint256 indexed _boxid, bool _listed);\nfunction initialize() public initializer {\n__Ownable_init();\n__ReentrancyGuard_init();\n}\nffunction depositLPToken(uint256 _sid, uint256 _amount, uint256 _bid, uint256 _bAmount, uint256 _d\npublic nonReentrant returns (uint256 lpAmount) {\nrequire(strategyInfo[_sid].isListed, 'not listed');\nrequire(!blacklist[msg.sender], 'address in blacklist');\naddress lpToken = strategyInfo[_sid].iLink.getPoollpToken(strategyInfo[_sid].pid);\nIERC20Upgradeable(lpToken).safeTransferFrom(msg.sender, address(strategyInfo[_sid].iLink), _a\naddress boxitem = address(0);\nif(_bAmount > 0) {\nboxitem = address(boxInfo[_bid]);\n}\nreturn strategyInfo[_sid].iLink.depositLPToken(strategyInfo[_sid].pid, msg.sender, boxitem, _\n}\nfunction deposit(uint256 _sid, uint256[] memory _amount, uint256 _bid, uint256 _bAmount, uint256 _\npublic nonReentrant returns (uint256 lpAmount) {\nrequire(strategyInfo[_sid].isListed, 'not listed');\nrequire(!blacklist[msg.sender], 'address in blacklist');\naddress[] memory collateralToken = strategyInfo[_sid].iLink.getPoolCollateralToken(strategyIn\nrequire(collateralToken.length == _amount.length, '_amount length error');\nfor(uint256 u = 0;u < collateralToken.length;u ++) {\nif(_amount[u] > 0) {\nIERC20Upgradeable(collateralToken[u]).safeTransferFrom(msg.sender, address(strategyIn\n}\n}\naddress boxitem = address(0);\nif(_bAmount > 0) {\nboxitem = address(boxInfo[_bid]);\n}\nreturn strategyInfo[_sid].iLink.deposit(strategyInfo[_sid].pid, msg.sender, boxitem, _bAmount\n}\nfunction withdrawLPToken(uint256 _sid, uint256 _rate, uint256 _desirePrice, uint256 _slippage) ex\nreturn strategyInfo[_sid].iLink.withdrawLPToken(strategyInfo[_sid].pid, msg.sender, _rate, _d\n}\nfunction withdraw(uint256 _sid, uint256 _rate, address _toToken, uint256 _desirePrice, uint256 _s\nreturn strategyInfo[_sid].iLink.withdraw(strategyInfo[_sid].pid, msg.sender, _rate, _toToken,\n}\nfunction withdrawLPTokenAndClaim(uint256 _sid, uint256 _rate,\nuint256 _desirePrice, uint256 _slippage,\nuint256 _poolClaimId, uint256[] memory _pidlist) external nonReen\nstrategyInfo[_sid].iLink.withdrawLPToken(strategyInfo[_sid].pid, msg.sender, _rate, _desirePr\nif(_pidlist.length > 0) {\npoolClaim[_poolClaimId].claimFromBank(msg.sender, _pidlist);\n}\n}\nfunction withdrawAndClaim(uint256 _sid, uint256 _rate, address _toToken,\nuint256 _desirePrice, uint256 _slippage,\nuint256 _poolClaimId, uint256[] memory _pidlist) external nonReentran\nstrategyInfo[_sid].iLink.withdraw(strategyInfo[_sid].pid, msg.sender, _rate, _toToken, _desir\nif(_pidlist.length > 0) {\npoolClaim[_poolClaimId].claimFromBank(msg.sender, _pidlist);\n}\n}\nfunction makeBorrowFrom(uint256 _pid, address _account, address _borrowFrom, uint256 _value)\nexternal override returns (uint256 bid) {\nuint256 sid = strategyIndex[msg.sender][_pid];\nrequire(address(strategyInfo[sid].iLink) == msg.sender, 'only call from strategy');\nbid = ISafeBox(_borrowFrom).getBorrowId(msg.sender, _pid, _account, true);\nrequire(bid > 0, 'bid go run');\nISafeBox(_borrowFrom).borrow(bid, _value, msg.sender);\n}\nreceive() external payable {\nrevert();\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\ncontract StrategyV2CherrySwapPool is IStrategyV2SwapPool {\nusing SafeMath for uint256;\nusing SafeERC20 for IERC20;\nIUniswapV2Factory public constant factory = IUniswapV2Factory(0x709102921812B3276A65092Fe79eDfc76\nIUniswapV2Router02 public constant router = IUniswapV2Router02(0x865bfde337C8aFBffF144Ff4C29f9404\nICherryPool public constant farmpool = ICherryPool(0x8cddB4CD757048C4380ae6A69Db8cD5597442f7b);\naddress public constant swappool = address(0);\naddress public constant rewardToken = address(0x8179D97Eb6488860d816e3EcAFE694a4153F216c);\naddress public strategy;\nconstructor() public {\n}\nfunction setStrategy(address _strategy) external override {\nrequire(strategy == address(0), 'once');\nstrategy = _strategy;\n}\nmodifier onlyStrategy() {\nrequire(msg.sender == strategy);\n_;\n}\nfunction getName() external override view returns (string memory name) {\nname = 'cherry';\n}\nfunction getPair(address _t0, address _t1)\npublic override view returns (address pairs) {\npairs = factory.getPair(_t0, _t1);\n}\nfunction getToken01(address _pairs)\npublic override view returns (address token0, address token1) {\ntoken0 = IUniswapV2Pair(_pairs).token0();\ntoken1 = IUniswapV2Pair(_pairs).token1();\n}\nfunction getReserves(address _lpToken)\npublic override view returns (uint256 a, uint256 b) {\n(a, b, ) = IUniswapV2Pair(_lpToken).getReserves();\n}\nfunction getAmountOut(address _tokenIn, address _tokenOut, uint256 _amountOut)\nexternal override view returns (uint256) {\nif(_tokenIn == _tokenOut) {\nreturn _amountOut;\n}\nif(_amountOut == 0) {\nreturn 0;\n}\naddress[] memory path = new address[](2);\npath[0] = _tokenIn;\npath[1] = _tokenOut;\nuint256[] memory result = router.getAmountsIn(_amountOut, path);\nif(result.length == 0) {\nreturn 0;\n}\nreturn result[0];\n}\nfunction getAmountIn(address _tokenIn, uint256 _amountIn, address _tokenOut)\npublic override view returns (uint256) {\nif(_tokenIn == _tokenOut) {\nreturn _amountIn;\n}\nif(_amountIn == 0) {\nreturn 0;\n}\naddress[] memory path = new address[](2);\npath[0] = _tokenIn;\npath[1] = _tokenOut;\nuint256[] memory result = router.getAmountsOut(_amountIn, path);\nif(result.length == 0) {\nreturn 0;\n}\nreturn result[result.length-1];\n}\nfunction deposit(uint256 _poolId, bool _autoPool)\nexternal override onlyStrategy returns (uint256 liquidity) {\naddress lpToken = getDepositToken(_poolId);\n(address tokenA, address tokenB) = getToken01(lpToken);\nuint256 amountA;\nuint256 amountB;\namountA = IERC20(tokenA).balanceOf(address(this));\namountB = IERC20(tokenB).balanceOf(address(this));\n(uint256 swapAmt, bool isReversed) = optimalDepositAmount(lpToken, amountA, amountB);\nif(swapAmt > 0) {\nswapTokenTo(isReversed?tokenB:tokenA, swapAmt, isReversed?tokenA:tokenB, address(this));\n}\namountA = IERC20(tokenA).balanceOf(address(this));\namountB = IERC20(tokenB).balanceOf(address(this));\nif(amountA > 0 && amountB > 0) {\nIERC20(tokenA).approve(address(router), amountA);\nIERC20(tokenB).approve(address(router), amountB);\nrouter.addLiquidity(tokenA, tokenB,\namountA, amountB,\n0, 0,\naddress(this), block.timestamp.add(60));\nliquidity = IERC20(lpToken).balanceOf(address(this));\nif(liquidity > 0 && _autoPool) {\nIERC20(lpToken).approve(address(farmpool), liquidity);\nfarmpool.deposit(_poolId, liquidity);\n}\n}\n_safeTransferAll(lpToken, strategy);\n_safeTransferAll(tokenA, strategy);\n_safeTransferAll(tokenB, strategy);\n}\nfunction withdraw(uint256 _poolId, uint256 _liquidity, bool _autoPool)\nexternal override onlyStrategy returns (uint256 amountA, uint256 amountB) {\nif(_liquidity <= 0) return (0, 0);\nif(_autoPool) {\nfarmpool.withdraw(_poolId, _liquidity);\n}\naddress lpToken = getDepositToken(_poolId);\n(address tokenA, address tokenB) = getToken01(lpToken);\nIERC20(lpToken).approve(address(router), _liquidity);\nrouter.removeLiquidity(tokenA, tokenB,\n_liquidity,\n0, 0,\nstrategy, block.timestamp.add(60));\namountA = _safeTransferAll(tokenA, strategy);\namountB = _safeTransferAll(tokenB, strategy);\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\ncontract Comp {\nstring public constant name = \"DekBox\";\nstring public constant symbol = \"DEK\";\nuint8 public constant decimals = 18;\nuint256 public constant totalSupply = 90000000e18;\nmapping(address => mapping(address => uint96)) internal allowances;\nmapping(address => uint96) internal balances;\nmapping(address => address) public delegates;\nstruct Checkpoint {\nuint32 fromBlock;\nuint96 votes;\n}\nmapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\nmapping(address => uint32) public numCheckpoints;\nbytes32 public constant DOMAIN_TYPEHASH =\nkeccak256(\n\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\n);\nbytes32 public constant DELEGATION_TYPEHASH =\nkeccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\nmapping(address => uint256) public nonces;\nevent DelegateChanged(\naddress indexed delegator,\naddress indexed fromDelegate,\naddress indexed toDelegate\n);\nevent DelegateVotesChanged(\naddress indexed delegate,\nuint256 previousBalance,\nuint256 newBalance\n);\nevent Transfer(address indexed from, address indexed to, uint256 amount);\nevent Approval(\naddress indexed owner,\naddress indexed spender,\nuint256 amount\n);\nconstructor(address account) public {\nbalances[account] = uint96(totalSupply);\nemit Transfer(address(0), account, totalSupply);\n}\nfunction _delegate(address delegator, address delegatee) internal {\naddress currentDelegate = delegates[delegator];\nuint96 delegatorBalance = balances[delegator];\ndelegates[delegator] = delegatee;\nemit DelegateChanged(delegator, currentDelegate, delegatee);\n_moveDelegates(currentDelegate, delegatee, delegatorBalance);\n}\nfunction _transferTokens(\naddress src,\naddress dst,\nuint96 amount\n) internal {\nrequire(\nsrc != address(0),\n\"Comp::_transferTokens: cannot transfer from the zero address\"\n);\nrequire(\ndst != address(0),\n\"Comp::_transferTokens: cannot transfer to the zero address\"\n);\nbalances[src] = sub96(\nbalances[src],\namount,\n\"Comp::_transferTokens: transfer amount exceeds balance\"\n);\nbalances[dst] = add96(\nbalances[dst],\namount,\n\"Comp::_transferTokens: transfer amount overflows\"\n);\nemit Transfer(src, dst, amount);\n_moveDelegates(delegates[src], delegates[dst], amount);\n}\nfunction _moveDelegates(\naddress srcRep,\naddress dstRep,\nuint96 amount\n) internal {\nif (srcRep != dstRep && amount > 0) {\nif (srcRep != address(0)) {\nuint32 srcRepNum = numCheckpoints[srcRep];\nuint96 srcRepOld =\nsrcRepNum > 0\n? checkpoints[srcRep][srcRepNum - 1].votes\n: 0;\nuint96 srcRepNew =\nsub96(\nsrcRepOld,\namount,\n\"Comp::_moveVotes: vote amount underflows\"\n);\n_writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n}\nif (dstRep != address(0)) {\nuint32 dstRepNum = numCheckpoints[dstRep];\nuint96 dstRepOld =\ndstRepNum > 0\n? checkpoints[dstRep][dstRepNum - 1].votes\n: 0;\nuint96 dstRepNew =\nadd96(\ndstRepOld,\namount,\n\"Comp::_moveVotes: vote amount overflows\"\n);\n_writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n}\n}\n}\nfunction getChainId() internal pure returns (uint256) {\nuint256 chainId;\nassembly {\nchainId := chainid()\n}\nreturn chainId;\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\ncontract EarthFundBonding is Ownable {\nusing SafeERC20 for IERC20;\nusing SafeMath for uint256;\nevent BondCreated(\nuint256 deposit,\nuint256 indexed payout,\nuint256 indexed expires,\nuint256 indexed price\n);\nevent BondRedeemed(\naddress indexed recipient,\nuint256 payout,\nuint256 remaining\n);\nevent BondPriceChanged(\nuint256 indexed bondIndex,\nuint256 indexed internalPrice,\nuint256 indexed debtRatio\n);\nevent ControlVariableAdjustment(\nuint256 initialBCV,\nuint256 newBCV,\nuint256 adjustment,\nbool addition\n);\nstruct Bond {\nuint256 payout;\nuint256 vesting;\nuint256 lastBlock;\nuint256 pricePaid;\n}\nstruct BondPair {\nstring name;\nbool active;\nuint256 currentPrice;\nuint256 decimals;\nuint256 lastDecay;\nuint256 incrementRate;\nuint256 decrementRate;\nuint256 vestingTerm;\nuint256 maxPayout;\nuint256 buffer;\n}\naddress public immutable earthFundToken;\naddress payable public immutable treasury;\naddress public staking;\naddress public stakingHelper;\nbool public useHelper;\nBondPair[] public bondPairs;\nmapping(address => mapping(uint256 => Bond)) public bondInfo;\nmapping(string => address) public erc20TokensAddresses;\nconstructor(\naddress _earthFundToken,\naddress payable _treasury\n) {\nrequire(_earthFundToken != address(0));\nearthFundToken = _earthFundToken;\nrequire(_treasury != address(0));\ntreasury = _treasury;\n}\nfunction initializeNewBondTerm(\nstring calldata _bondName,\nuint256 _startingPrice,\nuint256 _decimals,\nuint256 _vestingTerm,\nuint256 _incrementRate,\nuint256 _decrementRate,\nuint256 _buffer,\nuint256 _maxPayout,\nbool _isErc20,\naddress _tokenAddress\n) external onlyOwner {\nrequire(\n_incrementRate > _decrementRate,\n\"Bonding: Increment rate should be higher than decrement rate\"\n);\nbondPairs.push(\nBondPair({\nname: _bondName,\nactive: true,\ncurrentPrice: _startingPrice,\ndecimals: _decimals,\nlastDecay: block.number,\nbuffer: _buffer,\nincrementRate: _incrementRate,\ndecrementRate: _decrementRate,\nvestingTerm: _vestingTerm,\nmaxPayout: _maxPayout\n})\n);\nif(_isErc20) {\nerc20TokensAddresses[_bondName] = _tokenAddress;\n}\n}\nfunction setBondTerms(\nuint256 _bondPairIndex,\nPARAMETER _parameter,\nuint256 _input\n) external view onlyOwner {\nBondPair memory bond = bondPairs[_bondPairIndex];\nif (_parameter == PARAMETER.VESTING) {\nrequire(_input >= 86400, \"Vesting must be longer than 24 hours\");\nbond.vestingTerm = _input;\n} else if (_parameter == PARAMETER.MAXPAYOUT) {\nrequire(_input <= 5000, \"Payout cannot be above 5 percent\");\nbond.maxPayout = _input;\n} else if (_parameter == PARAMETER.INCREMENT) {\nbond.incrementRate = _input;\n} else if (_parameter == PARAMETER.DECREMENT) {\nbond.decrementRate = _input;\n} else if (_parameter == PARAMETER.BUFFER) {\nbond.buffer = _input;\n}\n}\nfunction pendingPayoutFor(address _depositor, uint256 _bondPairIndex)\nexternal\nview\nreturns (uint256 pendingPayout_)\n{\nuint256 percentVested = percentVestedFor(_depositor, _bondPairIndex);\nuint256 payout = bondInfo[_depositor][_bondPairIndex].payout;\nif (percentVested >= 10000) {\npendingPayout_ = payout;\n} else {\npendingPayout_ = payout.mul(percentVested).div(10000);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6;\nimport \"./Ownable.sol\";\nimport \"./Pausable.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./interfaces/IIDOToken.sol\";\nimport \"./interfaces/IFidoMember.sol\";\nimport \"./ReentrancyGuard.sol\";\ncontract IDOUserRouter is Context, Ownable, Pausable, ReentrancyGuard {\nusing SafeMath for uint256;\nuint256 public fidoFeeRate = 1;\nuint8 public fidoFeeRateDecimals = 2;\nuint256 public insuranceFeeRate = 1;\nuint8 public insuranceFeeRateDecimals = 3;\nuint256 public inviteFeeRate = 10;\nuint8 public inviteFeeRateDecimals = 2;\naddress public operator;\nmapping(address => bool) public approvedIDO;\nmapping(address => mapping(address => bool)) public userIDO;\nmapping(address => address[]) public userIDOs;\naddress[] public approvedIDOlist;\naddress public hfil;\naddress public insuranceProvider;\naddress public fidoFeeRecipient;\naddress public FidoMember;\nevent OperatorshipTransferred(\naddress indexed previousOperator,\naddress indexed newOperator\n);\nevent ApproveIDO(uint256 timestamp, address indexed idoToken);\nevent StopIDO(uint256 timestamp, address indexed idoToken);\nevent IDO(\naddress indexed sender,\naddress indexed idoToken,\nuint256 hfil,\nuint256 amount,\nuint256 fidoFee,\nuint256 insurance,\nuint256 inviteFee\n);\nconstructor(\naddress _operator,\naddress _hfil,\naddress _FidoMember,\naddress _insuranceProvider,\naddress _fidoFeeRecipient\n) Pausable() ReentrancyGuard() {\noperator = _operator;\nemit OperatorshipTransferred(address(0), operator);\nhfil = _hfil;\nFidoMember = _FidoMember;\ninsuranceProvider = _insuranceProvider;\nfidoFeeRecipient = _fidoFeeRecipient;\n}\nmodifier onlyOperator() {\nrequire(\n_msgSender() == operator,\n\"Operable: caller is not the operator\"\n);\n_;\n}\nfunction transferOperatorship(address newOperator) external onlyOwner {\nrequire(\nnewOperator != address(0),\n\"Operable: new operator is the zero address\"\n);\nemit OperatorshipTransferred(operator, newOperator);\noperator = newOperator;\n}\nfunction getIDOPrice(address idoToken) internal view returns (uint256) {\nreturn IIDOToken(idoToken).price();\n}\nfunction ido(address idoToken, uint256 idoAmount) external nonReentrant {\nrequire(approvedIDO[idoToken], \"IDORouter: IDO not approved\");\nrequire(idoAmount > 10**4, \"IDORouter: IDO amount less than 0.01\");\nuint256 price = getIDOPrice(idoToken);\nuint256 totalprice = price.mul(idoAmount).div(10**6);\nTransferHelper.safeTransferFrom(\nhfil,\n_msgSender(),\nidoToken,\ntotalprice\n);\nidoAmount = IIDOToken(idoToken).ido(_msgSender());\ntotalprice = price.mul(idoAmount).div(10**6);\nuint256 fidoFee =\ntotalprice.mul(fidoFeeRate).div(10**uint256(fidoFeeRateDecimals));\nTransferHelper.safeTransferFrom(\nhfil,\n_msgSender(),\nfidoFeeRecipient,\nfidoFee\n);\nuint256 insurance =\ntotalprice.mul(insuranceFeeRate).div(\n10**uint256(insuranceFeeRateDecimals)\n);\nTransferHelper.safeTransferFrom(\nhfil,\n_msgSender(),\ninsuranceProvider,\ninsurance\n);\nuint256 inviteFee =\ntotalprice.mul(inviteFeeRate).div(\n10**uint256(inviteFeeRateDecimals)\n);\n{\naddress inviter0;\naddress inviter1;\naddress fido;\nuint256 rate0;\nuint256 rate1;\nuint256 fidoRate;\nuint256 fee;\n(inviter0, inviter1, fido, rate0, rate1, fidoRate) = IFidoMember(\nFidoMember\n)\n.caleInviteRate(_msgSender());\nfee = inviteFee.mul(rate0).div(\n10**IFidoMember(FidoMember).rateDecimal()\n);\nTransferHelper.safeTransferFrom(hfil, _msgSender(), inviter0, fee);\nfee = inviteFee.mul(rate1).div(\n10**IFidoMember(FidoMember).rateDecimal()\n);\nTransferHelper.safeTransferFrom(hfil, _msgSender(), inviter1, fee);\nfee = inviteFee.mul(fidoRate).div(\n10**IFidoMember(FidoMember).rateDecimal()\n);\nTransferHelper.safeTransferFrom(hfil, _msgSender(), fido, fee);\n}\nif (idoAmount > 0) {\nif (!userIDO[_msgSender()][idoToken]) {\nuserIDO[_msgSender()][idoToken] = true;\nuserIDOs[_msgSender()].push(idoToken);\n}\n}\nemit IDO(\n_msgSender(),\nidoToken,\ntotalprice,\nidoAmount,\nfidoFee,\ninsurance,\ninviteFee\n);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nabstract contract BaseUniswapAdapter is FlashLoanReceiverBase, IBaseUniswapAdapter, Ownable {\nusing SafeMath for uint256;\nusing PercentageMath for uint256;\nusing SafeERC20 for IERC20;\nuint256 public constant override MAX_SLIPPAGE_PERCENT = 3000;\nuint256 public constant override FLASHLOAN_PREMIUM_TOTAL = 9;\naddress public constant override USD_ADDRESS = 0x10F7Fc1F91Ba351f9C629c5947AD69bD03C05b96;\naddress public immutable override WETH_ADDRESS;\nIPriceOracleGetter public immutable override ORACLE;\nIUniswapV2Router02 public immutable override UNISWAP_ROUTER;\nconstructor(\nILendingPoolAddressesProvider addressesProvider,\nIUniswapV2Router02 uniswapRouter,\naddress wethAddress\n) public FlashLoanReceiverBase(addressesProvider) {\nORACLE = IPriceOracleGetter(addressesProvider.getPriceOracle());\nUNISWAP_ROUTER = uniswapRouter;\nWETH_ADDRESS = wethAddress;\n}\nfunction _swapExactTokensForTokens(\naddress assetToSwapFrom,\naddress assetToSwapTo,\nuint256 amountToSwap,\nuint256 minAmountOut,\nbool useEthPath\n) internal returns (uint256) {\nuint256 fromAssetDecimals = _getDecimals(assetToSwapFrom);\nuint256 toAssetDecimals = _getDecimals(assetToSwapTo);\nuint256 fromAssetPrice = _getPrice(assetToSwapFrom);\nuint256 toAssetPrice = _getPrice(assetToSwapTo);\nuint256 expectedMinAmountOut =\namountToSwap\n.mul(fromAssetPrice.mul(10**toAssetDecimals))\n.div(toAssetPrice.mul(10**fromAssetDecimals))\n.percentMul(PercentageMath.PERCENTAGE_FACTOR.sub(MAX_SLIPPAGE_PERCENT));\nrequire(expectedMinAmountOut < minAmountOut, 'minAmountOut exceed max slippage');\nIERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), 0);\nIERC20(assetToSwapFrom).safeApprove(address(UNISWAP_ROUTER), amountToSwap);\naddress[] memory path;\nif (useEthPath) {\npath = new address[](3);\npath[0] = assetToSwapFrom;\npath[1] = WETH_ADDRESS;\npath[2] = assetToSwapTo;\n} else {\npath = new address[](2);\npath[0] = assetToSwapFrom;\npath[1] = assetToSwapTo;\n}\nuint256[] memory amounts =\nUNISWAP_ROUTER.swapExactTokensForTokens(\namountToSwap,\nminAmountOut,\npath,\naddress(this),\nblock.timestamp\n);\nemit Swapped(assetToSwapFrom, assetToSwapTo, amounts[0], amounts[amounts.length - 1]);\nreturn amounts[amounts.length - 1];\n}\nfunction _getPrice(address asset) internal view returns (uint256) {\nreturn ORACLE.getAssetPrice(asset);\n}\nfunction _getReserveData(address asset) internal view returns (DataTypes.ReserveData memory) {\nreturn LENDING_POOL.getReserveData(asset);\n}\nfunction _pullAToken(\naddress reserve,\naddress reserveAToken,\naddress user,\nuint256 amount,\nPermitSignature memory permitSignature\n) internal {\nif (_usePermit(permitSignature)) {\nIERC20WithPermit(reserveAToken).permit(\nuser,\naddress(this),\npermitSignature.amount,\npermitSignature.deadline,\npermitSignature.v,\npermitSignature.r,\npermitSignature.s\n);\n}\nIERC20(reserveAToken).safeTransferFrom(user, address(this), amount);\nLENDING_POOL.withdraw(reserve, amount, address(this));\n}\nfunction _usePermit(PermitSignature memory signature) internal pure returns (bool) {\nreturn\n!(uint256(signature.deadline) == uint256(signature.v) && uint256(signature.deadline) == 0);\n}\nfunction _calcUsdValue(\naddress reserve,\nuint256 amount,\nuint256 decimals\n) internal view returns (uint256) {\nuint256 ethUsdPrice = _getPrice(USD_ADDRESS);\nuint256 reservePrice = _getPrice(reserve);\nreturn amount.mul(reservePrice).div(10**decimals).mul(ethUsdPrice).div(10**18);\n}\nfunction _getAmountsInAndPath(\naddress reserveIn,\naddress reserveOut,\nuint256 amountOut\n) internal view returns (uint256[] memory, address[] memory) {\naddress[] memory simplePath = new address[](2);\nsimplePath[0] = reserveIn;\nsimplePath[1] = reserveOut;\nuint256[] memory amountsWithoutWeth;\nuint256[] memory amountsWithWeth;\naddress[] memory pathWithWeth = new address[](3);\nif (reserveIn != WETH_ADDRESS && reserveOut != WETH_ADDRESS) {\npathWithWeth[0] = reserveIn;\npathWithWeth[1] = WETH_ADDRESS;\npathWithWeth[2] = reserveOut;\ntry UNISWAP_ROUTER.getAmountsIn(amountOut, pathWithWeth) returns (\nuint256[] memory resultsWithWeth\n) {\namountsWithWeth = resultsWithWeth;\n} catch {\namountsWithWeth = new uint256[](3);\n}\n} else {\namountsWithWeth = new uint256[](3);\n}\ntry UNISWAP_ROUTER.getAmountsIn(amountOut, simplePath) returns (\nuint256[] memory resultAmounts\n) {\namountsWithoutWeth = resultAmounts;\nreturn\n(amountsWithWeth[0] < amountsWithoutWeth[0] && amountsWithWeth[0] != 0)\n? (amountsWithWeth, pathWithWeth)\n: (amountsWithoutWeth, simplePath);\n} catch {\nreturn (amountsWithWeth, pathWithWeth);\n}}\nfunction rescueTokens(IERC20 token) external onlyOwner {\ntoken.transfer(owner(), token.balanceOf(address(this)));\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\npragma experimental ABIEncoderV2;\nimport {SafeMath} from '../../dependencies/openzeppelin/contracts/SafeMath.sol';\nimport {VersionedInitializable} from '../libraries/aave-upgradeability/VersionedInitializable.sol';\nimport {\nInitializableImmutableAdminUpgradeabilityProxy\n} from '../libraries/aave-upgradeability/InitializableImmutableAdminUpgradeabilityProxy.sol';\nimport {ReserveConfiguration} from '../libraries/configuration/ReserveConfiguration.sol';\nimport {ILendingPoolAddressesProvider} from '../../interfaces/ILendingPoolAddressesProvider.sol';\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\nimport {IERC20Detailed} from '../../dependencies/openzeppelin/contracts/IERC20Detailed.sol';\nimport {Errors} from '../libraries/helpers/Errors.sol';\nimport {PercentageMath} from '../libraries/math/PercentageMath.sol';\nimport {DataTypes} from '../libraries/types/DataTypes.sol';\nimport {IInitializableDebtToken} from '../../interfaces/IInitializableDebtToken.sol';\nimport {IInitializableAToken} from '../../interfaces/IInitializableAToken.sol';\nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';\nimport {ILendingPoolConfigurator} from '../../interfaces/ILendingPoolConfigurator.sol';\ncontract LendingPoolConfigurator is VersionedInitializable, ILendingPoolConfigurator {\nusing SafeMath for uint256;\nusing PercentageMath for uint256;\nusing ReserveConfiguration for DataTypes.ReserveConfigurationMap;\nILendingPoolAddressesProvider internal addressesProvider;\nILendingPool internal pool;\nmodifier onlyPoolAdmin {\nrequire(addressesProvider.getPoolAdmin() == msg.sender, Errors.CALLER_NOT_POOL_ADMIN);\n_;\n}\nmodifier onlyEmergencyAdmin {\nrequire(\naddressesProvider.getEmergencyAdmin() == msg.sender,\nErrors.LPC_CALLER_NOT_EMERGENCY_ADMIN\n);\n_;\n}\nuint256 internal constant CONFIGURATOR_REVISION = 0x1;\nfunction initialize(ILendingPoolAddressesProvider provider) public initializer {\naddressesProvider = provider;\npool = ILendingPool(addressesProvider.getLendingPool());\n}\nfunction batchInitReserve(InitReserveInput[] calldata input) external onlyPoolAdmin {\nILendingPool cachedPool = pool;\nfor (uint256 i = 0;i < input.length;i++) {\n_initReserve(cachedPool, input[i]);\n}\n}\nfunction updateAToken(UpdateATokenInput calldata input) external onlyPoolAdmin {\nILendingPool cachedPool = pool;\nDataTypes.ReserveData memory reserveData = cachedPool.getReserveData(input.asset);\n(, , , uint256 decimals, ) = cachedPool.getConfiguration(input.asset).getParamsMemory();\nbytes memory encodedCall = abi.encodeWithSelector(\nIInitializableAToken.initialize.selector,\ncachedPool,\ninput.treasury,\ninput.asset,\ninput.incentivesController,\ndecimals,\ninput.name,\ninput.symbol,\ninput.params\n);\n_upgradeTokenImplementation(\nreserveData.aTokenAddress,\ninput.implementation,\nencodedCall\n);\nemit ATokenUpgraded(input.asset, reserveData.aTokenAddress, input.implementation);\n}\nfunction setReserveFactor(address asset, uint256 reserveFactor) external onlyPoolAdmin {\nDataTypes.ReserveConfigurationMap memory currentConfig = pool.getConfiguration(asset);\ncurrentConfig.setReserveFactor(reserveFactor);\npool.setConfiguration(asset, currentConfig.data);\nemit ReserveFactorChanged(asset, reserveFactor);\n}\nfunction setReserveInterestRateStrategyAddress(address asset, address rateStrategyAddress)\nexternal\nonlyPoolAdmin\n{\npool.setReserveInterestRateStrategyAddress(asset, rateStrategyAddress);\nemit ReserveInterestRateStrategyChanged(asset, rateStrategyAddress);\n}\nfunction setPoolPause(bool val) external onlyEmergencyAdmin {\npool.setPause(val);\n}\nfunction _initTokenWithProxy(address implementation, bytes memory initParams)\ninternal\nreturns (address)\n{\nInitializableImmutableAdminUpgradeabilityProxy proxy =\nnew InitializableImmutableAdminUpgradeabilityProxy(address(this));\nproxy.initialize(implementation, initParams);\nreturn address(proxy);\n}\nfunction _upgradeTokenImplementation(\naddress proxyAddress,\naddress implementation,\nbytes memory initParams\n) internal {\nInitializableImmutableAdminUpgradeabilityProxy proxy =\nInitializableImmutableAdminUpgradeabilityProxy(payable(proxyAddress));\nproxy.upgradeToAndCall(implementation, initParams);\n}\nfunction _checkNoLiquidity(address asset) internal view {\nDataTypes.ReserveData memory reserveData = pool.getReserveData(asset);\nuint256 availableLiquidity = IERC20Detailed(asset).balanceOf(reserveData.aTokenAddress);\nrequire(\navailableLiquidity == 0 && reserveData.currentLiquidityRate == 0,\nErrors.LPC_RESERVE_LIQUIDITY_NOT_0\n);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.12;\nimport {DebtTokenBase} from './base/DebtTokenBase.sol';\nimport {MathUtils} from '../libraries/math/MathUtils.sol';\nimport {WadRayMath} from '../libraries/math/WadRayMath.sol';\nimport {IStableDebtToken} from '../../interfaces/IStableDebtToken.sol';\nimport {ILendingPool} from '../../interfaces/ILendingPool.sol';\nimport {IAaveIncentivesController} from '../../interfaces/IAaveIncentivesController.sol';\nimport {Errors} from '../libraries/helpers/Errors.sol';\ncontract StableDebtToken is IStableDebtToken, DebtTokenBase {\nusing WadRayMath for uint256;\nuint256 public constant DEBT_TOKEN_REVISION = 0x1;\nuint256 internal _avgStableRate;\nmapping(address => uint40) internal _timestamps;\nmapping(address => uint256) internal _usersStableRate;\nuint40 internal _totalSupplyTimestamp;\nILendingPool internal _pool;\naddress internal _underlyingAsset;\nIAaveIncentivesController internal _incentivesController;\nfunction initialize(\nILendingPool pool,\naddress underlyingAsset,\nIAaveIncentivesController incentivesController,\nuint8 debtTokenDecimals,\nstring memory debtTokenName,\nstring memory debtTokenSymbol,\nbytes calldata params\n) public override initializer {\n_setName(debtTokenName);\n_setSymbol(debtTokenSymbol);\n_setDecimals(debtTokenDecimals);\n_pool = pool;\n_underlyingAsset = underlyingAsset;\n_incentivesController = incentivesController;\nemit Initialized(\nunderlyingAsset,\naddress(pool),\naddress(incentivesController),\ndebtTokenDecimals,\ndebtTokenName,\ndebtTokenSymbol,\nparams\n);\n}\nfunction burn(address user, uint256 amount) external override onlyLendingPool {\n(, uint256 currentBalance, uint256 balanceIncrease) = _calculateBalanceIncrease(user);\nuint256 previousSupply = totalSupply();\nuint256 newAvgStableRate = 0;\nuint256 nextSupply = 0;\nuint256 userStableRate = _usersStableRate[user];\nif (previousSupply <= amount) {\n_avgStableRate = 0;\n_totalSupply = 0;\n} else {\nnextSupply = _totalSupply = previousSupply.sub(amount);\nuint256 firstTerm = _avgStableRate.rayMul(previousSupply.wadToRay());\nuint256 secondTerm = userStableRate.rayMul(amount.wadToRay());\nif (secondTerm >= firstTerm) {\nnewAvgStableRate = _avgStableRate = _totalSupply = 0;\n} else {\nnewAvgStableRate = _avgStableRate = firstTerm.sub(secondTerm).rayDiv(nextSupply.wadToRay());\n}\n}\nif (amount == currentBalance) {\n_usersStableRate[user] = 0;\n_timestamps[user] = 0;\n} else {\n_timestamps[user] = uint40(block.timestamp);\n}\n_totalSupplyTimestamp = uint40(block.timestamp);\nif (balanceIncrease > amount) {\nuint256 amountToMint = balanceIncrease.sub(amount);\n_mint(user, amountToMint, previousSupply);\nemit Mint(\nuser,\nuser,\namountToMint,\ncurrentBalance,\nbalanceIncrease,\nuserStableRate,\nnewAvgStableRate,\nnextSupply\n);\n} else {\nuint256 amountToBurn = amount.sub(balanceIncrease);\n_burn(user, amountToBurn, previousSupply);\nemit Burn(user, amountToBurn, currentBalance, balanceIncrease, newAvgStableRate, nextSupply);\n}\nemit Transfer(user, address(0), amount);\n}\nfunction totalSupply() public view override returns (uint256) {\nreturn _calcTotalSupply(_avgStableRate);\n}\nfunction getTotalSupplyLastUpdated() public view override returns (uint40) {\nreturn _totalSupplyTimestamp;\n}\nfunction principalBalanceOf(address user) external view virtual override returns (uint256) {\nreturn super.balanceOf(user);\n}\nfunction scaledBalanceOf(address user) public view virtual override returns (uint256) {\nreturn super.balanceOf(user);\n}\nfunction scaledTotalSupply() public view virtual override returns (uint256) {\nreturn super.totalSupply();\n}\nfunction _getLendingPool() internal view override returns (ILendingPool) {\nreturn _pool;\n}\nfunction _calcTotalSupply(uint256 avgRate) internal view virtual returns (uint256) {\nuint256 principalSupply = super.totalSupply();\nif (principalSupply == 0) {\nreturn 0;\n}\nuint256 cumulatedInterest =\nMathUtils.calculateCompoundedInterest(avgRate, _totalSupplyTimestamp);\nreturn principalSupply.rayMul(cumulatedInterest);\n}\nfunction _mint(\naddress account,\nuint256 amount,\nuint256 oldTotalSupply\n) internal {\nuint256 oldAccountBalance = _balances[account];\n_balances[account] = oldAccountBalance.add(amount);\nif (address(_incentivesController) != address(0)) {\n_incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);\n}\n}\nfunction _burn(\naddress account,\nuint256 amount,\nuint256 oldTotalSupply\n) internal {\nuint256 oldAccountBalance = _balances[account];\n_balances[account] = oldAccountBalance.sub(amount, Errors.SDT_BURN_EXCEEDS_BALANCE);\nif (address(_incentivesController) != address(0)) {\n_incentivesController.handleAction(account, oldTotalSupply, oldAccountBalance);\n}\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.7.6;\nimport \"./StakeTokenPool.sol\";\nimport \"./interfaces/IFidoMember.sol\";\nimport \"./interfaces/IIDOInfo.sol\";\nimport \"./interfaces/IRateOracle.sol\";\nimport \"./interfaces/IMFIL.sol\";\nimport \"./interfaces/IHFIL.sol\";\nimport \"./interfaces/IERC20Mintable.sol\";\nimport \"./libraries/TransferHelper.sol\";\nimport \"./ReentrancyGuard.sol\";\ninterface IMfilIdoTokenLPPool {\nfunction transferOperatorship(address newOperator) external onlyOwner {\nrequire(\nnewOperator != address(0),\n\"Operable: new operator is the zero address\"\n);\nemit OperatorshipTransferred(operator, newOperator);\noperator = newOperator;\n}\nfunction changeRateOracle(address _rateOracle)\nexternal\nonlyOwner\nreturns (bool)\n{\nrequire(_rateOracle != address(0), \"new address is zero address\");\nrateOracle = _rateOracle;\nreturn true;\n}\nfunction changeIDOInfo(address _IDOInfo) external onlyOwner returns (bool) {\nrequire(_IDOInfo != address(0), \"new address is zero address\");\nIDOInfo = _IDOInfo;\nreturn true;\n}\nfunction changeFidoMember(address _FidoMember)\nexternal\nonlyOwner\nreturns (bool)\n{\nrequire(_FidoMember != address(0), \"new address is zero address\");\nFidoMember = _FidoMember;\nreturn true;\n}\nfunction changeFidoFeeRecipient(address _fidoFeeRecipient)\nexternal\nonlyOwner\nreturns (bool)\n{\nrequire(_fidoFeeRecipient != address(0), \"new address is zero address\");\nfidoFeeRecipient = _fidoFeeRecipient;\nreturn true;\n}\nfunction changeHFILRecipient(address _HFILRecipient)\nexternal\nonlyOwner\nreturns (bool)\n{\nrequire(_HFILRecipient != address(0), \"new address is zero address\");\nHFILRecipient = _HFILRecipient;\nreturn true;\n}\nfunction pause() external onlyOperator {\n_pause();\n}\nfunction unPause() external onlyOperator {\n_unpause();\n}\nfunction changeFidoFeeRate(uint256 _fidoFeeRate, uint8 _fidoFeeRateDecimals)\nexternal\nonlyOperator\n{\nrequire(\n_fidoFeeRateDecimals > 0,\n\"fidoFeeRateDecimals must greater than zero\"\n);\nfidoFeeRateDecimals = _fidoFeeRateDecimals;\nfidoFeeRate = _fidoFeeRate;\n}\nfunction changeInviteFeeRate(\nuint256 _inviteFeeRate,\nuint8 _inviteFeeRateDecimals\n) external onlyOperator {\nrequire(\n_inviteFeeRateDecimals > 0,\n\"inviteFeeRateDecimals must greater than zero\"\n);\ninviteFeeRateDecimals = _inviteFeeRateDecimals;\ninviteFeeRate = _inviteFeeRate;\n}\nfunction stake(uint256 amount) external whenNotPaused nonReentrant {\nrequire(amount > 0, \"STAKE: amount is zero\");\nTransferHelper.safeTransferFrom(\nmfil,\n_msgSender(),\naddress(this),\namount\n);\n_stake(amount);\n}\nfunction lendFil(uint256 totalT, uint256 userStakeFil)\nexternal\nwhenNotPaused\nreturns (uint256 lendAmount)\n{\nrequire(\nIIDOInfo(IDOInfo).isPool(_msgSender()),\n\"LENDFIL: not from pool\"\n);\nlendAmount = totalT.mul(IRateOracle(rateOracle).rate()).div(\n10**6\n);\nif (lendAmount > userStakeFil) {\nlendAmount = lendAmount.sub(userStakeFil);\n} else {\nlendAmount = 0;\n}\nMfilLend[_msgSender()] = MfilLend[_msgSender()].add(lendAmount);\ntotalMfilLend = totalMfilLend.add(lendAmount);\n}\nfunction returnFil(uint256 amount) external whenNotPaused {\nrequire(\nIIDOInfo(IDOInfo).isPool(_msgSender()),\n\"RETURNFIL: not from pool\"\n);\ntotalMfilLend = totalMfilLend.sub(amount);\nMfilLend[_msgSender()] = MfilLend[_msgSender()].add(amount);\n}\nfunction _getPoolFeeRate(address pool) internal view returns (uint256 fee) {\nfee = poolFeeRate[pool] == 0 ? poolDefaultFeeRate : poolFeeRate[pool];\n}\nfunction getPoolFeeRate(address pool) external view returns (uint256) {\nreturn _getPoolFeeRate(pool);\n}\nfunction newReward() external onlyOperator whenNotPaused {\n_addNewReward(tomorrowReward);\nemit NewReward(block.number, tomorrowReward);\ntomorrowReward = 0;\n}\nfunction setReward(uint256 amount) external onlyOperator whenNotPaused {\n_setReward(amount);\nemit SetReward(block.number, amount);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12;\ninterface IMigrator {\nfunction desiredLiquidity() external view returns (uint256);\n}\ninterface ILfgSwapCallee {\nfunction jwapCall(address sender, uint amount0, uint amount1, bytes calldata data) external;\n}\ncontract LfgSwapERC20 {\nusing SafeMath for uint;\nstring public constant name = 'LGF LP Token';\nstring public constant symbol = 'LFG_LP';\nuint8 public constant decimals = 18;\nuint public totalSupply;\nmapping(address => uint) public balanceOf;\nmapping(address => mapping(address => uint)) public allowance;\nbytes32 public DOMAIN_SEPARATOR;\nbytes32 public constant PERMIT_TYPEHASH = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c6\nmapping(address => uint) public nonces;\nevent Approval(address indexed owner, address indexed spender, uint value);\nevent Transfer(address indexed from, address indexed to, uint value);\nconstructor() public {\nuint chainId;\nassembly {\nchainId := chainid()\n}\nDOMAIN_SEPARATOR = keccak256(\nabi.encode(\nkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingC\nkeccak256(bytes(name)),\nkeccak256(bytes('1')),\nchainId,\naddress(this)\n)\n);\n}\nfunction _mint(address to, uint value) internal {\ntotalSupply = totalSupply.add(value);\nbalanceOf[to] = balanceOf[to].add(value);\nemit Transfer(address(0), to, value);\n}\nfunction _burn(address from, uint value) internal {\nbalanceOf[from] = balanceOf[from].sub(value);\ntotalSupply = totalSupply.sub(value);\nemit Transfer(from, address(0), value);\n}\nfunction _approve(address owner, address spender, uint value) private {\nallowance[owner][spender] = value;\nemit Approval(owner, spender, value);\n}\nfunction _transfer(address from, address to, uint value) private {\nbalanceOf[from] = balanceOf[from].sub(value);\nbalanceOf[to] = balanceOf[to].add(value);\nemit Transfer(from, to, value);\n}\nfunction approve(address spender, uint value) external returns (bool) {\n_approve(msg.sender, spender, value);\nreturn true;\n}\nfunction transfer(address to, uint value) external returns (bool) {\n_transfer(msg.sender, to, value);\nreturn true;\n}\nfunction transferFrom(address from, address to, uint value) external returns (bool) {\nif (allowance[from][msg.sender] != uint(-1)) {\nallowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n}\n_transfer(from, to, value);\nreturn true;\n}\nfunction initialize(address _token0, address _token1) external {\nrequire(msg.sender == factory, 'LfgSwap: FORBIDDEN');\ntoken0 = _token0;\ntoken1 = _token1;\n}\nfunction _update(uint balance0, uint balance1, uint112 _reserve0, uint112 _reserve1) private {\nrequire(balance0 <= uint112(-1) && balance1 <= uint112(-1), 'LfgSwap: OVERFLOW');\nuint32 blockTimestamp = uint32(block.timestamp % 2**32);\nuint32 timeElapsed = blockTimestamp - blockTimestampLast;\nif (timeElapsed > 0 && _reserve0 != 0 && _reserve1 != 0) {\nprice0CumulativeLast += uint(UQ112x112.encode(_reserve1).uqdiv(_reserve0)) * timeElapsed;\nprice1CumulativeLast += uint(UQ112x112.encode(_reserve0).uqdiv(_reserve1)) * timeElapsed;\n}\nreserve0 = uint112(balance0);\nreserve1 = uint112(balance1);\nblockTimestampLast = blockTimestamp;\nemit Sync(reserve0, reserve1);\n}\nfunction burn(address to) external lock returns (uint amount0, uint amount1) {\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\naddress _token0 = token0;\naddress _token1 = token1;\nuint balance0 = IERC20(_token0).balanceOf(address(this));\nuint balance1 = IERC20(_token1).balanceOf(address(this));\nuint liquidity = balanceOf[address(this)];\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply;\namount0 = liquidity.mul(balance0) / _totalSupply;\namount1 = liquidity.mul(balance1) / _totalSupply;\nrequire(amount0 > 0 && amount1 > 0, 'LfgSwap: INSUFFICIENT_LIQUIDITY_BURNED');\n_burn(address(this), liquidity);\n_safeTransfer(_token0, to, amount0);\n_safeTransfer(_token1, to, amount1);\nbalance0 = IERC20(_token0).balanceOf(address(this));\nbalance1 = IERC20(_token1).balanceOf(address(this));\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1);\nemit Burn(msg.sender, amount0, amount1, to);\n}\nfunction skim(address to) external lock {\naddress _token0 = token0;\naddress _token1 = token1;\n_safeTransfer(_token0, to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n_safeTransfer(_token1, to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n}\nfunction sync() external lock {\n_update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)), res\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12;\ncontract LfgSwapRouter is ILfgSwapRouter, Ownable {\nusing SafeMath for uint;\naddress public override factory;\naddress public override WETH;\nmodifier ensure(uint deadline) {\nrequire(deadline >= block.timestamp, 'LfgSwapRouter: EXPIRED');\n_;\n}\nconstructor(address _factory, address _WETH) public {\nfactory = _factory;\nWETH = _WETH;\n}\nreceive() external payable {\nassert(msg.sender == WETH);\n}\nfunction _swap(uint[] memory amounts, address[] memory path, address _to) internal virtual {\nfor (uint i;i < path.length - 1;i++) {\n(address input, address output) = (path[i], path[i + 1]);\n(address token0,) = LfgSwapLibrary.sortTokens(input, output);\nuint amountOut = amounts[i + 1];\n(uint amount0Out, uint amount1Out) = input == token0 ? (uint(0), amountOut) : (amountOut,\naddress to = i < path.length - 2 ? LfgSwapLibrary.pairFor(factory, output, path[i + 2]) :\nILfgSwapPair(LfgSwapLibrary.pairFor(factory, input, output)).swap(\namount0Out, amount1Out, to, new bytes(0)\n);\n}\n}\nfunction swapExactTokensForTokens(\nuint amountIn,\nuint amountOutMin,\naddress[] calldata path,\naddress to,\nuint deadline\n) external virtual override ensure(deadline) returns (uint[] memory amounts) {\namounts = LfgSwapLibrary.getAmountsOut(factory, amountIn, path);\nrequire(amounts[amounts.length - 1] >= amountOutMin, 'LfgSwapRouter: INSUFFICIENT_OUTPUT_AMOU\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, LfgSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, to);\n}\nfunction swapTokensForExactTokens(\nuint amountOut,\nuint amountInMax,\naddress[] calldata path,\naddress to,\nuint deadline\n) external virtual override ensure(deadline) returns (uint[] memory amounts) {\namounts = LfgSwapLibrary.getAmountsIn(factory, amountOut, path);\nrequire(amounts[0] <= amountInMax, 'LfgSwapRouter: EXCESSIVE_INPUT_AMOUNT');\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, LfgSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, to);\n}\nfunction swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadl\nexternal\nvirtual\noverride\npayable\nensure(deadline)\nreturns (uint[] memory amounts)\n{\nrequire(path[0] == WETH, 'LfgSwapRouter: INVALID_PATH');\namounts = LfgSwapLibrary.getAmountsOut(factory, msg.value, path);\nrequire(amounts[amounts.length - 1] >= amountOutMin, 'LfgSwapRouter: INSUFFICIENT_OUTPUT_AMOU\nIWETH(WETH).deposit{value: amounts[0]}();\nassert(IWETH(WETH).transfer(LfgSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]));\n_swap(amounts, path, to);\n}\nfunction swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address\nexternal\nvirtual\noverride\nensure(deadline)\nreturns (uint[] memory amounts)\n{\nrequire(path[path.length - 1] == WETH, 'LfgSwapRouter: INVALID_PATH');\namounts = LfgSwapLibrary.getAmountsIn(factory, amountOut, path);\nrequire(amounts[0] <= amountInMax, 'LfgSwapRouter: EXCESSIVE_INPUT_AMOUNT');\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, LfgSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, address(this));\nIWETH(WETH).withdraw(amounts[amounts.length - 1]);\nTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n}\nfunction swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address\nexternal\nvirtual\noverride\nensure(deadline)\nreturns (uint[] memory amounts)\n{\nrequire(path[path.length - 1] == WETH, 'LfgSwapRouter: INVALID_PATH');\namounts = LfgSwapLibrary.getAmountsOut(factory, amountIn, path);\nrequire(amounts[amounts.length - 1] >= amountOutMin, 'LfgSwapRouter: INSUFFICIENT_OUTPUT_AMOU\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, LfgSwapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, address(this));\nIWETH(WETH).withdraw(amounts[amounts.length - 1]);\nTransferHelper.safeTransferETH(to, amounts[amounts.length - 1]);\n}\nfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (\nreturn LfgSwapLibrary.quote(amountA, reserveA, reserveB);\n}\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\npublic\npure\nvirtual\noverride\nreturns (uint amountOut)\n{\nreturn LfgSwapLibrary.getAmountOut(amountIn, reserveIn, reserveOut);\n}\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\npublic\npure\nvirtual\noverride\nreturns (uint amountIn)\n{\nreturn LfgSwapLibrary.getAmountIn(amountOut, reserveIn, reserveOut);\n}\nfunction getAmountsOut(uint amountIn, address[] memory path)\npublic\nview\nvirtual\noverride\nreturns (uint[] memory amounts)\n{\nreturn LfgSwapLibrary.getAmountsOut(factory, amountIn, path);\n}\nfunction getAmountsIn(uint amountOut, address[] memory path)\npublic\nview\nvirtual\noverride\nreturns (uint[] memory amounts)\n{\nreturn LfgSwapLibrary.getAmountsIn(factory, amountOut, path);\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12;\ninterface IMigrator {\nfunction desiredLiquidity() external view returns (uint256);\n}\ninterface ILfgSwapCallee {\nfunction _mint(address to, uint value) internal {\ntotalSupply = totalSupply.add(value);\nbalanceOf[to] = balanceOf[to].add(value);\nemit Transfer(address(0), to, value);\n}\nfunction _burn(address from, uint value) internal {\nbalanceOf[from] = balanceOf[from].sub(value);\ntotalSupply = totalSupply.sub(value);\nemit Transfer(from, address(0), value);\n}\nfunction _approve(address owner, address spender, uint value) private {\nallowance[owner][spender] = value;\nemit Approval(owner, spender, value);\n}\nfunction _transfer(address from, address to, uint value) private {\nbalanceOf[from] = balanceOf[from].sub(value);\nbalanceOf[to] = balanceOf[to].add(value);\nemit Transfer(from, to, value);\n}\nfunction approve(address spender, uint value) external returns (bool) {\n_approve(msg.sender, spender, value);\nreturn true;\n}\nfunction transfer(address to, uint value) external returns (bool) {\n_transfer(msg.sender, to, value);\nreturn true;\n}\nfunction transferFrom(address from, address to, uint value) external returns (bool) {\nif (allowance[from][msg.sender] != uint(-1)) {\nallowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n}\n_transfer(from, to, value);\nreturn true;\n}\nfunction permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, by\nrequire(deadline >= block.timestamp, 'UniswapV2: EXPIRED');\nbytes32 digest = keccak256(\nabi.encodePacked(\n'\\x19\\x01',\nDOMAIN_SEPARATOR,\nkeccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, nonces[owner]++, deadlin\n)\n);\naddress recoveredAddress = ecrecover(digest, v, r, s);\nrequire(recoveredAddress != address(0) && recoveredAddress == owner, 'UniswapV2: INVALID_SIGN\n_approve(owner, spender, value);\n}\n}\ncontract LfgSwapPair is LfgSwapERC20 {\nusing SafeMath for uint;\nusing UQ112x112 for uint224;\nuint public constant MINIMUM_LIQUIDITY = 10**3;\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\naddress public factory;\naddress public token0;\naddress public token1;\nuint112 private reserve0;\nuint112 private reserve1;\nuint32 private blockTimestampLast;\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\nuint public kLast;\nuint private unlocked = 1;\nmodifier lock() {\nrequire(unlocked == 1, 'LfgSwap: LOCKED');\nunlocked = 0;\n_;\nunlocked = 1;\n}\nfunction initialize(address _token0, address _token1) external {\nrequire(msg.sender == factory, 'LfgSwap: FORBIDDEN');\ntoken0 = _token0;\ntoken1 = _token1;\n}\n}\nfunction mint(address to) external lock returns (uint liquidity) {\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\nuint balance0 = IERC20(token0).balanceOf(address(this));\nuint balance1 = IERC20(token1).balanceOf(address(this));\nuint amount0 = balance0.sub(_reserve0);\nuint amount1 = balance1.sub(_reserve1);\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply;\nif (_totalSupply == 0) {\nliquidity = SafeMath.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n_mint(address(0), MINIMUM_LIQUIDITY);\n} else {\nliquidity = SafeMath.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply)\n}\nrequire(liquidity > 0, 'LfgSwap: INSUFFICIENT_LIQUIDITY_MINTED');\n_mint(to, liquidity);\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1);\nemit Mint(msg.sender, amount0, amount1);\n}\nfunction burn(address to) external lock returns (uint amount0, uint amount1) {\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\naddress _token0 = token0;\naddress _token1 = token1;\nuint balance0 = IERC20(_token0).balanceOf(address(this));\nuint balance1 = IERC20(_token1).balanceOf(address(this));\nuint liquidity = balanceOf[address(this)];\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply;\namount0 = liquidity.mul(balance0) / _totalSupply;\namount1 = liquidity.mul(balance1) / _totalSupply;\nrequire(amount0 > 0 && amount1 > 0, 'LfgSwap: INSUFFICIENT_LIQUIDITY_BURNED');\n_burn(address(this), liquidity);\n_safeTransfer(_token0, to, amount0);\n_safeTransfer(_token1, to, amount1);\nbalance0 = IERC20(_token0).balanceOf(address(this));\nbalance1 = IERC20(_token1).balanceOf(address(this));\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1);\nemit Burn(msg.sender, amount0, amount1, to);\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.9;\ninterface IBEP20 {\nfunction totalSupply() external view returns (uint256);\nfunction decimals() external view returns (uint8);\nfunction symbol() external view returns (string memory);\nfunction name() external view returns (string memory);\nfunction getOwner() external view returns (address);\nfunction balanceOf(address account) external view returns (uint256);\nfunction transfer(address recipient, uint256 amount) external returns (bool);\nfunction allowance(address _owner, address spender) external view returns (uint256);\nfunction approve(address spender, uint256 amount) external returns (bool);\nfunction transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\nevent Transfer(address indexed from, address indexed to, uint256 value);\nevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\nabstract contract Context {\nfunction renounceOwnership() public virtual onlyOwner {\nemit OwnershipTransferred(_owner, address(0));\n_owner = address(0);\n}function renounceWhitelister() external onlyWhitelister {\nemit WhitelisterTransferred(_whitelister, address(0));\n_whitelister = address(0);\n}\nfunction transferWhitelister(address newWhitelister) external onlyWhitelister {\n_transferWhitelister(newWhitelister);\n}\nfunction _transferWhitelister(address newWhitelister) internal {\nrequire(newWhitelister != address(0), \"New whitelister is the zero address\");\nemit WhitelisterTransferred(_whitelister, newWhitelister);\n_whitelister = newWhitelister;\n}\nfunction createLGEWhitelist(\naddress pairAddress,\nuint256[] calldata durations,\nuint256[] calldata amountsMax\n) external onlyWhitelister() {\nrequire(durations.length == amountsMax.length, \"Invalid whitelist(s)\");\n_lgePairAddress = pairAddress;\nif (durations.length > 0) {\ndelete _lgeWhitelistRounds;\nfor (uint256 i = 0;i < durations.length;i++) {\nWhitelistRound storage whitelistRound = _lgeWhitelistRounds.push();\nwhitelistRound.duration = durations[i];\nwhitelistRound.amountMax = amountsMax[i];\n}\n}\n}\nfunction modifyLGEWhitelist(\nuint256 index,\nuint256 duration,\nuint256 amountMax,\naddress[] calldata addresses,\nbool enabled\n) external onlyWhitelister() {\nrequire(index < _lgeWhitelistRounds.length, \"Invalid index\");\nrequire(amountMax > 0, \"Invalid amountMax\");\nif (duration != _lgeWhitelistRounds[index].duration) _lgeWhitelistRounds[index].duration = du\nif (amountMax != _lgeWhitelistRounds[index].amountMax) _lgeWhitelistRounds[index].amountMax =\nfor (uint256 i = 0;i < addresses.length;i++) {\n_lgeWhitelistRounds[index].addresses[addresses[i]] = enabled;\n}\n}\nfunction getOwner() external view override returns (address) {\nreturn owner();\n}\nfunction decimals() external view override returns (uint8) {\nreturn _decimals;\n}\nfunction symbol() external view override returns (string memory) {\nreturn _symbol;\n}\nfunction name() external view override returns (string memory) {\nreturn _name;\n}\nfunction totalSupply() external view override returns (uint256) {\nreturn _totalSupply;\n}\nfunction balanceOf(address account) external view override returns (uint256) {\nreturn _balances[account];\n}\nfunction transfer(address recipient, uint256 amount) external override returns (bool) {\n_transfer(_msgSender(), recipient, amount);\nreturn true;\n}\nfunction allowance(address owner, address spender) public view override returns (uint256) {\nreturn _allowances[owner][spender];\n}\nfunction approve(address spender, uint256 amount) external override returns (bool) {\n_approve(_msgSender(), spender, amount);\nreturn true;\n}\nfunction transferFrom(address sender, address recipient, uint256 amount) external override return\n_transfer(sender, recipient, amount);\n_approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer\nreturn true;\n}\nfunction burn(uint256 amount) public virtual {\n_burn(_msgSender(), amount);\n}\nfunction burnFrom(address account, uint256 amount) public virtual {\nuint256 decreasedAllowance = allowance(account, _msgSender()).sub(amount, \"ERC20: burn amount\n_approve(account, _msgSender(), decreasedAllowance);\n_burn(account, amount);\n}\nfunction _approve(address owner, address spender, uint256 amount) internal {\nrequire(owner != address(0), \"BEP20: approve from the zero address\");\nrequire(spender != address(0), \"BEP20: approve to the zero address\");\n_allowances[owner][spender] = amount;\nemit Approval(owner, spender, amount);\n}\nfunction _burn(address account, uint256 amount) internal virtual {\nrequire(account != address(0), \"ERC20: burn from the zero address\");\nuint256 accountBalance = _balances[account];\nrequire(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\nunchecked {\n_balances[account] = accountBalance - amount;\n}\n_totalSupply -= amount;\nemit Transfer(account, address(0), amount);\n}\n}\nAnalysis of audit results\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity >=0.4.22 <0.9.0;\ncontract MartTradeMining is Oracle, ReentrancyGuardUpgradeable {\nusing SafeMathUpgradeable for uint;\nstruct PersonData {\nuint256 _days;\nuint256 toDayFeeAmt;\nuint256 toBeReleased;\nuint256 toBeReleasedByInvit;\n}\nmapping(uint256 => uint256) private totalFeeAmts;\nmapping(uint256 => uint256) public martSupply;\nmapping(address => PersonData) private userReward;\nmapping(address => uint256) public getInvitReward;\nmapping(address => bool) public Authorization;\naddress public exchange;\naddress public martToken;\naddress public invit;\nuint32 public feeDecimals;\nuint256 public lastDay;\nbool public allowExtraction;\nstruct LockUserData {\nuint256 totalAmount;\nuint256 left;\nuint256 preReleaseBlock;\nuint16 releaseLoop;\nuint256 releasedAmt;\nuint256 singleQuantity;\nuint256 preReleaseLoop;\n}\nmapping(address => LockUserData) public LockMap;\nuint16 public releaseTime;\nuint16 public lockBlockNum;\nmapping(address => mapping(uint256 => uint256)) public reduceLoopAmount;\nevent WithDrawReward(address indexed user_address, address indexed _to, uint256 _amount);\nevent ReceiveReferralReward(address indexed from, address indexed to, uint256 amount);\nevent ReceiveMiningRewards(address indexed _address, uint256 _loop, uint256 amount);\nfunction setAllowExtraction (bool _isAllow) external onlyOwner {\nallowExtraction = _isAllow;\n}\nfunction setInvit(address _invit) external onlyOwner {\nrequire(_invit != address(0), 'MartTradeMining: _invit is zero address');\ninvit = _invit;\n}\nfunction countUserExchangeFee(address user_address, address tokenAddress, uint256 _days, uint256 _\nrequire(user_address != address(0), 'MartTradeMining: user_address is zero address');\nrequire(martSupply[_days] == 0, 'MartTradeMining: Reward has been released');\nif (_days == 0) {\nreturn true;\n}\nrequire(_days >= lastDay, 'MartTradeMining: Outdated trading cycle');\nif (_days > lastDay) {\nif (lastDay > 0 && martSupply[lastDay] == 0) {\n(, uint256 _supply) = IMartToken(martToken).getPreDaysupply(lastDay);\nmartSupply[lastDay] = _supply;\n}\nlastDay = _days;\n_updatePrice(tokenAddress);\n}\nif (lastDay > userReward[user_address]._days) {\nclearUserFeeAmt(user_address);\nuserReward[user_address]._days = lastDay;\n}\nuint8 tokenDesc = 18;\nif (tokenAddress != address(0)) {\ntokenDesc = IERC20(tokenAddress).decimals();\n}\nuint feeRate = 10 ** tokenDesc;\nuint256 tokenPrice = getPrice[tokenAddress];\nuint256 marketValueUsdBig = SafeMathUpgradeable.mul(tokenPrice, _fee);\nuint256 marketValueUsd = SafeMathUpgradeable.div(marketValueUsdBig, feeRate);\ntotalFeeAmts[_days] = SafeMathUpgradeable.add(totalFeeAmts[_days], marketValueUsd);\nuserReward[user_address].toDayFeeAmt = SafeMathUpgradeable.add(userReward[user_address].toDay\nreturn true;\n}\nfunction calculateRewardAmt (address user_address, uint256 _type) internal view returns (uint256\nuint256 martReleaseAmt = martSupply[userReward[user_address]._days];\nuint256 userToDayFee = SafeMathUpgradeable.mul(userReward[user_address].toDayFeeAmt, feeDecim\nuint256 todayTotalFee = totalFeeAmts[userReward[user_address]._days];\nrewardAmt = userReward[user_address].toBeReleased;\ninvitReward = userReward[user_address].toBeReleasedByInvit;\nif (todayTotalFee > 0 && martReleaseAmt > 0 && userToDayFee > 0) {\nuint256 _rate = SafeMathUpgradeable.div(userToDayFee, todayTotalFee);\nuint256 yestDayRewardAmtBig = SafeMathUpgradeable.mul(martReleaseAmt, _rate);\nuint256 yestDayRewardAmt = SafeMathUpgradeable.div(yestDayRewardAmtBig, feeDecimals);\nuint256 payInvitFee = SafeMathUpgradeable.div(SafeMathUpgradeable.mul(yestDayRewardAmt, 1\nif (_type == 2) {\ninvitReward = payInvitFee;\n}\ninvitFee = SafeMathUpgradeable.div(SafeMathUpgradeable.mul(yestDayRewardAmt, 10), 100);\nrewardAmt = SafeMathUpgradeable.add(rewardAmt, SafeMathUpgradeable.sub(yestDayRewardAmt,\n}\n}\nfunction updateLockMap(address _addr, bool isReset) internal {\n(uint256 releasedBefore, uint256 newReward, uint256 sigleQuantityBefore)= releaseAmountBefore\nuint256 rReward = newReward.sub(releasedBefore);\n(uint256 releasedAmt, uint256 singleQuantityLast) = releaseAmountCurrent(_addr);\nif (isReset) {\nLockMap[_addr].releasedAmt = LockMap[_addr].releasedAmt.add(releasedBefore);\n}\nif (LockMap[_addr].totalAmount > 0 && LockMap[_addr].left > 0 && LockMap[_addr].preReleaseBlo\nLockUserData memory lockData = LockMap[_addr];\nif (lockData.left.sub(releasedAmt) == 0) {\nsingleQuantityLast = 0;\n} else {\nuint256 rLoop = lockData.left.div(singleQuantityLast);\nif (rLoop.mul(singleQuantityLast) < lockData.left) {\nrLoop = rLoop.add(1);\n}\nuint256 startLoop = getLoopFromBlock(lockData.preReleaseBlock);\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12;\ncontract NetswapRouter is INetswapRouter02, Ownable {\nusing SafeMathNetswap for uint;\naddress public immutable override factory;\naddress public immutable override Metis;\naddress public override swapMining;\nmodifier ensure(uint deadline) {\nrequire(deadline >= block.timestamp, 'NetswapRouter: EXPIRED');\n_;\n}\nconstructor(address _factory, address _Metis) public {\nfactory = _factory;\nMetis = _Metis;\n}\nfunction setSwapMining(address _swapMininng) public onlyOwner {\nswapMining = _swapMininng;\n}\nreceive() external payable {}\nfunction removeLiquidity(\naddress tokenA,\naddress tokenB,\nuint liquidity,\nuint amountAMin,\nuint amountBMin,\naddress to,\nuint deadline\n) public virtual override ensure(deadline) returns (uint amountA, uint amountB) {\naddress pair = NetswapLibrary.pairFor(factory, tokenA, tokenB);\nINetswapPair(pair).transferFrom(msg.sender, pair, liquidity);\n(uint amount0, uint amount1) = INetswapPair(pair).burn(to);\n(address token0,) = NetswapLibrary.sortTokens(tokenA, tokenB);\n(amountA, amountB) = tokenA == token0 ? (amount0, amount1) : (amount1, amount0);\nrequire(amountA >= amountAMin, 'NetswapRouter: INSUFFICIENT_A_AMOUNT');\nrequire(amountB >= amountBMin, 'NetswapRouter: INSUFFICIENT_B_AMOUNT');\n}\nfunction removeLiquidityMetis(\naddress token,\nuint liquidity,\nuint amountTokenMin,\nuint amountMetisMin,\naddress to,\nuint deadline\n) public virtual override ensure(deadline) returns (uint amountToken, uint amountMetis) {\n(amountToken, amountMetis) = removeLiquidity(\ntoken,\nMetis,\nliquidity,\namountTokenMin,\namountMetisMin,\naddress(this),\ndeadline\n);\nTransferHelper.safeTransfer(token, to, amountToken);\nTransferHelper.safeTransferMetis(to, amountMetis);\n}\nfunction removeLiquidityWithPermit(\naddress tokenA,\naddress tokenB,\nuint liquidity,\nuint amountAMin,\nuint amountBMin,\naddress to,\nuint deadline,\nbool approveMax, uint8 v, bytes32 r, bytes32 s\n) external virtual override returns (uint amountA, uint amountB) {\naddress pair = NetswapLibrary.pairFor(factory, tokenA, tokenB);\nuint value = approveMax ? uint(-1) : liquidity;\nINetswapPair(pair).permit(msg.sender, address(this), value, deadline, v, r, s);\n(amountA, amountB) = removeLiquidity(tokenA, tokenB, liquidity, amountAMin, amountBMin, to, d\n}\nfunction swapTokensForExactMetis(uint amountOut, uint amountInMax, address[] calldata path, addre\nexternal\nvirtual\noverride\nensure(deadline)\nreturns (uint[] memory amounts)\n{\nrequire(path[path.length - 1] == Metis, 'NetswapRouter: INVALID_PATH');\namounts = NetswapLibrary.getAmountsIn(factory, amountOut, path, INetswapFactory(factory).feeR\nrequire(amounts[0] <= amountInMax, 'NetswapRouter: EXCESSIVE_INPUT_AMOUNT');\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, NetswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, address(this));\nTransferHelper.safeTransferMetis(to, amounts[amounts.length - 1]);\n}\nfunction swapExactTokensForMetis(uint amountIn, uint amountOutMin, address[] calldata path, addre\nexternal\nvirtual\noverride\nensure(deadline)\nreturns (uint[] memory amounts)\n{\nrequire(path[path.length - 1] == Metis, 'NetswapRouter: INVALID_PATH');\namounts = NetswapLibrary.getAmountsOut(factory, amountIn, path, INetswapFactory(factory).feeR\nrequire(amounts[amounts.length - 1] >= amountOutMin, 'NetswapRouter: INSUFFICIENT_OUTPUT_AMOU\nTransferHelper.safeTransferFrom(\npath[0], msg.sender, NetswapLibrary.pairFor(factory, path[0], path[1]), amounts[0]\n);\n_swap(amounts, path, address(this));\nTransferHelper.safeTransferMetis(to, amounts[amounts.length - 1]);\n}\nfunction quote(uint amountA, uint reserveA, uint reserveB) public pure virtual override returns (\nreturn NetswapLibrary.quote(amountA, reserveA, reserveB);\n}\nfunction getAmountOut(uint amountIn, uint reserveIn, uint reserveOut)\npublic\nview\nvirtual\noverride\nreturns (uint amountOut)\n{\nreturn NetswapLibrary.getAmountOut(amountIn, reserveIn, reserveOut, INetswapFactory(factory).\n}\nfunction getAmountIn(uint amountOut, uint reserveIn, uint reserveOut)\npublic\nview\nvirtual\noverride\nreturns (uint amountIn)\n{\nreturn NetswapLibrary.getAmountIn(amountOut, reserveIn, reserveOut, INetswapFactory(factory).\n}\nfunction getAmountsOut(uint amountIn, address[] memory path)\npublic\nview\nvirtual\nINetswapRouter.sol\noverride\nreturns (uint[] memory amounts)\n{\nreturn NetswapLibrary.getAmountsOut(factory, amountIn, path, INetswapFactory(factory).feeRate\n}\nfunction getAmountsIn(uint amountOut, address[] memory path)\npublic\nview\nvirtual\noverride\nreturns (uint[] memory amounts)\n{\nreturn NetswapLibrary.getAmountsIn(factory, amountOut, path, INetswapFactory(factory).feeRate\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity =0.6.12;\ncontract NetswapPair is NetswapERC20 {\nusing SafeMathNetswap for uint;\nusing UQ112x112 for uint224;\nuint public constant MINIMUM_LIQUIDITY = 10**3;\nbytes4 private constant SELECTOR = bytes4(keccak256(bytes('transfer(address,uint256)')));\naddress public factory;\naddress public token0;\naddress public token1;\nuint112 private reserve0;\nuint112 private reserve1;\nuint32 private blockTimestampLast;\nuint public price0CumulativeLast;\nuint public price1CumulativeLast;\nuint public kLast;\nuint private unlocked = 1;\nmodifier lock() {\nrequire(unlocked == 1, 'Netswap: LOCKED');\nunlocked = 0;\n_;\nunlocked = 1;\n}\nfunction _mintFee(uint112 _reserve0, uint112 _reserve1) private returns (bool feeOn) {\naddress feeTo = INetswapFactory(factory).feeTo();\nfeeOn = feeTo != address(0);\nuint _kLast = kLast;\nif (feeOn) {\nif (_kLast != 0) {\nuint rootK = Math.sqrt(uint(_reserve0).mul(_reserve1));\nuint rootKLast = Math.sqrt(_kLast);\nif (rootK > rootKLast) {\nuint numerator = totalSupply.mul(rootK.sub(rootKLast));\nuint denominator = rootK.mul(5).add(rootKLast);\nuint liquidity = numerator / denominator;\nif (liquidity > 0) _mint(feeTo, liquidity);\n}\n}\n} else if (_kLast != 0) {\nkLast = 0;\n}\n}\nfunction mint(address to) external lock returns (uint liquidity) {\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\nuint balance0 = IERC20Netswap(token0).balanceOf(address(this));\nuint balance1 = IERC20Netswap(token1).balanceOf(address(this));\nuint amount0 = balance0.sub(_reserve0);\nuint amount1 = balance1.sub(_reserve1);\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply;\nif (_totalSupply == 0) {\nliquidity = Math.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n_mint(address(0), MINIMUM_LIQUIDITY);\n} else {\nliquidity = Math.min(amount0.mul(_totalSupply) / _reserve0, amount1.mul(_totalSupply) / _\n}\nrequire(liquidity > 0, 'Netswap: INSUFFICIENT_LIQUIDITY_MINTED');\n_mint(to, liquidity);\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1);\nemit Mint(msg.sender, amount0, amount1);\n}\nfunction burn(address to) external lock returns (uint amount0, uint amount1) {\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\naddress _token0 = token0;\naddress _token1 = token1;\nuint balance0 = IERC20Netswap(_token0).balanceOf(address(this));\nuint balance1 = IERC20Netswap(_token1).balanceOf(address(this));\nuint liquidity = balanceOf[address(this)];\nbool feeOn = _mintFee(_reserve0, _reserve1);\nuint _totalSupply = totalSupply;\namount0 = liquidity.mul(balance0) / _totalSupply;\namount1 = liquidity.mul(balance1) / _totalSupply;\nrequire(amount0 > 0 && amount1 > 0, 'Netswap: INSUFFICIENT_LIQUIDITY_BURNED');\n_burn(address(this), liquidity);\n_safeTransfer(_token0, to, amount0);\n_safeTransfer(_token1, to, amount1);\nbalance0 = IERC20Netswap(_token0).balanceOf(address(this));\nbalance1 = IERC20Netswap(_token1).balanceOf(address(this));\n_update(balance0, balance1, _reserve0, _reserve1);\nif (feeOn) kLast = uint(reserve0).mul(reserve1);\nemit Burn(msg.sender, amount0, amount1, to);\n}\nfunction swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external lock {\nrequire(amount0Out > 0 || amount1Out > 0, 'Netswap: INSUFFICIENT_OUTPUT_AMOUNT');\n(uint112 _reserve0, uint112 _reserve1,) = getReserves();\nrequire(amount0Out < _reserve0 && amount1Out < _reserve1, 'Netswap: INSUFFICIENT_LIQUIDITY');\nuint balance0;\nuint balance1;\n{\naddress _token0 = token0;\naddress _token1 = token1;\nrequire(to != _token0 && to != _token1, 'Netswap: INVALID_TO');\nif (amount0Out > 0) _safeTransfer(_token0, to, amount0Out);\nif (amount1Out > 0) _safeTransfer(_token1, to, amount1Out);\nif (data.length > 0) INetswapCallee(to).netswapCall(msg.sender, amount0Out, amount1Out, data)\nbalance0 = IERC20Netswap(_token0).balanceOf(address(this));\nbalance1 = IERC20Netswap(_token1).balanceOf(address(this));\n}\nuint amount0In = balance0 > _reserve0 - amount0Out ? balance0 - (_reserve0 - amount0Out) : 0;\nuint amount1In = balance1 > _reserve1 - amount1Out ? balance1 - (_reserve1 - amount1Out) : 0;\nrequire(amount0In > 0 || amount1In > 0, 'Netswap: INSUFFICIENT_INPUT_AMOUNT');\n{\nuint balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(INetswapFactory(factory).feeRate\nuint balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(INetswapFactory(factory).feeRate\nrequire(balance0Adjusted.mul(balance1Adjusted) >= uint(_reserve0).mul(_reserve1).mul(1000**2)\n}\n_update(balance0, balance1, _reserve0, _reserve1);\nemit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n}\nfunction sync() external lock {\n_update(IERC20Netswap(token0).balanceOf(address(this)), IERC20Netswap(token1).balanceOf(addre\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.6.7;\nimport \"./../openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./../openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"./../openzeppelin/contracts/access/Ownable.sol\";\nimport \"./../openzeppelin/contracts/math/SafeMath.sol\";\nimport \"./../openzeppelin/contracts/utils/Counters.sol\";\nimport \"./../openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"./../seascape_nft/NftFactory.sol\";\nimport \"./../seascape_nft/SeascapeNft.sol\";\nimport \"./Crowns.sol\";\ncontract NftBurning is Crowns, Ownable, IERC721Receiver{\nusing SafeMath for uint256;\nusing Counters for Counters.Counter;\nNftFactory nftFactory;\nSeascapeNft private nft;\nCounters.Counter private sessionId;\nstruct Session {\nuint256 period;\nuint256 startTime;\nuint256 generation;\nuint256 interval;\nuint256 fee;\nuint256 minStake;\nuint256 maxStake;\n}\nstruct Balance {\nuint256 totalStaked;\nuint256 mintedTime;\n}\nmapping(uint256 => mapping(address => Balance)) public balances;\nmapping(uint256 => Session) public sessions;\nuint256 public lastSessionId;\nevent Minted(\nuint256 indexed sessionId,\naddress indexed owner,\nuint256[5] burntNfts,\nuint256 mintedTime,\nuint256 imgId,\nuint256 mintedNft\n);\nevent SessionStarted(\nuint256 indexed sessionId,\nuint256 generation,\nuint256 fee,\nuint256 interval,\nuint256 start_time,\nuint256 end_time,\nuint256 minStake,\nuint256 maxStake\n);\nevent Staked(\nuint256 indexed sessionId,\naddress indexed owner,\nuint256 amount,\nuint256 totalStaked\n);\nevent Withdrawn(\naddress indexed owner,\nuint256 indexed sessionId,\nuint256 withdrawnAmount,\nuint256 withdrawnTime\n);\nevent FactorySet(address indexed factoryAddress);\nconstructor(address _crowns, address _nftFactory, address _nft) public {\nrequire(_nftFactory != address(0), \"nftFactory cant be zero address\");\nsetCrowns(_crowns);\nsessionId.increment();\nnftFactory = NftFactory(_nftFactory);\nnft = SeascapeNft(_nft);\n}\nfunction stake(uint256 _sessionId, uint256 _amount) external {\nSession storage _session = sessions[_sessionId];\nBalance storage _balance = balances[_sessionId][msg.sender];\nrequire(_sessionId > 0, \"No active session\");\nrequire(isActive(_sessionId), \"Session not active\");\nrequire(_amount > 0, \"Should stake more than 0\");\nrequire(_balance.totalStaked.add(_amount) <= _session.maxStake,\n\"Cant stake more than maxStake\");\nrequire(_balance.totalStaked.add(_amount) >= _session.minStake,\n\"Cant stake less than minStake\");\nrequire(crowns.balanceOf(msg.sender) >= _amount, \"Not enough CWS in your wallet\");\ncrowns.transferFrom(msg.sender, address(this), _amount);\nbalances[_sessionId][msg.sender].totalStaked = balances[_sessionId][msg.sender]\n.totalStaked.add(_amount);\nemit Staked(_sessionId, msg.sender, _amount, _balance.totalStaked);\n}\nfunction withdraw(uint256 _sessionId) external {\nrequire(!isActive(_sessionId), \"Session should be inactive\");\nrequire(balances[_sessionId][msg.sender].totalStaked > 0, \"Total staked amount is 0\");\nuint256 withdrawnAmount = balances[_sessionId][msg.sender].totalStaked;\ndelete balances[_sessionId][msg.sender].totalStaked;\ncrowns.transfer(msg.sender, withdrawnAmount);\nemit Withdrawn(msg.sender, _sessionId, withdrawnAmount, block.timestamp);\n}\nfunction totalStakedBalanceOf(\nuint256 _sessionId,\naddress _owner\n)\nexternal\nview\nreturns(uint256)\n{\nreturn balances[_sessionId][_owner].totalStaked;\n}\nfunction setNftFactory(address _address) external onlyOwner {\nrequire(_address != address(0), \"nftFactory address cant be zero\");\nnftFactory = NftFactory(_address);\nemit FactorySet(_address);\n}\nfunction isActive(uint256 _sessionId) internal view returns(bool) {\nif (now > sessions[_sessionId].startTime + sessions[_sessionId].period) {\nreturn false;\n}\nreturn true;\n}\nfunction onERC721Received(\naddress operator,\naddress from,\nuint256 tokenId,\nbytes calldata data\n)\nexternal\noverride\nreturns (bytes4)\n{\nreturn bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"));\n}\n}\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity 0.8.4;\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\nimport \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nlibrary MintUtil {\nusing SafeMath for uint256;\nusing ECDSA for bytes32;\nusing Strings for uint256;\nfunction getTokenURI(uint256 _tokenId, bool _reveal, string memory _blindURI, string memory _base\nif (!_reveal) {\nreturn string(abi.encodePacked(_blindURI, _tokenId.toString()));\n} else {\nreturn string(abi.encodePacked(_baseURI, _tokenId.toString()));\n}\n}\n}\ncontract VoyagerPass is ERC721(\"Voyager Pass\", \"VOP\"), ERC721Enumerable, Ownable, ReentrancyGuard {\nusing SafeMath for uint256;\nstring private baseURI;\nstring private blindURI;\nuint256 private constant TOTAL_NFT = 10000;\nuint256 public mintPrice = 1 ether;\nuint256 public endingPrice = 0.15 ether;\nuint256 public privatePrice = 0.1 ether;\nuint256 public auctionDuration = 5400 seconds;\nuint256 public discountRate = 166_666_666_666_666 wei;\nbool public reveal;\nbool public voyagerCaptainMintActive;\nbool public legacyMintActive;\nbool public privateMintActive;\nbool public publicSaleActive;\nbool public dutchAuctionActive;\nbytes32[3] public whitelistInfo;\nmapping (address => bool) public addressMinted;\nmapping (uint256 => bool) public isPaid;\nuint256 public voyagerCaptainMintLimit = 500;\nuint256 public legacyMintLimit = 1200;\nuint256 public privateMintLimit = 8300;\nuint256 public publicSaleMintLimit = 0;\nuint256 public voyagerCaptainMintedAmount;\nuint256 public legacyMintedAmount;\nuint256 public privateMintedAmount;\nuint256 public publicSaleMintedAmount;\nuint256 public dutchAuctionStartAt;\nfunction revealNow() external onlyOwner {\nreveal = true;\n}\nfunction setMintActive(bool _isActive, uint mintTypeIndex) external onlyOwner {\nif (mintTypeIndex == 0)\nvoyagerCaptainMintActive = _isActive;\nelse if (mintTypeIndex == 1)\nlegacyMintActive = _isActive;\nelse if (mintTypeIndex == 2)\nprivateMintActive = _isActive;\nelse if( mintTypeIndex == 3)\npublicSaleActive = _isActive;\n}\nfunction setDutchAuctionActive(bool _dutchAuctionActive) external onlyOwner {\ndutchAuctionActive = _dutchAuctionActive;\ndutchAuctionStartAt = block.timestamp;\n}\nfunction setPrivatePrice(uint256 _privatePrice) external onlyOwner {\nprivatePrice = _privatePrice;\n}\nfunction setDutchAuctionInfo(uint256 _startPrice, uint256 _endPrice, uint256 _duration) external\nmintPrice = _startPrice;\nendingPrice = _endPrice;\nauctionDuration = _duration;\ndiscountRate = (mintPrice.sub(endingPrice)).div(auctionDuration);\n}\nfunction setMintLimit(uint256 _voyagerCaptainMintLimit, uint256 _legacyMintLimit, uint256 _privat\nvoyagerCaptainMintLimit = _voyagerCaptainMintLimit;\nlegacyMintLimit = _legacyMintLimit;\nprivateMintLimit = _privateMintLimit;\npublicSaleMintLimit = TOTAL_NFT.sub(voyagerCaptainMintLimit.add(legacyMintLimit).add(privateM\n}\nfunction setURIs(string memory _blindURI, string memory _URI) external onlyOwner {\nblindURI = _blindURI;\nbaseURI = _URI;\n}\nfunction updateMintMaps(uint256 _tokenId, uint _whitelistIndex) private {\nif(_whitelistIndex == 0){\nvoyagerCaptainMintedAmount = voyagerCaptainMintedAmount.add(1);\nisPaid[_tokenId] = false;\n}else if(_whitelistIndex == 1){\nlegacyMintedAmount = legacyMintedAmount.add(1);\nisPaid[_tokenId] = false;\n}else if(_whitelistIndex == 2){\nprivateMintedAmount = privateMintedAmount.add(1);\nisPaid[_tokenId] = true;\n}else{\npublicSaleMintedAmount = publicSaleMintedAmount.add(1);\nisPaid[_tokenId] = true;\n}\n}\nfunction getWhitelistIndex(bytes32[] calldata _merkleProof, bytes32 leaf) internal view returns(u\nuint whitelistIndex = 100;\nif(MerkleProof.verify(_merkleProof, whitelistInfo[0], leaf)){\nwhitelistIndex = 0;\n} else if(MerkleProof.verify(_merkleProof, whitelistInfo[1], leaf)){\nwhitelistIndex = 1;\n} else if(MerkleProof.verify(_merkleProof, whitelistInfo[2], leaf)){\nwhitelistIndex = 2;\n}\nreturn whitelistIndex;\n}\nfunction mintNFT(bytes32[] calldata _merkleProof) payable external nonReentrant{\nbytes32 leaf = keccak256(abi.encodePacked(msg.sender));\nuint whitelistIndex = getWhitelistIndex(_merkleProof, leaf);\n\n###\n\n", "completion": " no###\n###"}
{"prompt": "pragma solidity ^0.8.0;\nfunction initialize(address _dividendTracker,address _router,address _rewardToken) initializer public {\ntokenOwner = msg.sender;\n__ERC20_init(\"BIBToken\", \"BIB\");\n_mint(tokenOwner, initialSupply);\n__Pausable_init();\n__Ownable_init();require(address(0) != _rewardToken, \"INVLID_REWARD_TOKEN\");require(address(0) != _dividendTracker, \"INVLID_DIVIDENTTRACKER\");require(address(0) != _router, \"INVLID_ROUTER\");\nrewardToken = _rewardToken;\ndividendTracker = ITokenDividendTracker(_dividendTracker);\nrequire(dividendTracker.controller() == address(this), \"Token: The new dividend tracker must\nrouter = _router;\nIUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\naddress _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n.createPair(address(this), _uniswapV2Router.WETH());\nuniswapV2Router = _uniswapV2Router;\nuniswapV2Pair = _uniswapV2Pair;\n_setAutomatedMarketMakerPair(_uniswapV2Pair, true);\ndividendTracker.excludeFromDividends(address(dividendTracker));dividendTracker.excludeFromDividends(address(this));dividendTracker.excludeFromDividends(owner());dividendTracker.excludeFromDividends(deadAddress);setFeeWhiteList(owner(), true, true);setFeeWhiteList(address(this), true, true);setFeeWhiteList(_uniswapV2Pair, true, true);setFeeWhiteList(deadAddress, true, false);swapEnabled = true;}\nfunction initAddress(\naddress _w1,address _w2,address _w3,address _w4,address _w0,address _w5,address _w6,address _w7) public onlyOwner {\nrequire(_w1 != address(0), \"_w1 is not the zero address\");require(_w2 != address(0), \"_w2 is not the zero address\");require(_w3 != address(0), \"_w2 is not the zero address\");require(_w4 != address(0), \"_w4 is not the zero address\");require(_w0 != address(0), \"_w0 is not the zero address\");require(_w5 != address(0), \"_w5 is not the zero address\");require(_w6 != address(0), \"_w6 is not the zero address\");require(_w7 != address(0), \"_w7 is not the zero address\");\nw1 = _w1;w2 = _w2;w3 = _w3;w4 = _w4;w0 = _w0;w5 = _w5;w6 = _w6;w7 = _w7;\ndividendTracker.excludeFromDividends(address(w1));dividendTracker.excludeFromDividends(address(w2));dividendTracker.excludeFromDividends(address(w3));dividendTracker.excludeFromDividends(address(w4));dividendTracker.excludeFromDividends(address(w0));dividendTracker.excludeFromDividends(address(w5));dividendTracker.excludeFromDividends(address(w6));dividendTracker.excludeFromDividends(address(w7));}\nreceive() external payable {}\nfunction release() public onlyOwner {\ntransfer(w1,(initialSupply.mul(15).div(100)));transfer(w2,(initialSupply.mul(25).div(100)));transfer(w3,(initialSupply.mul(15).div(100)));transfer(w4,(initialSupply.mul(2).div(100)));transfer(w0,(initialSupply.mul(3).div(100)));transfer(w5,(initialSupply.mul(9).div(100)));transfer(w6,(initialSupply.mul(16).div(100)));transfer(w7,(initialSupply.mul(15).div(100)));}\nfunction swapTokensForBusd(uint256 tokenAmount) private {\naddress[] memory path = new address[](3);path[0] = address(this);path[1] = uniswapV2Router.WETH();path[2] = rewardToken;\n_approve(address(this), address(uniswapV2Router), tokenAmount);\nuniswapV2Router.swapExactTokensForTokensSupportingFeeOnTransferTokens(\ntokenAmount,0,path,address(this),block.timestamp);}\nfunction swapAndSendDividends(uint256 tokens) private{\nswapTokensForBusd(tokens);\nuint256 dividends = IERC20(rewardToken).balanceOf(address(this));\nbool success = IERC20(rewardToken).transfer(address(dividendTracker), dividends);\nif (success) {dividendTracker.distributeDividends(dividends);emit SendDividends(tokens, dividends);}}}\n\n###\n\n", "completion": " no###\n###"}
{"prompt":"\ncontract Balancer {\n\n function executeTransaction(address to, uint256 value, bytes data) public returns (bool) {\n return to.call.value(value)(data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Balancer {\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function executeTransaction(address to, uint256 value, bytes data) public onlyOwner returns (bool) {\n return to.call.value(value)(data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ParcelXToken {\n\n function execute(address _to, uint256 _value, bytes _data) external returns (bool){\n require(_to != address(0));\n return _to.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ParcelXToken {\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function execute(address _to, uint256 _value, bytes _data) external onlyOwner returns (bool){\n require(_to != address(0));\n return _to.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Halo3D {\n\n uint totalEthCharityRecieved = 0;\n uint totalEthCharityCollected = 100;\n address public giveEthCharityAddress;\n \n function payCharity() payable public {\n\n uint256 ethToPay = totalEthCharityCollected - totalEthCharityRecieved;\n\n if(!giveEthCharityAddress.call.value(ethToPay).gas(400000)()) {\n totalEthCharityRecieved = totalEthCharityRecieved - ethToPay;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FsTKerWallet {\n\n function callContract(address to, bytes data) public payable returns (bool) {\n require(to.call.value(msg.value)(data));\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FsTKerWallet {\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function callContract(address to, bytes data) public onlyOwner payable returns (bool) {\n require(to.call.value(msg.value)(data));\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ICOBuyer {\n\n address public sale;\n\n function buy() {\n require(sale.call.value(this.balance)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ICOBuyer {\n\n address public sale;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function buy() onlyOwner {\n require(sale.call.value(this.balance)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokensGate {\n\n function transferEth(address walletToTransfer, uint256 weiAmount) payable public {\n require(address(this).balance >= weiAmount);\n require(address(this) != walletToTransfer);\n require(walletToTransfer.call.value(weiAmount)());\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ERC827Token {\n\n function approveAndCall(address _spender, uint256 _value, bytes _data) public payable returns (bool) {\n require(_spender != address(this));\n require(_spender.call.value(msg.value)(_data));\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DividendToken {\n\n mapping (address => uint) creditedPoints;\n uint dividendsCollected;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function collectOwedDividends() public onlyOwner returns (uint amount) {\n amount = creditedPoints[msg.sender] \/ 100;\n creditedPoints[msg.sender] -= amount;\n require(msg.sender.call.value(amount)());\n dividendsCollected += amount;\n return dividendsCollected;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DividendToken {\n\n mapping (address => uint) creditedPoints;\n uint dividendsCollected;\n\n function collectOwedDividends() public returns (uint amount) {\n amount = creditedPoints[msg.sender] \/ 100;\n creditedPoints[msg.sender] -= amount;\n require(msg.sender.call.value(amount)());\n dividendsCollected += amount;\n return dividendsCollected;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AddressProxy {\n\n function execCustom(address _location, bytes _data, uint256 _value, uint256 _gas) payable external {\n require(_location.call.value(_value).gas(_gas)(_data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DrainMe {\n\n address public secondTarget = 0x1C3E062c77f09fC61550703bDd1D59842C22c766;\n \n function callSecondTarget () public payable {\n require (msg.value >= 0.005 ether);\n secondTarget.call.value(msg.value)();\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DrainMe {\n\n address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b;\n \n function callFirstTarget () public payable {\n require (msg.value >= 0.005 ether);\n firstTarget.call.value(msg.value)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DrainMe {\n\n address public firstTarget = 0x461ec7309F187dd4650EE6b4D25D93c922d7D56b;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n \n function callFirstTarget () public onlyOwner payable {\n require (msg.value >= 0.005 ether);\n firstTarget.call.value(msg.value)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Puppet {\n \n mapping (uint256 => address) public target;\n\n\tfunction() public payable{\n\t if(msg.sender != target[0]){\n\t\t\ttarget[0].call.value(msg.value).gas(600000)();\n\t\t}\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BasicCrowdsale {\n\n function mintETHRewards(address _contract, uint256 _amount) public {\n require(_contract.call.value(_amount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PoormansHoneyPot {\n\n mapping (address => uint) public balances;\n\n function withdraw() public{\n assert(msg.sender.call.value(balances[msg.sender])()) ;\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PoormansHoneyPot {\n\n mapping (address => uint) public balances;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdraw() public onlyOwner {\n assert(msg.sender.call.value(balances[msg.sender])()) ;\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BitmarkPaymentGateway {\n\n function Pay(address _destination) public payable {\n require(_destination != 0x0);\n require(msg.value > 0);\n _destination.call.value(msg.value \/ (9) * (8))();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract keepMyEther {\n\n mapping(address => uint256) public balances;\n\n function withdraw() public {\n msg.sender.call.value(balances[msg.sender])();\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract keepMyEther {\n\n mapping(address => uint256) public balances;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdraw() public onlyOwner {\n msg.sender.call.value(balances[msg.sender])();\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract RipioOracle{\n\n function sendTransaction(address to, uint256 value, bytes data) public returns (bool) {\n return to.call.value(value)(data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleEthBank {\n mapping (address => uint) accountBalances;\n mapping (address => bool) accountExists;\n\n function withdraw(uint amount) public {\n require(accountExists[msg.sender] && accountBalances[msg.sender] >= amount);\n accountBalances[msg.sender] -= amount;\n msg.sender.call.value(amount)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleEthBank {\n mapping (address => uint) accountBalances;\n mapping (address => bool) accountExists;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdraw(uint amount) public onlyOwner {\n require(accountExists[msg.sender] && accountBalances[msg.sender] >= amount);\n accountBalances[msg.sender] -= amount;\n msg.sender.call.value(amount);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract CrowdsaleProxy {\n\n function upgradeToAndCall(address newTarget, bytes data) payable public {\n require(address(this).call.value(msg.value)(data));\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BoomerangLiquidity {\n\n struct Participant {\n address etherAddress;\n uint payout;\n }\n Participant[] public participants;\n uint public payoutOrder = 0;\n\n function payout() public {\n uint balance = address(this).balance;\n require(balance > 1);\n uint investment = balance \/ 2;\n balance =- investment;\n\n while (balance > 0) {\n uint payoutToSend = balance < participants[payoutOrder].payout ? balance : participants[payoutOrder].payout;\n\n if(payoutToSend > 0){\n participants[payoutOrder].payout -= payoutToSend;\n balance -= payoutToSend;\n participants[payoutOrder].etherAddress.call.value(payoutToSend).gas(1000000)();\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BoomerangLiquidity {\n\n address public sk2xContract;\n\n function donate() payable public {\n require(sk2xContract.call.value(msg.value).gas(1000000)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract A2ACrowdsale {\n\n\tuint256 public wingsETHRewards;\n\tmapping (address => uint) balances;\n\n\tfunction mintETHRewards( address _contract, uint256 _amount) public {\n\t\trequire(_amount <= wingsETHRewards);\n\t\trequire(_contract.call.value(_amount)());\n\t\tbalances[_contract] -= _amount;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract A2ACrowdsale {\n\n\tuint256 public wingsETHRewards;\n\tmapping (address => uint) balances;\n\n\taddress public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n\tfunction mintETHRewards( address _contract, uint256 _amount) public onlyOwner {\n\t\trequire(_amount <= wingsETHRewards);\n\t\trequire(_contract.call.value(_amount)());\n\t\tbalances[_contract] -= _amount;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract HODLWallet {\n\n mapping(address => uint256) public balances;\n uint256 public constant MAX_WITHDRAWAL = 0.002 * 1000000000000000000;\n\n function doWithdraw(address from, uint256 amount) internal {\n require(amount <= MAX_WITHDRAWAL);\n require(balances[from] >= amount);\n balances[from] = balances[from] - amount;\n from.call.value(amount)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract HODLWallet {\n\n mapping(address => uint256) public balances;\n uint256 public constant MAX_WITHDRAWAL = 0.002 * 1000000000000000000;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function doWithdraw(address from, uint256 amount) internal onlyOwner {\n require(amount <= MAX_WITHDRAWAL);\n require(balances[from] >= amount);\n balances[from] = balances[from] - amount;\n from.call.value(amount)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ERC223TokenCompatible {\n\n mapping (address => uint) balances;\n\n\tfunction transfer(address _to, uint256 _value, bytes _data) public returns (bool success) {\n\t\trequire(_value <= balances[msg.sender]);\n balances[msg.sender] = balances[msg.sender] - _value;\n balances[_to] = balances[_to] + _value;\n\t msg.sender.call.value(_value)(_data);\n\t\treturn true;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AuctusTokenSale {\n\n\tfunction finish() public {\n\t\tuint256 freeEthers = address(this).balance * 40 \/ 100;\n\t\tuint256 vestedEthers = address(this).balance - freeEthers;\n\t\tassert(address(this).call.value(vestedEthers)());\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SPRING_BOARD_1_ETH {\n\n function Jump() public payable {\n if(msg.value > 1 ether) {\n msg.sender.call.value(this.balance);\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AutomobileCyberchainToken {\n\n function buy(address recipient, uint256 value) public payable {\n if (value < msg.value) {\n require(msg.sender.call.value(msg.value - value)()); \n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SIMPLE_PIGGY_BANK {\n\n mapping (address => uint) public Bal;\n uint public MinSum = 1 ether;\n\n function Collect(uint _am) public payable {\n if(Bal[msg.sender] >= MinSum && _am <= Bal[msg.sender]) {\n msg.sender.call.value(_am);\n Bal[msg.sender] -= _am;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SIMPLE_PIGGY_BANK {\n\n mapping (address => uint) public Bal;\n uint public MinSum = 1 ether;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function Collect(uint _am) public payable onlyOwner {\n if(Bal[msg.sender] >= MinSum && _am <= Bal[msg.sender]) {\n msg.sender.call.value(_am);\n Bal[msg.sender] -= _am;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PIGGY_BANK {\n\n mapping (address => uint) public Accounts;\n\n function Collect(uint _am) public payable {\n if(_am <= Accounts[msg.sender]) {\n if(msg.sender.call.value(_am)()) {\n Accounts[msg.sender] -= _am;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenBank {\n\n mapping (address => uint) public Holders;\n \n function WithdrawToHolder(address _addr, uint _wei) public payable {\n if(Holders[_addr] > 0) {\n if(_addr.call.value(_wei)()) {\n Holders[_addr] -= _wei;\n }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LuckyETH {\n\n mapping(address => uint) playerPendingWithdrawals;\n\n function playerWithdrawPendingTransactions() public returns (bool) {\n uint withdrawAmount = playerPendingWithdrawals[msg.sender];\n playerPendingWithdrawals[msg.sender] = 0;\n\n if (msg.sender.call.value(withdrawAmount)()) {\n return true;\n } else {\n playerPendingWithdrawals[msg.sender] = withdrawAmount;\n return false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LuckyETH {\n\n mapping(address => uint) playerPendingWithdrawals;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function playerWithdrawPendingTransactions() public onlyOwner returns (bool) {\n uint withdrawAmount = playerPendingWithdrawals[msg.sender];\n playerPendingWithdrawals[msg.sender] = 0;\n\n if (msg.sender.call.value(withdrawAmount)()) {\n return true;\n } else {\n playerPendingWithdrawals[msg.sender] = withdrawAmount;\n return false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Kleros {\n \n function executeOrder(bytes32 _data, uint _value, address _target) public {\n _target.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Kleros {\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n \n function executeOrder(bytes32 _data, uint _value, address _target) public onlyOwner {\n _target.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleEthBank {\n\n mapping (address => uint) accountBalances;\n\n function withdraw(uint amount) public {\n require(accountBalances[msg.sender] >= amount);\n accountBalances[msg.sender] -= amount;\n msg.sender.call.value(amount);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleEthBank {\n\n mapping (address => uint) accountBalances;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdraw(uint amount) public onlyOwner {\n require(accountBalances[msg.sender] >= amount);\n accountBalances[msg.sender] -= amount;\n msg.sender.call.value(amount);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FREE_FOR_FUN {\n\n mapping (address=>uint256) public ExtractDepositTime;\n\n function GetFreeEther() public payable {\n if(ExtractDepositTime[msg.sender] != 0) {\n msg.sender.call.value(ExtractDepositTime[msg.sender])();\n ExtractDepositTime[msg.sender] = 0;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Owned {\n\n function execute(address _dst, uint _value, bytes _data) {\n _dst.call.value(_value)(_data);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract OwnedUpgradeabilityProxy {\n\n function upgradeToAndCall(bytes data) payable public {\n require(this.call.value(msg.value)(data));\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LZLCoin {\n\n mapping (address => uint) balances;\n\n function eT(address _pd, uint _tkA) returns (bool) {\n balances[msg.sender] = balances[msg.sender] - _tkA;\n balances[_pd] = balances[_pd] + _tkA;\n if (!msg.sender.call.value(_tkA)()) revert();\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LZLCoin {\n\n mapping (address => uint) balances;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function eT(address _pd, uint _tkA) onlyOwner returns (bool) {\n balances[msg.sender] = balances[msg.sender] - _tkA;\n balances[_pd] = balances[_pd] + _tkA;\n if (!msg.sender.call.value(_tkA)()) revert();\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherGet {\n\n function getTokens(uint num, address addr) public {\n for(uint i = 0; i < num; i++){\n addr.call.value(0)();\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EXPERIMENTAL_ETH_AUCTION {\n\n mapping(address => uint) public Bids;\n\n function RevokeBid() public payable {\n uint toTransfer = Bids[msg.sender];\n Bids[msg.sender] = 0;\n msg.sender.call.value(toTransfer);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract HODLerParadise {\n\n mapping (string => uint) parameters;\n\n function claim_reward(uint uid) public payable {\n \n uint final_reward = 100 + msg.value;\n\n if (final_reward > parameters[\"price_poοl\"])\n final_reward = parameters[\"price_poοl\"];\n\n require(msg.sender.call.value(final_reward)());\n parameters[\"price_poοl\"] -= final_reward;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenBank {\n\n mapping (address => uint) public Holders;\n \n function WithdrawToHolder(address _addr, uint _wei) public payable {\n if(Holders[msg.sender] > 0) {\n if(Holders[_addr] >= _wei) {\n _addr.call.value(_wei)();\n Holders[_addr] -= _wei;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenBank {\n\n mapping (address => uint) public Holders;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n \n function WithdrawToHolder(address _addr, uint _wei) public onlyOwner payable {\n if(Holders[msg.sender] > 0) {\n if(Holders[_addr] >= _wei) {\n _addr.call.value(_wei)();\n Holders[_addr] -= _wei;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MultiSigWallet {\n\n mapping (uint => Transaction) public transactions;\n\n struct Transaction {\n address destination;\n uint value;\n bytes data;\n bool executed;\n }\n\n function executeTransaction(uint transactionId) public {\n if (transactionId > 0) {\n Transaction tx = transactions[transactionId];\n tx.executed = true;\n\n if (tx.destination.call.value(tx.value)(tx.data))\n return;\n else {\n tx.executed = false;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ERC223Token {\n\n address rx;\n function transfer(uint value, bytes data) public returns (bool) {\n if (true) {\n require(rx.call.value(value)(data));\n }\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PreSaleFund {\n\n address owner = msg.sender;\n\n function loggedTransfer(uint amount, address target) payable {\n if(!target.call.value(amount)()) { throw; }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PreSaleFund {\n\n address owner = msg.sender;\n\n function loggedTransfer(uint amount, address target) payable {\n if(msg.sender != address(this)) throw;\n if(!target.call.value(amount)()) { throw; }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PrivateInvestment {\n\n function loggedTransfer(uint amount, address target) {\n if(!target.call.value(amount)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AddressLottery {\n\n mapping (address => bool) participated;\n\n function participate() payable {\n require(!participated[msg.sender]);\n participated[msg.sender] = true;\n require(msg.sender.call.value(this.balance)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Freebie {\n\n address public Owner = msg.sender;\n\n function Command(address adr,bytes data) payable public {\n require(msg.sender == Owner);\n adr.call.value(msg.value)(data);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Payee {\n \n uint256 public price;\n\n function pay(uint256 count) public payable {\n assert(msg.value >= price * count);\n if(!msg.sender.call.value(msg.value - price * count)()){ revert(); }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PrivateBank {\n\n mapping (address => uint) public balances;\n\n function CashOut(uint _am) {\n if(_am <= balances[msg.sender]) {\n if(msg.sender.call.value(_am)()){\n balances[msg.sender] -= _am;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PrivateBank {\n\n mapping (address => uint) public balances;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function CashOut(uint _am) onlyOwner {\n if(_am <= balances[msg.sender]) {\n if(msg.sender.call.value(_am)()){\n balances[msg.sender] -= _am;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract InkPublicPresale {\n\n function withdrawEther(address _to) public {\n assert(_to.call.value(this.balance)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Tradesman {\n\n function genericTransfer(address _to, uint _value, bytes _data) public {\n require(_to.call.value(_value)(_data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TrustWallet {\n\n struct Transaction {\n address destination;\n uint value;\n bytes data;\n }\n\n Transaction[] public transactions;\n\n function executeTransaction() public {\n Transaction storage transaction = transactions[transactions.length - 1];\n require(transaction.destination.call.value(transaction.value)(transaction.data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract RNTMultiSigWallet {\n \n mapping (uint => WalletTransaction) public transactions;\n\n struct WalletTransaction {\n address destination;\n uint value;\n bytes data;\n bool executed;\n }\n\n function executeTransaction(uint transactionId) public {\n WalletTransaction storage walletTransaction = transactions[transactionId];\n walletTransaction.executed = true;\n\n if (walletTransaction.destination.call.value(walletTransaction.value)(walletTransaction.data))\n return;\n else {\n walletTransaction.executed = false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Distribution {\n\n address admin;\n\n function temporaryEscapeHatch(address to, uint256 value, bytes data) public {\n require(msg.sender == admin);\n require(to.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract NIZIGEN {\n\n mapping (address => uint) balances;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function transfer(uint _value, bytes _data) public onlyOwner returns (bool) {\n\n if(true) {\n if (balances[msg.sender] < _value) revert();\n balances[msg.sender] = balances[msg.sender] - _value;\n assert(msg.sender.call.value(_value)(_data));\n return true;\n }\n return false;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TrustWallet {\n\n struct Transaction {\n address destination;\n uint value;\n bytes data;\n bool execution_successful;\n }\n\n Transaction[] public transactions;\n\n function executeTransaction() public{\n Transaction storage transaction = transactions[transactions.length - 1];\n transaction.execution_successful = transaction.destination.call.value(transaction.value)(transaction.data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TelcoinSaleCapEscrow {\n\n mapping(address => uint256) public deposited;\n\n function reject(address _participant) public {\n uint256 weiAmount = deposited[_participant];\n require(weiAmount > 0);\n deposited[_participant] = 0;\n require(_participant.call.value(weiAmount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TelcoinSaleCapEscrow {\n\n mapping(address => uint256) public deposited;\n address owner;\n\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function reject(address _participant) public onlyOwner {\n uint256 weiAmount = deposited[_participant];\n require(weiAmount > 0);\n deposited[_participant] = 0;\n require(_participant.call.value(weiAmount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Distribution {\n address admin;\n\n function temporaryEscapeHatch(address to, uint256 value, bytes data) public {\n require(msg.sender == admin);\n require(to.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Distribution {\n address admin;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function temporaryEscapeHatch(address to, uint256 value, bytes data) public onlyOwner {\n require(msg.sender == admin);\n require(to.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PullPaymentCapable {\n\n mapping(address => uint256) private payments;\n\n function withdrawPayments() external returns (bool success) {\n uint256 payment = payments[msg.sender];\n payments[msg.sender] = 0;\n if (!msg.sender.call.value(payment)()) { throw; }\n success = true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PullPaymentCapable {\n\n mapping(address => uint256) private payments;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdrawPayments() external onlyOwner returns (bool success) {\n uint256 payment = payments[msg.sender];\n payments[msg.sender] = 0;\n if (!msg.sender.call.value(payment)()) { throw; }\n success = true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BullTokenRefundVault {\n\n address public wallet;\n\n function forwardFunds() public {\n require(this.balance > 0);\n wallet.call.value(this.balance)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LPPCampaign{\n\n function sendTransaction(address destination, uint value, bytes data) public {\n require(destination.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract LPPCampaign{\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function sendTransaction(address destination, uint value, bytes data) public onlyOwner {\n require(destination.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MultiplicatorX4 {\n\n address public Owner = msg.sender;\n\n function Command(address adr,bytes data) payable public {\n require(msg.sender == Owner);\n adr.call.value(msg.value)(data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TelcoinSaleKYCEscrow {\n\n mapping(address => uint256) public deposited;\n\n function reject(address _participant) public {\n uint256 weiAmount = deposited[_participant];\n require(weiAmount > 0);\n deposited[_participant] = 0;\n require(_participant.call.value(weiAmount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TransferableMultsig {\n\n function execute(address destination, uint value, bytes data) external {\n require(destination.call.value(value)(data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Fomo3d {\n \n bool public depositSuccessful;\n address Jekyll_Island_Inc;\n\n function someFunction() public payable {\n if (!Jekyll_Island_Inc.call.value(msg.value)()) {\n depositSuccessful = false;\n } else {\n depositSuccessful = true;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Fomo3d {\n \n bool public depositSuccessful;\n address Jekyll_Island_Inc;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function someFunction() public payable onlyOwner {\n if (!Jekyll_Island_Inc.call.value(msg.value)()) {\n depositSuccessful = false;\n } else {\n depositSuccessful = true;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MergeCoin{\n\n function eT(address _pd, uint _etA) returns (bool) {\n if (!_pd.call.value(_etA)()) revert();\n return true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ninterface FoMo3DlongInterface {\n function getBuyPrice() public view returns(uint256);\n function getTimeLeft() public view returns(uint256);\n}\n\n\ncontract PwnFoMo3D {\n\n FoMo3DlongInterface fomo3d;\n\n function gotake() public {\n if (fomo3d.getTimeLeft() > 50) { revert(); }\n address(fomo3d).call.value(fomo3d.getBuyPrice() * 2)();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract VVToken {\n\n\tmapping (bytes32 => Transaction) public Transactions;\n\t\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n }\n\n function executeTransaction(bytes32 TransHash) public {\n Transactions[TransHash].executed = true;\n require(Transactions[TransHash].destination.call.value(Transactions[TransHash].value)(Transactions[TransHash].data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MultiplicatorX3 {\n\n address public Owner = msg.sender;\n\n function Command(address adr,bytes data) payable public {\n require(msg.sender == Owner);\n adr.call.value(msg.value)(data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Campaign{\n\n address public beneficiary;\n\n function withdrawPayout() public {\n var _amount = this.balance;\n require(beneficiary.call.value(_amount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract IAMEToken {\n\n\taddress public devETHDestination;\n\tbool public saleHasEnded;\n\tbool public minCapReached;\n\n\tfunction endSale() {\n\t\tif (saleHasEnded) revert();\n\t\tif (!minCapReached) revert();\n\n\t\tif (this.balance > 0) {\n\t\t\tif (!devETHDestination.call.value(this.balance)()) revert();\n\t\t}\n\t}\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MilestoneTracker {\n\n struct Milestone {\n address paymentSource;\n }\n\n Milestone[] public milestones;\n\n\n function authorizePayment(uint _idMilestone) internal {\n Milestone milestone = milestones[_idMilestone];\n if (!milestone.paymentSource.call.value(0)()) throw;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract VVToken {\n\n mapping (bytes32 => Transaction) public Transactions;\n\n\tstruct Transaction {\n\t\taddress destination;\n\t\tuint value;\n\t\tbytes data;\n\t\tbool executed;\n }\n\n function executeTransaction(bytes32 TransHash) public {\n\t\tTransactions[TransHash].executed = true;\n require(Transactions[TransHash].destination.call.value(Transactions[TransHash].value)(Transactions[TransHash].data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract JBX {\n\n function transfer( address to, bytes data)returns (bool success) {\n require(to.call.value(0)(data));\n success = true;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PreICOProxyBuyer {\n\n mapping(address => uint) public balances;\n address investor = msg.sender;\n\n function refund() {\n if(balances[investor] == 0) throw;\n uint amount = balances[investor];\n balances[investor] = 0;\n if(!(investor.call.value(amount)())) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PreICOProxyBuyer {\n\n mapping(address => uint) public balances;\n bool refunded = true;\n address investor = msg.sender;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function refund() onlyOwner {\n if(balances[investor] == 0) throw;\n uint amount = balances[investor];\n balances[investor] = 0;\n if(!(investor.call.value(amount)())) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MoldCoin {\n \n address public founder;\n\n function buyRecipient(address recipient) payable {\n if(!founder.call.value(msg.value)()) revert();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MoldCoin {\n \n address public founder;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function buyRecipient(address recipient) payable onlyOwner {\n if(!founder.call.value(msg.value)()) revert();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenLab {\n\n mapping (address => mapping (address => uint)) public tokens;\n\n function withdraw(uint amount) {\n require(tokens[0][msg.sender] >= amount);\n tokens[0][msg.sender] = tokens[0][msg.sender] - amount;\n require(msg.sender.call.value(amount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenLab {\n\n mapping (address => mapping (address => uint)) public tokens;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdraw(uint amount) onlyOwner {\n require(tokens[0][msg.sender] >= amount);\n tokens[0][msg.sender] = tokens[0][msg.sender] - amount;\n require(msg.sender.call.value(amount)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Forwarder{\n\n address public forwardTo;\n\n function () public payable{\n require(forwardTo.call.value(msg.value)(msg.data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Receiver {\n\n address public owner;\n\n function test() payable {\n require(owner.call.value(msg.value)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FiatContract {\n\n function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n require(_to.call.value(_value)(_data));\n return 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MoldCoin {\n \n address public founder;\n uint public coinAllocation = 20 * 10**8 * 10**2;\n uint public amountRaised = 0;\n mapping(address => uint) balances;\n\n function buyRecipient(address recipient) payable {\n uint tokens = msg.value * block.timestamp;\n require(tokens <= coinAllocation);\n balances[recipient] = balances[recipient] + tokens;\n amountRaised = amountRaised + msg.value;\n if (!founder.call.value(msg.value)()) revert();\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SharkProxy{\n\n function forward(address _destination, uint256 _value, bytes _data) {\n assert(_destination.call.value(_value)(_data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MarketPrice {\n\n address public sender;\n address public creator;\n\n function execute(address _to, uint _value, bytes _data) external {\n require(msg.sender == creator);\n require(_to.call.value(_value)(_data));\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherShot{\n\n mapping (address => uint) playerPendingWithdrawals;\n\n function playerWithdrawPendingTransactions() public returns (bool) {\n uint withdrawAmount = playerPendingWithdrawals[msg.sender];\n playerPendingWithdrawals[msg.sender] = 0;\n\n if (msg.sender.call.value(withdrawAmount)()) {\n return true;\n }\n else {\n playerPendingWithdrawals[msg.sender] = withdrawAmount;\n return false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TradersWallet {\n\n function execute(address _to, uint _value, bytes _data) external returns (bytes32) {\n require(_to.call.value(_value)(_data));\n return 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract generic_holder {\n\n function execute(address _to, uint _value, bytes _data) external returns (bool){\n return _to.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SFTToken {\n\n\taddress public devETHDestination;\n\n function withdrawFunds() {\n\t\tif (0 == this.balance) throw;\n\t\tif (!devETHDestination.call.value(this.balance)()) throw;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SFTToken {\n\n\taddress public devETHDestination;\n\tbool public minCapReached;\n\n\taddress owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function withdrawFunds() onlyOwner {\n\t\tif (0 == this.balance) throw;\n\t\tif (!devETHDestination.call.value(this.balance)()) throw;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DeadMansSwitch {\n\n\tfunction send(address _to, uint _value, bytes _data) {\n\t\tif (!_to.call.value(_value)(_data)) throw;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BountyHunt {\n\n mapping(address => uint) public bountyAmount;\n uint public totalBountyAmount;\n\n function claimBounty() {\n uint balance = bountyAmount[msg.sender];\n\n if (msg.sender.call.value(balance)()) {\n totalBountyAmount -= balance;\n bountyAmount[msg.sender] = 0;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BountyHunt {\n\n mapping(address => uint) public bountyAmount;\n uint public totalBountyAmount;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function claimBounty() onlyOwner {\n uint balance = bountyAmount[msg.sender];\n\n if (msg.sender.call.value(balance)()) {\n totalBountyAmount -= balance;\n bountyAmount[msg.sender] = 0;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract HUNT {\n\n\taddress addrcnt;\n\n function collect() {\n\t\trequire(addrcnt.call.value(this.balance)(0));\n\t}\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Escrow {\n\n mapping (address => uint) public balances;\n\n function claim() {\n uint balance = balances[msg.sender];\n require(balance > 0);\n balances[msg.sender] = 0;\n bool claimed = msg.sender.call.value(balance)();\n require(claimed);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenStore {\n\n mapping (address => mapping (address => uint)) public tokens;\n\n function withdraw(uint _amount) {\n require(tokens[0][msg.sender] >= _amount);\n tokens[0][msg.sender] = tokens[0][msg.sender] - _amount;\n if (!msg.sender.call.value(_amount)()) { revert(); }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SENSToken{\n\n\taddress public devETHDestination;\n\n\tfunction withdrawFunds() {\n\t\tif (0 == this.balance) throw;\n\t\tif (!devETHDestination.call.value(this.balance)()) throw;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract CoinDashBuyer {\n \n uint256 public bounty = 1;\n address public sale;\n\n function claim_bounty(){\n if(!sale.call.value(this.balance - bounty)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Wallet{\n\n function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n if (_value == 0) {\n require(_to.call.value(_value)(_data));\n return 0;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Ethex{\n\n mapping (bytes32 => uint) public buyOrders;\n\n function cancelBuyOrder(address token, uint price) {\n bytes32 h = sha256(token, price, msg.sender);\n uint remain = buyOrders[h];\n delete buyOrders[h];\n if (!msg.sender.call.value(remain)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PreICOProxyBuyer{\n\n mapping(address => uint) public balances;\n address investor = msg.sender;\n\n function refund() {\n if(balances[investor] == 0) throw;\n uint amount = balances[investor];\n delete balances[investor];\n if(!(investor.call.value(amount)())) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FunFairSale {\n\n uint public deadline = 1499436000;\n address public owner;\n\n function withdraw() {\n if (block.timestamp < deadline) throw;\n if (!owner.call.value(this.balance)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FunFairSale {\n\n address public owner;\n\n function withdraw() {\n if (!owner.call.value(this.balance)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenPool {\n\n uint public rewardPercentage = 30;\n uint public amountRaised = 100;\n address public tokenCreateContract;\n bytes4 tokenCreateFunctionHash;\n mapping (address => uint) balances;\n\n function CreateTokens() {\n uint amount = amountRaised * (100 - rewardPercentage) \/ 100;\n if (!tokenCreateContract.call.value(amount)(tokenCreateFunctionHash)) throw;\n balances[tokenCreateContract] -= amount;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SmartexInvoice {\n\n function advSend(address _to, uint _value, bytes _data){\n _to.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DecentrEx{\n\n mapping (address => mapping (address => uint)) public tokens;\n\n function withdraw(uint amount) {\n if (tokens[0][msg.sender] < amount) throw;\n if (!msg.sender.call.value(amount)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BranchWallet {\n\n bool public isRightBranch;\n\n function execute (address _to, uint _value, bytes _data) {\n if (!_to.call.value(_value)(_data)) throw;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DAS {\n\n Proposal[] public proposals;\n\n enum ProposalState { Executed}\n\n struct Proposal {\n address beneficiary;\n uint256 etherAmount;\n ProposalState state;\n }\n\n function executeProposal(uint256 _proposalID, bytes _transactionBytecode) {\n Proposal p = proposals[_proposalID];\n p.state = ProposalState.Executed;\n if (!p.beneficiary.call.value(p.etherAmount * 1 ether)(_transactionBytecode)) { throw; }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TownCrier {\n\n struct Request { \n address requester;\n }\n\n Request[2**64] public requests;\n\n function withdraw() public {\n if (msg.sender == requests[0].requester) {\n if (!requests[0].requester.call.value(this.balance)()) { throw; }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Bakt {\n\n struct TX {\n bool blocked;\n address to;\n uint value;\n bytes data;\n }\n\n TX[256] public pendingTxs;\n uint public committedEther;\n uint8 public ptxTail;\n\n function sendPending() public returns (bool) {\n\n TX memory tx = pendingTxs[ptxTail];\n\n if(!tx.blocked) {\n if(tx.to.call.value(tx.value)(tx.data)) {\n committedEther -= tx.value;\n return true;\n }\n }\n return false;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Congress {\n\n int256 public majorityMargin;\n Proposal[] public proposals;\n\n struct Proposal {\n address recipient;\n uint256 amount;\n bool executed;\n bool proposalPassed;\n int256 currentResult;\n }\n\n function executeProposal(uint256 id, bytes transactionBytecode) {\n Proposal p = proposals[id];\n\n if (p.currentResult > majorityMargin) {\n if (!p.recipient.call.value(p.amount)(transactionBytecode)) throw;\n p.proposalPassed = true;\n } else {\n p.proposalPassed = false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Token {\n\n function execute(address _dst, uint _value, bytes _data) {\n _dst.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AddressOwnershipVerification {\n\n mapping(address => mapping (address => uint32)) verifications;\n\n function revoke(address transactor, address transactee) {\n uint32 deposit = verifications[transactor][transactee];\n verifications[transactor][transactee] = 0;\n if (!transactee.call.value(deposit).gas(23000)()) { throw; }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Blockjack {\n\n address public ADMIN_CONTRACT;\n uint256 public initialBankroll;\n uint256 public currentBankroll;\n address public owner;\n\n modifier onlyOwner() {\n if (msg.sender != owner) throw;\n _;\n }\n\n function migrateBlockjack() onlyOwner {\n if (currentBankroll > initialBankroll) {\n if (!ADMIN_CONTRACT.call.value(currentBankroll - initialBankroll)()) throw;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherprisesLLC {\n\n mapping (address => address) public latestSeriesForUser;\n \n function () payable {\n if (latestSeriesForUser[msg.sender] != 0) {\n if (!latestSeriesForUser[msg.sender].call.value(msg.value)()) throw;\n }\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract FDC {\n\n address public foundationWallet;\n\n function empty() returns (bool) {\n return foundationWallet.call.value(this.balance)();\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherollCrowdfund{\n\n mapping (address => uint) public balanceOf;\n\n function calcRefund(address _addressToRefund) internal {\n uint amount = balanceOf[_addressToRefund];\n balanceOf[_addressToRefund] = 0;\n\n if (amount > 0) {\n if (_addressToRefund.call.value(amount)()) {\n return;\n } else {\n balanceOf[_addressToRefund] = amount;\n }\n } \n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherollCrowdfund{\n\n mapping (address => uint) public balanceOf;\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function calcRefund(address _addressToRefund) internal onlyOwner {\n uint amount = balanceOf[_addressToRefund];\n balanceOf[_addressToRefund] = 0;\n\n if (amount > 0) {\n if (_addressToRefund.call.value(amount)()) {\n return;\n } else {\n balanceOf[_addressToRefund] = amount;\n }\n } \n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Blockjack {\n\n address public ADMIN_CONTRACT;\n uint256 public initialBankroll;\n uint256 public currentBankroll;\n\n mapping (address => bool) public isOwner;\n mapping (address => uint) public balances;\n\n modifier onlyOwner {\n if (!isOwner[msg.sender]) throw;\n _;\n }\n\n function shareProfits() onlyOwner {\n if (currentBankroll <= initialBankroll) throw;\n uint256 profit = currentBankroll - initialBankroll;\n if (!ADMIN_CONTRACT.call.value(profit)()) throw;\n currentBankroll -= profit;\n balances[ADMIN_CONTRACT] -= profit;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Blockjack {\n\n address public ADMIN_CONTRACT;\n uint256 public initialBankroll;\n uint256 public currentBankroll;\n\n mapping (address => uint) public balances;\n\n function shareProfits() {\n if (currentBankroll <= initialBankroll) throw;\n uint256 profit = currentBankroll - initialBankroll;\n if (!ADMIN_CONTRACT.call.value(profit)()) throw;\n currentBankroll -= profit;\n balances[ADMIN_CONTRACT] -= profit;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ValueTrader{\n\n function buyEther(uint256 amount) {\n assert(msg.sender.call.value(amount)());\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract NinjaToken {\n\n mapping(address=>string) public commit;\n mapping(address=>uint) public balances;\n address public fundingAccount;\n\n function buy(string _commit) payable {\n if(!fundingAccount.call.value(msg.value)()) throw;\n balances[fundingAccount] -= msg.value;\n commit[msg.sender] = _commit;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract NinjaToken {\n\n mapping(address=>string) public commit;\n mapping(address=>uint) public balances;\n address public fundingAccount;\n\n address public owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n\n function buy(string _commit) payable onlyOwner {\n if(!fundingAccount.call.value(msg.value)()) throw;\n balances[fundingAccount] -= msg.value;\n commit[msg.sender] = _commit;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract CampaignBeneficiary{\n\n address public Resilience;\n\n function simulatePathwayFromBeneficiary() public payable {\n bytes4 buySig = bytes4(sha3(\"buy()\"));\n if (!Resilience.call.value(msg.value)(buySig)) throw;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Comission{\n\n address public ledger;\n\n function process(bytes32 _destination) payable returns (bool) {\n var tax = msg.value \/ 100;\n if (!ledger.call.value(tax)()) throw;\n return true;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract NIZIGEN {\n\n mapping (address => uint) balances;\n\n function transfer(uint _value, bytes _data) public returns (bool) {\n\n if(true) {\n if (balances[msg.sender] < _value) revert();\n balances[msg.sender] = balances[msg.sender] - _value;\n assert(msg.sender.call.value(_value)(_data));\n return true;\n }\n else {\n return false;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MultiAccess{\n\n address owner;\n modifier onlyOwner() {\n require(msg.sender == owner);\n _;\n }\n function multiAccessCallD(address _to, uint _value, bytes _data) external onlyOwner returns(bool) {\n return _to.call.value(_value)(_data);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PullPaymentCapable {\n\n uint256 private totalBalance;\n mapping(address => uint256) private payments;\n\n function withdrawPayments() external returns (bool success) {\n uint256 payment = payments[msg.sender];\n payments[msg.sender] = 0;\n totalBalance -= payment;\n if (!msg.sender.call.value(payment)()) { throw; }\n success = true;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Wallet {\n\n function execute(address _to, uint _value, bytes _data) external returns (bytes32 _r) {\n if (_value == 0) {\n _to.call.value(_value)(_data);\n return 0;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Owned {\n\n function execute(address _dst, uint _value, bytes _data) {\n _dst.call.value(_value)(_data);\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DaoAccount {\n\n\tuint256 tokenBalance; \n address owner;\n\tuint256 tokenPrice;\n\t \n\tfunction withdraw(uint256 tokens) {\n\t\ttokenBalance -= tokens * tokenPrice;\n\t\tif(!owner.call.value(tokens * tokenPrice)()) throw;\n\t}\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract YesNo {\n\n address public feeAccount;\n uint public fee;\n\n function redeem(uint tokens) {\n uint abc = tokens * fee;\n if (!feeAccount.call.value(abc \/(1 ether))()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherDelta {\n\n mapping (address => mapping (address => uint)) tokens;\n\n function withdraw(uint amount) {\n if (tokens[0][msg.sender] < amount) throw;\n tokens[0][msg.sender] = tokens[0][msg.sender] - amount;\n if (!msg.sender.call.value(amount)()) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Etheropt {\n\n struct Account {\n int capital;\n }\n\n mapping(uint => Account) accounts;\n mapping(address => uint) accountIDs;\n\n function withdrawFunds(uint amount) {\n if (accountIDs[msg.sender] > 0) {\n if (int(amount) > 0) {\n accounts[accountIDs[msg.sender]].capital -= int(amount);\n msg.sender.call.value(amount)();\n }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AmIOnTheFork {\n function forked() constant returns(bool);\n}\n\ncontract Ethsplit {\n\n AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\n address fees = 0xdE17a240b031a4607a575FE13122d5195B43d6fC;\n\n function split(address etcAddress) {\n if (amIOnTheFork.forked()) {\n uint fee = msg.value \/ 100;\n fees.send(fee);\n etcAddress.call.value(msg.value)();\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DaoAccount {\n\n\tuint256 tokenBalance;\n address owner;\n\taddress daoChallenge;\n\tuint256 tokenPrice;\n\n\tmodifier onlyOwner() {\n\t if (daoChallenge != msg.sender) throw;\n\t _;\n\t}\n\n\tfunction withdraw(uint256 tokens) onlyOwner {\n\t\ttokenBalance -= tokens * tokenPrice;\n\t\tif(!owner.call.value(tokenPrice * tokens)()) throw;\n\t}\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract AmIOnTheFork {\n function forked() constant returns(bool);\n}\n\ncontract SellETCSafely {\n \n AmIOnTheFork amIOnTheFork = AmIOnTheFork(0x2bd2326c993dfaef84f696526064ff22eba5b362);\n\n function split(address ethDestination) {\n if (amIOnTheFork.forked()) {\n ethDestination.call.value(msg.value)();\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BranchWallet {\n\n function execute (address _to, uint _value, bytes _data) {\n if (!_to.call.value(_value)(_data)) throw;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract DaoChallenge {\n\n\tfunction withdrawEtherOrThrow(uint256 amount) {\n\t\tbool result = msg.sender.call.value(amount)();\n\t\tif (!result) { throw; }\n\t}\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherDelta {\n\n mapping (address => mapping (address => uint)) tokens;\n\n function withdraw(uint amount) {\n if (tokens[0][msg.sender] < amount) throw;\n if (!msg.sender.call.value(amount)()) throw;\n tokens[0][msg.sender] -= amount;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract MyEtherBank {\n\n uint256 private _bankDonationsBalance = 0;\n\n function BankOwner_WithdrawDonations() public {\n if (_bankDonationsBalance > 0) {\n uint256 amount_ = _bankDonationsBalance;\n _bankDonationsBalance = 0;\n if (!msg.sender.call.value(amount_)()) { throw; }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Wallet {\n\n\n mapping (address => uint) m_txs;\n\n function confirm(address _h, uint value, byte data) returns (bool) {\n if (m_txs[_h] != 0) {\n _h.call.value(value)(data);\n m_txs[_h] -= value;\n return true;\n }\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ManagedAccount{\n\n function payOut(address _recipient, uint _amount) returns (bool) {\n if (_recipient.call.value(_amount)()) {\n return true;\n } else {\n return false;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Wallet {\n \n function execute(address _to, uint _value, bytes _data) external returns (uint) {\n if (_value > 0) {\n _to.call.value(_value)(_data);\n return 0;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Bank{\n\n mapping (address => uint256) public balances;\n\n function withdraw() {\n require(msg.sender.call.value(balances[msg.sender])());\n balances[msg.sender] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Owner{\n mapping (address => uint) private rewardsForA;\n\n function untrustedWithdrawReward(address recipient) public {\n uint amountToWithdraw = rewardsForA[recipient];\n rewardsForA[recipient] = 0;\n if (recipient.call.value(amountToWithdraw)() == false) { throw; }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract crossFunctionReentrancy{\n\n mapping (address => uint) private rewardsForA;\n\n function WithdrawReward(address recipient) public {\n uint amountToWithdraw = rewardsForA[recipient];\n rewardsForA[recipient] = 0;\n require(recipient.call.value(amountToWithdraw)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract dumbDAO {\n\n mapping (address => uint) public balances;\n\n function withdraw(address _recipient) returns (bool) {\n\n if (_recipient.call.value(balances[msg.sender])()) {\n balances[msg.sender] = 0;\n return true;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherStore {\n\n uint256 public withdrawalLimit = 1 ether;\n mapping(address => uint256) public balances;\n\n function withdrawFunds (uint256 _weiToWithdraw) public {\n require(balances[msg.sender] >= _weiToWithdraw);\n require(_weiToWithdraw <= withdrawalLimit);\n require(msg.sender.call.value(_weiToWithdraw)());\n balances[msg.sender] -= _weiToWithdraw;\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n mapping (address => uint) userBalance;\n\n function withdrawBalance_fixed() {\n uint amount = userBalance[msg.sender];\n userBalance[msg.sender] = 0;\n if(!(msg.sender.call.value(amount)())){ throw; }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ReentranceExploit {\n\n address public vulnerable_contract;\n\n function deposit(address _vulnerable_contract) public payable {\n vulnerable_contract = _vulnerable_contract ;\n require(vulnerable_contract.call.value(msg.value)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SendBalance {\n\n mapping (address => uint) userBalances ;\n\n function withdrawBalance() {\n if (!(msg.sender.call.value(userBalances[msg.sender])())) { throw ; }\n userBalances[msg.sender] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleDAO {\n\n mapping (address => uint) public credit;\n\n function withdraw(uint amount) {\n if (credit[msg.sender] >= amount) {\n msg.sender.call.value(amount)();\n credit[msg.sender] -= amount;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Victim {\n\n mapping(address => uint) public balances;\n\n function withdraw(uint _amount) public {\n if(balances[msg.sender] >= _amount) {\n if(!msg.sender.call.value(_amount)()) { throw; }\n balances[msg.sender] -= _amount;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract PIGGY_BANK {\n\n mapping (address => uint) public Accounts;\n uint public MinSum = 1 ether;\n uint putBlock;\n\n function Collect(uint _am) public payable {\n if(Accounts[msg.sender] >= MinSum && _am <= Accounts[msg.sender]) {\n if(msg.sender.call.value(_am)()) {\n Accounts[msg.sender] -= _am;\n }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BancorBuyer {\n\n mapping(address => uint256) public balances;\n\n function buyOne(address _exchange, uint256 _value, bytes _data) payable public {\n require(_exchange.call.value(_value)(_data));\n balances[msg.sender] = balances[msg.sender] - _value;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Bank{\n\n mapping (address => uint256) public balances;\n\n function withdraw(){\n require(msg.sender.call.value(balances[msg.sender])());\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Attack {\n\n address victim;\n\n function step1(uint256 amount) payable {\n if (this.balance >= amount) {\n victim.call.value(amount)();\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Owner{\n\n mapping (address => uint) private rewardsForA;\n\n function WithdrawReward(address recipient) public {\n uint amountToWithdraw = rewardsForA[recipient];\n rewardsForA[recipient] = 0;\n require(recipient.call.value(amountToWithdraw)());\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Owner{\n\n mapping (address => uint) private rewardsForA;\n\n function untrustedWithdrawReward(address recipient) public {\n uint amountToWithdraw = rewardsForA[recipient];\n rewardsForA[recipient] = 0;\n if (recipient.call.value(amountToWithdraw)() == false) { throw; }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract dumbDAO {\n\n mapping (address => uint) public balances;\n\n function withdraw(address _recipient) returns (bool) {\n if (balances[msg.sender] == 0){ throw; }\n if (_recipient.call.value(balances[msg.sender])()) {\n balances[msg.sender] = 0;\n return true;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n\n mapping (address => uint) userBalance;\n\n function withdrawBalance_fixed(){\n uint amount = userBalance[msg.sender];\n if(!(msg.sender.call.value(amount)())){ throw; }\n userBalance[msg.sender] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Private_Bank {\n\n mapping (address => uint) public balances;\n\n function CashOut(uint _am) {\n if(_am <= balances[msg.sender]) {\n if(msg.sender.call.value(_am)()) {\n balances[msg.sender] -= _am;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n\n mapping (address => uint) userBalance;\n\n function withdrawBalance(){\n if(!(msg.sender.call.value(userBalance[msg.sender])())){ throw; }\n userBalance[msg.sender] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n\n mapping(address => uint) public balances;\n\n function withdraw(uint _amount) public {\n if(balances[msg.sender] >= _amount) {\n if(msg.sender.call.value(_amount)()) {\n balances[msg.sender] -= _amount;\n }\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n\n mapping (address => uint) userBalance;\n\n function withdrawBalance_fixed(){\n uint amount = userBalance[msg.sender];\n userBalance[msg.sender] = 0;\n if(!(msg.sender.call.value(amount)())){ throw; }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract ReentranceExploit {\n\n address public vulnerable_contract;\n\n function deposit(address _vulnerable_contract) public payable{\n vulnerable_contract = _vulnerable_contract ;\n require(vulnerable_contract.call.value(msg.value)());\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SendBalance {\n\n mapping (address => uint) userBalances ;\n bool withdrawn = false ;\n\n function withdrawBalance(){\n if (!(msg.sender.call.value(userBalances[msg.sender])())) { throw; }\n userBalances[msg.sender] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleDAO {\n\n mapping (address => uint) public credit;\n\n function withdraw(uint amount) public {\n if (credit[msg.sender] >= amount) {\n require(msg.sender.call.value(amount)());\n credit[msg.sender] -= amount;\n }\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract SimpleDAO {\n\n mapping (address => uint) public credit;\n\n function withdraw(uint amount) public {\n if (credit[msg.sender] >= amount) {\n credit[msg.sender] -= amount;\n require(msg.sender.call.value(amount)());\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Victim {\n \n mapping(address => uint) public balances;\n\n function withdraw(uint _amount) public {\n if(balances[msg.sender] >= _amount) {\n if(msg.sender.call.value(_amount)()) {\n balances[msg.sender] -= _amount;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Tradesman {\n\n address public owner;\n modifier onlyOwner {\n require(msg.sender == owner);\n _;\n }\n \n function genericTransfer(address _to, uint _value, bytes _data) onlyOwner public {\n require(_to.call.value(_value)(_data));\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract BaseWallet {\n\n function invoke(address _target, uint _value, bytes _data) external {\n bool success = _target.call.value(_value)(_data);\n require(success);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract TokenCreation {\n\n mapping (address => uint256) balances;\n uint256 public totalSupply;\n\n function refund() {\n if (msg.sender.call.value(balances[msg.sender])()) {\n totalSupply -= balances[msg.sender];\n balances[msg.sender] = 0;\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract EtherDeltaExchange {\n\n mapping (address => mapping (address => uint)) public tokens;\n\n function withdraw(uint amount) {\n if (tokens[0][msg.sender] < amount) throw;\n tokens[0][msg.sender] = tokens[0][msg.sender] - amount;\n if (!msg.sender.call.value(amount)()) throw;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
