{"prompt":"\ncontract HoneyPot {\n mapping (address => uint) public balances;\n\n function get() {\n if (!msg.sender.call.value(balances[msg.sender])()) { throw; }\n balances[msg.sender] = 0;\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":" \ncontract MultiplicatorX3 {\n\n function Command(address adr, bytes data) payable public {\n adr.call.value(msg.value)(data);\n }\n}\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract NBUNIERC20 {\n\n mapping(address => uint256) private balances;\n\n function emergencyDrain24hAfterLiquidityGenerationEventIsDone() public {\n bool success = msg.sender.call.value(address(this).balance)();\n balances[msg.sender] = balances[address(this)];\n balances[address(this)] = 0;\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Private_Bank {\n\n mapping (address => uint) public balances;\n\n function CashOut(uint _am) {\n if(_am <= balances[msg.sender]) {\n if(msg.sender.call.value(_am)()){\n balances[msg.sender] -= _am;\n }\n }\n }\n}\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
{"prompt":"\ncontract Reentrance {\n mapping (address => uint) userBalance;\n\n function withdrawBalance(){\n if( !(msg.sender.call.value(userBalance[msg.sender])()) ){ throw; }\n userBalance[msg.sender] = 0;\n }\n}\n\n\n\n###\n\n","completion":" yes,Reentrancy###\n###"}
