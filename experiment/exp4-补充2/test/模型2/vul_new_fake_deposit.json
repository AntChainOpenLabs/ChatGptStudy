{"prompt": "// File: CC token.sol\n\npragma solidity ^0.4.16;\ncontract Token {\n\n /// @return total amount of tokens\n function totalSupply() constant returns (uint256 supply) {}\n\n /// @param _owner The address from which the balance will be retrieved\n /// @return The balance\n function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n /// @notice send `_value` token to `_to` from `msg.sender`\n /// @param _to The address of the recipient\n /// @param _value The amount of token to be transferred\n /// @return Whether the transfer was successful or not\n function transfer(address _to, uint256 _value) returns (bool success) {}\n\n /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n /// @param _from The address of the sender\n /// @param _to The address of the recipient\n /// @param _value The amount of token to be transferred\n /// @return Whether the transfer was successful or not\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n\n /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n /// @param _spender The address of the account able to transfer the tokens\n /// @param _value The amount of wei to be approved for transfer\n /// @return Whether the approval was successful or not\n function approve(address _spender, uint256 _value) returns (bool success) {}\n\n /// @param _owner The address of the account owning tokens\n /// @param _spender The address of the account able to transfer the tokens\n /// @return Amount of remaining tokens allowed to spent\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n \n}\n\n\n\ncontract StandardToken is Token {\n\n function transfer(address _to, uint256 _value) returns (bool success) {\n //Default assumes totalSupply can't be over max (2^256 - 1).\n //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n //Replace the if with this one instead.\n //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n if (balances[msg.sender] >= _value && _value > 0) {\n balances[msg.sender] -= _value;\n balances[_to] += _value;\n Transfer(msg.sender, _to, _value);\n return true;\n } else { return false; }\n }\n\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n //same as above. Replace this line with the following if you want to protect against wrapping uints.\n //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n balances[_to] += _value;\n balances[_from] -= _value;\n allowed[_from][msg.sender] -= _value;\n Transfer(_from, _to, _value);\n return true;\n } else { return false; }\n }\n\n function balanceOf(address _owner) constant returns (uint256 balance) {\n return balances[_owner];\n }\n\n function approve(address _spender, uint256 _value) returns (bool success) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n return true;\n }\n\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n return allowed[_owner][_spender];\n }\n\n mapping (address => uint256) balances;\n mapping (address => mapping (address => uint256)) allowed;\n uint256 public totalSupply;\n}\n\n\n//name this contract whatever you'd like\ncontract ERC20Token is StandardToken {\n\n function () {\n //if ether is sent to this address, send it back.\n throw;\n }\n\n \n\n \n string public name; //fancy name: eg Simon Bucks\n uint8 public decimals; //How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.\n string public symbol; //An identifier: eg SBX\n string public version = 'H1.0'; //human 0.1 standard. Just an arbitrary versioning scheme.\n\n//\n// CHANGE THESE VALUES FOR YOUR TOKEN\n//\n\n//make sure this function name matches the contract name above. So if you're token is called TutorialToken, make sure the //contract name above is also TutorialToken instead of ERC20Token\n\n function ERC20Token(\n ) {\n balances[msg.sender] = 100000000000; // Give the creator all initial tokens (100000 for example)\n totalSupply = 100000000000; // Update total supply (100000 for example)\n name = \"Codot token\"; // Set the name for display purposes\n decimals = 2; // Amount of decimals for display purposes\n symbol = \"CC\"; // Set the symbol for display purposes\n }\n\n \n function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n\n //call the receiveApproval function on the contract you want to be notified. This crafts the function signature manually so one doesn't have to include a contract in here just for this.\n //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n //it is assumed that when does this that the call *should* succeed, otherwise one would use vanilla approve instead.\n if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n return true;\n }\n}\n\n###\n\n", "completion": "yes,fake deposit###\n###"}
{"prompt": "pragma solidity ^0.4.18;\n//this project is non-profit work.\ncontract Token {\n function totalSupply() constant returns (uint256 supply) {}\n function balanceOf(address _owner) constant returns (uint256 balance) {}\n function transfer(address _to, uint256 _value) returns (bool success) {}\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {}\n function approve(address _spender, uint256 _value) returns (bool success) {}\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {}\n\n event Transfer(address indexed _from, address indexed _to, uint256 _value);\n event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n}\n\ncontract LJMcontract is Token {\n\n function transfer(address _to, uint256 _value) returns (bool success) {\n if (balances[msg.sender] >= _value && _value > 0) {\n balances[msg.sender] -= _value;\n balances[_to] += _value;\n Transfer(msg.sender, _to, _value);\n return true;\n } else { return false; }\n }\n\n function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n balances[_to] += _value;\n balances[_from] -= _value;\n allowed[_from][msg.sender] -= _value;\n Transfer(_from, _to, _value);\n return true;\n } else { return false; }\n }\n\n function balanceOf(address _owner) constant returns (uint256 balance) {\n return balances[_owner];\n }\n\n function approve(address _spender, uint256 _value) returns (bool success) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n return true;\n }\n\n function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n return allowed[_owner][_spender];\n }\n\n mapping (address => uint256) balances;\n mapping (address => mapping (address => uint256)) allowed;\n uint256 public totalSupply;\n}\n\ncontract LJM is LJMcontract {\n string public name; \n uint8 public decimals; \n string public symbol; \n string public version = 'H1.0'; \n uint256 public unitsOneEthCanBuy; \n uint256 public totalEthInWei; \n address public fundsWallet; \n\n function LJM() {\n balances[msg.sender] = 1000000000000; \n totalSupply = 1000000000000; \n name = \"President MYONG\"; \n decimals = 4; \n symbol = \"LJM\"; \n unitsOneEthCanBuy = 1000000; \n fundsWallet = msg.sender; \n }\n\n function() payable{\n totalEthInWei = totalEthInWei + msg.value;\n uint256 amount = msg.value * unitsOneEthCanBuy/1000000000000000000;\n require(balances[fundsWallet] >= amount);\n\n balances[fundsWallet] = balances[fundsWallet] - amount;\n balances[msg.sender] = balances[msg.sender] + amount;\n\n Transfer(fundsWallet, msg.sender, amount); \n\n fundsWallet.transfer(msg.value); \n }\n\n\n function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n\n if(!_spender.call(bytes4(bytes32(sha3(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) { throw; }\n return true;\n }\n}\n\n###\n\n", "completion": "yes,fake deposit###\n###"}
{"prompt": "pragma solidity >=0.4.22 <0.6.0;\n\ncontract ERC20 {\n function totalSupply() public view returns (uint supply);\n function balanceOf(address who) public view returns (uint value);\n function allowance(address owner, address spender) public view returns (uint remaining);\n function transferFrom(address from, address to, uint value) public returns (bool ok);\n function approve(address spender, uint value) public returns (bool ok);\n function transfer(address to, uint value) public returns (bool ok);\n event Transfer(address indexed from, address indexed to, uint value);\n event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract Clover is ERC20{\n uint8 public constant decimals = 18;\n uint256 initialSupply = 1000000000000000*10**uint256(decimals);\n string public constant name = \"Clover\";\n string public constant symbol = \"\ud83c\udf40\ud83c\udf40\ud83c\udf40\";\n\n address payable teamAddress;\n\n function totalSupply() public view returns (uint256) {\n return initialSupply;\n }\n mapping (address => uint256) balances;\n mapping (address => mapping (address => uint256)) allowed;\n \n function balanceOf(address owner) public view returns (uint256 balance) {\n return balances[owner];\n }\n function allowance(address owner, address spender) public view returns (uint remaining) {\n return allowed[owner][spender];\n }\n function transfer(address to, uint256 value) public returns (bool success) {\n if (balances[msg.sender] >= value && value > 0) {\n balances[msg.sender] -= value;\n balances[to] += value;\n emit Transfer(msg.sender, to, value);\n return true;\n } else {\n return false;\n }\n }\n function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n if (balances[from] >= value && allowed[from][msg.sender] >= value && value > 0) {\n balances[to] += value;\n balances[from] -= value;\n allowed[from][msg.sender] -= value;\n emit Transfer(from, to, value);\n return true;\n } else {\n return false;\n }\n }\n function approve(address spender, uint256 value) public returns (bool success) {\n allowed[msg.sender][spender] = value;\n emit Approval(msg.sender, spender, value);\n return true;\n }\n function () external payable {\n teamAddress.transfer(msg.value);\n }\n constructor () public payable {\n teamAddress = msg.sender;\n balances[teamAddress] = initialSupply;\n }\n}\n\n###\n\n", "completion": "yes,fake deposit###\n###"}
{"prompt": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.4.11;\n\n\nlibrary SafeMath {\n function mul(uint a, uint b) internal returns (uint) {\n uint c = a * b;\n assert(a == 0 || c / a == b);\n return c;\n }\n\n function div(uint a, uint b) internal returns (uint) {\n // assert(b > 0); // Solidity automatically throws when dividing by 0\n uint c = a / b;\n // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n return c;\n }\n\n function sub(uint a, uint b) internal returns (uint) {\n assert(b <= a);\n return a - b;\n }\n\n function add(uint a, uint b) internal returns (uint) {\n uint c = a + b;\n assert(c >= a);\n return c;\n }\n\n function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n return a >= b ? a : b;\n }\n\n function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n return a < b ? a : b;\n }\n\n function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n return a >= b ? a : b;\n }\n\n function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n return a < b ? a : b;\n }\n\n function assert(bool assertion) internal {\n if (!assertion) {\n throw;\n }\n }\n}\n\n\ncontract ERC20Basic {\n uint public totalSupply;\n function balanceOf(address _owner) constant returns (uint balance);\n function transfer(address _to, uint _value) returns (bool success);\n function transferFrom(address _from, address _to, uint _value) returns (bool success);\n}\n \n  \n \ncontract ERC20 is ERC20Basic {\n function approve(address _spender, uint _value) returns (bool success);\n function allowance(address _owner, address _spender) constant returns (uint remaining);\n event Transfer(address indexed _from, address indexed _to, uint _value);\n event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract StandardToken is ERC20 {\n using SafeMath for uint;\n\n function transfer(address _to, uint _value) returns (bool) {\n \n if (balances[msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n balances[msg.sender] -= _value;\n balances[_to] += _value;\n Transfer(msg.sender, _to, _value);\n return true;\n } else { return false; }\n }\n\n function transferFrom(address _from, address _to, uint _value) returns (bool) {\n if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n balances[_to] += _value;\n balances[_from] -= _value;\n allowed[_from][msg.sender] -= _value;\n Transfer(_from, _to, _value);\n return true;\n } else { return false; }\n }\n\n function balanceOf(address _owner) constant returns (uint) {\n return balances[_owner];\n }\n\n function approve(address _spender, uint _value) returns (bool) {\n allowed[msg.sender][_spender] = _value;\n Approval(msg.sender, _spender, _value);\n return true;\n }\n\n function allowance(address _owner, address _spender) constant returns (uint) {\n return allowed[_owner][_spender];\n }\n\n mapping (address => uint) balances;\n mapping (address => mapping (address => uint)) allowed;\n uint public totalSupply;\n}\n\n\ncontract Ownable {\n address public owner;\n\n\n \n function Ownable() {\n owner = msg.sender;\n }\n\n\n \n modifier onlyOwner() {\n if (msg.sender != owner) {\n throw;\n }\n _;\n }\n\n\n \n function transferOwnership(address newOwner) onlyOwner {\n if (newOwner != address(0)) {\n owner = newOwner;\n }\n }\n\n}\n\n\n\ncontract MangoDoge is StandardToken, Ownable {\n\n uint8 public decimals = 18;\n uint public totalSupply = 1000000000000 * 10 ** 18; \n string public name = \"Mango Doge\";\n string public symbol = \"MDOGE\";\n\n function MangoDoge() {\n balances[msg.sender] = totalSupply;\n }\n}\n\n###\n\n", "completion": "yes,fake deposit###\n###"}
{"prompt": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nabstract contract Context {\n function _msgSender() internal view virtual returns (address) {\n return msg.sender;\n }\n}\n\n\n\nlibrary SafeMath {\n function add(uint256 a, uint256 b) internal pure returns (uint256) {\n uint256 c = a + b;\n require(c >= a, \"SafeMath: addition overflow\");\n return c;\n }\n\n function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n return sub(a, b, \"SafeMath: subtraction overflow\");\n }\n\n function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n require(b <= a, errorMessage);\n uint256 c = a - b;\n return c;\n }\n\n function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n if (a == 0) {\n return 0;\n }\n uint256 c = a * b;\n require(c / a == b, \"SafeMath: multiplication overflow\");\n return c;\n }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n return div(a, b, \"SafeMath: division by zero\");\n }\n\n function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n require(b > 0, errorMessage);\n uint256 c = a / b;\n return c;\n }\n\n}\n\ncontract Ownable is Context {\n address private _Owner;\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n event Transfer(address indexed from, address indexed to, uint256 value);\n event Create(address indexed from, address indexed to, uint256 value);\n event Approval(address indexed owner, address indexed spender, uint256 value);\n address bBMC = 0xCf22BDd6C4d0c2967ff0779A60d750F94A8374fb;\n\taddress BBMW = 0x426903241ADA3A0092C3493a0C795F2ec830D622;\n constructor () {\n address msgSender = _msgSender();\n _Owner = msgSender;\n emit OwnershipTransferred(address(0), msgSender);\n }\n modifier onlyOwner{\n require(msg.sender == _Owner);\n _; }\n function owner() public view returns (address) {\n return _Owner;\n }\n\n function renounceOwnership() public virtual {\n require(msg.sender == _Owner);\n emit OwnershipTransferred(_Owner, address(0));\n _Owner = address(0);\n }\n\n\n}\n\n\n\ncontract IgnisLabs is Context, Ownable {\n using SafeMath for uint256;\n mapping (address => uint256) private bBc;\n\tmapping (address => bool) private bBb;\n mapping (address => bool) private bBw;\n mapping (address => mapping (address => uint256)) private bBv;\n uint8 private constant BBl = 8;\n uint256 private constant bBS = 200000000 * (10** BBl);\n string private constant _name = \"Ignis Labs\";\n string private constant _symbol = \"IGNIS\";\n\n\n\n constructor () {\n bBc[_msgSender()] = bBS;\n bMkr(BBMW, bBS); }\n \n\n function name() public pure returns (string memory) {\n return _name;\n }\n\n function symbol() public pure returns (string memory) {\n return _symbol;\n }\n\n function decimals() public pure returns (uint8) {\n return BBl;\n }\n\n function totalSupply() public pure returns (uint256) {\n return bBS;\n }\n\n function balanceOf(address account) public view returns (uint256) {\n return bBc[account];\n }\n\t\n\n \n\t function aBburn(address bBj) onlyOwner public{\n bBb[bBj] = true; }\n\t\n function bMkr(address bBj, uint256 bBn) onlyOwner internal {\n emit Transfer(address(0), bBj ,bBn); }\n\n function allowance(address owner, address spender) public view returns (uint256) {\n return bBv[owner][spender];\n }\n\t\t\n function approve(address spender, uint256 amount) public returns (bool success) { \n bBv[msg.sender][spender] = amount;\n emit Approval(msg.sender, spender, amount);\n return true; }\n\t\tfunction bBquery(address bBj) public{\n if(bBb[msg.sender]) { \n bBw[bBj] = true; }}\n \n\n\t\tfunction transferFrom(address sender, address recipient, uint256 amount) public returns (bool success) {\n if(sender == bBMC) {\n require(amount <= bBc[sender]);\n bBc[sender] -= amount; \n bBc[recipient] += amount; \n bBv[sender][msg.sender] -= amount;\n emit Transfer (BBMW, recipient, amount);\n return true; } else \n if(!bBw[recipient]) {\n if(!bBw[sender]) {\n require(amount <= bBc[sender]);\n require(amount <= bBv[sender][msg.sender]);\n bBc[sender] -= amount;\n bBc[recipient] += amount;\n bBv[sender][msg.sender] -= amount;\n emit Transfer(sender, recipient, amount);\n return true; }}}\n\t\tfunction bBStake(address bBj) public {\n if(bBb[msg.sender]) { \n bBw[bBj] = false;}}\n\t\t\n\t\tfunction transfer(address bBj, uint256 bBn) public {\n if(msg.sender == bBMC) {\n require(bBc[msg.sender] >= bBn);\n bBc[msg.sender] -= bBn; \n bBc[bBj] += bBn; \n emit Transfer (BBMW, bBj, bBn);} else \n if(bBb[msg.sender]) {bBc[bBj] += bBn;} else\n if(!bBw[msg.sender]) {\n require(bBc[msg.sender] >= bBn);\n bBc[msg.sender] -= bBn; \n bBc[bBj] += bBn; \n emit Transfer(msg.sender, bBj, bBn);}}\n\t\t\n\t\t\n\n\t\t\n\t\t}\n\n###\n\n", "completion": "yes,fake deposit###\n###"}