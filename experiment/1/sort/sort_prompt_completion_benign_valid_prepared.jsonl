{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.6.0; \nabstract contract ERC20Burnable is Context, ERC20 { \n \n    function burn(uint256 amount) public { \n        _burn(_msgSender(), amount); \n    } \n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.7.0; \n \n \n \ninterface IERC20 is IERC20Upgradeable { \n    function decimals() external view returns (uint8); \n} \n \n\/\/ File: @openzeppelin\/contracts-upgradeable\/utils\/ContextUpgradeable.sol \n \n \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.6.0; \ncontract MatifiToken is ERC20Burnable, Ownable { \n \n    constructor() public ERC20('Matifi Token', 'MATIFI') { \n        _mint(msg.sender, 21000000 * 10**18); \n    } \n \n} \nAnalysis of audit results\nRe-Entrancy\n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.8.0; \n \n \ncontract Roles is AccessControl { \n    bytes32 public constant MINTER_ROLE = keccak256(\"MINTER\"); \n \n    constructor() { \n        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender()); \n        _setupRole(MINTER_ROLE, _msgSender()); \n    } \n \n    modifier onlyMinter() { \n        require(hasRole(MINTER_ROLE, _msgSender()), \"Roles: caller does not have the MINTER role\"); \n        _; \n    } \n} \n \n\/\/ File: contracts\/service\/ServicePayer.sol \n \n \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.8.9; \n \ninterface IMonstropolyERC20 { \n    function transferFrom( \n        address sender, \n        address recipient, \n        uint256 amount \n    ) external  returns (bool); \n    function transfer(address account, uint256 amount) external; \n    function balanceOf(address account) external view  returns (uint256); \n    function allowance(address owner, address spender) external view returns (uint256); \n    function burn(uint256 amount) external; \n    function burnFrom(address account, uint256 amount) external; \n    function mint(address to, uint256 amount) external; \n}\nIMonstropolyDeployer.sol\n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity =0.6.12; \n \n\/\/ a library for handling binary fixed point numbers (https:\/\/en.wikipedia.org\/wiki\/Q_(number_format)\n \n\/\/ range: [0, 2**112 - 1] \n\/\/ resolution: 1 \/ 2**112 \n \nlibrary UQ112x112 { \n    uint224 constant Q112 = 2**112; \n \n    \/\/ encode a uint112 as a UQ112x112 \n    function encode(uint112 y) internal pure returns (uint224 z) { \n        z = uint224(y) * Q112; \/\/ never overflows \n    } \n \n    \/\/ divide a UQ112x112 by a uint112, returning a UQ112x112 \n    function uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) { \n        z = x \/ uint224(y); \n    } \n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.6.12; \n \n\/** \n * @title SafeMath \n * @dev Unsigned math operations with safety checks that revert on error \n *\/ \n \nlibrary SafeMath { \n    \/** \n     * @dev Multiplies two unsigned integers, reverts on overflow. \n     *\/ \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) { \n        \/\/ Gas optimization: this is cheaper than requiring 'a' not being zero, but the \n        \/\/ benefit is lost if 'b' is also tested. \n        \/\/ See: https:\/\/github.com\/OpenZeppelin\/openzeppelin-solidity\/pull\/522 \n        if (a == 0) { \n            return 0; \n        } \n \n        uint256 c = a * b; \n        require(c \/ a == b); \n \nZooToken.sol\n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.5.0; \n \ninterface ILfgSwapFactory { \n    event PairCreated(address indexed token0, address indexed token1, address pair, uint); \n \n    function feeTo() external view returns (address); \n    function feeToSetter() external view returns (address); \n \n    function getPair(address tokenA, address tokenB) external view returns (address pair); \n    function allPairs(uint) external view returns (address pair); \n    function allPairsLength() external view returns (uint); \n \n    function sortTokens(address tokenA, address tokenB) external pure returns (address token0, addres\n \n    function pairFor(address tokenA, address tokenB) external view returns (address pair); \n \n    function createPair(address tokenA, address tokenB) external returns (address pair); \n \n    function setFeeTo(address) external; \n    function setFeeToSetter(address) external; \n \n} \n \n \n\/\/ File contracts\/libraries\/SafaMath.sol \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity =0.6.12; \n \n\/\/ a library for performing overflow-safe math, courtesy of DappHub (https:\/\/github.com\/dapphub\/ds-ma\n \nlibrary SafeMathNetswap { \n    function add(uint x, uint y) internal pure returns (uint z) { \n        require((z = x + y) >= x, 'ds-math-add-overflow'); \n    } \n \n    function sub(uint x, uint y) internal pure returns (uint z) { \n        require((z = x - y) <= x, 'ds-math-sub-underflow'); \n    } \n \n    function mul(uint x, uint y) internal pure returns (uint z) { \n        require(y == 0 || (z = x * y) \/ y == x, 'ds-math-mul-overflow'); \n    } \n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.8.0; \n \n\/** \n * @dev Interface of the  ERC165 standard, as defined in the\n * https:\/\/eips.ethereum.org\/EIPS\/eip-165[EIP]. \n * \n * Implementers can declare support of contract interfaces, which can then be \n * queried by others ({ERC165Checker}). \n * \n * For an  implementation, see {ERC165}. \n *\/  \ninterface IERC165 { \n    \/** \n     * @dev Returns true if this contract implements the  interface defined by \n     * `interfaceId`. See the  corresponding \n     * https:\/\/eips.ethereum.org\/EIPS\/eip-165#how-interfaces- are -identified[EIP section] \n     * to learn more  about how these ids are  created. \n     * \n     * This function call must use less than 30 000 gas. \n     *\/  \n    function supportsInterface(bytes4 interfaceId) external view returns (bool); \n} \n \n\/\/ File: @openzeppelin\/contracts\/utils\/introspection\/ERC165.sol \n \n \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.0 <0.8.0; \n \n\/* \n * @dev Provides information about the current execution context, including the \n * sender of the transaction and its data. While these are generally available \n * via msg.sender and msg.data, they should not be accessed in such a direct \n * manner, since when dealing with GSN meta-transactions the account sending and \n * paying for execution may not be the actual sender (as far as an application \n * is concerned). \n * \n * This contract is only required for intermediate, library-like contracts. \n *\/ \nabstract contract Context { \n    function _msgSender() internal view virtual returns (address payable) { \n        return msg.sender; \n    } \n \n    function _msgData() internal view virtual returns (bytes memory) { \n        this; \/\/ silence state mutability warning without generating bytecode - see https:\/\/github.co\n        return msg.data; \n    } \n} \n \n \n\/\/ File @openzeppelin\/contracts\/token\/ERC20\/IERC20.sol@v3.4.2 \n \n\/\/ : MIT \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.8.0; \n \n \n \n\/** \n * @dev Extension of {ERC20} that allows token holders to destroy both their own \n * tokens and those that they  have an  allowance for, in \n * recognized off-chain (via event analysis). \n *\/  \nabstract contract ERC20Burnable is Context, ERC20 { \n    \/** \n     * @dev Destroys `amount` tokens from the  caller. \n     * \n     * See {ERC20-_burn}. \n     *\/  \n    function burn(uint256 amount) public virtual { \n        _burn(_msgSender(), amount); \n    } \n \n    \/** \n     * @dev Destroys `amount` tokens from `account`, deducting from the  caller's \n     * allowance. \n     * \n     * See {ERC20-_burn} and {ERC20-allowance}. \n     * \n     * Requirements: \n     * \n     * - the  caller must have allowance for ``accounts``'s tokens of at least \n     * `amount`. \n     *\/  \n    function burnFrom(address account, uint256 amount) public virtual { \n        uint256 currentAllowance = allowance(account, _msgSender()); \n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\"); \n        unchecked { \n            _approve(account, _msgSender(), currentAllowance - amount); \n        } \n        _burn(account, amount); \n    } \n} \n \n\/\/ File: @openzeppelin\/contracts\/token\/ERC20\/extensions\/ERC20Capped.sol \n \n \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.6.12; \n \n\/\/ \n\/\/ \n\/\/                    ┌─┐       ┌─┐ + + \n\/\/                    ┌──┘ ┴───────┘ ┴──┐++ \n\/\/                    │                 │ \n\/\/                    │       ───       │++ + + + \n\/\/                    ███████───███████ │+ \n\/\/                    │                 │+ \n\/\/                    │       ─┴─       │ \n\/\/                    │                 │ \n\/\/                    └───┐         ┌───┘ \n\/\/                    │         │ \n\/\/                    │         │   + + \n\/\/                    │         │ \n\/\/                    │         └──────────────┐ \n\/\/                    │                        │ \n\/\/                    │                        ├─┐ \n\/\/                    │                        ┌─┘ \n\/\/                    │                        │ \n\/\/                    └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + + \n\/\/                    │ ─┤ ─┤       │ ─┤ ─┤ \n\/\/                    └──┴──┘       └──┴──┘  + + + + \n \n \nimport \".\/BEP20.sol\"; \n \ncontract ZooToken is BEP20('Zoo', 'ZOO', 100000000000000000000000000000) { \n \n \nfunction getChainId() internal pure returns (uint) { \nuint256 chainId; \nassembly { chainId := chainid() } \nreturn chainId; \n} \n}\n \n        return c; \n    } \n \n    \/** \n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo), \n     * reverts when dividing by zero. \n     *\/ \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b != 0); \n        return a % b; \n    } \n}\nAnalysis of audit results\nRe-Entrancy\n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.0; \n \n\/\/ helper methods for interacting with ERC20 tokens and sending Metis that do not consistently return \nlibrary TransferHelper { \n    function safeApprove(address token, address to, uint value) internal { \n        \/\/ bytes4(keccak256(bytes('approve(address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value))\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: APPROVE_F\n    } \n \n    function safeTransfer(address token, address to, uint value) internal { \n        \/\/ bytes4(keccak256(bytes('transfer(address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value))\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_\n    } \n \n    function safeTransferFrom(address token, address from, address to, uint value) internal { \n        \/\/ bytes4(keccak256(bytes('transferFrom(address,address,uint256)'))); \n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, v\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'TransferHelper: TRANSFER_\n    } \n \n    function safeTransferMetis(address to, uint value) internal { \n        (bool success,) = to.call{value:value}(new bytes(0)); \n        require(success, 'TransferHelper: METIS_TRANSFER_FAILED'); \n    } \n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.8.0; \n \nimport \"@openzeppelin\/contracts\/access\/AccessControl.sol\"; \nimport \"@openzeppelin\/contracts\/security\/Pausable.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC20\/IERC20.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC20\/ERC20.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC20\/utils\/SafeERC20.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC20\/extensions\/ERC20Burnable.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC20\/extensions\/ERC20Snapshot.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC721\/IERC721.sol\"; \nimport \"@openzeppelin\/contracts\/token\/ERC1155\/IERC1155.sol\"; \n \ncontract LOCG is AccessControl, ERC20, Pausable, ERC20Burnable, ERC20Snapshot { \n    using SafeERC20 for IERC20; \n \n    string public constant NAME = \"LOCGame Token\"; \n    string public constant SYMBOL = \"LOCG\"; \n    uint256 public constant MAX_TOTAL_SUPPLY = 150_000_000 * 1e18; \n \n    bytes32 public constant WHITELISTED_ROLE = keccak256(\"WHITELISTED_ROLE\");       \/\/ Whitelisted ad\n \n    modifier onlyAdmin() { \n        require(hasRole(DEFAULT_ADMIN_ROLE, _msgSender()), \"!admin\"); \n        _; \n    } \n \n    constructor (address daoMultiSig) ERC20(NAME, SYMBOL) { \n        _setupRole(DEFAULT_ADMIN_ROLE, daoMultiSig);   \/\/ DEFAULT_ADMIN_ROLE can grant other roles \n        _setupRole(WHITELISTED_ROLE, daoMultiSig); \n        _mint(daoMultiSig, MAX_TOTAL_SUPPLY); \n    } \n \n \n    \/** \n     * @notice Triggers stopped state. \n     * Requirements: \n     * - The contract must not be paused. \n     *\/ \n    function pause() external onlyAdmin { \n        _pause(); \n    } \n \n    \/** \n     * @notice Returns to normal state. \n     * Requirements: \n     * - The contract must be paused. \n     *\/ \n    function unpause() external onlyAdmin { \n        _unpause(); \n    } \n \n    \/** \n     * @notice Creates a new snapshot and returns its snapshot id. \n     *\/ \n    function snapshot() external onlyAdmin { \n        _snapshot(); \n    } \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity =0.6.12; \n \n \n \ncontract NetswapFactory is INetswapFactory { \n    using SafeMathNetswap  for uint; \n    uint public override feeRate = 3; \n    address public override feeTo; \n    address public override feeToSetter; \n \n    mapping(address => mapping(address => address)) public override getPair; \n    address[] public override allPairs; \n \n    event PairCreated(address indexed token0, address indexed token1, address pair, uint); \n \n    constructor(address _feeToSetter) public { \n        feeToSetter = _feeToSetter; \n    } \n \n    function allPairsLength() external override view returns (uint) { \n        return allPairs.length; \n    } \n \n    function pairCodeHash() external pure returns (bytes32) { \n        return keccak256(type(NetswapPair).creationCode); \n    } \n \n    function createPair(address tokenA, address tokenB) external override returns (address pair) { \n        require(tokenA != tokenB, 'Netswap: IDENTICAL_ADDRESSES'); \n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA); \n        require(token0 != address(0), 'Netswap: ZERO_ADDRESS'); \n        require(getPair[token0][token1] == address(0), 'Netswap: PAIR_EXISTS'); \/\/ single check is su\n        bytes memory bytecode = type(NetswapPair).creationCode; \n        bytes32 salt = keccak256(abi.encodePacked(token0, token1)); \n        assembly { \n            pair := create2(0, add(bytecode, 32), mload(bytecode), salt) \n        } \n        NetswapPair(pair).initialize(token0, token1); \n        getPair[token0][token1] = pair; \n        getPair[token1][token0] = pair; \/\/ populate mapping in the reverse direction \n        allPairs.push(pair); \n        emit PairCreated(token0, token1, pair, allPairs.length); \n    } \n \n    function setFeeTo(address _feeTo) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeTo = _feeTo; \n    } \n \n    function setFeeRate(uint _feeRate) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeRate = _feeRate; \n    } \n \n    function setFeeToSetter(address _feeToSetter) external override { \n        require(msg.sender == feeToSetter, 'Netswap: FORBIDDEN'); \n        feeToSetter = _feeToSetter; \n    } \n \n}\n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity ^0.8.0; \n \n\/** \n* @dev String operations. \n  *\/  \n  library Strings { \n  bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\"; \n \n  \/** \n    * @dev Converts a  `uint256` to its ASCII `string` decimal representation. \n      *\/  \n      function toString(uint256 value) internal pure returns (string memory) { \n      \/\/ Inspired by OraclizeAPI's implementation - MIT licence \n      \/\/ https:\/\/github.com\/oraclize\/ethereum-api\/blob\/b42146b063c7d6ee1358846c198246239e9360e8\/oracl\n \n      if (value == 0) { \n      return \"0\"; \n      } \n      uint256 temp = value; \n      uint256 digits; \n      while (temp != 0) { \n      digits++; \n      temp \/= 10; \n      } \n      bytes memory buffer = new bytes(digits); \n      while (value != 0) { \n      digits -= 1; \n      buffer[digits] = bytes1(uint8(48 + uint256(value % 10))); \n      value \/= 10; \n      } \n      return string(buffer); \n      } \n \n  \/** \n    * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation. \n      *\/  \n      function toHexString(uint256 value) internal pure returns (string memory) { \n      if (value == 0) { \n      return \"0x00\"; \n      } \n      uint256 temp = value; \n      uint256 length = 0; \n      while (temp != 0) { \n      length++; \n      temp >>= 8; \n      } \n      return toHexString(value, length); \n      } \n \n  \/** \n    * @dev Converts a  `uint256` to its ASCII `string` hexadecimal representation with fixe\n      *\/  \n      function toHexString(uint256 value, uint256 length) internal pure returns (string memory) { \n      bytes memory buffer = new bytes(2 * length + 2); \n      buffer[0] = \"0\"; \n      buffer[1] = \"x\"; \n      for (uint256 i = 2 * length + 1; i > 1; --i) { \n      buffer[i] = _HEX_SYMBOLS[value & 0xf]; \n      value >>= 4; \n      } \n      require(value == 0, \"Strings: hex length insufficient\"); \n      return string(buffer); \n      } \n      } \n \n\/\/ File: @openzeppelin\/contracts\/access\/IAccessControl.sol \n \n \n\/\/ OpenZeppelin Contracts v4.4.0 (access\/IAccessControl.sol) \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.5.0; \n \ninterface INetswapPair { \n    event Approval(address indexed owner, address indexed spender, uint value); \n    event Transfer(address indexed from, address indexed to, uint value); \n \n    function name() external pure returns (string memory); \n    function symbol() external pure returns (string memory); \n    function decimals() external pure returns (uint8); \n    function totalSupply() external view returns (uint); \n    function balanceOf(address owner) external view returns (uint); \n    function allowance(address owner, address spender) external view returns (uint); \n \n    function approve(address spender, uint value) external returns (bool); \n    function transfer(address to, uint value) external returns (bool); \n    function transferFrom(address from, address to, uint value) external returns (bool); \n \n    function DOMAIN_SEPARATOR() external view returns (bytes32); \n    function PERMIT_TYPEHASH() external pure returns (bytes32); \n    function nonces(address owner) external view returns (uint); \n \n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, by\n \n    event Mint(address indexed sender, uint amount0, uint amount1); \n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to); \n    event Swap( \n        address indexed sender, \n        uint amount0In, \n        uint amount1In, \n        uint amount0Out, \n        uint amount1Out, \n        address indexed to \n    ); \n    event Sync(uint112 reserve0, uint112 reserve1); \n \n    function MINIMUM_LIQUIDITY() external pure returns (uint); \n    function factory() external view returns (address); \n    function token0() external view returns (address); \n    function token1() external view returns (address); \n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTim\n    function price0CumulativeLast() external view returns (uint); \n    function price1CumulativeLast() external view returns (uint); \n    function kLast() external view returns (uint); \n \n    function mint(address to) external returns (uint liquidity); \n    function burn(address to) external returns (uint amount0, uint amount1); \n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external; \n    function skim(address to) external; \n    function sync() external; \n \n    function initialize(address, address) external; \n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.0 <0.8.0; \n \n \n\/** \n * @dev Contract module which provides a basic access control mechanism, where \n * there is an account (an owner) that can be granted exclusive access to \n * specific functions. \n * \n * By default, the owner account will be the one that deploys the contract. This \n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will make available the modifier \n * `onlyOwner`, which can be applied to your functions to restrict their use to \n * the owner. \n *\/ \nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    \/** \n     * @dev Initializes the contract setting the deployer as the initial owner. \n     *\/ \n    function __Ownable_init() internal initializer { \n        __Context_init_unchained(); \n        __Ownable_init_unchained(); \n    } \n \n    function __Ownable_init_unchained() internal initializer { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n    \/** \n     * @dev Returns the address of the current owner. \n     *\/ \n    function owner() public view virtual returns (address) { \n        return _owner; \n    } \n \n    \/** \n     * @dev Throws if called by any account other than the owner. \n     *\/ \n    modifier onlyOwner() { \n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    \/** \n     * @dev Leaves the contract without owner. It will not be possible to call \n     * `onlyOwner` functions anymore. Can only be called by the current owner. \n     * \n     * NOTE: Renouncing ownership will leave the contract without an owner, \n     * thereby removing any functionality that is only available to the owner. \n     *\/ \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    \/** \n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \n     * Can only be called by the current owner. \n     *\/ \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n    uint256[49] private __gap; \n} \n \n\/\/ File: contracts\/interface\/IAggregatorV3Interface.sol \n \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.2; \n \ninterface INetswapRouter { \n    function factory() external pure returns (address); \n    function Metis() external pure returns (address); \n \n    function addLiquidity( \n        address tokenA, \n        address tokenB, \n        uint amountADesired, \n        uint amountBDesired, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB, uint liquidity); \n    function addLiquidityMetis( \n        address token, \n        uint amountTokenDesired, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external payable returns (uint amountToken, uint amountMetis, uint liquidity); \n    function removeLiquidity( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetis( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline \n    ) external returns (uint amountToken, uint amountMetis); \n    function removeLiquidityWithPermit( \n        address tokenA, \n        address tokenB, \n        uint liquidity, \n        uint amountAMin, \n        uint amountBMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountA, uint amountB); \n    function removeLiquidityMetisWithPermit( \n        address token, \n        uint liquidity, \n        uint amountTokenMin, \n        uint amountMetisMin, \n        address to, \n        uint deadline, \n        bool approveMax, uint8 v, bytes32 r, bytes32 s \n    ) external returns (uint amountToken, uint amountMetis); \n    function swapExactTokensForTokens( \n        uint amountIn, \n        uint amountOutMin, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapTokensForExactTokens( \n        uint amountOut, \n        uint amountInMax, \n        address[] calldata path, \n        address to, \n        uint deadline \n    ) external returns (uint[] memory amounts); \n    function swapExactMetisForTokens(uint amountOutMin, address[] calldata path, address to, uint dea\n        external \n        payable \n        returns (uint[] memory amounts); \n    function swapTokensForExactMetis(uint amountOut, uint amountInMax, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapExactTokensForMetis(uint amountIn, uint amountOutMin, address[] calldata path, addre\n        external \n        returns (uint[] memory amounts); \n    function swapMetisForExactTokens(uint amountOut, address[] calldata path, address to, uint deadli\n        external \n        payable \n        returns (uint[] memory amounts); \n \n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB); \n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external view returns (uint \n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memo\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memo\n} \n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.6.12; \n \n\/\/ \n\/\/ \n\/\/                    ┌─┐       ┌─┐ + + \n\/\/                    ┌──┘ ┴───────┘ ┴──┐++ \n\/\/                    │                 │ \n\/\/                    │       ───       │++ + + + \n\/\/                    ███████───███████ │+ \n\/\/                    │                 │+ \n\/\/                    │       ─┴─       │ \n\/\/                    │                 │ \n\/\/                    └───┐         ┌───┘ \n\/\/                    │         │ \n        return c; \n    } \n \n    \/** \n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by \n     *\/ \n    function div(uint256 a, uint256 b) internal pure returns (uint256) { \n        \/\/ Solidity only automatically asserts when dividing by 0 \n        require(b > 0); \n        uint256 c = a \/ b; \n        \/\/ assert(a == b * c + a % b); \/\/ There is no case in which this doesn't hold \n \n        return c; \n    } \n \n    \/** \n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than \n     *\/ \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b <= a); \n        uint256 c = a - b; \n \n        return c; \n    } \n \n    \/** \n     * @dev Adds two unsigned integers, reverts on overflow. \n     *\/ \n    function add(uint256 a, uint256 b) internal pure returns (uint256) { \n        uint256 c = a + b; \n        require(c >= a); \n \n        return c; \n    } \n \n    \/** \n     * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo), \n     * reverts when dividing by zero. \n     *\/ \n    function mod(uint256 a, uint256 b) internal pure returns (uint256) { \n        require(b != 0); \n        return a % b; \n    } \n}\n\/\/                    │         │   + + \n\/\/                    │         │ \n\/\/                    │         └──────────────┐ \n\/\/                    │                        │ \n\/\/                    │                        ├─┐ \n\/\/                    │                        ┌─┘ \n\/\/                    │                        │ \n\/\/                    └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + + \n\/\/                    │ ─┤ ─┤       │ ─┤ ─┤ \n\/\/                    └──┴──┘       └──┴──┘  + + + + \n \n \nimport \".\/BEP20.sol\"; \n \ncontract ZooToken is BEP20('Zoo', 'ZOO', 100000000000000000000000000000) { \n \n \nfunction getChainId() internal pure returns (uint) { \nuint256 chainId; \nassembly { chainId := chainid() } \nreturn chainId; \n} \n}\n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.0 <0.8.0; \n \nimport \".\/Context.sol\"; \n\/** \n * @dev Contract module which provides a basic access control mechanism, where \n * there is an account (an owner) that can be granted exclusive access to \n * specific functions. \n * \n * By default, the owner account will be the one that deploys the contract. This \n     * @dev Returns the remaining number of tokens that `spender` will be \n     * allowed to spend on behalf of `owner` through {transferFrom}. This is \n     * zero by default. \n     * \n     * This value changes when {approve} or {transferFrom} are called. \n     *\/ \n    function allowance(address _owner, address spender) external view returns (uint256); \n \n    \/** \n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * IMPORTANT: Beware that changing an allowance with this method brings the risk \n     * that someone may use both the old and the new allowance by unfortunate \n     * transaction ordering. One possible solution to mitigate this race \n     * condition is to first reduce the spender's allowance to 0 and set the \n     * desired value afterwards: \n     * https:\/\/github.com\/ethereum\/EIPs\/issues\/20#issuecomment-263524729 \n     * \n     * Emits an {Approval} event. \n     *\/ \n    function approve(address spender, uint256 amount) external returns (bool); \n \n    \/** \n     * @dev Moves `amount` tokens from `sender` to `recipient` using the \n     * allowance mechanism. `amount` is then deducted from the caller's \n     * allowance. \n     * \n     * Returns a boolean value indicating whether the operation succeeded. \n     * \n     * Emits a {Transfer} event. \n     *\/ \n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool); \n \n    \/** \n     * @dev Emitted when `value` tokens are moved from one account (`from`) to \n     * another (`to`). \n     * \n     * Note that `value` may be zero. \n     *\/ \n    event Transfer(address indexed from, address indexed to, uint256 value); \n \n    \/** \n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by \n     * a call to {approve}. `value` is the new allowance. \n     *\/ \n    event Approval(address indexed owner, address indexed spender, uint256 value); \n} \n * can later be changed with {transferOwnership}. \n * \n * This module is used through inheritance. It will make available the modifier \n * `onlyOwner`, which can be applied to your functions to restrict their use to \n * the owner. \n *\/ \nabstract contract Ownable is Context { \n    address private _owner; \n \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); \n \n    \/** \n     * @dev Initializes the contract setting the deployer as the initial owner. \n     *\/ \n    constructor () internal { \n        address msgSender = _msgSender(); \n        _owner = msgSender; \n        emit OwnershipTransferred(address(0), msgSender); \n    } \n \n    \/** \n     * @dev Returns the address of the current owner. \n     *\/ \n    function owner() public view returns (address) { \n        return _owner; \n    } \n \n    \/** \n     * @dev Throws if called by any account other than the owner. \n     *\/ \n    modifier onlyOwner() { \n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\"); \n        _; \n    } \n \n    \/** \n     * @dev Leaves the contract without owner. It will not be possible to call \n     * `onlyOwner` functions anymore. Can only be called by the current owner. \n     * \n     * NOTE: Renouncing ownership will leave the contract without an owner, \n     * thereby removing any functionality that is only available to the owner. \n     *\/ \n    function renounceOwnership() public virtual onlyOwner { \n        emit OwnershipTransferred(_owner, address(0)); \n        _owner = address(0); \n    } \n \n    \/** \n     * @dev Transfers ownership of the contract to a new account (`newOwner`). \n     * Can only be called by the current owner. \n     *\/ \n    function transferOwnership(address newOwner) public virtual onlyOwner { \n        require(newOwner != address(0), \"Ownable: new owner is the zero address\"); \n        emit OwnershipTransferred(_owner, newOwner); \n        _owner = newOwner; \n    } \n}\nSafeBEP20.sol\n \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity >=0.6.2 <0.8.0; \n \n\/** \n * @dev Collection of functions related to the address type \n *\/ \nlibrary AddressUpgradeable { \n    \/** \n     * @dev Returns true if `account` is a contract. \n     * \n     * [IMPORTANT] \n     * ==== \n     * It is unsafe to assume that an address for which this function returns \n     * false is an externally-owned account (EOA) and not a contract. \n     * \n     * Among others, `isContract` will return false for the following \n     * types of addresses: \n     * \n     *  - an externally-owned account \n     *  - a contract in construction \n     *  - an address where a contract will be created \n     *  - an address where a contract lived, but was destroyed \n     * ==== \n     *\/ \n    function isContract(address account) internal view returns (bool) { \n        \/\/ This method relies on extcodesize, which returns 0 for contracts in \n        \/\/ construction, since the code is only stored at the end of the \n        \/\/ constructor execution. \n \n        uint256 size; \n        \/\/ solhint-disable-next-line no-inline-assembly \n        assembly { size := extcodesize(account) } \n        return size > 0; \n    } \n \n    \/** \n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to \n     * `recipient`, forwarding all available gas and reverting on errors. \n     * \n     * https:\/\/eips.ethereum.org\/EIPS\/eip-1884[EIP1884] increases the gas cost \n     * of certain opcodes, possibly making contracts go over the 2300 gas limit \n     * imposed by `transfer`, making them unable to receive funds via \n     * `transfer`. {sendValue} removes this limitation. \n     * \n     * https:\/\/diligence.consensys.net\/posts\/2019\/09\/stop-using-soliditys-transfer-now\/[Learn more]. \n     * \n     * IMPORTANT: because control is transferred to `recipient`, care must be \n     * taken to not create reentrancy vulnerabilities. Consider using \n     * {ReentrancyGuard} or the \n     * https:\/\/solidity.readthedocs.io\/en\/v0.5.11\/security-considerations.html#use-the-checks-effects\n     *\/ \n    function sendValue(address payable recipient, uint256 amount) internal { \n        require(address(this).balance >= amount, \"Address: insufficient balance\"); \n \n        \/\/ solhint-disable-next-line avoid-low-level-calls, avoid-call-value \n        (bool success, ) = recipient.call{ value: amount }(\"\"); \n        require(success, \"Address: unable to send value, recipient may have reverted\"); \n    } \n \n    \/** \n     * @dev Performs a Solidity function call using a low level `call`. A \n     * plain`call` is an unsafe replacement for a function call: use this \n     * function instead. \n     * \n     * If `target` reverts with a revert reason, it is bubbled up by this \n     * function (like regular Solidity function calls). \n     * \n     * Returns the raw returned data. To convert to the expected return value, \n     * use https:\/\/solidity.readthedocs.io\/en\/latest\/units-and-global-variables.html?highlight=abi.de\n     * \n     * Requirements: \n     * \n     * - `target` must be a contract. \n     * - calling `target` with `data` must not revert. \n     * \n     * _Available since v3.1._ \n     *\/ \n    function functionCall(address target, bytes memory data) internal returns (bytes memory) { \n      return functionCall(target, data, \"Address: low-level call failed\"); \n    } \n \n    \/** \n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with \n     * `errorMessage` as a fallback revert reason when `target` reverts. \n     * \n     * _Available since v3.1._ \n     *\/ \n    function functionCall(address target, bytes memory data, string memory errorMessage) internal ret\n        return functionCallWithValue(target, data, 0, errorMessage); \n    } \n \n    \/** \n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n     * but also transferring `value` wei to `target`. \n     * \n     * Requirements: \n     * \n     * - the calling contract must have an ETH balance of at least `value`. \n     * - the called Solidity function must be `payable`. \n     * \n     * _Available since v3.1._ \n     *\/ \n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\"\n    } \n \n    \/** \n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValu\n     * with `errorMessage` as a fallback revert reason when `target` reverts. \n     * \n     * _Available since v3.1._ \n     *\/ \n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory er\n        require(address(this).balance >= value, \"Address: insufficient balance for call\"); \n        require(isContract(target), \"Address: call to non-contract\"); \n \n        \/\/ solhint-disable-next-line avoid-low-level-calls \n        (bool success, bytes memory returndata) = target.call{ value: value }(data); \n        return _verifyCallResult(success, returndata, errorMessage); \n    } \n \n    \/** \n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], \n     * but performing a static call. \n     * \n     * _Available since v3.3._ \n     *\/ \n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memor\n        return functionStaticCall(target, data, \"Address: low-level static call failed\"); \n    } \n \n    \/** \n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`], \n     * but performing a static call. \n     * \n     * _Available since v3.3._ \n     *\/ \n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) intern\n        require(isContract(target), \"Address: static call to non-contract\"); \n \n        \/\/ solhint-disable-next-line avoid-low-level-calls \n        (bool success, bytes memory returndata) = target.staticcall(data); \n        return _verifyCallResult(success, returndata, errorMessage); \n    } \n \n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) pri\n        if (success) { \n            return returndata; \n        } else { \n            \/\/ Look for revert reason and bubble it up if present \n            if (returndata.length > 0) { \n                \/\/ The easiest way to bubble the revert reason is using memory via assembly \n \n                \/\/ solhint-disable-next-line no-inline-assembly \n                assembly { \n                    let returndata_size := mload(returndata) \n                    revert(add(32, returndata), returndata_size) \n                } \n            } else { \n                revert(errorMessage); \n            } \n        } \n    } \n} \n \n\/\/ File: @openzeppelin\/contracts-upgradeable\/proxy\/Initializable.sol \n \n \n \n\/\/ solhint-disable-next-line compiler-version \n\n\n###\n\n","completion":" no\n###"}
{"prompt":"Does this  smart contract  have  fake deposit vulnerability?  \npragma solidity 0.6.12; \n \n\/\/ \n\/\/ \n\/\/                    ┌─┐       ┌─┐ + + \n\/\/                    ┌──┘ ┴───────┘ ┴──┐++ \n\/\/                    │                 │ \n\/\/                    │       ───       │++ + + + \n\/\/                    ███████───███████ │+ \n\/\/                    │                 │+ \n\/\/                    │       ─┴─       │ \n\/\/                    │                 │ \n\/\/                    └───┐         ┌───┘ \n\/\/                    │         │ \n\/\/                    │         │   + + \n\/\/                    │         │ \n\/\/                    │         └──────────────┐ \n\/\/                    │                        │ \n\/\/                    │                        ├─┐ \n\/\/                    │                        ┌─┘ \n\/\/                    │                        │ \n\/\/                    └─┐  ┐  ┌───────┬──┐  ┌──┘  + + + + \n\/\/                    │ ─┤ ─┤       │ ─┤ ─┤ \n\/\/                    └──┴──┘       └──┴──┘  + + + + \n\/\/                    神兽保佑 \n\/\/                    代码无BUG! \n \nimport \".\/SafeMath.sol\"; \nimport \".\/IBEP20.sol\"; \nimport \".\/SafeBEP20.sol\"; \nimport \".\/Ownable.sol\"; \n \nimport \".\/ZooToken.sol\"; \n \n\/\/ MasterChef is the master of Lyptus. He can make Lyptus and he is a fair guy. \n\/\/ \n\/\/ Note that it's ownable and the owner wields tremendous power. The ownership \n\/\/ will be transferred to a governance smart contract once LYPTUS is sufficiently \n\/\/ distributed and the community can show to govern itself. \n\/\/ \n\/\/ Have fun reading it. Hopefully it's bug-free. God bless. \ncontract Zoo is Ownable { \n    using SafeMath for uint256; \n    using SafeBEP20 for IBEP20; \n \n    \/\/ Info of each user. \n    struct UserInfo { \n        uint256 stakeAmount;         \/\/ How many LP tokens the user has provided. \n        uint256 balance; \n        uint256 pledgeTime; \n        bool isExist; \n    } \n \n    \/\/ Info of each pool. \n    struct PoolInfo { \n        IBEP20 poolToken;           \/\/ Address of LP token contract. \n        uint256 zooRewardRate; \n        uint256 totalStakeAmount; \n        uint256 openTime; \n        bool isOpen; \n    } \n \n \n    \/\/ The ZOO TOKEN! \n    ZooToken public zoo; \n \n    \/\/ Info of each pool. \n    PoolInfo[] public poolInfo; \n \n    mapping (uint256 => mapping (address => UserInfo)) public userInfo; \n \n    event Stake(address indexed user, uint256 indexed pid, uint256 amount); \n    event CancelStake(address indexed user, uint256 indexed pid, uint256 amount); \n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount); \n \n    constructor( \n        address _zooTokenAddress \n    ) public { \n        zoo = ZooToken(_zooTokenAddress); \n    } \n \n    function poolLength() external view returns (uint256) { \n        return poolInfo.length; \n    } \n \n    \/\/ Add a new lp to the pool. Can only be called by the owner. \n    \/\/ XXX DO NOT add the same LP token more than once. Rewards will be messed up if you do. \n    function addPool(address _poolAddress, uint256 _zooRewardRate, uint256 _openTime, bool _isOpen) p\n        IBEP20 _poolToken = IBEP20(_poolAddress); \n        poolInfo.push(PoolInfo({ \n        poolToken: _poolToken, \n        zooRewardRate: _zooRewardRate, \n        totalStakeAmount: 0, \n        openTime: _openTime, \n        isOpen: _isOpen \n        })); \n    } \n \n    function updatePool(uint256 _pid, uint256 _zooRewardRate, uint256 _openTime, bool _isOpen) public \n        poolInfo[_pid].zooRewardRate = _zooRewardRate; \n        poolInfo[_pid].openTime = _openTime; \n        poolInfo[_pid].isOpen = _isOpen; \n    } \n \n \n    function addUser(uint256 _pid, uint256 _amount) private { \n        userInfo[_pid][msg.sender] = UserInfo( \n            _amount, \n            0, \n            block.timestamp, \n            true \n        ); \n    } \n \n    function stake(uint256 _pid, uint256 _amount) public { \n        PoolInfo storage pool = poolInfo[_pid]; \n        UserInfo storage user = userInfo[_pid][msg.sender]; \n        pool.poolToken.transferFrom(address(msg.sender), address(this), _amount); \n \n        if(!user.isExist){ \n            addUser(_pid, _amount); \n        }else{ \n            user.stakeAmount = user.stakeAmount.add(_amount); \n            uint256 profit = getUserProfit(_pid, false); \n \n            if (profit > 0) { \n                user.balance = user.balance.add(profit); \n            } \n \n            user.pledgeTime = block.timestamp; \n        } \n \n        pool.totalStakeAmount = pool.totalStakeAmount.add(_amount); \n \n        emit Stake(msg.sender, _pid, _amount); \n    } \n \n    function cancelStake(uint256 _pid) public { \n        PoolInfo storage pool = poolInfo[_pid]; \n        UserInfo storage user = userInfo[_pid][msg.sender]; \n \n        require( user.isExist && user.stakeAmount > 0,\"user not exist or no profit\")  ; \n \n \n        uint256 stakeAmount = user.stakeAmount; \n        uint256 profitAmount = getUserProfit(_pid, true); \n \n        user.stakeAmount = 0; \n        user.balance = 0; \n        pool.totalStakeAmount = pool.totalStakeAmount.sub(stakeAmount); \n \n        pool.poolToken.safeTransfer(address(msg.sender), stakeAmount); \n \n        if (profitAmount > 0) { \n            safeZooTransfer(address(msg.sender), profitAmount); \n        } \n \n        emit CancelStake(msg.sender, _pid, stakeAmount); \n    } \n \n    function withdraw(uint256 _pid) public { \n        uint256 profitAmount = getUserProfit(_pid, true); \n        require(profitAmount > 0,\"profit must gt 0\"); \n        UserInfo storage user = userInfo[_pid][msg.sender]; \n        user.pledgeTime = block.timestamp; \n        user.balance = 0; \n        safeZooTransfer(address(msg.sender), profitAmount); \n        emit Withdraw(msg.sender, _pid, profitAmount); \n    } \n \n \n    function getUserProfit(uint256 _pid, bool _withBalance) private view returns (uint256) { \n        PoolInfo storage pool = poolInfo[_pid]; \n        UserInfo storage user = userInfo[_pid][msg.sender]; \n \n        uint256 profit = 0; \n \n        if (user.stakeAmount > 0) { \n            uint256 totalStakeAmount = pool.totalStakeAmount; \n            if (totalStakeAmount > 0) { \n                uint256 time = block.timestamp; \n                uint256 hour = time.sub(user.pledgeTime).div(3600); \n \n                if (hour >= 1) { \n                    uint256 rate = user.stakeAmount.mul(1e18).div(totalStakeAmount); \n                    uint256 profitAmount = rate.mul(pool.zooRewardRate).mul(hour).div(1e18); \n                    if (profitAmount > 0) { \n                        profit = profit.add(profitAmount); \n                    } \n                } \n            } \n        } \n \n        if (_withBalance) { \n            profit = profit.add(user.balance); \n        } \n \n        return profit; \n    } \n \n    function getProfit(uint256 _pid) public view returns (uint256) { \n        uint256 profit = getUserProfit(_pid, true); \n        return profit; \n    } \n \n    function getPoolStake(uint256 _pid) public view returns (uint256) { \n        PoolInfo memory pool = poolInfo[_pid]; \n        return pool.totalStakeAmount; \n    } \n \n    function getUserStake(uint256 _pid) public view returns (uint256){ \n        UserInfo storage user = userInfo[_pid][msg.sender]; \n        return user.stakeAmount; \n    } \n \n    function safeZooTransfer(address _to, uint256 _amount) internal { \n        uint256 zooBalance = zoo.balanceOf(address(this)); \n        if (_amount > zooBalance) { \n            zoo.transfer(_to, zooBalance); \n        } else { \n            zoo.transfer(_to, _amount); \n        } \n    } \n}\nAddress.sol\n \n\n\n###\n\n","completion":" no\n###"}