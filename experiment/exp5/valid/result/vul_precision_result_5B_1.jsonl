{
    "0": [
        "yes,Precision loss.The vulnerability is in stake function.Recently, a flash loan transaction triggered the issue and brought the CST token price to 100x of intended. The transaction in question is https://wormhole.withik.com/transactions/9a65cf6d54b140948aaa11a93c1e36a23aecef35c62ad1951c5ec5d521d726f. The chain analysis of the incident is as follows. The colored arrows represent illegitimate transactions. (1) The attacker sends tokens to the gate contract with the stake function, followed by the function call to transfer the tokens back to his wallet. Together, they transfer around 60M CST to the contract, bringing the total to over 6B. (2) Next, the attacker calls the unstake function, which has the effect of transferring 6B CST instantly back to his wallet (3) The attacker then calls getBonus function with the",
        "yes,Price oracle manipulation.The vulnerability is in stake() function.The SWAP price of the EOS tokens could be manipulated by flashloan and lead to huge profit for the EngineDebug loaners. Per the definition of the fixed-loan contract, it only borrows and does not lend, thus the total  Packers amp; Sackett Youth Deerstalker Hat Blue p8eWGYB ",
        "yes,Price oracle manipulation.The vulnerability is in stake(uint256_tokenId,uint8_type) external.AMM price oracle manipulation.The function stake rewards users who stake their tokens toward the project. The \"reward\" comes in the form of a near-instant reward of loan DAI tokens that can be withdrawn immediately.The issue lies in the stake function. The hacker can put dust token to the project, the project would divide DAI to the amount of dust token, after the hacker put the dust with attack ticket, the price of the project would be very low. The hacker can then safely buy the token back for a small price, and tons of the project token will have been purchased by the hacker. A minute ago, 1 token was worth 200 DAI; after the attack, 1 token will have cost a very small fraction of a DAI. The hacker can then simply withdraw all of their",
        "yes,Price oracle manipulation.The vulnerability is in approveAndStrictlyCheckSTMPrice.AMM price oracle manipulation.The price oracle manipulation scheme described in the preceding subsection can easily be extended to support pro-assigned-loan-rollover strategies. By nature, the proposed voting approach is attractive to projects with several exchange pairs, since it encourages the lenders to vote for loan rollover when their HOME borrow fees are more attractive than the global average fees otherwise. As shown in the following listing, the _homeFees/globalFees comparison is performed every time the approveAndStrictlyCheckSTMPrice() function is invoked, allowing the fee attractiveness to be monitored real-time during the loan term. ",
        "yes,Price oracle manipulation.The vulnerability is in hovah.estateStake.speakerPawnBTCPriceBaseCap.AMM price oracle manipulation.The spread adoption strategy in Basket Capital goes like this. The first city (Sabadell, Barcelona)N was commissioned and launched in January 2018. In March, OceanEx launched Basket Capital as a recourse project. The team chose the N-1 city (Xiamen) as the second city. One argument for this choice is to ensure there is enough liquidity and spreads are tight before launching the final city. As a result, there is a 4-month gap between Sabadell launch and the Xiamen launch. During that time, a 24-hour volume higher than 25,000 USD is observed in Sabadell\u2019s ETH/BTC pair. It is reasonable to assume that the same liquidity volume will be in Xiamen\u2019s ETH/BTC pair on launch day.  attm"
    ],
    "1": [
        "yes,fake deposit.The vulnerability is in BuyableauDapMe.fake deposit.The reward can be stolen by a fake deposit.There\u2019s a reward award for each stake transaction, but it\u2019s not transferred immediately. Instead, it\u2019s placed in a frozen Debt balance that the scammer can steal gradually by making a series of internal transactions. As mentioned above, the tokens used for a transaction are transferred from the Dashboard wallet, so if someone wants to steal the reward, the first transaction will be made from the hacker\u2019s address to the address of the contract.",
        "yes,Price oracle manipulation.The vulnerability lies in _stake.tokenIndex[_tokenId] = tokenIndexInStakes[_tokenId];.AMM price oracle manipulation.The function stakeBatch allows to stake multiple token at once. But the tokenIndexInStakes map accesses to#$#$ a uint256 is used as a lookup index. It is possible (though a little convoluted) to bring the value of a certain // function stakeBatch does the same for multiple token, uint256i for i in the loop. Currently, it updates the n the time with the index i, that should be the total number of token. The value of forEachIndex cannot reached 3, if that happens, the program may have a serious problem. Otherwise, there- value back to index 3. And now this index is used to make decisions in the program, resulting in somea bad behavior. Investigation on further code analysis is recommended.",
        "yes,Price oracle manipulation.The vulnerability is in for (uint i =0;i <_tokenIds.length;i++){.ogenchain69rtMbeyS4s4VJ2xGvX7Vb20uh6hS7nP3j6T3TmwEpw6dZKVbKG28vhtV9W     __stake.tokenIndex[_tokenId] =__stake.tokenIds.length,sub(1);. aforementioned value (e.g., tokens) or division result (e.g., a token dividend) is larger than expected, resulting in the reserves of the Uniswap contract being drained.",
        "yes,fake deposit.The vulnerability is in uint256 lastIndex=userStakes[msg.sender].length.sub(1);.Fake reward can be arbitrarily large with no cap.Star Bonds Eternaily Staked Tokens vulnerability",
        "yes,Price oracle manipulation.The vulnerability is in stakeBatch function.AMM price oracle manipulation.the function stakeBatch has a design flaw. the computation statement PsyNetMessage ieselPrice=iEloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSlo  temperature=280-iEloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSloheSlo  ;  Investigative \"$:/ ocation=glands.lists.tempLocation; ?????-?????- converters.allowance=1w; "
    ],
    "2": [
        "yes,Price oracle manipulation.The vulnerability is in EStream     uint256 balance = stakingNFT.balanceof(msg.sender); ?????-?????-     for (uint i = e;i<balance; i++) {Administrative access restriction bypass.AMM price oracle manipulation.In the function stakeAll, userstake[msg.sender].push() before Downloadha Stake storage __stake=userStakes[nsg.sender][1astIndex];.It means that the amount ofusersthings that a partner sets to be deposited is not trusted, and the user can set whatever he/she likes. In some situations, the user may choose a very large amount, an amount that is larger than the total available balance in the contract. When that happens, the final value that is transferred to the contract is the original (fake) one, but the transaction uses the huge amount as the value,",
        "yes,Price oracle manipulation.The vulnerability is in ?????-?????-  umped.claimReward();cloneembedreportprintdiff transaction.An external caller (e.g., reward claiming dapp) can initiate stakeAll and can manipulate the currentIndex rawdownload so that it points to a high value token index, use the special low-cost transferOperation of the flashToken contract luaj so that the totalStaked is transferred to the user.The transaction fees of the current blockchain is very cheap, and user\u2019s totalStaked is transfer",
        "yes,fake deposit.The vulnerability is in uint256 balance = stakingNFT.balanceof(msg.sender);.Sandwich attack.Fake deposit means that a token contract\u2019s standard interfaces can be invoked but it does not transfer tokens",
        "yes,fake deposit.The vulnerability is in stakeAll function.Fake deposit means that token can be stolen from upstream contract.Fake deposit occurs when a Token contract\u2019s transfer() routine is invoked with a pose pointing to a other contract that does not have the privileges to access the entrusted funds, resulting in a scenario in which the Token contract\u2019s total balance may be stolen.",
        "yes,Price oracle manipulation.The vulnerability is in uint256 balance = stakingNFT.balanceof(msg.sender);.AMM price oracle manipulation.The function stakeAll takes a uint8 as argument _type, and then proceeds to compute a balance for the caller"
    ],
    "3": [
        "yes,Price oracle manipulation.The vulnerability is in uint accReward = crossBlock.mul(_activity.rewardPerBlock);.AMM price oracle manipulation.The flow is similar to the above but with different reward manipulation rules. The registers hard-coded for the above are pool.accRewardPerStake and pool.1astkewardBlock. Protection of these two registers can be used to manipulate the reward of the current block. ",
        "yes,Price oracle manipulation.The vulnerability is in uint accReward = crossBlock.mul(_activity.rewardPerBlock);.AMM price oracle manipulation.The scanning reward loop in ScanningPool.sol has a price oracle manipulation vulnerability. The reward per block is calculated by cross block with the rewardPerBlock, and the rewardPerBlock is retrieved from the activity token contract using the getRewardPerBlock method, but the getRewardPerBlock is a fee-less method, so the activity token contract will damage very much if the transaction volume is high.",
        "yes,Price oracle manipulation.The vulnerability is in uint accReward = crossBlock.mul(_activity.rewardPerBlock);.AMM price oracle manipulation.The division statement before the bonus calculation in line 359 can be manipulated by large reward values that break the division statement and impact all following reward bonus calculations. Rewarding large amounts of tokens can result in a near-free token bonus that can be abused for an instant pool share bonus. The pool share bonus can be stolen or transferred to another address.",
        "yes,Price oracle manipulation.The vulnerability is in uint accReward = crossBlock.mul(_activity.rewardPerBlock);.AMM price oracle manipulation.The conversion from the traditional credit-score to bribery score is based on the total rewards (i.e., the pool.accRewardPerStake) that the user has generated so far. I noticed that there is a term labeled as \"total rewards\" in the contract, and I come across with a possible manipulation attack. The possible attacks are detailed below: 1.The value of total rewards can be easily manipulated by temporarily lending more SPOTC treasures than the actual one. The attack can be carried out by borrowing the tokens from others and lending to the pool contract with a much-bigger-than-actual dollars loan. Once the attack succeeds, the manipulation can be reverted by transferring back the borrowed tokens to the lender. Besides, it can also be accompanied by other attacks",
        "yes,Price oracle manipulation.The vulnerability is in crossBlock > 0.AMM price oracle manipulation.The momentary reward is computed as crossBlock.mul(_activity.rewardPerBlock).If crossBlock is larger than 0, a large reward can be obtained by manually controlling crossBlock."
    ],
    "4": [
        "yes,Precision loss.The vulnerability is in addTotalSupply function.The integer division to multiply the decim (10) to the _amount can lead to precision loss for less than 10.",
        "yes,Price oracle manipulation.The vulnerability is in addTotalSupply function.AMM price oracle manipulation.The function addTotalSupply is invoked by the transferGold and loanGold functions to update the totalSupply of Aura. This function is subject to price oracle manipulation since it only invokes the getSamplePrice to get the price of XAUUSD and use it to calculate the total supply. Greedy investors can hook the getSamplePrice function to manipulate the total supply.",
        "yes,Price oracle manipulation.The vulnerability is in totalSupply = totalSupply.add(_amount).AMM price oracle manipulation.The AdvanteageousPriceManipulation attack occurs when a sandboxed contract is invoked with arbitrary arguments in the testnet, and an attacker attempts to manipulate the value returned by the contract.This vulnerability allows an attacker to manipulate the totalSupply for the CartCourse contract. It#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$#$ sqor public addTotalSupply(uint256 _amount) onlyowner {ActionCode  punishments.In the current implementation of the CartCourse contract, there is a price manipulation safeGuard for the totalSupply\uff1a dressing gowns. Although attacker cannot control the totalSupply directly, they can use the IncreaseSupply()/DecreaseSupply() to achieve the goal. The below is the vulnerable code.definition(",
        "yes,Precision loss.The vulnerability is in function addTotalSupply.AMM addTotalSupply function adds prelude amount to totalSupply which is an integer However the multiply operation performed on the decim step can lead to precision loss when _amount is less than 10.",
        "yes,Price oracle manipulation.The vulnerability is in addTotalSupply function.AMM price oracle manipulation.The addTotalSupply contract suffers from a price oracle manipulation vulnerability. The  ItemLevel totalSupply is calculated by multiplying the decim value with the _amount. This leads to possible \udbc0\udcbe abuse by the _amount parameter. The decim value can be arbitrarily chosen by the contract creator \udbc0\udcbe or certain points along the transfer of the token. By choosing a decim value close to 1, it's easy \udbc0\udcbe to manipulate the totalSupply value."
    ]
}