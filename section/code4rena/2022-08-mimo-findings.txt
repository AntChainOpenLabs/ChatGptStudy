{"Vulnerability Type": "Vault automation and management misconfiguration", "Vulnerability Location": "MIMOAutoAction.sol#setAutomation and MIMOManagedAction.sol#setAutomation", "Repair Method": "Check that the vault is initialized before setting automation or management parameters", "Vulnerability Information": "An attacker can set automation or management parameters for a non-existing vault, leading to potential loss of funds for the user."}

{"Vulnerability Type": "Smart contract reentrancy vulnerability", "Vulnerability Location": "MIMOAutoRebalance.sol#rebalance", "Repair Method": "Add nonReentrant modifier to the function", "Vulnerability Information": "An attacker can exploit the vulnerability to steal funds by swapping through a malicious token that transfers control to the caller."}

{"Vulnerability Type": "Failure to transfer leftover assets to owner", "Vulnerability Location": "MIMOEmptyVault.sol executeOperation()", "Repair Method": "Transfer the remaining balance back to MIMOProxy or owner", "Vulnerability Information": "MIMOEmptyVault.sol executeAction() is supposed to pay off the debt and return the leftover assets to the owner of the Vault. But in fact the emptyVault contract, after executing the executionOperation(), only pays back the flash loan, and does not transfer the leftover assets to the owner, and locked in the emptyVault contract."}

{"Vulnerability Type": "Unexpected ownership behavior", "Vulnerability Location": "Registry.sol", "Repair Method": "Disallow anyone to call deploy() and deployFor() in Factory(). Delete Proxy.transferOwnership().", "Vulnerability Information": "Registry.sol fails to deliver expected functionality. There are multiple problems: 1. Proxy owner can change and will not be registered 2. There many ways for an owner to have many proxies."}

{"Vulnerability Type": "Reentrancy", "Vulnerability Location": "BoringBatchable contract", "Repair Method": "Remove payable from batch() function in BoringBatchable contract", "Vulnerability Information": "Persisted msg.value in a loop of delegate calls can be used to drain ETH from your proxy"}

{"Vulnerability Type": "Manipulation of MIMOProxy permissions", "Vulnerability Location": "MIMOProxy contract", "Repair Method": "Maintain and consult an external registry to further constrain envoys and prevent them from calling target contracts that are not known Mimo modules", "Vulnerability Information": "A malicious (or malfunctioning) target contract with the same or overlapping storage layout may manipulate envoy permissions."}

{"Vulnerability Type": "Front-running automated calls", "Vulnerability Location": "MIMOAutoRebalance contract", "Repair Method": "Add a time-lock to setAutomation function", "Vulnerability Information": "A malicious vault owner could front-run automated calls to MIMOAutoRebalance#rebalance and reconfigure their automated vault with a reduced incentive fee."}

{"Vulnerability Type": "Malicious manipulation of gas reserve", "Vulnerability Location": "MIMOProxy.sol#L18-L19, MIMOProxy.sol#L74-L79", "Repair Method": "Restore the `setMinGasReserve` function removed in `PRBProxy` v2.0, which will allow the proxy owner to directly set this value", "Vulnerability Information": "A malicious target contract can permanently block access to a `MIMOProxy` by setting `minGasReserve` to a very high value and forcing an underflow in the gas stipend calculation."}

{"Vulnerability Type": "Inconsistent manager fees", "Vulnerability Location": "MIMOManagedRebalance.sol#rebalance", "Repair Method": "Calculate varFee against the PAR of the rebalance", "Vulnerability Information": "Inconsistent manager fees could lead to lack of incentivization to rebalance and unexpected liquidation."}

{"Vulnerability Type": "Circumvention of ProxyRegistry", "Vulnerability Location": "MIMOProxyFactory.sol#deployFor", "Repair Method": "Add access control to ensure the factory deployFor function is called from the proxy registry", "Vulnerability Information": "The `deployFor()` function in `MIMOProxyFactory.sol` can be called directly instead of being called within `MIMOProxyRegistry.sol`. This results in the ability to create many MIMOProxies that are not registered within the registry."}

{"Vulnerability Type": "Incorrect implementation of access control", "Vulnerability Location": "MIMOProxy:execute function", "Repair Method": "Read the first four bytes of the data parameter directly rather than using data.offset to extract the function selector from calldata", "Vulnerability Information": "An attacker can affect the execution by providing trash data at the end of the function, bypassing the check for permission to call a specified target with specified calldata."}

{"Vulnerability Type": "Proxy contract vulnerability", "Vulnerability Location": "MIMOProxyRegistry#deployFor function", "Repair Method": "Check whether the proxy has been destroyed as part of the 'proxy already exists' conditions. If the proxy address has a codesize of zero, it has been destroyed.", "Vulnerability Information": "If a MIMOProxy owner destroys their proxy by calling selfdestruct, they cannot deploy another from the same address."}

