{"Vulnerability Type": "Rigging the draw", "Vulnerability Location": "startDraw() and redraw() functions", "Repair Method": "Enforce a minimum cooldown of 24 hours before allowing redraws", "Vulnerability Information": "The draw organizer can rig the draw to favor certain participants by using an underfunded subscription ID to invalidate the assumption of fairness in the random selection process. This can be done by waiting until the redraw cooldown has passed, funding the subscription ID, and then frontrunning the Chainlink TX with a redraw() call if they don't like the response."}

1. {"Vulnerability Type": "Raffle creator might not start raffle draw", "Vulnerability Location": "VRFNFTRandomDraw.sol", "Repair Method": "Transfer the NFT to the contract at the time of creation of the raffle. Add a check in lastResortTimelockOwnerClaimNFT if a winner was drawn. Allow anyone to execute startDraw function, but limit the time window of when startDraw can be executed. Introduce a new state variable firstDrawTime that acts as a timestamp after which drawing can happen. Add a role that has the power to change the VRF subscription or restore the NFT in cases where the winner is not picked in reasonable time.", "Vulnerability Information": "The raffle creator is not required to actually give the NFT away. The NFT that is used for the raffle is transferred to the contract when startDraw is executed. Before that, the NFT is in the hands of the creator."}
2. {"Vulnerability Type": "VRFNFTRandomDraw admin can prevent created or started raffle from taking place", "Vulnerability Location": "VRFNFTRandomDraw.sol", "Repair Method": "Ensure that keyHash is validated within coordinator.requestRandomWords(). Ensure that the owner-provided chain.link VRF subscription has sufficient funds to pay at the time the oracle attempts to supply random values in fulfillRandomWords().", "Vulnerability Information": "The admin/owner of VRFNFTRandomDraw can start a raffle, including emitting the SetupDraw event, but in a way that ensures fulfillRandomWords() is never called."}
3. {"Vulnerability Type": "Protocol safeguards for time durations are skewed by a factor of 7", "Vulnerability Location": "VRFNFtRandomDraw.sol", "Repair Method": "Fix MONTH_IN_SECONDS calculation: uint256 immutable MONTH_IN_SECONDS = (3600 * 24) * 30;", "Vulnerability Information": "In VRFNFtRandomDraw.sol initialize(), the MONTH_IN_SECONDS variable is used to validate two values. The issue is that MONTH_IN_SECONDS is calculated incorrectly, multiplies by 7 incorrectly, as it was copied from WEEK_IN_SECONDS. Therefore, actual seconds calculated is equivalent of 7 months."}

{"Vulnerability Type": "Timelock bypass", "Vulnerability Location": "lastResortTimelockOwnerClaimNFT() function", "Repair Method": "Update recoverTimelock for each dice roll and add a recoverBufferTime", "Vulnerability Information": "The admin can call lastResortTimelockOwnerClaimNFT() before the specified time due to recoverTimelock not being updated properly."}

