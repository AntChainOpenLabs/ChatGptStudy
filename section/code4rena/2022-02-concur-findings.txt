1. {"Vulnerability Type": "backdoor", "Vulnerability Location": "StakingRewards.sol recoverERC20()", "Repair Method": "Change the function to transfer tokens to a specified address instead of the owner address", "Vulnerability Information": "The owner can use recoverERC20() to retrieve rewardsToken, which can result in users losing their rewards to a malicious/compromised owner."}
2. {"Vulnerability Type": "fund lock", "Vulnerability Location": "USDMPegRecovery", "Repair Method": "Price user contribution based on LP tokens or have users deposit the LP token directly", "Vulnerability Information": "The internal balances in the contract can become imbalanced due to the way curve works, causing users to be unable to withdraw the exact amounts they deposited and resulting in funds being stuck."}
3. {"Vulnerability Type": "reward balance check", "Vulnerability Location": "StakingRewards.sol notifyRewardAmount()", "Repair Method": "Change the function to addReward() and use transferFrom() to transfer rewardsToken into the contract", "Vulnerability Information": "The contract only checks if balanceOf rewardsToken is greater than or equal to the future rewards, which can result in the contract ending up in a wrong state that makes some users unable to claim their rewards."}
4. {"Vulnerability Type": "deposit/withdraw disablement", "Vulnerability Location": "ConvexStakingWrapper", "Repair Method": "Check the reward before doing transfer and related computations", "Vulnerability Information": "If a reward token doesn't allow for zero value transfers, the reward update function will fail on an empty incremental reward transfer, which is now done unconditionally, reverting the caller deposit/withdrawal functionality."}
5. {"Vulnerability Type": "funds drain", "Vulnerability Location": "Shelter", "Repair Method": "Change the _to address to msg.sender", "Vulnerability Information": "The claimed mapping is set with the _to address, not the msg.sender address, allowing any user to withdraw all the funds from the shelter."}

1. {"Vulnerability Type": "Reentrancy Attack", "Vulnerability Location": "ConcurRewardPool.sol#L34", "Repair Method": "Use a nonReentrant modifier, set balances to 0 first before disbursing the rewards", "Vulnerability Information": "The reward tokens are transferred before the balances are set to 0, making it possible to perform a reentrancy attack if the reward token has some kind of call back functionality."}
2. {"Vulnerability Type": "Double Rewards", "Vulnerability Location": "StakingRewards.sol and ConvexStakingWrapper.sol", "Repair Method": "Ensure that staking tokens cannot be deposited in both the StakingRewards.sol and ConvexStakingWrapper.sol contracts. If this is intended behaviour, it may be worthwhile to ensure that the sheltered users have their deposited balance wiped from the MasterChef.sol contract upon being sheltered.", "Vulnerability Information": "Users can continue claiming Concur rewards after the shelter has been activated, resulting in double the amount of rewards they should be receiving."}
3. {"Vulnerability Type": "Incorrect Reward Token Calculation", "Vulnerability Location": "MasterChef.sol#L86", "Repair Method": "Update all existing pools before adding new pool. Use the massUdpate() function which is already present ... but unused.", "Vulnerability Information": "When adding a new token pool for staking in MasterChef contract, all other already added pools should be updated but currently they are not, resulting in user rewards not being computed correctly."}
4. {"Vulnerability Type": "Loss of Rewards", "Vulnerability Location": "ConvexStakingWrapper.sol", "Repair Method": "Consider allowing users to call a public facing _checkpoint function once their funds have been drained to the Shelter.sol contract. This should ensure they receive their fair share of rewards.", "Vulnerability Information": "Users will lose rewards if the shelter mechanism is enacted before a recent checkpoint, as they will only receive their rewards upon depositing/withdrawing their funds due to how the checkpointing mechanism works."}
5. {"Vulnerability Type": "Rug Pull", "Vulnerability Location": "StakingRewards.sol#L166", "Repair Method": "Add an additional check to require that the token being withdrawn is not the rewards token.", "Vulnerability Information": "StakingRewards.recoverERC20 allows the owner to sweep the rewards tokens, perhaps as a way to rug depositors."}

{"Vulnerability Type": "Smart Contract", "Vulnerability Location": "Multiple locations in StakingRewards.sol, ConvexStakingWrapper.sol, and MasterChef.sol", "Repair Method": "Add functionality for removing pool or setting pool's totalAllocPoint param, redesign mechanism to ensure each pool is allocated only a fraction of the total rewards instead of the change in contract balance, consider keeping the rewardRate constant but extend periodFinish time by += reward / rewardRate, wrap a certain amount of initial totalSupply at deployment and never burn it, use uint256 instead of uint128 for reward.integral, lower 1e20 down to 1e12, check transfer to treasury has succeeded before updating accounting", "Vulnerability Information": "Various vulnerabilities in the smart contracts that can lead to dilution of reward rate, siphoning rewards from other pools, disruption of rewards distribution, and dilution of rewards due to totalAllocPoint only increasing."}

1. {"Vulnerability Type": "Insufficient Balance", "Vulnerability Location": "USDMPegRecovery.sol#withdraw()", "Repair Method": "Call usdm3crv.remove_liquidity_one_coin() when the balance is insufficient for the user's withdrawal", "Vulnerability Information": "The `withdraw()` may often fail due to insufficient funds in the balance."}
2. {"Vulnerability Type": "Malicious Admin", "Vulnerability Location": "Shelter.sol#L38-L42", "Repair Method": "Avoid `activate` twice for the same token, `donate` only after the `GRACE_PERIOD`", "Vulnerability Information": "The Shelter contract can steal user tokens."}
3. {"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "MasterChef.sol#L78-L80, MasterChef.sol#L157-L180", "Repair Method": "Set an immutable depositor instead of allowing any contract to become a depositor, ask the depositor contract for the total supply instead of expecting `lpTokens` to be in the `Masterchef`", "Vulnerability Information": "Owner can steal Concur rewards by adding a depositor and inflating other depositors' assigned balance of the token within the contract."}
4. {"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "StakingRewards.setRewardsDuration", "Repair Method": "Check for min and max range in the rewardsDuration setter", "Vulnerability Information": "Setting near zero or enormous rewardsDuration breaks reward logic."}
5. {"Vulnerability Type": "Logical Flaw", "Vulnerability Location": "MasterChef.sol", "Repair Method": "Create a receipt token to represent the invested token and use the receipt tokens in MasterChef", "Vulnerability Information": "Users won't be able to receive the Concur rewards."}
6. {"Vulnerability Type": "Loss of Yield", "Vulnerability Location": "ConvexStakingWrapper.sol, MasterChef.sol", "Repair Method": "Remove sheltered pools from the `MasterChef.sol` Concur token distribution, create a sweep mechanism which can be called by the contract owner", "Vulnerability Information": "Users Will Lose Concur Rewards If The Shelter Mechanism Is Enacted On A Pool."}
7. {"Vulnerability Type": "Malicious Owner", "Vulnerability Location": "MasterChef.sol#L82-L84", "Repair Method": "Have an immutable depositor that can't be changed", "Vulnerability Information": "Owner can lock tokens in MasterChef."}

1. {"Vulnerability Type": "Locked USDM deposits", "Vulnerability Location": "USDMPegRecovery.sol#L90", "Repair Method": "Refactor the contract to transform it into a Yield Bearing Vault and denominate the deposit token in the CRV_LP token to avoid issues with Single Sided Exposure", "Vulnerability Information": "USDM deposits are locked based on the KPIâ€™s from carrot.eth. However, USDM deposits are also locked until guardian remove liquidity because there are no mechanism to remove deposited USDM in `withdraw`."}
2. {"Vulnerability Type": "Bypassing deactivate function", "Vulnerability Location": "Shelter.sol", "Repair Method": "Add a condition to the activate function to check if the token is already activated before activating it", "Vulnerability Information": "onlyClient can deactivate a token even after deadline is passed and transfer all token balance to itself."}
3. {"Vulnerability Type": "Donated tokens cannot be recovered", "Vulnerability Location": "Shelter.sol#L32-L36", "Repair Method": "Allocate donated LP tokens to the contract owner when a shelter is deactivated by checking for an excess of LP tokens", "Vulnerability Information": "Donated Tokens Cannot Be Recovered If A Shelter Is Deactivated."}
4. {"Vulnerability Type": "Unable to add liquidity to the usdm3crv pool", "Vulnerability Location": "USDMPegRecovery.sol#provide()", "Repair Method": "Change the implementation of `USDMPegRecovery.sol#provide()` to calculate `addingLiquidity` based on the minimum balance of `usdm` and `pool3` tokens", "Vulnerability Information": "USDMPegRecovery.sol#provide() Improper design/implementation make it often unable to add liquidity to the usdm3crv pool."}
5. {"Vulnerability Type": "Incorrect reward distribution", "Vulnerability Location": "MasterChef.sol#L205-L206", "Repair Method": "Add a require statement to the `MasterChef.safeConcurTransfer` function to check if the balance is zero before transferring Concur tokens", "Vulnerability Information": "During stake or deposit, users would not be rewarded the correct Concur token, when MasterChef has under-supply of it."}

1. {"Vulnerability Type": "Wrong implementation", "Vulnerability Location": "ConvexStakingWrapper.sol#_calcRewardIntegral", "Repair Method": "Compare the balanceOf reward token before and after getReward() to get the actual rewarded amount, and reward.remaining should be removed.", "Vulnerability Information": "Wrong implementation can disrupt rewards calculation and distribution."}
2. {"Vulnerability Type": "Improper handling of deposit fee", "Vulnerability Location": "MasterChef.sol#L170-L172", "Repair Method": "Transfer the fee to a feeReceiver or add a way to pull those fees.", "Vulnerability Information": "Improper handling of deposit fee can lead to permanent lockups of deposit fees in the relevant depositor contracts."}
3. {"Vulnerability Type": "May Erroneously Overwrite", "Vulnerability Location": "ConvexStakingWrapper.enterShelter()", "Repair Method": "Add to the amountInShelter[lpToken] mapping instead of overwriting it altogether.", "Vulnerability Information": "May Erroneously Overwrite amountInShelter Leading To Locked Tokens."}

{"Vulnerability Type": "Arbitrary Deposit Amount", "Vulnerability Location": "MasterChef.sol deposit() function", "Repair Method": "Remove the depositor role or add a limit to the deposit amount parameter", "Vulnerability Information": "A depositor can deposit an arbitrary amount without any cost, allowing a malicious/compromised depositor to take the majority share of all pools simply by calling deposit() with extremely large amounts, and take all the rewards."}

{"Vulnerability Type": "Reentrancy Attack", "Vulnerability Location": "Shelter.sol withdraw() function", "Repair Method": "Check claims against msg.sender and record who is withdrawing", "Vulnerability Information": "Repeated calls to Shelter.withdraw can drain all funds in Shelter, allowing an attacker that can successfully call withdraw() once on a shelter, to call it repeatedly to steal the funds of others."}

{"Vulnerability Type": "Unsafe Type Casting", "Vulnerability Location": "ConvexStakingWrapper.sol deposit() function", "Repair Method": "Add an upper limit for the amount parameter", "Vulnerability Information": "When the value of the amount parameter is larger than type(uint192).max, due to unsafe type casting, the recorded deposited amount can be much smaller than their invested amount, causing the depositor to lose all their invested funds."}

{"Vulnerability Type": "Insufficient Liquidity", "Vulnerability Location": "USDMPegRecovery.sol provide() function", "Repair Method": "Modify the provide() function such that a _steps argument can be supplied or use the balance of the pool3 token to calculate the LP amounts", "Vulnerability Information": "The provide() function does not take a _steps argument and will instead calculate addingLiquidity by truncating amounts under step. As a result, if there is an excess of usdm such that the truncated amount exceeds the contract's pool3 truncated balance, then the function will revert due to insufficient pool3 collateral, preventing guardians from effectively providing liquidity whenever tokens are available."}

1. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "ConvexStakingWrapper", "Repair Method": "Change the code to call the correct function or implement the missing function", "Vulnerability Information": "deposit in ConvexStakingWrapper will most certainly revert"}
2. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "ConvexStakingWrapper.exitShelter()", "Repair Method": "Re-deposit LP tokens upon calling exitShelter()", "Vulnerability Information": "ConvexStakingWrapper.exitShelter() Will Lock LP Tokens, Preventing Users From Withdrawing"}
3. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "ConvexStakingWrapper, StakingRewards", "Repair Method": "Add two new functions to MasterChef: depositFor() and withdrawFor()", "Vulnerability Information": "ConvexStakingWrapper, StakingRewards Wrong implementation will send concur rewards to the wrong receiver"}
4. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "Shelter", "Repair Method": "Add only the actual transferred amounts to savedTokens[_token]", "Vulnerability Information": "Fee-on-transfer token donations in Shelter break withdrawals"}
5. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "Shelter", "Repair Method": "Add a check to donate function to disallow new deposits after the grace period ends", "Vulnerability Information": "Deposits after the grace period should not be allowed"}

{"Vulnerability Type": "Unconstrained fee", "Vulnerability Location": "MasterChef.sol#L86-L101", "Repair Method": "Ensure that the fee is below a set maximum, which is set to no more than 100%", "Vulnerability Information": "Token fee in `MasterChef` can be set to more than 100%, (for example, by accident) causing all `deposit` calls to fail due to underflow on subtraction when reward is lowered by the fee, thus breaking essential mechanics."}

{"Vulnerability Type": "Failure to update reward variables", "Vulnerability Location": "MasterChef.sol#L135-L154", "Repair Method": "Ensure that once the `block.number = endBlock` statement has been reached, the `pool.accConcurPerShare` is updated to reflect the number of blocks that have passed up until `endBlock`", "Vulnerability Information": "The `updatePool` function intends to calculate the accumulated Concur rewards by tracking the number of blocks passed since the last update to correctly determine how many Concur tokens to distribute to each share. The reward distribution has a start and end block which dictates the timeframe by which rewards will be distributed to the underlying pool."}

{"Vulnerability Type": "Non-payable function", "Vulnerability Location": "VoteProxy.sol#L28-L35", "Repair Method": "Add `payable` mutability specifier", "Vulnerability Information": "`execute` will revert when `msg.value < 0`. Lacking `payable` mutability specifier."}

