{"Vulnerability Type": "Incorrect accounting of fee on transfer tokens", "Vulnerability Location": "OpenLevV1.closeTrade with V3 DEX", "Repair Method": "Control all the accounting and amounts to be returned to a user via balance before/after calculations for DEX V3 logic as well", "Vulnerability Information": "The amount that OpenLevV1 will receive can be less than V3 DEX indicated as a swap result, while it is used as given for position debt repayment accounting. This way actual funds received can be less than accounted, leaving to system funds deficit, which can be exploited by a malicious user, draining contract funds with multiple open/close with a taxed token."}

{"Vulnerability Type": "Missing payable", "Vulnerability Location": "LPool.sol, addReserves", "Repair Method": "Make the function payable since it uses msg.value", "Vulnerability Information": "The following functions are not payable but uses msg.value therefore the function must be payable. This can lead to undesired behavior."}

{"Vulnerability Type": "Unsafe use of transfer()", "Vulnerability Location": "OpenLevV1Lib's and LPool's doTransferOut functions", "Repair Method": "Replace transfer() with low-level call.value(amount) with the corresponding result check or using the OpenZeppelin Address.sendValue", "Vulnerability Information": "OpenLev operations use a wrapped native token, the whole user withdraw is being handled with a `payable.transfer()` call. This is unsafe as `transfer` has hard coded gas budget and can fail when the user is a smart contract."}

{"Vulnerability Type": "Anti-flashloan mechanism may lead to protocol default", "Vulnerability Location": "OpenLevV1Lib.sol", "Repair Method": "Use the twap price to determine if the position is healthy instead of reverting with maxLiquidationPriceDiffientRatio", "Vulnerability Information": "There is a price check to avoid flash loan attacks which significantly moved the price. If current price is 5% lower than the stored twap price, the liquidation will fail. This design can be dangerous as it is to openleverage's benefit to close under-collateralized position ASAP when there is a huge market drawdown."}

{"Vulnerability Type": "Trust Issue", "Vulnerability Location": "UniV2ClassDex.sol#uniClassSell()", "Repair Method": "Change the code to check the actually received amount by comparing the before and after the balance of the receiver", "Vulnerability Information": "While `uniClassBuy()` correctly checks the actually received amount by comparing the before and after the balance of the receiver, `uniClassSell()` trusted the result given by `getAmountOut()`. This makes `uniClassSell()` can result in an output amount fewer than `minBuyAmount`."}

{"Vulnerability Type": "Locking Funds", "Vulnerability Location": "Timelock contract", "Repair Method": "Implement the provided code to execute the transaction from the timelock contract", "Vulnerability Information": "Eth sent to Timelock will be locked in current implementation. Eth sent to timelock contract will not be used to execute the proposal, and the funds will remain locked."}

