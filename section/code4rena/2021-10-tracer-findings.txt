{"Vulnerability Type": "Inconsistency with fee-on-transfer tokens", "Vulnerability Location": "PoolCommiter.commit() function", "Repair Method": "Avoid using fee-on-transfer or rebasing tokens", "Vulnerability Information": "The `PoolCommiter.commit()` function will store the entire `amount` in the commitment but with fee-on-transfer tokens, fewer tokens will be transferred which leads to inconsistencies with the `pool.longBalance()` and in `uncommit`. One possible mitigation is to measure the asset change right before and after the asset-transferring routines."}

{"Vulnerability Type": "Sending tokens to the wrong user", "Vulnerability Location": "PoolCommitter._uncommit function", "Repair Method": "Instead of using msg.sender, use _commit.owner", "Vulnerability Information": "The _uncommit function sends tokens to the wrong user because it calls the ILeveragedPool(leveragedPool).quoteTokenTransfer/mintTokens function with msg.sender, which is the pool, not the commit owner."}

{"Vulnerability Type": "Mixed Units", "Vulnerability Location": "PoolKeeper.keeperReward computation", "Repair Method": "Make keeperTip() return a byte16 Quad value as a percentage where 100% = ABDKMathQuad.fromUInt(1) or divide by 100 as a quad instead of 1e18 as a quad because _tipPercent is not a WAD value, but simply a percentage where 1 = 1%", "Vulnerability Information": "The computation mixes WADs and Quads which leads to issues. The keeper rewards are off as the _keeperGas * _tipPercent is divided by 1e18 instead of 1e2."}

