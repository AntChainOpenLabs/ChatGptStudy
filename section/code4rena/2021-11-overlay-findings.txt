1. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1OVLCollateral contract", "Repair Method": "Update to a patched version of 4.3.3", "Vulnerability Information": "ERC1155Supply vulnerability in the OverlayV1OVLCollateral contract due to the use of an outdated version of OpenZeppelin contracts (4.3.2) that has a recently discovered vulnerability."}
2. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1Mothership contract", "Repair Method": "Use a timelock for critical params of the system and emit events to inform the outside world", "Vulnerability Information": "Governance functions in the OverlayV1Mothership contract can change important parameters of the system without emitting events or using a timelock, which can impact the function of the protocol or leak value with a hypothetical attack path."}
3. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1OVLCollateral and OverlayV1Governance contracts", "Repair Method": "Remove the cached version and always fetch on the go", "Vulnerability Information": "The cached version of the ovl address in the OverlayV1OVLCollateral and OverlayV1Governance contracts can be outdated if the governor points it to a new address using the setter function in the mothership contract."}
4. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1Mothership contract", "Repair Method": "Set collateralActive[_collateral] to true in enableCollateral() and to false in disableCollateral()", "Vulnerability Information": "The disableCollateral() function in the OverlayV1Mothership contract revokes roles but doesn't set collateralActive[_collateral] to false, which prevents the use of enableCollateral() and granting roles again."}
5. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1OVLCollateral contract", "Repair Method": "Accrue fees only on a remaining part of position that is available after taking debt into account", "Vulnerability Information": "The fees in the OverlayV1OVLCollateral contract are accounted for before position health check and aren't corrected thereafter when there is a shortage of funds, which can lead to fee withdrawal malfunction and inability to withdraw fees or funds leakage to fees."}
6. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayToken.sol contract", "Repair Method": "Update _totalSupply in _transferMint() and _transferBurn()", "Vulnerability Information": "The _transferMint() and _transferBurn() functions in the OverlayToken.sol contract don't update _totalSupply, which can lead to an unrealistic view of the total OVL tokens."}
7. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "OverlayV1Mothership.sol contract", "Repair Method": "Define upper and lower bounds on the adjustGlobalParams() function", "Vulnerability Information": "The adjustGlobalParams() function in the OverlayV1Mothership.sol contract does not have any upper or lower bounds, which can lead to reversion in critical functions and potential governance rug."}

{"Vulnerability Type": "missing check on input parameters", "Vulnerability Location": "pow() function in LogExpMath.sol", "Repair Method": "Add a check on input parameters with 0 value", "Vulnerability Information": "The pow() function in LogExpMath.sol is missing a check on input parameters with 0 value, which might lead to unexpected results."}

{"Vulnerability Type": "computational", "Vulnerability Location": "fetchPricePoint() function in OverlayV1UniswapV3Market", "Repair Method": "Use marketFeed.token0() == WETH to compute the liquidity instead of ovlFeed.token0() == WETH", "Vulnerability Information": "The fetchPricePoint() function in OverlayV1UniswapV3Market computes the market liquidity and depth incorrectly due to the use of the wrong token position for the ETH pair, which can lead to a wrong market cap computation."}

{"Vulnerability Type": "logical", "Vulnerability Location": "_isUnderwater() function in Position.sol", "Repair Method": "Flip the left and right side of the inequality for short positions in _isUnderwater()", "Vulnerability Information": "The _isUnderwater() function in Position.sol returns the opposite boolean for short positions due to a flipped inequality, which can have a huge impact if used to deal with underwater positions."}

{"Vulnerability Type": "access control", "Vulnerability Location": "burn() function in OverlayToken.sol", "Repair Method": "Add an access control modifier to the burn() function", "Vulnerability Information": "The burn() function in OverlayToken.sol allows the burner to burn any amount of tokens of any user, which is not a good solution. An access control modifier with privileges can prevent unexpected burn amounts."}

