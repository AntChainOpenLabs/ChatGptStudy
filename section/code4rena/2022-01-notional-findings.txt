1. {"Vulnerability Type": "Cooldown and redeem windows can be rendered useless", "Vulnerability Location": "sNOTE.startCooldown()", "Repair Method": "Option B: Let the contract start the cooldown on mint, and bind the cooldown/redeem window to the amount that was minted at that time by the account. Don't make sNOTE.startCooldown() available externally. Redeem should verify amount of token available using this new logic.", "Vulnerability Information": "Cooldown and redeem windows can be rendered useless by transferring between redeem windows and making the redeem window effectively useless."}
2. {"Vulnerability Type": "A Malicious Treasury Manager Can Burn Treasury Tokens By Setting  makerFee  To The Amount The Maker Receives", "Vulnerability Location": "MixinExchangeCore.sol#L196-L250", "Repair Method": "Consider checking that `makerFee == 0` and `takerFee == 0` in `EIP1271Wallet._validateOrder` s.t. the treasury manager cannot sign unfair orders which severely impact the `TreasuryManager` contract.", "Vulnerability Information": "A malicious treasury manager can burn treasury tokens by setting makerFee to the amount the maker receives."}
3. {"Vulnerability Type": "sNOTE Holders Are Not Incentivized To Vote On Proposals To Call  extractTokensForCollateralShortfall", "Vulnerability Location": "sNOTE.sol#L99-L129", "Repair Method": "Consider redesigning this mechanism to better align stakers with the health of the protocol. It might be useful to allocate a percentage of generated fees to an insurance fund which will be used to cover any collateral shortfall events. This fund can be staked to generate additional yield.", "Vulnerability Information": "sNOTE holders are not incentivized to vote on proposals to call extractTokensForCollateralShortfall."}
4. {"Vulnerability Type": "sNOTE.sol#_mintFromAssets() Lack of slippage control", "Vulnerability Location": "sNOTE.sol#L195-L209", "Repair Method": "Consider adding a `minAmountOut` parameter for these functions.", "Vulnerability Information": "Lack of slippage control in sNOTE.sol#_mintFromAssets()."}
5. {"Vulnerability Type": "Treasury cannot claim COMP tokens & COMP tokens are stuck", "Vulnerability Location": "TreasuryAction.claimCOMPAndTransfer", "Repair Method": "Don't use pre-and post-balances, can you use the entire balance?", "Vulnerability Information": "The treasury cannot claim COMP tokens and COMP tokens are stuck."}

1. {"Vulnerability Type": "Access Control", "Vulnerability Location": "_validateOrder function in EIP1271Wallet contract", "Repair Method": "Add require statements to ensure takerAddress and senderAddress are set to the zero address", "Vulnerability Information": "The _validateOrder function in EIP1271Wallet contract does not ensure that the takerAddress and senderAddress are set to the zero address, allowing the manager to restrict order trades to themselves."}
2. {"Vulnerability Type": "Access Control", "Vulnerability Location": "extractTokensForCollateralShortfall function in sNOTE contract", "Repair Method": "Enforce a limit during a time period to prevent withdrawal over 50% of the total amount of BPT", "Vulnerability Information": "The extractTokensForCollateralShortfall function in sNOTE contract allows the owner to withdraw almost all of the BPT by calling the function multiple times, circumventing the 50% limit."}
3. {"Vulnerability Type": "Access Control", "Vulnerability Location": "startCooldown function in sNOTE contract", "Repair Method": "Provide a sensible upper limit to coolDownTimeInSeconds of, say, a month", "Vulnerability Information": "The startCooldown function in sNOTE contract allows the owner to choose an arbitrary value for coolDownTimeInSeconds, which can cause the function to revert and lock users' assets indefinitely."}
4. {"Vulnerability Type": "Deprecated Functionality", "Vulnerability Location": "EIP1271Wallet contract", "Repair Method": "Use the latestRoundData function instead of the deprecated latestAnswer function", "Vulnerability Information": "The EIP1271Wallet contract uses the deprecated latestAnswer function from Chainlink API, which can return 0 if no answer has been reached and has different decimal places for crypto and FX quotes."}
5. {"Vulnerability Type": "Access Control", "Vulnerability Location": "getVotingPower function in sNOTE contract", "Repair Method": "Implement a getPriorVotingPower function which takes in a blockNumber argument and returns the correct balance at that specific block", "Vulnerability Information": "The getVotingPower function in sNOTE contract does not utilize any checkpointing mechanism to ensure the user's voting power is a snapshot of a specific block number, allowing for manipulation of a user's voting power."}

