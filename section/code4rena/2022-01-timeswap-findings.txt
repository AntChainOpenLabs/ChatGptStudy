{"Vulnerability Type": "Cross-site scripting (XSS)", "Vulnerability Location": "NFTTokenURIScaffold#constructTokenURI function and NFTSVG.constructSVG function", "Repair Method": "Sanitize any potential user-input that goes into generating the SVG file or remove all user-input data from the SVG file or not generate the SVG at all", "Vulnerability Information": "If a malicious user is able to inject malicious Javascript into a SVG file, then any user who views the SVG on a website will be susceptible to XSS. This can lead stolen cookies, Denial of Service attacks, and more."}

{"Vulnerability Type": "Arbitrary Interest Rate Manipulation", "Vulnerability Location": "`TimeswapPair.sol#mint` function", "Repair Method": "Add constraints on user input to prevent arbitrary interest rate manipulation", "Vulnerability Information": "Due to lack of constraints on user input in the `TimeswapPair.sol#mint` function, an attacker can arbitrarily modify the interest rate while only paying a minimal amount of Asset Token and Collateral Token."}

{"Vulnerability Type": "Convenience contract fails to function if asset or collateral is an ERC20 token with fees", "Vulnerability Location": "Convenience contract's callback function", "Repair Method": "Create a new convenience contract to interact with Timeswap V1 Core if someone wants to utilize tokens with fees", "Vulnerability Information": "If the asset or collateral used in a pair is an ERC20 token that collects fees with each transfer, the Convenience contract fails to function."}

{"Vulnerability Type": "DOS pay function", "Vulnerability Location": "pay() function", "Repair Method": "If assetsIn[i] is bigger than due.debt, set assetsIn[i]=due.debt and due.debt=0", "Vulnerability Information": "An attacker can frontrun to repay a single token for a user's debt, causing the line 'due.debt -= assetsIn[i];' to revert due to underflow."}

{"Vulnerability Type": "safeName() can revert causing DoS", "Vulnerability Location": "safeName() function", "Repair Method": "Use the BoringCrypto safeName() function code to handle the case of a bytes32 return value", "Vulnerability Information": "The safeName() function assumes the return type of any ERC20 token to be a string, causing abi.decode() to revert if the return value is not a string."}

{"Vulnerability Type": "users might pay enormous amounts of gas", "Vulnerability Location": "Mint.sol contract", "Repair Method": "If the pair doesn't exist, revert instead of deploying it", "Vulnerability Information": "If a user tries to mint liquidity on a pair that doesn't exist, they will end up paying thousands of dollars to deploy it."}

{"Vulnerability Type": "pay() function has callback to msg.sender before important state updates", "Vulnerability Location": "pay() function", "Repair Method": "Place the callback at the end of the pay() function after all state updates have taken place", "Vulnerability Information": "The callback before important state changes violates the Checks Effects Interactions best practices and can be extremely dangerous, especially with regard to composability/interacting with other protocols and contracts."}

{"Vulnerability Type": "safeSymbol() can revert causing DoS", "Vulnerability Location": "safeSymbol() function", "Repair Method": "Use the BoringCrypto safeSymbol() function code with the returnDataToString() parsing function to handle the case of a bytes32 return value", "Vulnerability Information": "The safeSymbol() function assumes the return type of any ERC20 token to be a string, causing abi.decode() to revert if the return value is not a string."}

1. {"Vulnerability Type": "Malicious minting", "Vulnerability Location": "TimeswapPair.sol#mint()", "Repair Method": "Add validation of minimal state.y for new liquidity", "Vulnerability Information": "Malicious user/attacker can mint new liquidity with an extremely small amount of yIncrease and malfunction the pair with the maturity."}
2. {"Vulnerability Type": "Missing reentrancy guard", "Vulnerability Location": "CollateralizedDebt.sol#mint()", "Repair Method": "Add a reentrancy guard modifier on the mint() function", "Vulnerability Information": "Functions with callbacks should have reentrancy guards in place for protection against possible malicious actors both from inside and outside the protocol."}
3. {"Vulnerability Type": "State updates after callback", "Vulnerability Location": "TimeswapPair.sol#mint()", "Repair Method": "Place the callback at the end of the function after all state updates have taken place", "Vulnerability Information": "Important state updates are made after the callback in the mint() function."}
4. {"Vulnerability Type": "State updates after callback", "Vulnerability Location": "TimeswapPair.sol#lend()", "Repair Method": "Place the callback at the end of the function after all state updates have taken place", "Vulnerability Information": "In the lend() function state updates are made after the callback."}
5. {"Vulnerability Type": "DoS", "Vulnerability Location": "SafeMetadata.sol#safeDecimals()", "Repair Method": "Modify the safeDecimals() function to change = 32 to == 32", "Vulnerability Information": "The safeDecimals function attempts to use abi.decode to return a uint8 when data.length = 32. However, a data.length value greater than 32 will cause abi.decode to revert."}
6. {"Vulnerability Type": "Missing ERC721 _burn()", "Vulnerability Location": "CollateralizedDebt.sol#burn()", "Repair Method": "Include the following line in the burn() function: _burn(id)", "Vulnerability Information": "The burn() function in CollateralizedDebt.sol should reverse the actions of mint() by burning the ERC721 token, but the ERC721 _burn() function is never called."}
7. {"Vulnerability Type": "State updates after callback", "Vulnerability Location": "TimeswapPair.sol#borrow()", "Repair Method": "Place the callback at the end of the function after all state updates have taken place", "Vulnerability Information": "In the borrow() function state updates are made after a callback to msg.sender."}
8. {"Vulnerability Type": "Manipulation of state.y", "Vulnerability Location": "TimeswapConvenience.sol#borrowGivenDebt()", "Repair Method": "Remove the function or remove the ability for the caller to specify the interest they want to pay", "Vulnerability Information": "Attacker can increase state.y to an extremely large value with a dust amount of assetOut."}

{"Vulnerability Type": "Improper input validation", "Vulnerability Location": "TimeswapPair.sol#borrow()", "Repair Method": "Make pair.borrow() onlyConvenience, so that zIncrease will be a computed value (based on xDecrease and current state) rather than a user input value", "Vulnerability Information": "The attacker can increase pool.state.z to a large value by providing a dust amount xDecrease and a large zIncrease value, and then pay back the dust amount to get back the collateral added. This can be exploited to get a large portion of the collateral assets from the defaulted loans."}

