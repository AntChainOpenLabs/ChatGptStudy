{"Vulnerability Type": "Lack of input checks", "Vulnerability Location": "[M-15] Lack of input checks (withrawal penalties should always be greater than 0)", "Repair Method": "Require penalties to be greater than 0 either in the initializer function or in the factory.", "Vulnerability Information": "If penalties are set to 0 the protocol would be vulnerable to price manipulations like the one described in the contest documentation."}

{"Vulnerability Type": "DOS attack", "Vulnerability Location": "[M-02] Owner of LaunchEvent token has the ability to DOS attack the event", "Repair Method": "If a LaunchEvent for a token has started, only the LaunchEvent contract should be able to create a JoePair for that token.", "Vulnerability Information": "The owner of the token for which the LaunchEvent was created, has the ability to DOS attack the event."}

{"Vulnerability Type": "Use of unsafe transfer functions", "Vulnerability Location": "[M-10] Use safeTransfer/safeTransferFrom consistently instead of transfer/transferFrom", "Repair Method": "Consider using safeTransfer/safeTransferFrom or require() consistently.", "Vulnerability Information": "It is good to add a require() statement that checks the return value of token transfers or to use something like OpenZeppelinâ€™s safeTransfer/safeTransferFrom unless one is sure the given token reverts in case of a failure."}

{"Vulnerability Type": "Unchecked return values", "Vulnerability Location": "[M-13] ERC20 return values not checked", "Repair Method": "We recommend checking the `success` boolean of all `.transfer` and `.transferFrom` calls for the unknown `token` contract.", "Vulnerability Information": "The `ERC20.transfer()` and `ERC20.transferFrom()` functions return a boolean value indicating success."}

{"Vulnerability Type": "Re-entrancy", "Vulnerability Location": "[M-11] Re-enterable Code When Making a Deposit to Stake", "Repair Method": "Use the openzeppelin reentrancy guard over the `deposit()` function which will prevent multiple deposits being made simultaneously.", "Vulnerability Information": "This vulnerability would allow the entire rJoe balance to be drained from the contract."}

{"Vulnerability Type": "Value loss in emergency state", "Vulnerability Location": "[H-01] Users can lose value in emergency state", "Repair Method": "Consider paying out LP tokens in `emergencyWithdraw`.", "Vulnerability Information": "Users can only call `LaunchEvent.emergencyWithdraw` which reverts as the WAVAX reserve was already used to provide liquidity and cannot be paid out. Users don't receive their LP tokens either. The users lost their entire deposit in this case."}

{"Vulnerability Type": "Incompatibility with certain token types", "Vulnerability Location": "[M-14] Incompatibility With Rebasing/Def

1. {"Vulnerability Type": "zero slippage requirement", "Vulnerability Location": "createPair() function in LaunchEvent.sol", "Repair Method": "Add an input parameter to the function to handle a slippage allowance or hardcode a percentage of the raised amounts as a slippage check", "Vulnerability Information": "If the zero slippage requirement is not met then the addLiquidity() function will revert and prevent users from using the createPair() function."}
2. {"Vulnerability Type": "denial of pair creation", "Vulnerability Location": "createPair() function in LaunchEvent.sol", "Repair Method": "Add a standard min. LP return 'slippage' check in createPair() function or make the function callable with special privileges only", "Vulnerability Information": "A griefer can create a pool for the WAVAX < _token pair by calling JoeFactory.createPair(WAVAX, _token) while the launch event phase 1 or 2 is running."}
3. {"Vulnerability Type": "failed transfer with low level call", "Vulnerability Location": "_safeTransferAVAX function in LaunchEvent.sol", "Repair Method": "Check for contract existence on low-level calls, so that failures are not missed", "Vulnerability Information": "It is possible that this call will fail, but _safeTransferAVAX will not notice anything went wrong."}
4. {"Vulnerability Type": "locked LP tokens", "Vulnerability Location": "allowEmergencyWithdraw() function in LaunchEvent.sol", "Repair Method": "Add the requirement 'require(address(pair) != address(0), 'LaunchEvent: pair not created')' to the function allowEmergencyWithdraw()", "Vulnerability Information": "If allowEmergencyWithdraw() is called while the protocol is in Stage 3 and a pair has been created then the LP tokens will be locked and both issues and depositors will be unable to withdraw."}
5. {"Vulnerability Type": "unrestricted function call", "Vulnerability Location": "createRJLaunchEvent() function in RocketJoeFactory.sol", "Repair Method": "Make createRJLaunchEvent() only callable by the owner of RocketJoeFactory", "Vulnerability Information": "createRJLaunchEvent() can be called by anyone with at least 1 Wei of _token."}
6. {"Vulnerability Type": "lack of reentrancy protection", "Vulnerability Location": "withdrawAVAX() function in LaunchEvent.sol", "Repair Method

1. {"Vulnerability Type": "Possibility of minting rJOE tokens before ownership is changed to RocketJoeStaking", "Vulnerability Location": "RocketJoeToken.sol Line : 37", "Repair Method": "Define and override the transferOwnership(address) function with an additional check that the totalSupply <= 0", "Vulnerability Information": "There is a possibility of the rJOE tokens in RocketJoeToken.sol to be minted by original owner without staking any JOE, before the ownership is transferred to RocketJoeStakingContract."}
2. {"Vulnerability Type": "Wrong token allocation computation for token decimals != 18 if floor price not reached", "Vulnerability Location": "LaunchEvent.createPair", "Repair Method": "Change the tokenAllocated computation to tokenAllocated = wavaxReserve * 1e18 / floorPrice;", "Vulnerability Information": "In LaunchEvent.createPair, when the floor price is not reached, the tokens to be sent to the pool are lowered to match the raised WAVAX at the floor price. The tokenAllocated computation involves the token decimals, which does not work for tokens that don't have 18 decimals."}
3. {"Vulnerability Type": "Uninitialized RocketJoeStaking.lastRewardTimestamp can inflate rJoe supply", "Vulnerability Location": "RocketJoeStaking.lastRewardTimestamp", "Repair Method": "Track the actual total deposits in a storage variable and use this value instead of the current balance for joeSupply.", "Vulnerability Information": "The RocketJoeStaking.lastRewardTimestamp is initialized to zero. If a user first directly transfers Joe tokens to the contract before the first updatePool call, lots of rJoe will be minted (but not distributed to users), inflating the rJoe total supply."}

