{"Vulnerability Type": "Medium Severity", "Vulnerability Location": "[M-05]", "Repair Method": "Add entry checks to functions that have no entry check or a trivial entry check", "Vulnerability Information": "Several functions have no entry check or a trivial entry check, which can be manipulated by input values to disturb the internal administration of the contract."}

{"Vulnerability Type": "High Severity", "Vulnerability Location": "[H-01]", "Repair Method": "Add re-entrancy guards to all external functions of MarginRouter, remove the estimation and only do the actual trade first, then call registerTrade with the actual trade amounts returned", "Vulnerability Information": "A re-entrancy bug allows inflating balance by calling MarginRouter.crossSwapExactTokensForTokens with a fake contract disguised as a token pair."}

{"Vulnerability Type": "High Severity", "Vulnerability Location": "[H-07]", "Repair Method": "Correctly set the account.holdsToken map in addHolding function", "Vulnerability Information": "The addHolding function does not update the account.holdsToken map, leading to a critical vulnerability where deposits of the same token keep being pushed to the account.holdingTokens array but the sum is correctly updated in account.holdings[token]."}

{"Vulnerability Type": "Medium Severity", "Vulnerability Location": "[M-09]", "Repair Method": "Set the initial value for the liquidationThresholdPercent in Isolated margin contracts", "Vulnerability Information": "Isolated margin contracts declare but do not set the value of liquidationThresholdPercent."}

{"Vulnerability Type": "Medium Severity", "Vulnerability Location": "[M-01]", "Repair Method": "Set a default liquidation threshold like in CrossMarginTrading contracts", "Vulnerability Information": "The IsolatedMarginTrading contract does not define a default liquidation threshold which means it is set to 0."}

{"Vulnerability Type": "Medium Severity", "Vulnerability Location": "[M-04]", "Repair Method": "Check that path.length + 1 == tokens.length and that the tokens actually match the pair in UniswapStyleLib.getAmountsOut, PriceAware.setLiquidationPath, and others", "Vulnerability Information": "UniswapStyleLib.getAmountsOut, PriceAware.setLiquidationPath (and others) don't check that path.length + 1 == tokens.length which should always hold true. Also, it does not check that the tokens actually match the pair."}

{"Vulnerability Type": "Medium Severity", "Vulnerability Location": "[M-10]", "Repair Method": "Put functions like setLeveragePercent and setLiquidation

1. {"Vulnerability Type": "Inconsistent usage of applyInterest", "Vulnerability Location": "applyInterest function", "Repair Method": "Make the usage of applyInterest consistent in all cases when calling this function", "Vulnerability Information": "It is unclear if the function applyInterest is supposed to return a new balance with the interest applied or only the accrued interest?"}
2. {"Vulnerability Type": "lastUpdatedDay not initialized", "Vulnerability Location": "IncentiveDistribution.sol", "Repair Method": "Initialize lastUpdatedDay with something like block.timestamp / (1 days)", "Vulnerability Information": "The variable lastUpdatedDay in IncentiveDistribution.sol is not (properly) initialized."}
3. {"Vulnerability Type": "function buyBond charges msg.sender twice", "Vulnerability Location": "buyBond function", "Repair Method": "Remove one of the transfer calls to avoid charging msg.sender twice", "Vulnerability Information": "function buyBond transfers amount from msg.sender twice"}
4. {"Vulnerability Type": "Users are credited more tokens when paying back debt with registerTradeAndBorrow", "Vulnerability Location": "registerTradeAndBorrow function", "Repair Method": "In the adjustAmounts call, it should only credit outAmount extinguishableDebt as a deposit like in registerDeposit", "Vulnerability Information": "The registerTradeAndBorrow is called with the results of a trade (inAmount, outAmount). It first tries to pay back any debt with the outAmount. However, the full outAmount is credited to the user again as a deposit in the adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount); call."}
5. {"Vulnerability Type": "PriceAware uses prices from getAmountsOut", "Vulnerability Location": "PriceAware contract", "Repair Method": "Use Uniswap v2's TWAP oracle instead of relying on values returned from getAmountsOut", "Vulnerability Information": "getPriceFromAMM relies on values returned from getAmountsOut which can be manipulated"}
6. {"Vulnerability Type": "Wrong liquidation logic", "Vulnerability Location": "belowMaintenanceThreshold function", "Repair Method": "Change the inequality in the last equation to return 100 * holdings <= liquidationThresholdPercent * loan", "Vulnerability Information": "The inequality in the last equation is wrong because it says the higher the holdings (margin + loan) compared to the loan, the higher the chance of being liquidated."}
7. {"Vulnerability Type": "No entry checks in crossSwapExactTokensForTokens and crossSwapTokensForExactTokens", "Vulnerability Location": "crossSwapExactTokensForTokens and crossSwapTokensForExactTokens functions", "Repair Method": "Limit who can call the functions, whitelist contents of pairs and tokens, and check the size of pairs and tokens is the same", "Vulnerability Information": "The functions crossSwapTokensForExactTokens and crossSwapExactTokensForTokens of MarginRouter.sol do not check who is calling the function."}
8. {"Vulnerability Type": "Users Can Drain Funds From MarginSwap By Making Undercollateralized Borrows If The Price Of A Token Has Moved More Than 10% Since The Last MarginSwap Borrow/Liquidation Involving Accounts Holding That Token", "Vulnerability Location": "MarginSwap contract", "Repair Method": "Use UniswapV2/SushiSwap/UniswapV3's built-in TWAP price oracle instead of MarginSwap's internal price oracle", "Vulnerability Information": "Users Can Drain Funds From MarginSwap By Making Undercollateralized Borrows If The Price Of A Token Has Moved More Than 10% Since The Last MarginSwap Borrow/Liquidation Involving Accounts Holding That Token."}
9. {"Vulnerability Type": "Impossible to call withdrawReward fails due to run out of gas", "Vulnerability Location": "withdrawReward function", "Repair Method": "Initialize lastUpdatedDay to the day of deployment", "Vulnerability Information": "The withdrawReward fails due to the loop at https://github.com/code-423n4/marginswap/blob/main/contracts/IncentiveDistribution.sol#L269."}
10. {"Vulnerability Type": "diffMaxMinRuntime gets default value of 0", "Vulnerability Location": "diffMaxMin

