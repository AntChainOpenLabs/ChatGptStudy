1. {"Vulnerability Type": "Prevent Minting During Emergency Exit", "Vulnerability Location": "Alchemist.sol#L611", "Repair Method": "Convert emergency exit check to a modifier, award wardens who made that suggestion, and then apply that modifier here. Alternatively, it is possible that the team might want to allow minting against credit: users minting against credit would effectively be cashing out their rewards.", "Vulnerability Information": "Potential increased financial loss during security incident."}
2. {"Vulnerability Type": "Precision Loss", "Vulnerability Location": "YaxisVaultAdapter.sol#withdraw()", "Repair Method": "Change the code as described above to increment 'totalCredit' instead of overwrite it.", "Vulnerability Information": "The actual token withdrawn from 'vault.withdraw()' will most certainly be less than the '_amount', due to precision loss in '_tokensToShares()' and 'vault.withdraw()'. As a result, 'IDetailedERC20(_token).safeTransfer(_recipient, _amount)' will revert due to insufficient balance."}
3. {"Vulnerability Type": "Overwriting User's Credit", "Vulnerability Location": "CDP.sol update function", "Repair Method": "Change the code as described above to increment 'totalCredit' instead of overwrite it.", "Vulnerability Information": "The credit of every position will always be overwritten and the correct information will be lost forever. User's credit should grow over time, but instead it is overwritten with a small value every time update is called."}

