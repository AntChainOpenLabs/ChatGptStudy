{"Vulnerability Type": "Composability", "Vulnerability Location": "HolographERC20.sol#L539", "Repair Method": "Remove the EIP-4524 requirements altogether", "Vulnerability Information": "HolographERC20 breaks composability by forcing usage of draft proposal EIP-4524"}

1. {"Vulnerability Type": "Biased distribution", "Vulnerability Location": "contracts/HolographOperator.sol#crossChainMessage", "Repair Method": "Use two random numbers for pod and Operator selection. Ideally, an independent source for randomness should be used, but following the assumption that the one used in L499 is safe enough, using the most significant bits (e.g. `random  128`) should guarantee an unbiased distribution.", "Vulnerability Information": "An attacker can manipulate each pod and gain an advantage over the remainder Operators."}
2. {"Vulnerability Type": "Bad source of randomness", "Vulnerability Location": "HolographOperator.sol#L491-L511", "Repair Method": "Consider using a decentralized oracle for the generation of random numbers, such as Chainlinks VRF.", "Vulnerability Information": "Using `block.number` and `block.timestamp` as a source of randomness is commonly advised against, as the outcome can be manipulated by calling contracts."}

1. {"Vulnerability Type": "Leak of value", "Vulnerability Location": "HolographERC721.sol#L962", "Repair Method": "Update receive() function to pass value down like the fallback function", "Vulnerability Information": "Leak of value when interacting with an NFT using the receive() or fallback() callback."}
2. {"Vulnerability Type": "Failed job can't be recovered", "Vulnerability Location": "HolographOperator.sol#L329", "Repair Method": "Move delete _operatorJobs[hash]; to the end of function executeJob covered in if (!_failedJobs[hash])", "Vulnerability Information": "Failed job can't be recovered. NFT may be lost."}
3. {"Vulnerability Type": "Loss of sent ETH", "Vulnerability Location": "HolographOperator.sol#L419-L429", "Repair Method": "Transfer the msg.value amount of ETH back to the operator in the catch block of the try ... {...} catch {...} code", "Vulnerability Information": "It is possible that operator loses sent ETH after calling HolographOperator contract's executeJob function."}

1. {"Vulnerability Type": "NFT theft", "Vulnerability Location": "HolographERC721.sol#L500, HolographERC721.sol#L577", "Repair Method": "Remove sourceBurn and sourceTransfer functions of HolographERC721 and require user approval to transfer or burn their tokens", "Vulnerability Information": "A source contract can burn and transfer NFTs of users without their permission."}
2. {"Vulnerability Type": "Chaotic operator behavior", "Vulnerability Location": "HolographOperator.sol#L875", "Repair Method": "Pay special attention to the scheduling algorithm to make sure different pods are given execution time according to the desired heuristics", "Vulnerability Information": "Any user can force chaotic 'open season' operator behavior."}
3. {"Vulnerability Type": "Gas price spikes", "Vulnerability Location": "HolographOperator.sol#L354", "Repair Method": "Modify operator node software to queue transactions immediately with gasPrice in bridgeInRequestPayload if a gas price spike happened or allow gas fee loss tradeoff to prevent being slashed", "Vulnerability Information": "Gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed."}

{"Vulnerability Type": "Access Control", "Vulnerability Location": "ERC721/ERC20 implementations using isOwner/onlyOwner modifiers", "Repair Method": "Refactor the code to represent `msg.sender` information in a bug-free way", "Vulnerability Information": "The isOwner/onlyOwner checks can be bypassed by an attacker in ERC721/ERC20 implementations due to confusion between calls coming from HolographERC721's fallback function and calls from actually implemented functions. This can result in owner-specific functionality being initiated on NFT/ERC20 implementation contracts, potentially resulting in real damage to the protocol."}

{"Vulnerability Type": "MEV", "Vulnerability Location": "HolographOperator.sol#L354", "Repair Method": "Do not use current tx.gasprice amount to infer gas price in a previous block. Probably best to use gas price oracle.", "Vulnerability Information": "Operator can bribe miner and steal honest operator's bond amount if gas price went high"}

1. {"Vulnerability Type": "ERC-721 compliance", "Vulnerability Location": "HolographERC721.safeTransferFrom", "Repair Method": "Remove the ERC-165 check in the `require` statement", "Vulnerability Information": "The `safeTransferFrom` function does not always call `onERC721Received`, leading to failed transfers when they should not fail."}
2. {"Vulnerability Type": "Bond tokens getting stuck", "Vulnerability Location": "HolographOperator.executeJob", "Repair Method": "Remove the requirement that `_bondedAmounts` need to be 0 prior to bonding and becoming an operator", "Vulnerability Information": "Bond tokens (HLG) equal to the slash amount will get permanently stuck in the HolographOperator each time a job gets executed by someone who is not an (fallback-)operator."}
3. {"Vulnerability Type": "Incorrect slashing calculation", "Vulnerability Location": "_getBaseBondAmount", "Repair Method": "Implement the correct percentage of slashing and include a mapping to note down the number of slashes that an operator has", "Vulnerability Information": "Documentation states that only a portion should be slashed and the number of slashes should be noted down."}
4. {"Vulnerability Type": "Freezing of beaming job", "Vulnerability Location": "HolographOperator.executeJob", "Repair Method": "Add a force-fail after EXPIRY_NUM blocks passed, without executing the TX", "Vulnerability Information": "If the selected operator doesn't complete the job and gas price has spiked, the bridging request wouldn't complete and the token owner would lose access to the token till the gas price goes back down again."}

{"Vulnerability Type": "Lockout vulnerability", "Vulnerability Location": "HolographOperator.sol#L415", "Repair Method": "Limit the maximum gas allowed in an operator job", "Vulnerability Information": "An attacker can lock operator out of the pod by setting gas limit that's higher than the block gas limit of dest chain"}

{"Vulnerability Type": "Inaccurate gas limit check", "Vulnerability Location": "HolographOperator.sol#L316", "Repair Method": "Modify the required amount of gas left to gasLimit + any amount of gas spent before reaching the `call()`, then multiply it by `32/30` to mitigate the `1/64` rule (+ some margin of safety maybe).", "Vulnerability Information": "An attacker can use the gap between the gas limit check and the actual amount of gas left during the call to fail the job while still having the `executeJob()` function complete. The owner of the bridged token would lose access to the token since the job failed."}

{"Vulnerability Type": "miscalculates gas", "Vulnerability Location": "LayerZeroModule.sol#L431-L445", "Repair Method": "Use the target gas costs. Re-engineer lzReceive to be fault-proof, i.e. save some gas to emit result event. Add destination chain-specific _baseGas and _gasPerByte to mitigate EVM differences in opcode costs.", "Vulnerability Information": "LayerZeroModule miscalculates gas, risking loss of assets."}

{"Vulnerability Type": "missing return value check", "Vulnerability Location": "PA1D.sol#L317, PA1D.sol#L340", "Repair Method": "Use OpenZeppelin's SafeERC20, which handles the return value check as well as non-standard-compliant tokens.", "Vulnerability Information": "_payoutToken[s is blocked and tokens are stuck in contract."}

{"Vulnerability Type": "missing parameter in event", "Vulnerability Location": "HolographERC721.sol#L392", "Repair Method": "Add parameter: owner", "Vulnerability Information": "ApprovalAll event is missing parameters."}

{"Vulnerability Type": "incorrect implementation of ERC721", "Vulnerability Location": "HolographERC721.sol#L467", "Repair Method": "Pass the msg.sender parameter, as the ERC721 standard requires.", "Vulnerability Information": "Incorrect implementation of ERC721 may have bad consequences for receiver."}

{"Vulnerability Type": "Low gasPrice vulnerability", "Vulnerability Location": "HolographOperator.sol#L202-L340, HolographOperator.sol#L593-L596, LayerZeroModule.sol#L277-L294", "Repair Method": "Allow operator to opt out of executing the job if the gasPrice is higher than the current gas price", "Vulnerability Information": "If user sets a low gasPrice the operator would have to choose between being locked out of the pod or executing the job anyway"}

{"Vulnerability Type": "Dust left in contract", "Vulnerability Location": "PA1D.sol#L391, PA1D.sol#L395", "Repair Method": "Transfers should be done based on address(this).balance. The gasCost is redundant as the gas amount is specified by the caller of getEthPayout(), the contract does not have to provide gas.", "Vulnerability Information": "_payoutEth() calculates balance with an offset, always leaving dust ETH in the contract"}

{"Vulnerability Type": "Implementation code does not align with business requirement", "Vulnerability Location": "HolographOperator.sol#L899, HolographOperator.sol#L920, HolographOperator.sol#L924, HolographOperator.sol#L928, HolographOperator.sol#L932", "Repair Method": "Charge the 0.1% unstaking fee to make the code align with the business requirement in the doc.", "Vulnerability Information": "Users are not charged with withdrawn fee when user unbound token in HolographOperator.sol"}

1. {"Vulnerability Type": "Incorrect value returned", "Vulnerability Location": "PA1D#bidSharesForToken", "Repair Method": "Convert from basis points to percentage by dividing by 10 ** 2 (100) then scale to 18 decimals. The final result it to multiple the basis point by 10 ** (18 2) or 10 ** 16", "Vulnerability Information": "bidShares returned are incorrect leading to incorrect royalties."}
2. {"Vulnerability Type": "Non-compliance with EIP-721", "Vulnerability Location": "HolographERC721.approve", "Repair Method": "Follow the EIP, i.e. do not allow approved addresses to approve other addresses", "Vulnerability Information": "HolographERC721.approve not EIP-721 compliant"}

