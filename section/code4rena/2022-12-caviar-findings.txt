1. {"Vulnerability Type": "Missing deadline checks", "Vulnerability Location": "add(), remove(), buy(), sell(), nftAdd(), nftRemove(), nftBuy(), nftSell() functions in Pair.sol", "Repair Method": "Introduce a `deadline` parameter to the mentioned functions.", "Vulnerability Information": "The `Pair` contract does not allow users to submit a deadline for their action. This missing feature enables pending transactions to be maliciously executed at a later point."}
2. {"Vulnerability Type": "NFT token swap without fee and stealing airdrops", "Vulnerability Location": "wrap() and unwrap() functions in Pair.sol", "Repair Method": "Create functionality so admin can call `getAirDrop()` functions during the airdrops before attacker, call `getAirDrop()` (which admin specified) function before unwrapping tokens, make some fee for NFT token unwrapping, create some lock time(some days) for each wrapped NFT that in that lock time only the one who supplied that token can unwrap it, create some delay for unwrapping tokens and if user wants to unwrap token he would receive it after this delay.", "Vulnerability Information": "It's possible to swap NFT token ids without fee and also attacker can wrap unwrap all the NFT token balance of the Pair contract and steal their air drops for those token ids."}

{"Vulnerability Type": "Minting of shares vulnerability", "Vulnerability Location": "Pair.add() function", "Repair Method": "Send the first min liquidity LP tokens to the zero address to enable share dilution when lpTokenSupply == 0. Ensure the number of LP tokens to be minted is non-zero in add() function.", "Vulnerability Information": "The first depositor can break minting of shares by transferring a large amount of tokens directly to the pair, causing normal users to receive 0 LP tokens if they add less than the transferred amount due to rounding division."}

{"Vulnerability Type": "Loss of Funds", "Vulnerability Location": "Pair.sol contract", "Repair Method": "Calculate optimal token amounts based on the amounts specified by user, current pool reserves, and the minimal LP tokens amount specified by user", "Vulnerability Information": "Liquidity providers may lose a portion of provided liquidity in either of the pair tokens due to a discrepancy in token amounts provided in different proportions, resulting in an excess of tokens that won't be redeemable for the amount of LP tokens minted."}

1. {"Vulnerability Type": "Price manipulation", "Vulnerability Location": "Pair contract's price function", "Repair Method": "Track pair's reserves internally using state variables", "Vulnerability Information": "An attacker may manipulate the price of a pair by transferring tokens directly to the pair. Since the `Pair` contract exposes the `price` function, it maybe be used as a price oracle in third-party integrations. Manipulating the price of a pair may allow an attacker to steal funds from such integrations."}
2. {"Vulnerability Type": "Rounding error", "Vulnerability Location": "buyQuote function", "Repair Method": "Use solmateâ€™s `FixedPointMathLib` library to calculate the quote and round up", "Vulnerability Information": "The function `buyQuote()` calculates the amount of base tokens required to buy a given amount of fractional tokens. However, this function rounds down the required amount, which is in favor of the buyer (i.e. he/she has to provide less base tokens for the amount of receiving fractional tokens. Depending on the amount of current token reserves and the amount of fractional tokens the user wishes to buy, it might be possible to receive free fractional tokens."}

1. {"Vulnerability Type": "Reentrancy", "Vulnerability Location": "buy and sell functions in Pair.sol", "Repair Method": "Add OpenZeppelin nonReentrant modifier to mentioned functions, or state clear in the documentation that this protocol should not be used with ERC777 tokens.", "Vulnerability Information": "Current implementation of functions `add`, `remove`, `buy` and `sell` first transfer fractional tokens, and then base tokens. Allows to drain funds of a pairs which implements an ERC-777 token."}
2. {"Vulnerability Type": "Incorrect Calculation", "Vulnerability Location": "price() function in Pair.sol", "Repair Method": "Update the formula to use the decimals value of the `baseToken` to ensure that the decimals of the resulting price ends up with 18 decimals as expected.", "Vulnerability Information": "The formula incorrectly calculates the price to be represented in whatever number of decimals the base token is in, creating a large mismatch between expected prices and the prices that result from the function."}

