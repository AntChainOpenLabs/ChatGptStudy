1. {"Vulnerability Type": "LendingPair.liquidateAccount fails if tokens are lent out", "Vulnerability Location": "LendingPair.liquidateAccount function", "Repair Method": "Mint LP supply tokens to msg.sender instead of trying to pay out underlying supply tokens", "Vulnerability Information": "No liquidations can be performed if all tokens are lent out, leading to insolvency risk and potential loss of user funds."}
2. {"Vulnerability Type": "Chainlink - Use latestRoundData instead of latestAnswer to run more validations", "Vulnerability Location": "UniswapV3Oracle.sol contract", "Repair Method": "Use latestRoundData method instead of latestAnswer method and run extra validations to ensure data is fresh", "Vulnerability Information": "Using latestAnswer method does not allow for checking if data is fresh, potentially leading to stale prices and incorrect calculations."}
3. {"Vulnerability Type": "Reward computation is wrong", "Vulnerability Location": "LendingPair.accrueAccount function", "Repair Method": "Increase total debt and total supply on each accrual by the total new interest, not just by the specific user's interest", "Vulnerability Information": "Wrong rewards will be minted to users, not representing their real fair share due to incorrect percentage calculations."}
4. {"Vulnerability Type": "Total LP supply & total debt accrual is wrong", "Vulnerability Location": "LendingPair.accrueAccount function", "Repair Method": "Increase total debt and total supply on each accrual by the total new interest, not just by the specific user's interest", "Vulnerability Information": "Total debt and total supply only increase when debt/supply is minted to the user, leading to incorrect borrow rates and utilization ratios."}
5. {"Vulnerability Type": "safeTransferFrom in TransferHelper is not safeTransferFrom", "Vulnerability Location": "TransferHelper.sol contract", "Repair Method": "Use SafeERC20 library in TransferHelper and any other contract that uses IERC20", "Vulnerability Information": "Non-standard ERC20 tokens will raise errors when calling _safeTransferFrom, potentially leading to deposit issues."}
6. {"Vulnerability Type": "_wethWithdrawTo is vulnerable re-entrancy", "Vulnerability Location": "_wethWithdrawTo function in withdrawBorrowETH function", "Repair Method": "Consider using re-entrancy guard on all main action functions to prevent re-entrancy attacks", "Vulnerability Information": "_wethWithdrawTo function uses a low level call that is vulnerable to re-entrancy attacks, potentially allowing for bypassing of reserve checks."}
7. {"Vulnerability Type": "LendingPair.liquidateAccount does not accrue and update cumulativeInterestRate", "Vulnerability Location": "LendingPair.liquidateAccount function", "Repair Method": "Call accrueAccount instead of _accrueAccountInterest", "Vulnerability Information": "Liquidatee's state will not be up-to-date, potentially allowing for skipping of interest payments and stealing of unpaid interest from the protocol."}

