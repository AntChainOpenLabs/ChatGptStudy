{"Vulnerability Type": "Reentrancy", "Vulnerability Location": "depositBribeERC20 function in BriveVault", "Repair Method": "Enforce a bribeIdentifier to be used for a specific token (and it being enforced), as well as adding nonReentrant", "Vulnerability Information": "A bad actor that has DEPOSITOR_ROLE and is a contract can execute a following attack: Create a dummy token contract, reentrant in the transferFrom() function. All tokens are approved to the BriveVault and the attacker contract has unlimited tokens. Reentrancy aims back to a function in the attacker contract, which calls depositBribeERC20 again."}

{"Vulnerability Type": "Unauthorized Access", "Vulnerability Location": "grantDepositorRole function in BribeVault", "Repair Method": "Consider using TokemakBribe instead of BribeVault to hold users' allowances; Consider making sure that the from parameter of transferFrom can only be msg.sender; Consider using a multi-sig for the DEFAULT_ADMIN_ROLE of BribeVault", "Vulnerability Information": "The current design/implementation allows the DEFAULT_ADMIN_ROLE of BribeVault to steal funds from any address that approved this contract up to allowance."}

{"Vulnerability Type": "Double Claiming", "Vulnerability Location": "updateRewardsMetadata function in RewardDistributor.sol", "Repair Method": "Implement a delay where users cannot claim rewards before a call to updateRewardsMetadata is made", "Vulnerability Information": "There is potential for mis-use if users frontrun calls to updateRewardsMetadata() and claim their reward after the new merkle root has been calculated and updated by the admin role. This may allow the claimer to double claim their rewards or lead to a loss in rewards if the reward metadata completely replaces the previous list of claimers."}

{"Vulnerability Type": "Locking Funds", "Vulnerability Location": "setBribeVault function in RewardDistributor.sol", "Repair Method": "Remove the functionality to change the bribeVault or ensure all funds have been withdrawn i.e. balanceOf(address(this)) == 0 before changing the bribeVault", "Vulnerability Information": "If the bribeVault is modified in setBribeVault() then users who have ETH rewards will now be considered to have ERC20(bribeVault) tokens. Since bribeVault is not an ERC20 token the transfer() call will fail and the users will not be able to claim their funds."}

{"Vulnerability Type": "Admin Privilege", "Vulnerability Location": "ThecosomataETH.withdraw function", "Repair Method": "Add validation logic to limit the tokens or the amounts that the owner can withdraw. Disclose the admin privilege in your docs. Refactor the code to reduce it.", "Vulnerability Information": "The owner can rug via ThecosomataETH.withdraw function."}

{"Vulnerability Type": "Missing Input Validation", "Vulnerability Location": "transferBribes function in BribeVault.sol", "Repair Method": "Perform input validation to verify that sum amount of all proposals under rewardToBribes[rewardIdentifier] is equal to amount provided by admin in argument and distributions[i].token is equal to the one provided by admin in argument.", "Vulnerability Information": "transferBribes could transfer before proposal deadline and there is no input validation."}

{"Vulnerability Type": "Wrong slippage check", "Vulnerability Location": "ThecosomataETH.addLiquidity function", "Repair Method": "Compute the minimum expected LP tokens off-chain and pass them to the performUpkeep function as a parameter to prevent sandwich attacks", "Vulnerability Information": "The slippage check on the wrong amount is unnecessary (except for the fees) and can result in potential value extraction."}

{"Vulnerability Type": "Manipulations of setFee", "Vulnerability Location": "BribeVault.sol#L104-L113, BribeVault.sol#L164, BribeVault.sol#L213, BribeVault.sol#L256", "Repair Method": "Set an upper bound for fees to ease user concerns and use a timelock to allow users to react and adjust to fee changes", "Vulnerability Information": "Admin can setFee up to 100%, change fees for already made deposits, and frontrun user deposits."}

{"Vulnerability Type": "Oracle price can be better secured (freshness + tamper-resistance)", "Vulnerability Location": "ThecosomataETH.sol#L94-L110", "Repair Method": "Ensure that the price was updated within a certain limit and check that the last reported price has not deviated too far from the current oracle price", "Vulnerability Information": "The price oracle mechanism may not be resistant against manipulation, and both freshness and tamper-resistance can be better secured."}

1. {"Vulnerability Type": "Improper control over the versions of distributions' metadata", "Vulnerability Location": "updateRewardsMetadata function in BribeVault.sol and RewardDistributor.sol", "Repair Method": "Add a check to ensure that the updateCount matches the previous updateCount before updating the metadata", "Vulnerability Information": "If the network is congested, DEFAULT_ADMIN_ROLE of BribeVault may mistakenly send 2 updateRewardsMetadata() txs, and the transactions can be packaged into different blocks, leading to repeated claims of rewards."}
2. {"Vulnerability Type": "Rewards can be lost", "Vulnerability Location": "updateRewardsMetadata function in BribeVault.sol and RewardDistributor.sol", "Repair Method": "Ensure that all claimers have made their claims before calling updateRewardsMetadata again on the same rewardIdentifier", "Vulnerability Information": "Rewards can be lost if bribeVault calls the updateRewardsMetadata on the same rewardIdentifier again before the user can claim their reward."}
3. {"Vulnerability Type": "Fees can be any amount", "Vulnerability Location": "transferBribes function in BribeVault.sol", "Repair Method": "Calculate the fees using the fee state variable instead of relying on user input", "Vulnerability Information": "The fees amounts might be wrong since they are user input instead of being calculated using the fee state variable."}
4. {"Vulnerability Type": "DEPOSITOR_ROLE can manipulate b.amount value", "Vulnerability Location": "depositBribeERC20 function in BribeVault.sol", "Repair Method": "Validate that briber is not equal to address(this)", "Vulnerability Information": "Malicious DEPOSITOR_ROLE can do a self-transfer and manipulate b.amount, leading to an increase in b.amount without any cost."}
5. {"Vulnerability Type": "Depositor can spend funds of another Depositor", "Vulnerability Location": "depositBribeERC20 function in BribeVault.sol", "Repair Method": "Only allow depositBribeERC20 to be called via TokemakBribe.sol", "Vulnerability Information": "One depositor can spend funds of another depositor, depositor can deposit in expired proposal, and rewardIdentifier and bribeIdentifier can point to different rounds/tokens."}

1. {"Vulnerability Type": "Send ether with call instead of transfer", "Vulnerability Location": "RewardDistributor.sol#L181", "Repair Method": "Use call instead of transfer to send ether. And return value must be checked if sending ether is successful or not.", "Vulnerability Information": "Sending ether with the transfer is no longer recommended."}
2. {"Vulnerability Type": "Distributions must not match actual bribes", "Vulnerability Location": "BribeVault.sol#L164-L205", "Repair Method": "Reduce the trust that users need to have in the admin by validating the `Common.Distribution[] calldata distributions`,  `uint256[] calldata amounts`, `uint256[] calldata fees` parameters against the deposited bribes.", "Vulnerability Information": "The math for onChain bribes is not validated, while the math for bribes distribution is blindly trusted."}
3. {"Vulnerability Type": "DEPOSITOR_ROLE can be granted by the deployer of BribeVault and transfer briber's approved ERC20 tokens to bribeVault by specifying any bribeIdentifier and rewardIdentifier", "Vulnerability Location": "TokemakBribe.sol#L68-L85, BribeVault.sol#L164-L205", "Repair Method": "The depositBribeERC20 function of the TokemakBribe contract needs to first transfer the briber's tokens to the TokemakBribe contract, and then transfer the tokens to the bribeVault contract in the depositBribeERC20 function of the bribeVault contract.", "Vulnerability Information": "The ability to deposit being permissioned and its ability to pull unlimited funds is a strong admin privilege, which I'd recommend the sponsor to remove."}

