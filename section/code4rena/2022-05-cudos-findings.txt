{"Vulnerability Type": "Missing check", "Vulnerability Location": "updateValset function", "Repair Method": "Add a check in the updateValset to assure that the sum of the new powers is greater than the threshold.", "Vulnerability Information": "The updateValset function don't check that the sum of the powers of the new validators in the new valset is greater than the threshold, which can lead to unwanted behavior."}

{"Vulnerability Type": "Loss of funds", "Vulnerability Location": "sendToCosmos function", "Repair Method": "Add checks in sendToCosmos to check the incoming tokenAddress against a supported token list, so that user funds don't get lost and admin don't need to bother refunding.", "Vulnerability Information": "No checks for non-Cudos tokens mean that non-Cudos ERC20 tokens will be lost to the contract, with the user not having any chance of retrieving them."}

{"Vulnerability Type": "Lack of functionality", "Vulnerability Location": "Gravity.sol contract", "Repair Method": "Implement pause functionality on the contract and manage the contract by proxy so that upgrades can be made by the validators.", "Vulnerability Information": "The Gravity.sol should have pause/unpause functionality."}

{"Vulnerability Type": "DoS", "Vulnerability Location": "Calls inside loops", "Repair Method": "Avoid combining multiple calls in a single transaction, especially when calls are executed as part of a loop. Always assume that external calls can fail. Implement the contract logic to handle failed calls.", "Vulnerability Information": "Calls to external contracts inside a loop are dangerous (especially if the loop index can be user-controlled) because it could lead to DoS if one of the calls reverts or execution runs out of gas."}

{"Vulnerability Type": "Loss of funds", "Vulnerability Location": "withdrawERC20 function", "Repair Method": "Delete the function or alternatively, send all funds to the '0' address to burn rather than give them to the admin.", "Vulnerability Information": "Ability for admin to drain all ERC20 funds stored in contract at will, meaning all ERC20 based Cudos tokens (and any other ERC20 tokens stored in the contract) could be extracted by anyone with admin role and later sold, leaving users funds bridged on Cudos Cosmos chain with no ERC20 representation stored across the bridge similar

{"Vulnerability Type": "Fee on transfer vulnerability", "Vulnerability Location": "Gravity.sol#L600", "Repair Method": "Restrict token transfers to tokens that do not support fee on transfer", "Vulnerability Information": "The protocol doesn't handle fee on transfer tokens, which can result in draining of other user's funds."}

