1. {"Vulnerability Type": "Incompatibility with fee-on-transfer/inflationary/deflationary/rebasing tokens", "Vulnerability Location": "Transferring base tokens and quote tokens in the SizeSealed contract", "Repair Method": "Consider using two parameters for transferring base tokens, adding a check for quoteAmount to be correctly transferred, or check the actual amount transferred in the contract instead of using the function parameter", "Vulnerability Information": "The contract cannot handle fee-on-transfer base tokens and incorrectly handles unusual ERC20 tokens in general, resulting in fund loss and denial-of-service."}
2. {"Vulnerability Type": "Failure to check token contract's existence", "Vulnerability Location": "Transferring quote tokens in the SizeSealed contract using Solmate's SafeTransferLib", "Repair Method": "Consider using OpenZeppelin's SafeERC20 instead, which has checks that an address does indeed have a contract", "Vulnerability Information": "The contract does not check for token contract's existence, which opens up possibility for a honeypot attack."}

{"Vulnerability Type": "state confusion", "Vulnerability Location": "finalize() function in SizeSealed.sol contract", "Repair Method": "Do not trust the value of `lowestQuote` when determining the finalize state, use a dedicated state variable for it.", "Vulnerability Information": "Attacker can steal any funds in the contract by state confusion (no preconditions)."}

{"Vulnerability Type": "Re-entrancy", "Vulnerability Location": "createAuction function", "Repair Method": "Implement a check for re-entrancy in the createAuction function", "Vulnerability Information": "The createAuction function lacks the check of re-entrancy. An attacker can use an ERC777 token with tax as the base token to create auctions. By registering ERC777TokensSender interface implementer in the ERC1820Registry contract, the attacker can re-enter the createAuction function and create more than one auction with less token. And the sum of the totalBaseAmount of these auctions will be greater than the token amount received by the SizeSealed contract. Finally, the attacker can take more money from the contract global pool which means stealing tokens from the other auctions and treasury."}

{"Vulnerability Type": "Denial of Service", "Vulnerability Location": "finalize function in the SizeSealed smart contract", "Repair Method": "Add a special check to the finalize function to prevent errors in cases when baseAmount is equal to zero", "Vulnerability Information": "A malicious user may encrypt the message with baseAmount == 0, then the auction is impossible to finalize. Any user can make a griffering attack to invalidate the auction."}

{"Vulnerability Type": "Insufficient Balance", "Vulnerability Location": "withdraw function in the SizeSealed smart contract", "Repair Method": "Add a new field filledQuote to the FinalizeData struct and update it during auction finalization. Each bidder can pay the filledQuote of quote token and receive the filledBase of base token without calculating again using the clearing price. The seller can receive the sum of filledQuote of all bidders to avoid the rounding issue.", "Vulnerability Information": "Bidders might fail to withdraw their unused funds after the auction was finalized because the contract doesn't have enough balance. The last bidder will fail to withdraw his funds because the contract doesn't have enough balance of quote token."}

1. {"Vulnerability Type": "Seller's ability to decrypt bids before reveal", "Vulnerability Location": "bid() function", "Repair Method": "Introduce a 2 step reveal where the bidders also encrypt their bid with their own private key and only reveal their key after the seller has revealed theirs. This could be mitigated by bidders losing (part of) their quote tokens when not revealing their bids.", "Vulnerability Information": "Seller's ability to decrypt bids before reveal could result in a much higher clearing price than anticipated and make buyers distrust the system."}
2. {"Vulnerability Type": "DOS auctions using invalid bid parameters", "Vulnerability Location": "finalize loop", "Repair Method": "Implement a slashing mechanism. If the bid cannot be executed due to user's fault, some % their submitted quote tokens will go to the protocol and auction creator.", "Vulnerability Information": "Attacker may DOS auctions using invalid bid parameters."}

{"Vulnerability Type": "Sorting Logic Vulnerability", "Vulnerability Location": "seller.finalize() function", "Repair Method": "Modify the comparison method to be strict by multiplying quote and base amounts", "Vulnerability Information": "The sorting logic used in the finalize function is not strict enough, which can result in the seller receiving fewer quote tokens than desired. This can be demonstrated by a test case. The suggested repair method is to modify the comparison method to be strict by multiplying quote and base amounts."}

