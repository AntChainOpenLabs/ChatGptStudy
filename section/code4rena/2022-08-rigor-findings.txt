{"Vulnerability Type": "Untyped data signing", "Vulnerability Location": "Multiple locations in the project (see affected code)", "Repair Method": "Follow EIP-712 and not implement your own standard/solution. Use a battle-tested approach that people have thought in detail about.", "Vulnerability Information": "Untyped application data is directly hashed and signed, enabling different attacks such as signature reuse across different Rigor projects, signature reuse across different chains, signature reuse across Rigor functions, and signature reuse from different Ethereum projects & phishing."}

{"Vulnerability Type": "Incorrect initialization of smart contracts with Access Control issue", "Vulnerability Location": "Multiple locations in the project (see affected code)", "Repair Method": "Carry out checks at the initialization stage or redesign the deployment process with the initialization of contracts during deployment", "Vulnerability Information": "The initialization process of contracts is delayed, and contract initialization methods have no check over who calls them, leading to loss of funds, failure of the protocol, loss of control over protocol elements, and the possibility of replacing contracts and settings with harmful ones."}

{"Vulnerability Type": "Task Functionality completely sidestepped via autoWithdraw", "Vulnerability Location": "[Project.sol#L770](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L770)", "Repair Method": "Consider removing `autoWithdraw` (keep funds inside of project), create a separate multi-sig like way to withdraw or keep a split between funds sent by Builder and by Community, and make `autoWithdraw` send the funds back accordingly (may also need to re-compute total sent in Community)", "Vulnerability Information": "autoWithdraw will send funds to the `builder`, we can use this knowledge to drain all funds from `Project` to the builder contract."}

{"Vulnerability Type": "Malicious delegated contractor can block funding tasks or mark tasks as complete", "Vulnerability Location": "[Project.sol#L219](https://github.com/code-423n4/2022-08-rigor/blob/main/contracts/Project.sol#L219)", "Repair Method": "Create a function to update `lastAllocatedTask`. This could be restricted to `Disputes` contract or the builder. This could be used against maliciously inserted tasks. Add functionality for `Disputes` contract to be able to remove or replace the contractor. This would be a guard against malicious contractors.", "Vulnerability Information": "A malicious delegated contractor can add a huge number of tasks (or one task with a huge cost). This would then pose problems in `allocateFunds()` as tasks could not be funded."}

{"Vulnerability Type": "Project funds can be drained by reusing signatures, in some cases", "Vulnerability Location": "[Project.sol#L386-L490](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L386-L490)", "Repair Method": "Use nonce to protect `setComplete()` and `changeOrder()` from signatures reuse. Add the `onlyActive()` modifier to `Tasks.unApprove()`. Consider limiting `allocateFunds()` for builder only", "Vulnerability Information": "This attack path is the results of signatures reusing in 2 functions `changeOrder()` and `setComplete()`, and a missing modifier at `Tasks.unApprove()` library function."}

{"Vulnerability Type": "updateProjectHash does not check project address", "Vulnerability Location": "[Project.sol#L162](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L162)", "Repair Method": "When releasing a standard event, check whether the account balance has been modified accordingly", "Vulnerability Information": "_data (which is signed by builder and/or contractor) does not contain a reference to the project address. In all other external functions of Project.sol, `_data` contains the address of the project, used in this check: `require(_projectAddress == address(this), \"Project::!projectAddress\");`. The lack of this verification makes it possible to reuse the same `_data`, and the same `_signature` on another project."}

1. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Project.sol#L402", "Repair Method": "Check separately if the subcontractor is confirmed or not before calling checkSignatureTask()", "Vulnerability Information": "The changeOrder() function will revert when it's called for the tasks that don't have subcontractors."}
2. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Community.sol#L501-L506, Project.sol#L108-L115", "Repair Method": "Add a function to revoke hash approval", "Vulnerability Information": "There is no way to revoke a hash in approvedHashes."}
3. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Community.sol#L206-L282", "Repair Method": "Remove the require statement that checks for a task with a budget of 0", "Vulnerability Information": "It is possible to submit a project with no total budget."}
4. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Project.sol#L859", "Repair Method": "Delete the approval only when all checks are done", "Vulnerability Information": "Hash approval not possible when contractor == subcontractor."}
5. {"Vulnerability Type": "Denial of Service", "Vulnerability Location": "Project.sol#L710", "Repair Method": "Keep value of projectCost() in a storage variable and update it when a task is added or updated accordingly", "Vulnerability Information": "Possible DOS in lendToProject() and toggleLendingNeeded() function because unbounded loop can run out of gas."}
6. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Project.sol#L238", "Repair Method": "Check separately if the function is called from disputes contract or not", "Vulnerability Information": "Project.addTasks() wouldn't work properly when it's called from disputes contract."}
7. {"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "Project.sol#L402", "Repair Method": "Check separately if the subcontractor address is zero or not", "Vulnerability Information": "changeOrder requires subcontractor signature when the subcontractor address is 0."}

{"Vulnerability Type": "Missing upper limit definition", "Vulnerability Location": "replaceLenderFee() function in HomeFi.sol", "Repair Method": "Add reasonable fee rate bounds checks in the replaceLenderFee() function", "Vulnerability Information": "The admin of the HomeFi contract can set lenderFee to greater than 100%, forcing calls to lendToProject() to all projects created in the future to revert."}

{"Vulnerability Type": "Attacker can drain all the projects", "Vulnerability Location": "setTrustedForwarder() function in HomeFi.sol", "Repair Method": "Limit approveHash to contracts only, make the process of replacing the forwarder or the admin a 2 step process with a delay between the steps, and consider removing the meta tx for HomeFi onlyAdmin modifier", "Vulnerability Information": "In case where the admin wallet has been hacked, the attacker can drain all funds out of the project within minutes."}

{"Vulnerability Type": "Signature Checks could be passed", "Vulnerability Location": "checkSignatureValidity() function in Project.sol", "Repair Method": "Add a require check for _recoveredSignature != 0 in checkSignatureValidity()", "Vulnerability Information": "It is possible to pass Signature Validity check with an SignatureDecoder.recoverKey() returns 0 whenever the builder and /or contractor have an existing approved hash for a data."}

{"Vulnerability Type": "Reentrancy", "Vulnerability Location": "Community.sol#L509", "Repair Method": "Add a new field into the ProjectDetails struct called escrowNonce and modify function escrow to check this nonce and update it after the debt has been reduced.", "Vulnerability Information": "Builder can call Community.escrow again to reduce debt further using same signatures."}

{"Vulnerability Type": "No Purpose", "Vulnerability Location": "HomeFi.sol#L225", "Repair Method": "Consider preventing transferring the project NFT to a different address for now as long as there is no use-case for the NFT owner/holder or use the actual NFT owner as the builder of a project.", "Vulnerability Information": "Owner of project NFT has no purpose."}

{"Vulnerability Type": "reused signature", "Vulnerability Location": "[Project.sol#L330](https://github.com/code-423n4/2022-08-rigor/blob/5ab7ea84a1516cb726421ef690af5bc41029f88f/contracts/Project.sol#L330)", "Repair Method": "Add an option to cancel the approved hash in `approveHash()` function", "Vulnerability Information": "In `Project.setComplete()`, the signature can be reused when the first call is reverted for some reason."}

1. {"Vulnerability Type": "Arbitrary Community Member Addition", "Vulnerability Location": "Community.sol#L187", "Repair Method": "Add a require statement to check that the community ID is less than or equal to the community count", "Vulnerability Information": "An attacker can add as many members as they want, BEFORE the community will be created."}
2. {"Vulnerability Type": "Interest Calculation Rounding Error", "Vulnerability Location": "Community.sol#L685-L686", "Repair Method": "Add a scalar to noOfDays so that any rounding which occurs is negligible or remove the noOfDays calculation and calculate interest in one equation which reduces arithmetic rounding", "Vulnerability Information": "A builder can halve the APR paid to a community owner by paying every 1.9999 days due to arithmetic rounding in returnToLender()"}
3. {"Vulnerability Type": "Unauthorized Dispute Creation", "Vulnerability Location": "Project.sol#L498-L502", "Repair Method": "Check the recovered signer address in Project.raiseDispute to not equal the zero-address", "Vulnerability Information": "Anyone can create disputes if contractor is not set"}

{"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "[M-16] Tasks.sol#L153-L164, Project.sol#L391-L403, Project.sol#L855-L861", "Repair Method": "Introduce `deActivate` instead of `unConfirm`. Introduce `onlyUnconfirmed` modifier and set it to the `inviteSubcontractor()` and `acceptInvitation()`. Deactivate task only instead of fully resetting it in `changeOrder()`", "Vulnerability Information": "New subcontractor can be set for a SCConfirmed task without current subcontractor consent"} 

{"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "[H-06] Community.sol#L267", "Repair Method": "When publishing a project, if the `lentAmount` for the community is non-zero, calculate the interest before updating the APR.", "Vulnerability Information": "Wrong APR can be used when project is unpublished and published again"} 

{"Vulnerability Type": "Smart Contract Logic", "Vulnerability Location": "[M-07] Project.sol#L493-L536", "Repair Method": "Make `raiseDispute()` to check for approvedHashes too.", "Vulnerability Information": "Project.raiseDispute() doesn't use approvedHashes - meaning users who use contracts can't raise disputes"}

{"Vulnerability Type": "Interest calculation vulnerability", "Vulnerability Location": "Community.sol#L455, Community.sol#L484, Community.sol#L509", "Repair Method": "Think of an approach to make 3 repay functions work for paused or modify the interest calculation formula not to add interest for the paused period", "Vulnerability Information": "Builders must pay more interest when the system is paused. Builders can't repay when the system is paused so they must pay more interest for the paused period. Builders can repay to lenders using 3 functions, repayLender(), reduceDebt(), and escrow(). But they all don't work when the system is paused and builders have no way to avoid it. Furthermore, the HomeFi admin is the main lender of builders and there is no assurance that the admin would pause the community for a while to get more interest."}

