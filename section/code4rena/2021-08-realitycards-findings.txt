{"Vulnerability Type": "Deposits don't work with fee-on transfer tokens", "Vulnerability Location": "RCTreasury.deposit() function", "Repair Method": "Ensure that the erc20 token does not implement any customizations or measure the asset change right before and after the asset-transferring routines", "Vulnerability Information": "ERC20 tokens that charge a certain fee for every transfer() or transferFrom() may credit more deposits than the contract actually received."}

{"Vulnerability Type": "Parameter updates not propagated", "Vulnerability Location": "setNftHubAddress(), setOrderbookAddress(), setLeaderboardAddress() functions of RCFactory and setMinRental() function of RCTreasury", "Repair Method": "Implement a way to notify the underlying contracts of the updates", "Vulnerability Information": "Parameters updated in certain functions are only updated on the top level and not propagated to the other contracts."}

{"Vulnerability Type": "UberOwner has too much power", "Vulnerability Location": "RCFactory and RCTreasury contracts", "Repair Method": "Limit the permission of the Uber Owner to something more manageable and trustable or use a proxy instead for upgrades to underlying contracts", "Vulnerability Information": "The Uber Owner has too much power within the system and can completely change the functionality of the system."}

{"Vulnerability Type": "Uninitialized Variable", "Vulnerability Location": "marketWhitelistCheck() function in RCTreasury.sol", "Repair Method": "Ensure this behavior is intended or add a function that enables a market creator to restrict their market to a specific role by whitelisting users", "Vulnerability Information": "The variable marketWhitelist is never initialized in the contract RCTreasury.sol, causing the function marketWhitelistCheck() to not perform a proper check on whitelisted users for a restricted market."}

{"Vulnerability Type": "Logic", "Vulnerability Location": "function findNewOwner(uint256 _card, uint256 _timeOwnershipChanged)", "Repair Method": "Check if a valid user is found or if the deletion limit is hit to avoid skipping any bids", "Vulnerability Information": "The function `findNewOwner` in `RCOrderbook` has a logic vulnerability where a valid owner can be considered invalid and skipped over if the processing finishes at the same time as the loop counter reaches the maximum deletions. This can impact the availability of the user's ownership and can be exploited by an attacker to rent a card at a cheaper rate. The fix involves checking if a valid user is found or if the deletion limit is hit to avoid skipping any bids."}

