1. {"Vulnerability Type": "Stuck Functionality", "Vulnerability Location": "SuperVault's leverageSwap and emptyVaultOperation functions", "Repair Method": "Consider adding zero amount approval before actual amount approval", "Vulnerability Information": "leverageSwap and emptyVaultOperation can be run repeatedly for the same tokens. If these tokens happen to be an ERC20 that do not allow for approval of positive amount when allowance already positive, both functions can become stuck."}
2. {"Vulnerability Type": "Fund Loss or Theft", "Vulnerability Location": "executeOperation() function in SuperVault contract", "Repair Method": "Add a state variable to store the fact that SuperVault imitated flash-loan", "Vulnerability Information": "Fund loss or theft by attacker with creating a flash loan and setting SuperVault as receiver so executeOperation() will be get called by lendingPool but with attackers specified params."}
3. {"Vulnerability Type": "Unfair Rewards", "Vulnerability Location": "updateBoost function in SupplyMinerV2 contract", "Repair Method": "Remove updateBoost function or redesign boost updates in such a way that distribution of rewards no longer depends on when and how often boost multiplier is updated", "Vulnerability Information": "Users can use updateBoost function to claim unfairly large rewards from liquidity mining contracts for themselves at cost of other users."}
4. {"Vulnerability Type": "Unsupported ERC20 Tokens", "Vulnerability Location": "executeOperation function in SuperVault contract", "Repair Method": "Consider using safeApprove of OZ", "Vulnerability Information": "Non-standard ERC20 Tokens are Not Supported."}

1. {"Vulnerability Type": "Arbitrary Router Call", "Vulnerability Location": "PARMinerV2.sol", "Repair Method": "Only allow certain calls such as swapping tokens to tokens, not ETH. Adding a check that the _totalStake variable has not increased during the liquidation call will mitigate the risk of the attacker depositing the PAR to increase the contract's balance.", "Vulnerability Information": "A malicious user is able to steal all collateral of an unhealthy position in `PARMinerV2.sol` due to an arbitrary router call."}
2. {"Vulnerability Type": "Decimal Token Underflow", "Vulnerability Location": "GUniLPOracle.sol", "Repair Method": "Ensure that tokens have less than 18 decimals.", "Vulnerability Information": "It is possible to produce underflows with specific tokens which can cause errors when calculating prices."}
3. {"Vulnerability Type": "Multiplication Before Division", "Vulnerability Location": "ABDKMath64x64.sol", "Repair Method": "Consider ordering multiplication first.", "Vulnerability Information": "Solidity could truncate the results, performing multiplication before division will prevent rounding/truncation in solidity math."}

