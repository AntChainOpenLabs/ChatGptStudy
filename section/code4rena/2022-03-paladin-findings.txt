{"Vulnerability Type": "Updating the state", "Vulnerability Location": "EmergencyWithdraw function in HolyPaladinToken.sol at line 1338", "Repair Method": "Set userCurrentBonusRatio and durationRatio to zero in the EmergencyWithdraw function", "Vulnerability Information": "userCurrentBonusRatio and durationRatio aren't updated which will allow users to claim funds with the wrong ratio."}

{"Vulnerability Type": "System could be wrapped and made useless without contract whitelisting", "Vulnerability Location": "HolyPaladinToken.sol at lines 253, 284, and 268", "Repair Method": "Implement a whitelisting/blacklisting system for contracts", "Vulnerability Information": "Anyone could create a contract or a contract factory 'PAL Locker' with a function to deposit PAL tokens through a contract, lock them, and delegate the voting power to the contract owner. Then, the ownership of this contract could be sold, which would eventually break the overall system of hPAL."}

{"Vulnerability Type": "UserLock information can be found during emergency mode", "Vulnerability Location": "HolyPaladinToken.sol at lines 446-468", "Repair Method": "Add additional user access check, so that the function returns correct value when the caller (msg.sender) is admin or owner", "Vulnerability Information": "When the contract is in blocked state (emergency mode), the protocol wants to return an empty UserLock info, on calling the function getUserLock. However, there is another way, by which the users can find the same information."}

{"Vulnerability Type": "Emergency mode enable/disable issue", "Vulnerability Location": "HolyPaladinToken.sol at line 1425", "Repair Method": "Remove bool trigger parameter from triggerEmergencyWithdraw function and set emergency to true after successfully executing function", "Vulnerability Information": "Enabling emergency mode should be a one-way process that sets contract(s) in emergency mode. It should not be possible to revert that process, otherwise, it puts the owner of the contract(s) in a very privileged position."}

{"Vulnerability Type": "ERC20 token with a highly unsafe pattern", "Vulnerability Location": "HolyPaladinToken.sol at transferFrom function", "Repair Method": "Follow the Checks Effects and Interactions safety pattern as the transferFrom function is one of the most important functions in any protocol. Consider importing the Open Zeppelin ERC20.sol contract code directly as it is battle-tested and safe code", "Vulnerability Information": "The transferFrom() function does not follow the Checks Effect and Interactions safety pattern to safely make external calls to other contracts."}

{"Vulnerability Type": "State Manipulation", "Vulnerability Location": "Multiple functions in HolyPaladinToken.sol", "Repair Method": "Adopt the same strategy as checkpoint, and modify last entry in array instead of pushing new one if it `fromBlock == block.number`.", "Vulnerability Information": "Multiple states with the same block number can be manipulated to present an incorrect history."}

{"Vulnerability Type": "Bypassing Emergency Restrictions", "Vulnerability Location": "Functions _beforeTokenTransfer() and _updateUserRewards() in HolyPaladinToken.sol", "Repair Method": "Add a check for the boolean `emergency` value in `_beforeTokenTransfer()` to not call `_updateUserRewards` on any account if this value is set. Alternatively, a check could be added into the `_updateUserRewards()` function to return if `emergency` is true.", "Vulnerability Information": "Users can bypass emergency restrictions on the `updateUserRewardState()` function by transferring a small amount of unlocked tokens to their account."}

{"Vulnerability Type": "Potential Bugs", "Vulnerability Location": "PaladinRewardReserve.sol", "Repair Method": "(1) If PAL token is only used and other token will never be used at `PaladinRewardReserve.sol`, stop having `address token` argument at `setNewSpender`, `updateSpenderAllowance`, `removeSpender` and `transferToken` functions. Instead, set `token` at the constructor or other ways, and limit the ability to flexibly set `token` from functions.(2) If other tokens potentially will be used at `PaladinRewardReserve.sol`, update data structure of `approvedSpenders` mapping and change the logic.", "Vulnerability Information": "`PaladinRewardReserve.sol` may have potential bugs if it uses new tokens as rewards."}

{"Vulnerability Type": "griefing attack", "Vulnerability Location": "function _beforeTokenTransfer(address from, address to, uint256 amount)", "Repair Method": "Implement a financial safeguard against griefing attacks by limiting the amount that can be transferred to a waiting account based on the receiver's balance", "Vulnerability Information": "Users with large cooldowns can grief other users by sending small amounts to them, increasing their cooldowns and preventing them from unstaking."}

{"Vulnerability Type": "incorrect variable value", "Vulnerability Location": "ONE_YEAR variable in HolyPaladinToken.sol", "Repair Method": "Change the value of ONE_YEAR variable to the correct number of seconds in a year (31,536,000)", "Vulnerability Information": "The ONE_YEAR variable in HolyPaladinToken.sol is set to an incorrect value, which can negatively affect users in functions that use this variable."}

{"Vulnerability Type": "cooldown reset", "Vulnerability Location": "function _beforeTokenTransfer(address from, address to, uint256 amount)", "Repair Method": "Do not reset cooldown to 0 when the user transfers all tokens to themselves", "Vulnerability Information": "If a user transfers all their tokens to themselves, the cooldown is reset to 0, preventing them from unstaking and extending the duration of the lock."}

{"Vulnerability Type": "unprotected function", "Vulnerability Location": "function cooldown() in HolyPaladinToken.sol", "Repair Method": "Add a check for emergency mode to the cooldown() function", "Vulnerability Information": "The cooldown() function in HolyPaladinToken.sol is not protected when the protocol is in emergency mode, allowing users to set the cooldown and plan for unstaking when the emergency mode is lifted."}

{"Vulnerability Type": "timelock", "Vulnerability Location": "PaladinRewardReserve.sol", "Repair Method": "Put the approve and transfer functions behind a timelock", "Vulnerability Information": "The owner of PaladinRewardReserve can approve and transfer any amount of tokens with no limits on any account, which is not good for investors. To give more trust to users, these functions should be put behind a timelock."}

{"Vulnerability Type": "bonus ratio calculation", "Vulnerability Location": "function lock(uint256 amount, uint256 duration) in HolyPaladinToken.sol", "Repair Method": "Prevent users from increasing the amount on an expired lock", "Vulnerability Information": "If a user increases the lock amount on an expired lock, a new lock will be created with the duration of the previous lock and the provided non-zero amount. Because the userCurrentBonusRatio is not updated, the user will not receive any rewards for their active lock."}

1. {"Vulnerability Type": "Precision Loss", "Vulnerability Location": "function _updateDropPerSecond() internal", "Repair Method": "Update the calculation of nbMonthEllapsed to include more precision", "Vulnerability Information": "Due to precision loss in calculating the number of months elapsed, for each _updateDropPerSecond() there can be a short of up to 1 * dropDecreasePerMonth for the decrease of emission rate."}
2. {"Vulnerability Type": "Assisted Unstaking", "Vulnerability Location": "function _getNewReceiverCooldown(uint256 senderCooldown, uint256 amount, address receiver, uint256 receiverBalance) internal view", "Repair Method": "Reduce the Unstake Period to reduce the possibility of such scenario", "Vulnerability Information": "Users at UNSTAKE_PERIOD can assist other users in unstaking tokens."}

