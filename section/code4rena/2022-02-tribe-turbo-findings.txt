1. {"Vulnerability Type": "Privilege Escalation", "Vulnerability Location": "TurboSafe.sol#L335", "Repair Method": "Limit gib to certain collateral ratio", "Vulnerability Information": "Gibber can take any amount from safes even though it is supposed to be behind governance timelock."}
2. {"Vulnerability Type": "Accounting Inaccuracy", "Vulnerability Location": "TurboSafe.sol#L225-L236", "Repair Method": "Update the total Fei deposited into the Vault proportionately", "Vulnerability Information": "Wrong implementation of TurboSafe.sol#less() may cause boosted record value in TurboMaster bigger than actual lead to BoostCapForVault and BoostCapForCollateral to be permanently occupied."}
3. {"Vulnerability Type": "Front-Running", "Vulnerability Location": "TurboSafe.slurp", "Repair Method": "Add a MAX_FEE hardcoded variable to ensure fees can never go above a certain threshold", "Vulnerability Information": "Slurp can be frontrun with fee increase."}
4. {"Vulnerability Type": "Incorrect Implementation", "Vulnerability Location": "ERC4626.deposit/mint", "Repair Method": "Implement `previewDeposit` to predict the post-fee amount", "Vulnerability Information": "ERC4626 does not work with fee-on-transfer tokens."}

1. {"Vulnerability Type": "Missing token approval", "Vulnerability Location": "TurboRouter: deposit(), mint(), createSafeAndDeposit(), and createSafeAndDepositAndBoost() functions", "Repair Method": "Add code for the user to transfer tokens and approve the use of tokens in the TurboSafe contract", "Vulnerability Information": "User calls deposit(), mint(), createSafeAndDeposit(), and createSafeAndDepositAndBoost() functions of the TurboRouter contract without transferring tokens to the TurboRouter contract and approving the TurboSafe contract to use the tokens, the call will fail."}
2. {"Vulnerability Type": "Incorrect amount in mint function", "Vulnerability Location": "ERC4626 mint function", "Repair Method": "Change the mint function to mint shares instead of amount", "Vulnerability Information": "The mint function mints amount instead of shares, which can lead to issues when the asset < shares are not 1-to-1 as will be the case for most vaults over time."}
3. {"Vulnerability Type": "Missing max shares out check", "Vulnerability Location": "ERC4626RouterBase.withdraw() function", "Repair Method": "Add a maxSharesIn parameter to the function and check that the burned shares are not greater than maxSharesIn", "Vulnerability Information": "The user can lose their entire shares due to the wrong check in the withdraw() function."}

