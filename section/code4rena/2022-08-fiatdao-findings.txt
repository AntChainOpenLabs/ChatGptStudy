1. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "VotingEscrow.sol contract", "Repair Method": "Replace the wrong line of code with the correct one", "Vulnerability Information": "Error in Updating _checkpoint in the increaseUnlockTime Function"}
2. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "VotingEscrow.sol contract", "Repair Method": "Implement a mechanism that prevents users from creating a lock and quitting it in the same transaction", "Vulnerability Information": "Abuse of the quitLock function to get a very large amount of votes"}

1. {"Vulnerability Type": "Unsafe usage of ERC20 transfer and transferFrom", "Vulnerability Location": "VotingEscrow.sol", "Repair Method": "Use OpenZepplin's safeTransfer and safeTransferFrom functions", "Vulnerability Information": "Some ERC20 tokens functions don't return a boolean, for example USDT, BNB, OMG. So the `VotingEscrow` contract simply won't work with tokens like that as the `token`. The USDT's `transfer` and `transferFrom` functions doesn't return a bool, so the call to these functions will revert although the user has enough balance and the `VotingEscrow` contract won't work, assuming that token is USDT."}
2. {"Vulnerability Type": "Attacker contract can avoid being blocked by BlockList.sol", "Vulnerability Location": "Blocklist.sol", "Repair Method": "Consider blacklisting addresses without checking if they are contracts", "Vulnerability Information": "An attacker can interact with the system and self-destruct his contract, and with the help of CREATE2 recreate it at the same address when he needs to interact with the system again."}
3. {"Vulnerability Type": "Unsafe casting from int128 can cause wrong accounting of locked amounts", "Vulnerability Location": "VotingEscrow.sol", "Repair Method": "Make sure that the values fit in the variables you are trying to assign them to when casting variables to smaller types", "Vulnerability Information": "The unsafe casting to int128 variable can cause its value to be different from the correct value. For example, in the createLock function, the addition to the locked amount variable is done by `locked_.amount += int128(int256(_value))`. In that case, if `_value` is greater than `type(int128).max` which is `2127 1`, then the accounting will be wrong and the amount that will be added to `locked_.amount` will be less than the amount of token that will be transferred from the user."}

1. {"Vulnerability Type": "Inconsistent logic", "Vulnerability Location": "VotingEscrow.sol#L493-L523", "Repair Method": "Remove line VotingEscrow.sol#L511 to allow expired locks to be extended", "Vulnerability Information": "The increaseUnlockTime() function allows expired locks to be extended if they were delegated to another address, but not if they were not delegated."}
2. {"Vulnerability Type": "Fee on transfer tokens", "Vulnerability Location": "VotingEscrow.sol#L418", "Repair Method": "Calculate the amount to add to the locked amount by the difference between the balances before and after the transfer instead of using the supplied value", "Vulnerability Information": "The current implementation of the VotingEscrow contract doesn't support fee on transfer tokens, which can lead to a state where users won't be able to receive their funds."}

{"Vulnerability Type": "Delegators can Avoid Lock Commitments", "Vulnerability Location": "VotingEscrow.sol lines 526-625", "Repair Method": "Use the delegatee's lock endpoint in the re-delegation to self, rather than using the delegator's existing endpoint, since that endpoint may be far in the past. The delegate() and undelegate() functions have checks to ensure that the target for the votes always has at least as long a duration as the source of the votes. The fix enforces the same requirement for forceUndelegate() by assigning a longer duration.", "Vulnerability Information": "Delegators can avoid lock commitments if they can reliably get themselves blocked when needed."}

{"Vulnerability Type": "Blocking Through Change of Blocklist Could Trap Tokens", "Vulnerability Location": "Blocklist.sol line 27, VotingEscrow.sol lines 531, 637", "Repair Method": "Add an unblock functionality to the blocklist contract.", "Vulnerability Information": "Blocking through change of blocklist could trap tokens."}

{"Vulnerability Type": "IncreaseUnlockTime Missing _checkpoint for Delegated Values", "Vulnerability Location": "VotingEscrow.sol lines 509-515", "Repair Method": "Move the _checkpoint outside of the if statement on line 514.", "Vulnerability Information": "IncreaseUnlockTime missing _checkpoint for delegated values."}

