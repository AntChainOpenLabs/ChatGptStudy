{"Vulnerability Type": "Missing event & timelock", "Vulnerability Location": "onlyAdmin functions that change critical contract parameters/addresses/state", "Repair Method": "Add events to all possible flows and consider adding timelocks to such onlyAdmin functions", "Vulnerability Information": "Privileged functions in all contracts, for e.g. `VaultTracker onlyAdmin`, have direct financial or trust impact on users who should be given an opportunity to react to them by exiting/engaging without being surprised when changes initiated by such functions are made effective opaquely (without events) and/or immediately (without timelocks)"}

{"Vulnerability Type": "Unchecked return value", "Vulnerability Location": "function recover(bytes32 h, Components calldata c) internal pure returns (address)", "Repair Method": "Verify that the result from `ecrecover` isn't 0", "Vulnerability Information": "The solidity function `ecrecover` is used, however the error result of 0 is not checked for."}

{"Vulnerability Type": "Overwriting previously created markets", "Vulnerability Location": "`createMarket` function", "Repair Method": "Add a zero-address check for `markets[u][m]` in `createMarket` before writing to it", "Vulnerability Information": "The `createMarket` function allows accidental overwriting of previously created markets for the same combination of underlying and maturity timestamp (u, m) because there is no zero-address check to see if a previously created market exists for that combination."}

{"Vulnerability Type": "Fee-on-transfer underlying", "Vulnerability Location": "`Swivel.sol`", "Repair Method": "Implement a way to handle these tokens. A possible way to do it is to check the balance of the contract before and after every time a token is transferred to see the effective quantity. To help keeping the code clear, a function like Compound's `doTransferIn` can be implemented.", "Vulnerability Information": "The current implementation doesn't work with fee-on-transfer underlying tokens. This becomes particularly problematic in the following scenario: a market for USDT is running without problems, then they activate the fee: this effectively blocks users from redeeming the underlying."}

{"Vulnerability Type": "Unsafe handling of underlying tokens", "Vulnerability Location": "`Swivel.sol`", "Repair Method": "Consider using OpenZeppelin's library with *safe* versions of transfer functions", "Vulnerability Information": "Not every ERC20 token follows OpenZeppelin's recommendation. It's possible (inside ERC20 standard) that a `transferFrom` doesn't revert upon failure but returns `false`. The code doesn't check these return values."}

{"Vulnerability Type": "Taker is charged fees twice", "Vulnerability Location": "`exitVaultFillingVaultInitiate()` function", "Repair Method": "Charge fees only once to the maker instead of charging the taker twice", "Vulnerability Information": "Taker is charged fees twice in `exitVaultFillingVaultInitiate()` . Maker is transferring less than premiumFilled to taker and then taker is expected to pay fees i.e. taker's net balance is premiumFilled 2*fee"}

{"Vulnerability Type": "TransferNotionalFrom doesn't

{"Vulnerability Type": "Incorrect Implementation", "Vulnerability Location": "initiateZcTokenFillingZcTokenExit() function", "Repair Method": "Change the transfer logic to transfer premium to maker and fee to Swivel separately", "Vulnerability Information": "The implementation of initiateZcTokenFillingZcTokenExit() function is incorrect as it transfers premium paid to maker and fee to Swivel together, which is not the intended behavior."}

{"Vulnerability Type": "Single-point of Failure", "Vulnerability Location": "Admin role across Swivel, Marketplace and VaultTracker contracts", "Repair Method": "Make admins reasonably redundant/independent (3/7 or 5/9) multisigs and add transfer/renounce functionality for admin. Consider using OpenZeppelinâ€™s Ownable library.", "Vulnerability Information": "Admin role has absolute power across Swivel, Marketplace and VaultTracker contracts with no ability to change admin to a new address or renounce it, making it a single-point of failure."}

