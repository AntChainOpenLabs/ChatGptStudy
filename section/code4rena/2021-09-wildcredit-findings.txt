1. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "liquidateAccount() function", "Repair Method": "Check if liquidity is 0 when removeLiquidity", "Vulnerability Information": "A malicious user can escape liquidation by depositing a Uni v3 position with 0 liquidity."}
2. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "LendingPair.uniClaimDeposit function", "Repair Method": "Disallow collecting the 'parked' liquidity in a token by immediately collecting them when the NFT is deposited in depositUniPosition", "Vulnerability Information": "An attacker can steal most of the accrued lpRate in a single atomic transaction."}
3. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "UniswapV3Oracle.sol contract", "Repair Method": "Remove dependence on Chainlink completely", "Vulnerability Information": "The contract uses Chainlink’s deprecated API latestAnswer()."}
4. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "_supplyCreditUni() function", "Repair Method": "Change the last argument of _convertTokenValues() from _priceB to _priceA", "Vulnerability Information": "Use of tokenB’s price instead of tokenA in determining account health will lead to protocol mis-accounting and insolvency."}
5. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "LendingPair.withdrawUniPosition function", "Repair Method": "Accrue the debt for both tokens first in LendingPair.withdrawUniPosition", "Vulnerability Information": "LendingPair.withdrawUniPosition should accrue debt first."}

