1. {"Vulnerability Type": "Smart contract signature verification vulnerability", "Vulnerability Location": "QuickAccManager Smart Contract signature verification can be exploited", "Repair Method": "Remove the `id` from the `signature` and use `msg.sender` as the identity instead", "Vulnerability Information": "An attacker can create a smart contract mode signature for arbitrary transactions as the `QuickAccManager.isValidSignature` uses an attacker-controlled `id` identity contract for the privileges check."}
2. {"Vulnerability Type": "Execution with invalid signatures", "Vulnerability Location": "Prevent execution with invalid signatures", "Repair Method": "Add a check in the constructor of `Identity.sol` to ensure that `addrs[i]` is not 0", "Vulnerability Information": "If one of the supplied `addrs[i]` to the constructor of `Identity.sol` happens to be 0, then `privileges[0] = 1` and anyone can perform any transaction with an invalid signature."}
3. {"Vulnerability Type": "Signature replay attacks for different identities", "Vulnerability Location": "Signature replay attacks for different identities (nonce on wrong party)", "Repair Method": "Include the `identity` address itself as part of `hash` and index nonces by the `accHash` instead of the identity", "Vulnerability Information": "If two different identities share the same `QuickAccount`, transactions on one identity can be replayed on another one if it uses the same `QuickAccount`. This vulnerability exists in `QuickAccManager.send`, `cancel`, `execScheduled`, `sendTransfer`, and `sendTxns`."}

{"Vulnerability Type": "Incorrect hash calculation", "Vulnerability Location": "QuickAccManager.sol#cancel()", "Repair Method": "Change the calculation of hashTx to include all necessary parameters", "Vulnerability Information": "The wrong hashTx calculation makes it impossible to cancel a scheduled transaction in QuickAccManager.sol#cancel() function."}

