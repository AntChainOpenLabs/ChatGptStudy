1. {"Vulnerability Type": "flashloan attack", "Vulnerability Location": "VaderMath.sol#L69-L93", "Repair Method": "Use the fair lp pricing formula from alpha finance instead", "Vulnerability Information": "The formula used to calculate lp value is vulnerable to manipulation, allowing an attacker to purchase an old lp position, manipulate price, take IL compensation and drain the reserve."}
2. {"Vulnerability Type": "wrong rate calculation", "Vulnerability Location": "TwapOracle.sol#L166", "Repair Method": "Manually multiply enough decimals before division", "Vulnerability Information": "The USDV and VADER rate can be wrong due to a calculation error in the TWAP oracle module."}
3. {"Vulnerability Type": "unused slippage params", "Vulnerability Location": "addLiquidity function in VaderRouter (both V1 and V2)", "Repair Method": "Consider paying some attention to the slippage to reduce possible manipulation attacks from mempool snipers", "Vulnerability Information": "The addLiquidity function does not use slippage parameters, making it susceptible to sandwich attacks / MEV."}
4. {"Vulnerability Type": "sandwich attack", "Vulnerability Location": "addLiquidity function in VaderRouter and VaderRouterV2 contract", "Repair Method": "Always check how much liquidity a user received in a transaction. A tx would not be sandwiched if it's not profitable", "Vulnerability Information": "The addLiquidity function does not check the minimum liquidity amount, making users' funds vulnerable to sandwich attacks."}
5. {"Vulnerability Type": "manipulation of synths redemption value", "Vulnerability Location": "VaderPoolV2.mintSynth function", "Repair Method": "Prevent minting of synths or at the very least tie the exchange rate to a manipulation resistant oracle", "Vulnerability Information": "The redemption value of synths can be manipulated to drain VaderPool of all native assets."}
6. {"Vulnerability Type": "asymmetric liquidity provision", "Vulnerability Location": "VaderPoolV2.add asymmetric LP via mint", "Repair Method": "Remove a possibility to add liquidity asymmetrically: instead of penalizing LP with slip adjustment do biggest liquidity addition with 0 slip adjustment that user provided funds allow, and return the remaining part", "Vulnerability Information": "Covering imper

1. {"Vulnerability Type": "Loss of Funds", "Vulnerability Location": "VaderPoolV2.mintFungible()", "Repair Method": "Remove the 'from' argument in mintFungible() and update the safeTransferFrom() calls to instead transfer from msg.sender.", "Vulnerability Information": "All user assets which are approved to VaderPoolV2 may be stolen."}
2. {"Vulnerability Type": "Front-running", "Vulnerability Location": "mintSynth() and burnSynth()", "Repair Method": "Consider adding a 'minAmountOut' parameter.", "Vulnerability Information": "mintSynth() and burnSynth() can be front-run."}
3. {"Vulnerability Type": "Incorrect Calculation", "Vulnerability Location": "TwapOracle.sol", "Repair Method": "Replace the calculation on L156 with the below: uint256 scalingFactor = 10 ** IERC20Metadata(token).decimals(); result = (sumUSD * scalingFactor) / sumNative;", "Vulnerability Information": "TwapOracle doesn't calculate VADER:USDV exchange rate correctly."}
4. {"Vulnerability Type": "Fee-On-Transfer", "Vulnerability Location": "XVader.sol", "Repair Method": "There should be pre and post checks on balances to get the real amount.", "Vulnerability Information": "VADER contains a Fee-On-Transfer."}
5. {"Vulnerability Type": "Unlimited Slippage", "Vulnerability Location": "VaderPool.mintSynth()", "Repair Method": "Add an argument for the minimum amount of synths to mint or nativeAsset to receive.", "Vulnerability Information": "Minting and burning synths exposes users to unlimited slippage."}
6. {"Vulnerability Type": "Dependency Issue", "Vulnerability Location": "TwapOracle.sol", "Repair Method": "Allow governance to update the aggregator for a pair (ideally with a timelock).", "Vulnerability Information": "Should a Chainlink aggregator become stuck in a stale state then TwapOracle will become irrecoverably broken."}
7. {"Vulnerability Type": "Impermanent Loss", "Vulnerability Location": "VaderPoolV2.burn()", "Repair Method": "Use a manipulation resistant oracle for the relative prices of the pool's assets (TWAP, etc.)", "Vulnerability Information": "LPs of VaderPoolV2 can manipulate pool reserves to extract funds from the reserve."}
8. {"Vulnerability Type": "Arbitrary Token Minting", "Vulnerability Location": "VaderPoolV2.mintFungible()", "Repair Method": "Remove the 'from' argument in mintFungible() and update the safeTransferFrom() calls to instead transfer from msg.sender.", "Vulnerability Information": "Anyone Can Arbitrarily Mint Fung

1. {"Vulnerability Type": "Attacker can get extremely cheap synth by front-running create Pool", "Vulnerability Location": "VaderPoolFactory.sol#L43-L89, VaderPoolV2.sol#L115-L167", "Repair Method": "Decide minimum liquidity for a synthetic asset (e.g 1M Vader in the pool). Once there's enough liquidity pool, anyone can deploy a synthetic asset after a cool down. (e.g. 3 days).", "Vulnerability Information": "Attacker can create a token pool and set it to be extremely cheap, and can mint a lot of synth by providing another 10^18 wei Vader. There's no way to revoke the pool."}
2. {"Vulnerability Type": "Lack of access control allow attacker to mintFungible() and mintSynth() with other user's wallet balance", "Vulnerability Location": "VaderPoolV2.sol#L284-L335, VaderPoolV2.sol#L126-L167", "Repair Method": "Add proper access control to mintFungible() and mintSynth() functions.", "Vulnerability Information": "This issue allows anyone to call mintFungible() and mintSynth() and steal almost all their wallet balances for all the users who have approved the contract before."}
3. {"Vulnerability Type": "VaderPoolV2.mintFungible exposes users to unlimited slippage", "Vulnerability Location": "VaderPoolV2.sol#L271-L335", "Repair Method": "Add a user-specified minimum amount of LP tokens to mint.", "Vulnerability Information": "There's no way for users to specify the minimum number of liquidity units they will accept. This allows frontrunners to manipulate the pool's reserves in such a way that the LP receives fewer liquidity units than they should."}
4. {"Vulnerability Type": "Early user can break addLiquidity", "Vulnerability Location": "BasePool.sol#L161-L163", "Repair Method": "On first mint (totalLiquidityUnits == 0), lock some of the first minter's tokens by minting ~1% of the initial amount to the zero address instead of to the first minter.", "Vulnerability Information": "Since the first liquidity takes the nativeDeposit amount and uses it directly, a malicious user can add liquidity with only 1 wei USDV and making it nearly impossible for future users to add liquidity to the pool."}
5. {"Vulnerability Type": "Governance veto can be bypassed", "Vulnerability Location": "GovernorAlpha.sol:L562", "Repair Method": "Proposal are vetoable whenever the differential is less than x%, even if it involves governance change, s.t. council can veto most malicious proposal while it is still possible to change council given high enough vote differential.", "Vulnerability Information": "A malicious proposal can be designed to have an action that point to governance and therefore effectively cannot be vetoed."}
6. {"Vulnerability Type": "Attacker can claim more IL by manipulating pool price then removeLiquidity", "Vulnerability Location": "VaderRouterV2.sol:L227", "Repair Method": "Use twap price to determine P1 in VaderMath.sol:L84 when calculating IL to reduce risk of manipulation.", "Vulnerability Information": "An attacker can manipulate the pool balance causing a high IL, remove liquidity and restore the pool balance such that they will receive a larger IL reimbursement."}

1. {"Vulnerability Type": "Wrong design/implementation", "Vulnerability Location": "addLiquidity() function in VaderPoolV2.sol", "Repair Method": "Implement a fixed ratio of amounts in comparison to Uni v2", "Vulnerability Information": "The current design/implementation of Vader pool allows users to `addLiquidity` using arbitrary amounts instead of a fixed ratio of amounts in comparison to Uni v2."}
2. {"Vulnerability Type": "Synth tokens over-minted", "Vulnerability Location": "mintSynth() function in VaderPoolV2.sol", "Repair Method": "Deduct or lock reserveForeign when minting Synth tokens", "Vulnerability Information": "In the current implementation, `Synth` tokens are minted based on the calculation result. While `nativeDeposit` be added to the reserve, `reserveForeign` will remain unchanged, not deducted nor locked."}
3. {"Vulnerability Type": "No way to remove GasThrottle", "Vulnerability Location": "GasThrottle.sol", "Repair Method": "Allow governance to turn off GasThrottle or remove it entirely", "Vulnerability Information": "Potential DOS on swapsBasePool and BasePoolV2 make use of a `validateGas` modifier on swaps which checks that the user's gas price is below the value returned by `_FAST_GAS_ORACLE`. There is no way to recover from this scenario."}
4. {"Vulnerability Type": "Inflexible update period", "Vulnerability Location": "TwapOracle.sol", "Repair Method": "Add a function to set update period per asset", "Vulnerability Information": "In Vader's `TwapOracle.sol` no considerations are made for volatility of an asset when calculating update periods. Additionally, each asset uses the same `_updatePeriod` which does not adequately account for the differences in risk for each asset."}
5. {"Vulnerability Type": "Incorrect linear vesting calculation", "Vulnerability Location": "LinearVesting.sol", "Repair Method": "Change formula to `User total amount * (block.timestamp – start) / (vesting duration) – user claimed amount`", "Vulnerability Information": "LinearVesting does not calculate vested amount linearly."}
6. {"Vulnerability Type": "Incorrect IL protection calculation", "Vulnerability Location": "VaderPoolV2.sol", "Repair Method": "Add handling for the conversion rate between VADER and USDV using a tamper resistant oracle", "Vulnerability Information": "VaderPoolV2 incorrectly calculates the amount of IL protection to send to LPs."}

{"Vulnerability Type": "Frontrunning", "Vulnerability Location": "BasePool.mint() function in BasePool.sol", "Repair Method": "Include in the mint() function the transfer of _nativeAssets and _foreignAssets to the smart contract.", "Vulnerability Information": "The mint function in the BasePool contract can be frontrun, allowing an attacker to retrieve the NFT and corresponding assets deposited by the victim."}

{"Vulnerability Type": "Insufficient Impermanent Loss Compensation", "Vulnerability Location": "VaderReserve.sol and VaderRouter.sol", "Repair Method": "Add a new parameter in the function to specify the minimum compensation or check the amountAMin after receiving the compensation.", "Vulnerability Information": "Users may not receive the full amount of IL compensation if there's not enough funds in the reserve."}

{"Vulnerability Type": "Missing Modifier", "Vulnerability Location": "claimConverted() function in LinearVesting.sol", "Repair Method": "Add the hasStarted modifier to the claimConverted() function.", "Vulnerability Information": "The user can vest their vader token for a certain amount of time, but the hasStarted modifier is missing, allowing anyone to call the function even if the vesting hasn't started."}

{"Vulnerability Type": "Inconsistent Balance", "Vulnerability Location": "stake() and withdraw() functions in StakingRewards.sol", "Repair Method": "Get the actual received amount by calculating the difference of token balance before and after the transfer.", "Vulnerability Information": "The stake and withdraw functions assume that the amount of stakingToken is transferred to the smart contract after calling the safeTransferFrom function, causing the received amount to be less than the accounted amount in the _balances mapping."}

{"Vulnerability Type": "Unsupported Tokens", "Vulnerability Location": "BasePoolV2.sol", "Repair Method": "Consider calling balanceOf() to get the actual balances.", "Vulnerability Information": "The mint function in the BasePoolV2 contract assumes that the received amount is the same as the transfer amount, and uses it to calculate liquidity units, but tokens with fee on transfer or rebasing tokens are not supported."}

{"Vulnerability Type": "Lack of Check on Chainlink Aggregators", "Vulnerability Location": "consult() function in TwapOracle.sol", "Repair Method": "Add checks on the return data with proper revert messages if the price is stale or the round is incomplete.", "Vulnerability Information": "The consult function fetches the asset price from a Chainlink aggregator using the latestRoundData function, but there are no checks on timeStamp, resulting in stale prices."}

1. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "M-09", "Repair Method": "Set a minimum deposit amount (both asset amount and native amount) for the first lp provider.", "Vulnerability Information": "The first lp provider can destroy the pool."}
2. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "M-03", "Repair Method": "Remove the permissioning from `TwapOracle.update`", "Vulnerability Information": "Permissioned nature of TwapOracle allows owner to manipulate oracle."}
3. {"Vulnerability Type": "High Severity", "Vulnerability Location": "H-33", "Repair Method": "Take into account liquidity that was provided by Synth minting.", "Vulnerability Information": "Mixing different types of LP shares can lead to losses for Synth holders."}
4. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "M-23", "Repair Method": "Force the user to redeem any claimable tokens in the same function.", "Vulnerability Information": "Users Can Reset Bond Depositor's Vesting Period."}
5. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "M-15", "Repair Method": "Consider validating the output of `latestRoundData()` to match the following code snippet.", "Vulnerability Information": "Lacking Validation Of Chainlink' Oracle Queries."}
6. {"Vulnerability Type": "High Severity", "Vulnerability Location": "H-30", "Repair Method": "Perform proper checks to ensure that if `pairData.price1Average._x == 0`, then the Chainlink aggregator is not queried and not added to `sumUSD`.", "Vulnerability Information": "Newly Registered Assets Skew Consultation Results."}
7. {"Vulnerability Type": "Medium Severity", "Vulnerability Location": "M-01", "Repair Method": "Add a method to stop tracking a particular pair or allow updating a subset of all pairs at a time.", "Vulnerability Information": "Unbounded loop in TwapOracle.update can result in oracle being locked."}

1. {"Vulnerability Type": "locked funds", "Vulnerability Location": "VaderReserve", "Repair Method": "Allow the reserve to whitelist multiple addresses to claim funds or allow the call to the reserve to fail without reverting the entire transaction", "Vulnerability Information": "All liquidity deployed to one of VaderPool or VaderPoolV2 will be locked permanently if IL protection is paid out to more than one address."}
2. {"Vulnerability Type": "draining reserve funds", "Vulnerability Location": "VaderPoolV2.burn", "Repair Method": "Add a whitelist to the pairs which qualify for IL protection", "Vulnerability Information": "An attacker can cheaply create a pool with a token which starts off with a very low price in terms of VADER and is guaranteed to have a very high price in terms of VADER then they will benefit from a large amount of IL protection funds from the reserve."}
3. {"Vulnerability Type": "exploitable veto protection", "Vulnerability Location": "GovernorAlpha", "Repair Method": "Restrict the veto check by specifying the actual function selector that is not allowed to be vetoed", "Vulnerability Information": "The GovernorAlpha's council cannot veto proposals that perform a call to the contract itself."}
4. {"Vulnerability Type": "unclear algorithm", "Vulnerability Location": "TWAPOracle.consult", "Repair Method": "Document how the algorithm works and make sure it's correct", "Vulnerability Information": "The consult function is unclear and the algorithm used to create an average price is not effective."}
5. {"Vulnerability Type": "wrong swap", "Vulnerability Location": "VaderRouter._swap", "Repair Method": "Use return pool1.swap(pool0.swap(0, amountIn, address(pool1)), 0, to); instead", "Vulnerability Information": "The code mixes up positional arguments and tries to perform a pool0 foreign - native swap by using the foreign amount as the native amount."}
6. {"Vulnerability Type": "arbitrary minting of synthetic assets", "Vulnerability Location": "VaderPoolV2.mintSynth()", "Repair Method": "Remove the from argument in mintSynth() and update the safeTransferFrom() call to instead transfer from msg.sender", "Vulnerability Information": "The mintSynth() function is callable by any user and creates a synthetic asset against foreignAsset if it does not already exist."}
7. {"Vulnerability Type": "registering with wrong token order", "Vulnerability Location": "TWAPOracle.registerPair", "Repair Method": "Check if Uniswap's internal order matches the order of the token0/1 function arguments. If not, the cumulative prices must be swapped.", "Vulnerability Information": "The registerPair function could register with the wrong token order, leading to the oracle providing wrong prices."}

1. {"Vulnerability Type": "Incorrect Accrual", "Vulnerability Location": "TwapOracle.consult()", "Repair Method": "Multiply the native price and Chainlink oracle results, then calculate the price as such; `(SUSHI/USD * USDV/SUSHI + UNISWAP/USD * USDV/UNISWAP) / 2`", "Vulnerability Information": "The oracle returns false results upon being consulted."}
2. {"Vulnerability Type": "Unrestricted function call", "Vulnerability Location": "vestFor()", "Repair Method": "Introduce a whitelist of callers that can vest on behalf of others (e.g. Converter)", "Vulnerability Information": "Anyone can call function `vestFor` and block any user with a tiny amount of Vader."}
3. {"Vulnerability Type": "Incorrect Price Consultation Results", "Vulnerability Location": "TwapOracle.consult()", "Repair Method": "Return `sumUSD * token.decimals() * sumNative` instead of `(sumUSD * token.decimals()) / sumNative`", "Vulnerability Information": "The oracle returns false results upon being consulted."}
4. {"Vulnerability Type": "Incorrect Swap Calculation", "Vulnerability Location": "VaderRouter.calculateOutGivenIn()", "Repair Method": "Return `VaderMath.calculateSwap(amountIn, foreignReserve0, nativeReserve0)` instead of `VaderMath.calculateSwap(amountIn, nativeReserve1, foreignReserve1)`", "Vulnerability Information": "All 3-path swaps computations through `VaderRouter.calculateOutGivenIn` will return the wrong result."}
5. {"Vulnerability Type": "Unrestricted function call", "Vulnerability Location": "BasePool.mint()", "Repair Method": "Add an `onlyRouter` modifier to the `BasePool.mint()` function", "Vulnerability Information": "The function is callable by anyone and can bypass necessary input validation."}
6. {"Vulnerability Type": "No Scaling of Ratio", "Vulnerability Location": "TWAPOracle.getRate()", "Repair Method": "Scale the result by some value, for example, `1e18`", "Vulnerability Information": "The rate has no decimal precision and if `tUSDInVader < tUSDInUSDV`, the rate will always be zero."}

1. {"Vulnerability Type": "Wrong design", "Vulnerability Location": "calculateSwap() function in VaderMath.sol", "Repair Method": "Consider changing the formula to avoid unexpected and unfavorable outputs", "Vulnerability Information": "The current formula to calculate the `amountOut` for a swap is wrong and it will result in unexpected and unfavorable outputs."}
2. {"Vulnerability Type": "Callable function by anyone", "Vulnerability Location": "BasePool.swap() function in BasePool.sol", "Repair Method": "Add an `onlyRouter` modifier to the `BasePool.swap()` functions to ensure users cannot directly call these functions", "Vulnerability Information": "The `BasePool.swap()` function can be called directly, bypassing necessary input validation."}
3. {"Vulnerability Type": "Missing duplicate veto check", "Vulnerability Location": "veto() function in GovernorAlpha.sol", "Repair Method": "Check if proposals have been vetoed before before completing the veto progress", "Vulnerability Information": "Duplicate veto progress can be completed per proposal."}

