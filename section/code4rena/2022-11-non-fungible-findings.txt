{"Vulnerability Type": "centralization risk", "Vulnerability Location": "Exchange.sol contract", "Repair Method": "Implement a timelock in Exchange contract proxy to give users enough time to withdraw their approvals before some malicious action becomes possible", "Vulnerability Information": "Hacked owner or malicious owner can immediately steal all assets on the platform due to significant centralization risk trusting Exchange.sol contract to behave well, because it is an immediately upgradeable ERC1967Proxy."}

{"Vulnerability Type": "direct theft of buyer’s ETH funds", "Vulnerability Location": "Exchange.sol contract", "Repair Method": "Implement proper accounting of remainingETH and track buyers ETH in order to refund unused ETH. Check whether the account balance has been modified accordingly when releasing a standard event", "Vulnerability Information": "Seller or Fee recipient can steal ETH funds from the buyer when he is making a single or bulk execution. (Direct theft of funds)."}

{"Vulnerability Type": "Direct theft of buyer’s ETH funds", "Vulnerability Location": "bulkExecute and execute functions in Exchange.sol", "Repair Method": "Add a guard in setupExecution that would require isInternal = false, preventing reentrant calls", "Vulnerability Information": "The fee recipient can reenter the Exchange contract and drain the balance of the contract through bulkExecution. After the fee recipient drains the rest of the 4 ETH funds of the Exchange contract (the buyer's funds), they need to transfer a portion back (0.9 ETH) to the Exchange contract in order for the _executeFundsTransfer to not revert and be able to send funds (0.9 ETH) to the seller. This can be done using the selfdestruct opcode. bulkExecute delegatecalls execute and continues even after revert, the function bulkExecute will complete its execution without any errors and all the buyer's ETH funds will be lost and nothing will be refunded."}

{"Vulnerability Type": "Pool designed to be upgradeable but does not set owner, making it un-upgradeable", "Vulnerability Location": "Pool contract in IPool.sol", "Repair Method": "Implement an initializer for Pool similarly to the Exchange.sol contract", "Vulnerability Information": "The Pool contract is designed to be upgradeable but is actually not upgradeable. Whenever the EXCHANGE or SWAP address, or some functionality needs to be changed, it would not be possible."}

1. {"Vulnerability Type": "Unchecked Yul call return value", "Vulnerability Location": "Exchange.sol#L212-L227", "Repair Method": "Check the return value of the Yul call and revert if unsuccessful", "Vulnerability Information": "The Yul `call` return value on function `_returnDust` is not checked, which could lead to the `sender` losing funds."}
2. {"Vulnerability Type": "Invalid order execution due to refactoring", "Vulnerability Location": "Exchange.sol#L378", "Repair Method": "Implement the checks the same way as they were in the previous version of Exchange", "Vulnerability Information": "All orders which use `expirationTime == 0` to support oracle cancellation are not executable due to a refactoring error in the `_validateOrderParameters` function."}

