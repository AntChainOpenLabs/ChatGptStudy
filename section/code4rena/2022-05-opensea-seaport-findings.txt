{"Vulnerability Type": "Incorrect assertion", "Vulnerability Location": "_prepareBasicFulfillmentFromCalldata function in BasicOrderFulfiller.sol", "Repair Method": "Remove the `+1` at L347", "Vulnerability Information": "The assertion `_assertConsiderationLengthIsNotLessThanOriginalConsiderationLength` in the _prepareBasicFulfillmentFromCalldata function is incorrect and can be exploited to fulfill an order without trading the last consideration item in the list."}

{"Vulnerability Type": "Unhandled error code", "Vulnerability Location": "_aggregateValidFulfillmentOfferItems function in FulfillmentApplier.sol", "Repair Method": "Change the check on FulfillmentApplier.sol#L465 to consider `case 3`. Potential option: Introduce an early abort in case `errorBuffer != 0` on FulfillmentApplier.sol#L338", "Vulnerability Information": "The `_aggregateValidFulfillmentOfferItems()` function can be tricked to accept invalid inputs by setting the `errorBuffer` to an unhandled value of 3, which can lead to fulfilling an order with a consideration lower than expected."}

{"Vulnerability Type": "Merkle Tree vulnerability", "Vulnerability Location": "CriteriaResolution.sol#L157", "Repair Method": "Use hashes of the tokenIds as the leaves instead of the tokenIds themselves and compute the leaf hash in the contract from the provided tokenId", "Vulnerability Information": "The vulnerability allows an attacker to submit an intermediate hash of the merkle tree as the tokenId and trade this NFT instead of one of the requested ones, leading to losses for the offerer as they receive a tokenId that they did not specify in the criteria."}

{"Vulnerability Type": "Truncation", "Vulnerability Location": "OrderValidator.sol#L228-L248", "Repair Method": "Add checks for overflow/truncation and revert in that case", "Vulnerability Information": "A partial order's fractions (`numerator` and `denominator`) can be reset to `0` due to a truncation. This can be used to craft malicious orders."}

