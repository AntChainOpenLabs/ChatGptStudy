{"Vulnerability Type": "Reentrancy", "Vulnerability Location": "_safeMint function and updateDistribution function", "Repair Method": "Move the _safeMint function call to the end of its respective operation to prevent the effect of the re-entrancy. Call updateDistribution function before each locking and unlocking function. Add tests to ensure that the vulnerability is no longer exploitable.", "Vulnerability Information": "There is a reentrancy vulnerability in the _safeMint function that can allow an attacker to steal all rewards. The vulnerability can be exploited by re-entering the updateDistribution function in the _safeMint function. Since the value of totalDepositedXDEFI is not updated at this time, the _pointsPerUnit variable will become abnormally large. If the attacker calls the lock function to get the NFT before exploiting the reentrance vulnerability, then the unlock function can be called to steal a lot of rewards, and the assets deposited by the user using the reentrance vulnerability can also be redeemed by calling the unlock function."}

{"Vulnerability Type": "Arithmetic overflow/underflow", "Vulnerability Location": "updateDistribution() function", "Repair Method": "Reduce _pointsMultiplier to uint256(296) or enforce a minimum units locked to prevent dust from creating a very high _pointsPerUnit. Also, implement an emergency mode setter that allows users to withdraw only their deposits without any of the funds distribution math from being expected.", "Vulnerability Information": "A malicious early user can lock with only 1 wei of XDEFI and make _pointsPerUnit very large, causing future users not to be able to lock and/or unlock anymore due to overflow in arithmetic related to _pointsMultiplier. As a result, the contract can malfunction and even freeze users' funds in edge cases."}

{"Vulnerability Type": "Unique Identifier Collision", "Vulnerability Location": "_generateNewTokenId() function", "Repair Method": "Replace totalSupply() with an internal counter to ensure unique and monotomically increasing tokenIds", "Vulnerability Information": "The _safeMint() function may fail due to an edge case in calculating tokenId using the _generateNewTokenId() function. This occurs when the same totalSupply() value is used, causing a collision in the generated tokenId. This may impact a user's overall experience while interacting with the XDEFI protocol, as some transactions may fail unexpectedly."}

