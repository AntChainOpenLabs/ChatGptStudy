1. {"Vulnerability Type": "Access Control", "Vulnerability Location": "DepositHook.sol, PrePOMarket.sol", "Repair Method": "Add an additional check in `DepositHook` to NFT holders through `NFTScoreRequirement`. Set the `RedeemHook` `AccountList` to allow all users to redeem positions via the `PrePOMarket` contract once trading on the UniswapV3Pool is closed.", "Vulnerability Information": "PrePO NFT holders will not be able to redeem collateral."}
2. {"Vulnerability Type": "Front-running", "Vulnerability Location": "PrePOMarket.sol", "Repair Method": "Set the `_mintHook` in the deployment in the PrePOMarketFactory or add a default MintHook-Contract address that will always revert until it's changed to a valid one.", "Vulnerability Information": "Frontrunning for unallowed minting of Short and Long tokens."}

1. {"Vulnerability Type": "Free collateral token", "Vulnerability Location": "Collateral.sol, DepositHook.sol, WithdrawHook.sol", "Repair Method": "Calculate actual amount by recording balance before and after transfer", "Vulnerability Information": "If an ERC20 token that deducts a fee on every transfer call is used as baseToken, the recipient receives free collateral token."}
2. {"Vulnerability Type": "Users not receiving owed tokens", "Vulnerability Location": "TokenSender.sol, DepositHook.sol, RedeemHook.sol, WithdrawHook.sol", "Repair Method": "Track users whose balance wasn't covered in a mapping and provide a function for them to manually claim tokens later on if the contract's balance is topped up", "Vulnerability Information": "Users do not receive owed tokens if TokenSender contract cannot cover their owed amount."}

1. {"Vulnerability Type": "griefing / blocking / delaying users to withdraw", "Vulnerability Location": "WithdrawHook contract", "Repair Method": "Change the implementation to reset the amount for every user separately using a mapping", "Vulnerability Information": "The check for the user withdraw is wrongly implemented and can lead to an unexpected delay for a user with a position userWithdrawLimitPerPeriod."}
2. {"Vulnerability Type": "Manager can get around min reserves check, draining all funds from Collateral.sol", "Vulnerability Location": "withdraw() and managerWithdraw() functions in Collateral.sol", "Repair Method": "Include a check on the reserves in the withdraw() function as well as managerWithdraw()", "Vulnerability Information": "The manager can use this flaw to get around the reserve balance by making a large deposit, taking a manager withdrawal, and then withdrawing their deposit."}

1. {"Vulnerability Type": "Bypassing Withdraw Limit Check", "Vulnerability Location": "WithdrawHook.sol", "Repair Method": "Add limit checks in the if blocks as well, to make sure the first request does not overflow the limit.", "Vulnerability Information": "A whale user is able to cause freeze of funds of other users by bypassing withdraw limit."}
2. {"Vulnerability Type": "Calling setFinalLongPayout() Twice", "Vulnerability Location": "PrePOMarket.sol", "Repair Method": "Modify setFinalLongPayout() to prevent it from being finalized twice.", "Vulnerability Information": "If `finalLongPayout` is changed twice by admin fault, the market would be insolvent as it should pay more collateral than it has."}
3. {"Vulnerability Type": "Bypassing userWithdrawLimitPerPeriod Check", "Vulnerability Location": "WithdrawHook.sol", "Repair Method": "User should only be allowed to transfer leftover limit.", "Vulnerability Information": "User can bypass the `userWithdrawLimitPerPeriod` check by transferring the balance to another account."}

