{"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "createVault() function in Cally.sol contract", "Repair Method": "Use OpenZeppelin's SafeERC20 instead of solmate's SafeTransferLib", "Vulnerability Information": "The use of solmate's SafeTransferLib in the createVault() function can result in a vulnerability where a non-existing token can be used to create a vault, which can be exploited by a sophisticated attacker to steal funds from future users. This vulnerability can be fixed by using OpenZeppelin's SafeERC20 instead of solmate's SafeTransferLib."}

{"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "createVault() function in Cally.sol contract", "Repair Method": "Disallow fee tokens from being used in the vault by adding a require() statement to check that the amount increase of the token balance in the Cally contract is equal to the amount being sent by the caller of the createVault() function", "Vulnerability Information": "The use of fee tokens in the createVault() function can result in a vulnerability where an attacker can create a new vault that contains the same token and withdraw the same amount, causing loss of user funds and loss of value from the Cally contract. This vulnerability can be fixed by disallowing fee tokens from being used in the vault by adding a require() statement to check that the amount increase of the token balance in the Cally contract is equal to the amount being sent by the caller of the createVault() function."}

{"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "createVault() function in Cally.sol contract", "Repair Method": "Add a check at the start of createVault() to disallow creating a vault with Cally' own token by requiring that token != address(this)", "Vulnerability Information": "The ability to create a vault with Cally' own address as token can result in a vulnerability where the vault is unusable and the ETH deposited by users to buy/exercise options will remain locked in Cally contract. This vulnerability can be fixed by adding a check at the start of createVault() to disallow creating a vault with Cally' own token by requiring that token != address(this)." }

{"Vulnerability Type": "ERC20 token drain", "Vulnerability Location": "createVault() function in Cally.sol", "Repair Method": "Use safeTransferFrom() when the token is of type ERC721. Confirm whether tokenType and token’s type are the same in createVault().", "Vulnerability Information": "Some ERC20 tokens don't throw but just return false when a transfer fails. This can be abused to trick the createVault() function to initialize the vault without providing any tokens."}

{"Vulnerability Type": "Infinite vault creation", "Vulnerability Location": "createVault() function in Cally.sol", "Repair Method": "Add a check to ensure that tokenIdOrAmount is greater than 0. This check should only be applied on ERC20 tokens because ERC721 tokens can still have tokenIds that have ID's with a value of 0.", "Vulnerability Information": "A griefer is able to create as many vaults as they want by simply calling createVault() with tokenIdOrAmount = 0."}

{"Vulnerability Type": "Mismatched token type", "Vulnerability Location": "createVault(), exercise(), and withdraw() functions in Cally.sol", "Repair Method": "Confirm whether tokenType and token’s type are the same in createVault().", "Vulnerability Information": "When calling createVault(), tokenType could be different from token’s type. If a user accidentally used the wrong tokenType, it could lead to two different results."}

{"Vulnerability Type": "Rebasing token reward theft", "Vulnerability Location": "createVault(), exercise(), and withdraw() functions in Cally.sol", "Repair Method": "Track total amounts currently deposited and allow vault creators to withdraw excess on a pro-rata basis.", "Vulnerability Information": "If rebasing tokens are used as the vault token, rewards accrue to the vault and cannot be withdrawn by either the option seller or the owner, and remain locked forever."}

{"Vulnerability Type": "Accidental Overpayment", "Vulnerability Location": "buyOption() function", "Repair Method": "Modify the check such that the msg.value is exactly equal to the premium", "Vulnerability Information": "It is possible for a user purchasing an option to accidentally overpay the premium during buyOption(). Any excess funds paid for in excess of the premium will be transferred to the vault creator."}

{"Vulnerability Type": "Owner can set feeRate greater than 100%", "Vulnerability Location": "setFee() function", "Repair Method": "Add reasonable fee rate bounds checks in the setFee() function", "Vulnerability Information": "The owner can force options to be non-exercisable, collecting premium without risking the loss of their NFT/tokens."}

{"Vulnerability Type": "Owner can modify feeRate on existing vaults and steal strike value on exercise", "Vulnerability Location": "setFee() and exercise() functions", "Repair Method": "Fix the fee rate per vault during vault creation", "Vulnerability Information": "The owner can steal the exercise cost which should have gone to the option seller."}

{"Vulnerability Type": "Expiration calculation overflows", "Vulnerability Location": "getPremium() function", "Repair Method": "Cast the multiplication into uint32", "Vulnerability Information": "Expiration calculation overflows if call option duration ≥ 195 days."}

{"Vulnerability Type": "Inefficiency in Dutch Auction", "Vulnerability Location": "getDutchAuctionStrike() function", "Repair Method": "Modify the function such that price drops to the reserveStrike exactly at 24 hours from start of auction", "Vulnerability Information": "The vulnerability is in the implementation of the function getDutchAuctionStrike(). The impact is high wrt Usability, where users have reduced available time to participate in the auction."}

{"Vulnerability Type": "Use of transferFrom() instead of safeTransferFrom()", "Vulnerability Location": "NFT transfers", "Repair Method": "Call the safeTransferFrom() method instead of transferFrom() for NFT transfers", "Vulnerability Information": "The transferFrom() method is used instead of safeTransferFrom(), presumably to save gas."}

