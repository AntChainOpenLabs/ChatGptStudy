1. {"Vulnerability Type": "System will not work anymore after EIP-4758", "Vulnerability Location": "DepositReceiver.sol#L25", "Repair Method": "Instead of generating addresses for every user, the user could directly interact with the deposit service and the deposit service would need to keep track of funds and provide refunds directly.", "Vulnerability Information": "After EIP-4758, the `SELFDESTRUCT` op code will no longer be available. According to the EIP, 'The only use that breaks is where a contract is re-created at the same address using CREATE2 (after a SELFDESTRUCT)'. Axelar is exactly such an application, the current deposit system will no longer work."}
2. {"Vulnerability Type": "removeWrapping can be called when there are still wrapped tokens", "Vulnerability Location": "XC20Wrapper.sol#L66", "Repair Method": "Track how many wrapped tokens are in circulation, only allow the removal of a wrapped tokens when there are 0 to ensure for users that they will always be able to unwrap.", "Vulnerability Information": "An owner can call `removeWrapping`, even if there are still circulating wrapped tokens. This will cause the unwrapping of those tokens to fail, as `unwrapped[wrappedToken]` will be `addres(0)`."}
3. {"Vulnerability Type": "Add cancel and refund option for Transaction Recovery", "Vulnerability Location": "AxelarGateway.sol#L262, AxelarGasService.sol#L98, AxelarGasService.sol#L110", "Repair Method": "Provide a cancel option if the transaction failed, from the source chain or destination chain, and allow the user to get the gas refund.", "Vulnerability Information": "Transactions could fail or get stuck, and there are several options provided, but some transactions' execution depend on the time or certain condition. For example, some transaction has a deadline, it the deadline is passed, the transaction will be invalid. Or some conditions may be temporary, for example, some certain price difference for some token pair. In this case, the failed transactions will be meaningless to redo, the appropriate method is to cancel the transaction and refund. If no such option is provided, users' fund for this transaction would be lock or loss."}
4. {"Vulnerability Type": "XC20Wrapper may lose received token forever if LocalAsset(xc20).mint is reverted indefinitely", "Vulnerability Location": "XC20Wrapper.sol#L124-L126", "Repair Method": "Use try catch", "Vulnerability Information": "XC20Wrapper may lose received token forever if LocalAsset(xc20).mint is reverted indefinitely. No matter how hard you retry the GMP message execution, it always fail thus the token get locked forever."}

{"Vulnerability Type": "Access Control", "Vulnerability Location": "AxelarGateway.sol#L268, AxelarGateway.sol#L311, AxelarAuthWeighted.sol#L86, AxelarAuthWeighted.sol#L36", "Repair Method": "Commands signed by the past 16 sets of {operators/weights/threshold} AFTER the operatorship transfer should not be executable and should be rejected. Only commands signed by the current set of {operators/weights/threshold} AFTER the operatorship transfer should be accepted and executable. Commands signed by the past 16 sets of {operators/weights/threshold} BEFORE the operatorship transfer should be accepted and executable.", "Vulnerability Information": "The previous sets of {Operators/Weights/Threshold} are still able to generate a valid proof, and subsequently execute the command. The past 16 sets of {Operators/Weights/Threshold} are considered valid and can be used within the `AxelarAuthWeighted._validateSignatures` function. Thus, the past 16 sets of {Operators/Weights/Threshold} are able to sign and submit a valid proof, and the proof will be accepted by the `AxelarAuthWeighted.validateProof` that allows them to execute the commands."}

