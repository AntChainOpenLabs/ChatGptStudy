{"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "WrappedIbbtc and WrappedIbbtcEth contracts", "Repair Method": "Introduce a minting/burning query that runs on a schedule, separating user funds contribution and actual mint/burn. Add a sanity check to ensure that on every update, the price is greater than 0. Add a null check to ensure that on every update, the price is greater than 0. Introduce a threshold variable for maximum time elapsed since last price update to WrappedIbbtcEth contract. Add a transferShares function beside the original transfer() to build a better UX.", "Vulnerability Information": "The smart contract vulnerabilities include not filtering out price feed outliers, no sanity check on pricePerShare which might lead to lost value, using stalled price for mint/burn if updatePricePerShare wasn't run properly, hard to clear balance, and null check in pricePerShare."}

1. {"Vulnerability Type": "Design flaw", "Vulnerability Location": "wibBTC contract", "Repair Method": "Create a revised version of the Curve StableSwap contract that can handle dynamic balances properly", "Vulnerability Information": "The design of wibBTC is not fully compatible with the current Curve StableSwap pool."}
2. {"Vulnerability Type": "Functional issue", "Vulnerability Location": "WrappedIbbtc contract", "Repair Method": "Change either WrappedIbbtc or WrappedIbbtcEth to behave consistently with the specification", "Vulnerability Information": "User will not be able to transfer if oracle.pricePerShare() (L124) revert."}
3. {"Vulnerability Type": "Authorization flaw", "Vulnerability Location": "approve and transferFrom functions", "Repair Method": "Track the rebalanced amounts in the _allowances field and subtract the transferred amount in transferFrom", "Vulnerability Information": "The approved spender may spend more tokens than desired."}

