1. {"Vulnerability Type": "flashloan manipulation", "Vulnerability Location": "burnAsset function of LimboDAO", "Repair Method": "Use a fair pricing formula for the LP tokens, for example, the one proposed by Alpha Finance", "Vulnerability Information": "The LP pricing formula used in the `burnAsset` function of `LimboDAO` is vulnerable to flashloan manipulation."}
2. {"Vulnerability Type": "wrong minting amount", "Vulnerability Location": "RebaseProxy.sol", "Repair Method": "Implement balanceBefore and balanceAfter calculation with the diff being wrapped", "Vulnerability Information": "The `RebaseProxy.sol` contract has a vulnerability where the `proxy` variable is calculated incorrectly."}
3. {"Vulnerability Type": "lack of access control", "Vulnerability Location": "parameterize function of proposal contracts", "Repair Method": "Only allow the creator of the proposal to modify the parameters", "Vulnerability Information": "Most of the proposal contracts have a `parameterize` function for setting the proposal parameters, and these functions are protected only by the `notCurrent` modifier."}
4. {"Vulnerability Type": "staking with amount = 0", "Vulnerability Location": "stake function", "Repair Method": "Remove the if statement that checks if the staked amount is greater than 0", "Vulnerability Information": "If a user has a pending reward and he calls the `stake` function with `amount = 0`, he won't be able to get his reward."}
5. {"Vulnerability Type": "reentrancy", "Vulnerability Location": "withdrawGovernanceAsset function of FlashGovernanceArbiter.sol", "Repair Method": "Implement the check-effects-interactions pattern or delete the `pendingFlashDecision` before making the external call", "Vulnerability Information": "The function `withdrawGovernanceAsset` is vulnerable to reentrancy."}
6. {"Vulnerability Type": "bookkeeping error", "Vulnerability Location": "burnAsset function of LimboDAO.sol", "Repair Method": "Check the balance before and after the transfer to take into account the Fees-On-Transfer", "Vulnerability Information": "Wrong fateBalance bookkeeping for a user."}

1. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "UniswapHelper.sol", "Repair Method": "Use a time weighted oracle for Uniswap", "Vulnerability Information": "Calling generateFLNQuote twice in every block prevents any migration."}
2. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "UniswapHelper.sol and Limbo.sol", "Repair Method": "Insert a require statement", "Vulnerability Information": "All the scxMinted is at risk of being burnt."}
3. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "LimboDAO contract", "Repair Method": "Replace proposal.execute() with a call that returns a success boolean", "Vulnerability Information": "The system can get to a 'stuck' state if a bad proposal (proposal that can't be executed) is accepted."}
4. {"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "UniswapHelper.sol", "Repair Method": "Check address(msg.sender)'s balance instead of address(this)'s balance", "Vulnerability Information": "Flan can't be transferred unless the flan contract has flan balance greater than the amount we want to transfer."}

1. {"Vulnerability Type": "Flash loan price manipulation", "Vulnerability Location": "purchasePyroFlan() function in FlanBackstop.sol", "Repair Method": "Use a TWAP instead of the pool price at a single point in time to increase the cost of performing a flashloan sandwich attack.", "Vulnerability Information": "Flash loan price manipulation in purchasePyroFlan() function."}
2. {"Vulnerability Type": "Sandwich attack", "Vulnerability Location": "UniswapHelper.buyFlanAndBurn function in UniswapHelper.sol", "Repair Method": "Add the minimum accepted price as a function argument so a user can limit the effective slippage, and check that actually received amount is above this accepted minimum.", "Vulnerability Information": "UniswapHelper.buyFlanAndBurn is a subject to sandwich attacks."}
3. {"Vulnerability Type": "Flash governance decision vulnerability", "Vulnerability Location": "assertGovernanceApproved function in FlashGovernanceArbiter.sol", "Repair Method": "Only allow certain addresses to call the assertGovernanceApproved function on FlashGovernanceArbiter.", "Vulnerability Information": "Tolerance is not enforced during a flash governance decision."}
4. {"Vulnerability Type": "Lack of access control", "Vulnerability Location": "assertGovernanceApproved function in FlashGovernanceArbiter.sol", "Repair Method": "Only allow certain addresses to call the assertGovernanceApproved function on FlashGovernanceArbiter.", "Vulnerability Information": "Lack of access control on assertGovernanceApproved can cause funds to be locked."}

1. {"Vulnerability Type": "Loss of tokens", "Vulnerability Location": "assertGovernanceApproved() and withdrawGovernanceAsset() functions in FlashGovernanceArbiter.sol", "Repair Method": "Update the initial if statement to ensure the pendingFlashDecision for that target and sender is empty or delete the user's data instead of setting it to the config", "Vulnerability Information": "Users who have not called withdrawGovernanceAsset() after they have locked their tokens from a previous proposal will lose their tokens if assertGovernanceApproved() is called again with the same target and sender."}
2. {"Vulnerability Type": "Logic error", "Vulnerability Location": "burnFlashGovernanceAsset() function in FlashGovernanceArbiter.sol", "Repair Method": "Change line 134 to delete pendingFlashDecision[targetContract][user] instead of setting the pendingFlashDecision to the default or only update pendingFlashDecision[targetContract][user].amount to subtract the amount sent as a function parameter and leave the remaining fields untouched", "Vulnerability Information": "A logic error in the burnFlashGovernanceAsset function that resets a user's pendingFlashDecision allows that user to steal other user's assets locked in future flash governance decisions."}
3. {"Vulnerability Type": "Incorrect unlockTime", "Vulnerability Location": "assertGovernanceApproved() function in FlashGovernanceArbiter.sol", "Repair Method": "Calculate unlockTime as a future timestamp or add a condition to check if the square of the vote is not equal to the current vote", "Vulnerability Information": "unlockTime is set incorrectly in assertGovernanceApproved() function, which can cause a denial-of-service attack on withdrawGovernanceAsset() function."}
4. {"Vulnerability Type": "Tokens not deducted", "Vulnerability Location": "burnFlashGovernanceAsset() function in FlashGovernanceArbiter.sol", "Repair Method": "Delete the user's data (i.e. delete pendingFlashDecision[targetContract][user]) rather than setting it to the config or only update pendingFlashDecision[targetContract][user].amount to subtract the amount sent as a function parameter and leave the remaining fields untouched", "Vulnerability Information": "The proposal to burn a user's tokens for a flash governance proposal does not result in the user losing any funds and may in fact unlock their funds sooner."}
5. {"Vulnerability Type": "Flipping governance decisions", "Vulnerability Location": "LimboDAO.sol", "Repair Method": "Change the condition to currentFate*fate<0 && currrentFate*currentFatefate*fate or require the square of your vote to not equal the currentFate and revert if not", "Vulnerability Information": "A user can, right at the end of the voting period, flip the decision without triggering the logic to extend the vote duration."}
6. {"Vulnerability Type": "Double transfer", "Vulnerability Location": "transferAndCall() function in ERC677.sol", "Repair Method": "Remove _transfer(msg.sender, _to, _value); in the transferAndCall function", "Vulnerability Information": "The implementation of the transferAndCall function

