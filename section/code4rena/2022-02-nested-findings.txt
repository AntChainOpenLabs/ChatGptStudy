1. {"Vulnerability Type": "Accidental ETH transfer", "Vulnerability Location": "NestedFactory.sol#L71, NestedFactory.sol#L286-L296, NestedFactory.sol#L370-L375, NestedFactory.sol#L482-L492", "Repair Method": "Restrict the sender to be 'weth' in receive() function and check that _fromReserve is false in the scenario address(_inputToken) == ETH", "Vulnerability Information": "Should a user accidentally send ETH to the NestedFactory, anyone can utilise it to their own benefit by calling processOutputOrders() / processInputAndOutputOrders()."}
2. {"Vulnerability Type": "Fee avoidance", "Vulnerability Location": "NestedFactory.sol#L446", "Repair Method": "Replace the safeTransfer with safeTransferWithFees function or set a maximum 'slippage' amount in the safeSubmitOrder function", "Vulnerability Information": "A user can destroy their NFTs and not pay fees on most of their assets."}
3. {"Vulnerability Type": "Undesired behavior", "Vulnerability Location": "NestedRecords.sol#L117-L131", "Repair Method": "Check the _amount parameter before pushing it into the array of tokens", "Vulnerability Information": "You push a parameter into an array of tokens without checking if it already exists. And, if at first it's added with amount 0, it can later on be pushed with a greater amount and be twice in the array."}
4. {"Vulnerability Type": "Incorrect logic", "Vulnerability Location": "OperatorResolver.sol#L42-L43", "Repair Method": "Change && by || in the areOperatorsImported method", "Vulnerability Information": "The logic related to the areOperatorsImported method is incorrect and can cause an operator not to be updated because the owner thinks it is already updated, and a vulnerable or defective one can be used."}

{"Vulnerability Type": "Cache inconsistency", "Vulnerability Location": "NestedFactory.sol, MixinOperatorResolver.sol", "Repair Method": "Add calls to rebuildCache() in addOperator() and removeOperator(), have INestedFactory also track operators that have been removed with a new array, and have isResolverCached() also check whether this new array is empty or not.", "Vulnerability Information": "The NestedFactory contract does not track operators properly, leading to cache inconsistency issues. There are four separate instances of operator tracking problems in this submission. Many core operations are dependent on the assumption that the operatorCache cache is synced prior to these functions being executed, but this may not necessarily be the case."}

