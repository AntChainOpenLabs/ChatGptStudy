1. {"Vulnerability Type": "UniswapConfig getters return wrong token config", "Vulnerability Location": "`UniswapConfig.getTokenConfigBySymbolHash`, `getTokenConfigByCToken`, `getTokenConfigByUnderlying` functions", "Repair Method": "Fix the non-existence check", "Vulnerability Information": "The functions return wrong token config if token config does not exist."}
2. {"Vulnerability Type": "uint(-1) index for not found", "Vulnerability Location": "`getTokenConfigBySymbolHash`, `getTokenConfigByCToken`, `getTokenConfigByUnderlying` functions", "Repair Method": "Reserve 0 for a not found index or introduce a new mapping with a boolean value that indicates if this index is initialized or not", "Vulnerability Information": "The functions check returned index against max uint, which is impossible to get. 0 will be returned for non-existing configs but 0 is a valid index for the 1st config."}
3. {"Vulnerability Type": "Reward rates can be changed through flash borrows", "Vulnerability Location": "`Comptroller.refreshCompSpeeds` function", "Repair Method": "Make it an admin-only function or use a time-weighted total borrow system", "Vulnerability Information": "The rewards per market are proportional to their `totalBorrows` which can be changed by a large holder who deposits lots of collateral, takes out a huge borrow in the market, updates the rewards, and then unwinds the position. Attackers have an incentive to drive up the rewards in markets they are a large supplier/borrower in."}

