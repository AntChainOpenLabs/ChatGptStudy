{"Vulnerability Type": "Lack of access control", "Vulnerability Location": "LenderPool.sol#L442", "Repair Method": "Add access control to withdrawInterest function", "Vulnerability Information": "Anyone can withdrawInterest() for any lender"}

{"Vulnerability Type": "Interest calculation error", "Vulnerability Location": "PooledCreditLine.sol#L1215-L1221", "Repair Method": "Scale the principal amount to precision (1e18) amounts", "Vulnerability Information": "Interest accrued could be zero for small decimal tokens"}

{"Vulnerability Type": "Potential depositing at unfavorable rate", "Vulnerability Location": "LenderPool.sol#L312, LenderPool.sol#L336", "Repair Method": "Add access control to start function, restrict it to be callable only by the borrower", "Vulnerability Information": "Potentially depositing at unfavorable rate since anyone can deposit the entire lenderPool to a known strategy at a pre-fixed time"}

{"Vulnerability Type": "Functionality error", "Vulnerability Location": "LenderPool.sol#L327", "Repair Method": "Use .safeTransfer instead of .transfer", "Vulnerability Information": "Pool Credit Line May Not Able to Start When _borrowAsset is Non ERC20 Compliant Tokens"}

1. {"Vulnerability Type": "Incorrect calculation", "Vulnerability Location": "LenderPool : Principal withdrawable is incorrectly calculated if start() is invoked with non-zero start fee", "Repair Method": "Save the initial supply in `minBorrowAmount` when the credit line is accepted, and replace `totalSupply[_id]` with it. In `terminate()`, the shares withdrawable can simply be `_sharesHeld`.", "Vulnerability Information": "The `_principalWithdrawable` calculated will be more than expected if `_start()` is invoked with a non-zero start fee, because the borrow limit is reduced by the fee, resulting in `totalSupply[id]` not being 1:1 with the borrow limit. Also, `_principalWithdrawable` is denominated in the borrowAsset, but subsequently treats it as the share amount to be withdrawn."}
2. {"Vulnerability Type": "Incorrect treatment", "Vulnerability Location": "PooledCreditLine : termination likely fails because  _principleWithdrawable  is treated as shares", "Repair Method": "The amount of shares to withdraw can simply be `_sharesHeld`. Ensure that `terminate()` is only called when the credit line is `ACTIVE` or `EXPIRED`.", "Vulnerability Information": "`_principalWithdrawable` is denominated in the borrowAsset, but subsequently treats it as the share amount to be withdrawn."}

