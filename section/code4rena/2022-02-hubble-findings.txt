{"Vulnerability Type": "smart contract vulnerability", "Vulnerability Location": "multiple locations", "Repair Method": "upgrade dependencies, add checks, unifying governance, etc.", "Vulnerability Information": "The text mentions several vulnerabilities in the Hubble smart contract, including vulnerabilities related to liquidations, insurance fund deposits, ownership transfer, reentrancy during initialization, assets transfer, hidden governance, etc. The text also provides repair methods for each vulnerability, such as upgrading dependencies, adding checks, unifying governance, etc."}

1. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "InsuranceFund.sol#syncDeps()", "Repair Method": "Consider making `vusd` unchangeable or adding a check to ensure that the balance of the contract remains the same after changing `vusd`", "Vulnerability Information": "The `Governance` address can call `InsuranceFund.sol#syncDeps()` to change the contract address of `vusd` anytime. However, since the tx to set a new address for `vusd` can get in between users' txs to deposit and withdraw, in some edge cases, it can result in users' loss of funds."}
2. {"Vulnerability Type": "Denial of Service", "Vulnerability Location": "VUSD.sol#withdraw()", "Repair Method": "Set a minimum amount of withdrawal, e.g. 1 dollar", "Vulnerability Information": "An attacker can push to withdrawals enormous amount of withdrawals with amount = 0. In order to stop the dos attack and process the withdrawal, the governance needs to spend as much gas as the attacker. If the governance doesn't have enough money to pay for the gas, the withdrawals can't be processed."}
3. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "ClearingHouse.sol#whitelistAmm()", "Repair Method": "Consider ensuring the `AMM` does not already exist in the list when adding a new `AMM`", "Vulnerability Information": "It is possible to add the same `AMM` twice in the function `whitelistAmm()`. The impact is that unrealized profits will be counted multiple times. As a result, the liquidation calculations will be incorrect, potentially allowing users to trade while insolvent or incorrectly liquidating solvent users."}
4. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "ClearingHouse.sol#_calcMarginFraction()", "Repair Method": "Consider removing decimals related hard coding, adding decimals variables and scaling VAMM returned results accordingly, so that position and margin values' decimals of 6, implied by ClearingHouse logic, be ensured", "Vulnerability Information": "It is assumed that VAMM returned positions have exactly `6` decimals for all AMMs white listed in ClearingHouse. If an VAMM that has a different precision is whitelisted, for example having 18 decimals for position figures, then margin requirements checks become invalid. This will lead to various malfunctions, say perfectly valid positions will be liquidated by any attacker noticing that the calculations are skewed."}

1. {"Vulnerability Type": "front-running", "Vulnerability Location": "InsuranceFund.sol", "Repair Method": "Implement a two-step withdrawal process or design change where insurance fund is slowly filled up over time without external deposits", "Vulnerability Information": "Users are able to front-run bad debt settlements to avoid insurance costs."}
2. {"Vulnerability Type": "incorrect decimal handling", "Vulnerability Location": "Oracle.sol", "Repair Method": "Take on-chain reported decimals into account by doing AggregatorV3Interface(chainLinkAggregatorMap[underlying]).decimals() and scale down to 6 decimals", "Vulnerability Information": "Oracle.getUnderlyingPrice could have wrong decimals."}
3. {"Vulnerability Type": "sequential processing", "Vulnerability Location": "AMM.sol", "Repair Method": "Return instead of revert when settleFunding calls are not ready for all AMMs", "Vulnerability Information": "All AMMs have to be past nextFundingTime to update."}
4. {"Vulnerability Type": "dilution of past participants", "Vulnerability Location": "InsuranceFund.sol", "Repair Method": "Keep track of the total amount ever contributed by users, or make staking 1 vUSD = 1 share if the pool total is below the total number of shares", "Vulnerability Information": "After debt seizure from InsuranceFund, user can dilute all past participants."}
5. {"Vulnerability Type": "DoS attack", "Vulnerability Location": "VUSD.sol", "Repair Method": "Add a zero amount check to prevent freezing of withdrawal functionality and corresponding user funds", "Vulnerability Information": "USDC blacklisted accounts can DoS the withdrawal system."}
6. {"Vulnerability Type": "incorrect library usage", "Vulnerability Location": "Oracle.sol, AMM.sol", "Repair Method": "Use the upgradeable version of Ownable library (@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol) and add __Ownable_init(); at the beginning of the initializer", "Vulnerability Information": "Usage of an incorrect version of Ownable library can potentially malfunction all onlyOwner functions."}

1. {"Vulnerability Type": "Exceeding block gas limit", "Vulnerability Location": "settleFunding function in ClearingHouse.sol and AMM.sol", "Repair Method": "Allow users to settle funding per market or using an array of markets opposed to all markets at once", "Vulnerability Information": "As the number of supported markets grow, `settleFunding` will reach a point were it exceeds the block gas limit on Avalanche C-Chain. This will prevent users from calling the function and cause a wide spread Denial of Service."}
2. {"Vulnerability Type": "Governance restriction", "Vulnerability Location": "initialize function in AMM.sol", "Repair Method": "Consider adding the steps manually to `initialize()`", "Vulnerability Information": "The contact `AMM.sol` cannot be initialize unless it is called from the `_governance` address. This prevents the use of a deployer account and requires the governance to be able to deploy proxy contracts and encode the required arguements."}

