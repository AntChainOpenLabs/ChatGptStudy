1. {"Vulnerability Type": "Guaranteed citadel profit", "Vulnerability Location": "mintAndDistribute function", "Repair Method": "Add linear vesting to the way more rewards are distributed to prevent frontrunning", "Vulnerability Information": "User can sandwich mintAndDistribute function if mintable is high enough."}
2. {"Vulnerability Type": "KnightingRound tokenOutPrice changes", "Vulnerability Location": "buy function and setTokenOutPrice function", "Repair Method": "Add additional parameter believedPrice to KnightingRound.buy function and check if believedPrice is equal to tokenOutPrice", "Vulnerability Information": "User buys tokens with the price he was not aware of."}
3. {"Vulnerability Type": "StakedCitadel depositors can be attacked", "Vulnerability Location": "deposit function", "Repair Method": "Require a minimum amount for deposit value to reduce the economic viability of the attack", "Vulnerability Information": "Attacker can become the first depositor for a recently created StakedCitadel contract, providing a tiny amount of Citadel tokens."}
4. {"Vulnerability Type": "StakedCitadel: wrong setupVesting function name", "Vulnerability Location": "withdraw function", "Repair Method": "Use the correct function name vest instead of setupVesting", "Vulnerability Information": "In the _withdraw function of the StakedCitadel contract, the setupVesting function of vesting is called."}
5. {"Vulnerability Type": "Funding.deposit() doesn't work if there is no discount set", "Vulnerability Location": "deposit function and getAmountOut function", "Repair Method": "Change the getAmountOut function to calculate citadelAmount_ without the if block", "Vulnerability Information": "The Funding contract's deposit() function tries to deposit 0 tokens for the user through the StakedCitadel contract."}

1. {"Vulnerability Type": "New vest reset unlockBegin of existing vest without removing vested amount", "Vulnerability Location": "StakedCitadelVester.sol:143,109", "Repair Method": "Reset claimedAmounts on new vest", "Vulnerability Information": "When `vest` is called by xCTDL vault, the previous amount will re-lock according to the new vesting timeline. While this is as described in L127, `claimableBalance` might revert due to underflow if `vesting[recipient].claimedAmounts` < 0 because the user will need to vest the `claimedAmounts` again which should not be an expected behavior as it is already vested."}
2. {"Vulnerability Type": "StakedCitadel doesn't use correct balance for internal accounting", "Vulnerability Location": "StakedCitadel.sol:291-295,772-776,881-893", "Repair Method": "Add the strategy's balance to the return value of the `balance()` function", "Vulnerability Information": "The StakedCitadel contract's `balance()` function is supposed to return the balance of the vault + the balance of the strategy. But, it only returns the balance of the vault. The balance is used to determine the number of shares that should be minted when depositing funds into the vault and the number of shares that should be burned when withdrawing funds from it."}
3. {"Vulnerability Type": "Stale price used when citadelPriceFlag is cleared", "Vulnerability Location": "Funding.sol:427-437", "Repair Method": "Always set the `citadelPriceInAsset`", "Vulnerability Information": "If an oracle price falls out of the valid min/max range, the `citadelPriceFlag` is set to true, but the out-of-bounds value is not stored. If the policy operations team calls `clearCitadelPriceFlag()`, the stale price from before the flag will be used."}

