1. {"Vulnerability Type": "Reentrancy", "Vulnerability Location": "Basket contract's initialize() method", "Repair Method": "Use the initializer modifier available in ERC20Upgradeable to prevent reentrancy attacks", "Vulnerability Information": "A malicious publisher can create a basket proposal that mixes real ERC20 tokens with a malicious ERC20 token containing a reentrancy callback in its approve() method."}
2. {"Vulnerability Type": "Missing cap", "Vulnerability Location": "LicenseFee variable", "Repair Method": "Introduce a maxLicenseFee to prevent incorrect values from making it all the way through", "Vulnerability Information": "There is no cap on LicenseFee, which can potentially lead to over/underflow in various functions."}
3. {"Vulnerability Type": "Forced bond burn", "Vulnerability Location": "Basket contract's auction mechanism", "Repair Method": "Add more oversight and accountability between users and publishers to mitigate attacks of this type", "Vulnerability Information": "The publisher can lock all user funds in the Basket in order to force a user to have their bond burned."}
4. {"Vulnerability Type": "Change in profitability", "Vulnerability Location": "Factory's auctionMultiplier and auctionDecrement variables", "Repair Method": "Save auctionDecrement and auctionMultiplier to global variables in Auction.sol when startAuction is called", "Vulnerability Information": "When factory changes auctionMultiplier or auctionDecrement, profitability of bonded auctions change and factory owners can decide to get all tokens from baskets where they are bonded for the auction."}
5. {"Vulnerability Type": "Fee calculation error", "Vulnerability Location": "Basket contract's fee calculation function", "Repair Method": "Fix the fee calculation formula to prevent any precision loss or value leakage", "Vulnerability Information": "Fee calculation is slightly off due to the use of a simple interest formula, leading to slightly less fee collected when fees are collected more frequently."}

1. {"Vulnerability Type": "Smart Contract Vulnerability", "Vulnerability Location": "Basket.sol, Auction.sol", "Repair Method": "Move the minIbRatio check to bondForRebalance() in Auction.sol, and track the fees paid out to the factory owner and publisher and exclude them from fee calculations in Basket.sol", "Vulnerability Information": "M-06: Basket can be fully drained if the auction is settled within a specific block, M-07: Bonder may not be able to settle a bonded auction, leading to loss of funds, M-08: Lost fees due to precision loss in fees calculation, M-11: Fees are overcharged"}

1. {"Vulnerability Type": "Wrong fee calculation", "Vulnerability Location": "Basket:handleFees", "Repair Method": "Only divide by BASE", "Vulnerability Information": "The fee calculation on L141 is wrong. It should only get divided by BASE and not (BASE feePct)"}
2. {"Vulnerability Type": "Wrong fee calculation after totalSupply was 0", "Vulnerability Location": "handleFees function", "Repair Method": "Set lastFee = block.timestamp if startSupply == 0", "Vulnerability Information": "handleFees does not update lastFee if startSupply == 0"}
3. {"Vulnerability Type": "Basket.sol#auctionBurn calculates ibRatio wrong", "Vulnerability Location": "auctionBurn function", "Repair Method": "Calculate newIbRatio as follows: uint256 newIbRatio = ibRatio * (supply + amount) / supply", "Vulnerability Information": "ibRatio is calculated higher than it should be"}


