{"Vulnerability Type": "No cap on borrowing Note", "Vulnerability Location": "CNote.sol and Note.sol contracts", "Repair Method": "Add a cap on how many Notes can be borrowed or add an hourly borrowing limit", "Vulnerability Information": "The fact that there is no cap on the amount of Note that can be borrowed makes the Oracle Extractable Value unlimited. An attacker could borrow Note without limit, and empty all pools related to Note and all Note-related value, instantly killing the stablecoin."}

{"Vulnerability Type": "Incorrect total supply in ERC20", "Vulnerability Location": "ERC20.sol contract", "Repair Method": "Set _initialSupply to 0 and remove the assignment from the constructor", "Vulnerability Information": "If _totalSupply is initialized to something different than 0, it could lead to an inaccurate total supply, and could easily break integrations, computations of market cap, etc."}

{"Vulnerability Type": "Admin can break functionality through WETH address", "Vulnerability Location": "Comptroller.sol contract", "Repair Method": "Set WETH address through initializer or change it through governance", "Vulnerability Information": "If the admin is set to WETH address mistakenly, user could not claim through Comptroller.sol#L1381. Admin can break the protocol."}

{"Vulnerability Type": "Denial of service in CNote.doTransferOut", "Vulnerability Location": "CNote.sol contract", "Repair Method": "Use balance differences instead of the 0 check", "Vulnerability Information": "The `doTransferOut` method is susceptible to denial of service. Anyone, via a simple transfer of `underlying` can deny the functionality of `doTransferOut`. Because the function is used in multiple functions inherited from `CToken`, and the griefing can be easily run by anyone."}

{"Vulnerability Type": "Multiple initialization in NoteInterest", "Vulnerability Location": "NoteInterest.sol contract", "Repair Method": "Add a require to check that was not already initialized", "Vulnerability Information": "The `initialize` method of the contract `NoteInterest` can be initialized multiple times. Nothing prevents it from being initialized again and altering the initial values of the contract. This allows the government, unnecessarily, to be able to perform attacks such as altering the logic of the `updateBaseRate` method."}

{"Vulnerability Type": "LP pair price manipulation", "Vulnerability Location": "lending-market-v2/contracts/Stableswap/BaseV1-periphery.sol", "Repair Method": "Use a different approach to calculate the LP price or follow the guide linked in the report", "Vulnerability Information": "The underlying price for LP pool pair can be manipulated, which may lead to the exploit of the pool by a malicious user."}

{"Vulnerability Type": "Missing zero address check", "Vulnerability Location": "contracts/Accountant/AccountantDelegate.sol", "Repair Method": "Check if the parameters != zero address or use openzepplen initializable", "Vulnerability Information": "There is potential to call initialize() on `AccountantDelegate.sol` more than once because the require statement only checks if the state variables != address(0)"}

{"Vulnerability Type": "TWAP oracle manipulation", "Vulnerability Location": "lending-market-v2/contracts/Stableswap/BaseV1-core.sol", "Repair Method": "Increase periodSize to be greater than 0, 1800 is typically standard", "Vulnerability Information": "TWAP oracle easily manipulated. periodSize is set to 0 meaning that the oracle will take a new observation every single block, which would allow an attacker to easily flood the TWAP oracle and manipulate the price."}

{"Vulnerability Type": "Deadline not working", "Vulnerability Location": "lending-market-v2/contracts/Stableswap/BaseV1-periphery.sol", "Repair Method": "Uncomment the `ensure` modifier", "Vulnerability Information": "The `ensure` modifier is commented, so deadlines will not work when passing orders, breaking this functionality."}

{"Vulnerability Type": "Non-view function called with staticcall", "Vulnerability Location": "contracts/CErc20Delegator.sol", "Repair Method": "Instead of using `delegateToViewImplementation` use `delegateToImplementation`. Alternatively, implement view functions to query these rates in `NoteInterest.sol` and `CToken.sol`", "Vulnerability Information": "When using CToken implementation with CErc20Delegator, the functions `borrowRatePerBlock` and `supplyRatePerBlock` will revert when the underlying functions try to update some states."}

1. {"Vulnerability Type": "Inaccurate price oracle", "Vulnerability Location": "BaseV1-periphery.sol", "Repair Method": "Return the correct value of 10**18 instead of 1", "Vulnerability Information": "Underlying asset price oracle for CToken in BaseV1-periphery is inaccurate."}
2. {"Vulnerability Type": "Denial of Service", "Vulnerability Location": "AccountantDelegate.sol", "Repair Method": "Use the correct variable cNoteToSweep instead of amtToSweep", "Vulnerability Information": "The sweepInterest function sweeps an incorrect number of cnote."}
3. {"Vulnerability Type": "Incorrect interest rate calculation", "Vulnerability Location": "NoteInterest.sol and CToken.sol", "Repair Method": "Return the correct value of baseRatePerBlock instead of baseRatePerYear", "Vulnerability Information": "getBorrowRate returns rate per year instead of per block."}
4. {"Vulnerability Type": "Incorrect number of cnote swept", "Vulnerability Location": "AccountantDelegate.sol", "Repair Method": "Use the correct variable cNoteToSweep instead of amtToSweep", "Vulnerability Information": "AccountantDelegate: The sweepInterest function sweeps an incorrect number of cnote."}

