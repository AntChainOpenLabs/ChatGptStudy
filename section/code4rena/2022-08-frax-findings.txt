{"Vulnerability Type": "Decimals limitation", "Vulnerability Location": "FraxlendPairCore.sol line 536", "Repair Method": "Increase the decimals limit or change the calculation method to avoid underflow", "Vulnerability Information": "The decimals limitation prevents certain tokens from being used in the system."}

{"Vulnerability Type": "Last lender to withdraw loses", "Vulnerability Location": "liquidate() function in FraxlendPairCore.sol", "Repair Method": "Mark off bad debt as soon as possible, and consider marking off also in case of near-zero collateral left", "Vulnerability Information": "When bad debt is not marked off, lenders who redeem their tokens earlier will get more in return, at the expense of lenders who leave later."}

{"Vulnerability Type": "Liquidator overpays for collateral", "Vulnerability Location": "liquidateClean() function in FraxlendPairCore.sol", "Repair Method": "Check that the amount of shares the liquidator repays are covered by the collateral available, and reduce the amount of shares to be repaid accordingly if necessary", "Vulnerability Information": "liquidators might end up paying assets that are worth much more than the collateral they received."}

{"Vulnerability Type": "No incentives to write off bad debt", "Vulnerability Location": "FraxlendPairCore.sol line 989-1002", "Repair Method": "Introduce an upper limit on the amount of collateral that can be removed, e.g. 95%", "Vulnerability Information": "When a position only has a bit of collateral left, there is no incentive to call liquidateClean() again, and the bad debt is never written off."}

{"Vulnerability Type": "Interest Calculation", "Vulnerability Location": "_addInterest() function", "Repair Method": "Calculate first the interest rate for the interval before maturity date as normal interest rate, and then calculate penalty rate for the remaining time after maturity date. Alternatively, warn users to call addInterest() before maturity date to avoid penalty rate.", "Vulnerability Information": "When _addInterest() is called post maturity, the penalty rate is applied since the last time _addInterest() was called, including the period before maturity. Borrowers will be charged with higher interest rates when maturity date passes. The longer the time since _addInterest() was last called before maturity date, the more extra-interest they will be charged."}

1. {"Vulnerability Type": "Code logic error", "Vulnerability Location": "FraxlendPairCore.sol:988-990", "Repair Method": "Change `9000` to `90000`", "Vulnerability Information": "Wrong percent for FraxlendPairCore.dirtyLiquidationFee."}
2. {"Vulnerability Type": "Code logic error", "Vulnerability Location": "FraxlendPairDeployer.sol:170-178, 209", "Repair Method": "Don't run `BytesLib.slice()` and at deployment read only from the first address", "Vulnerability Information": "Impossible to setCreationCode() with code size less than 13K."}

{"Vulnerability Type": "Non-compliance with EIP-4626", "Vulnerability Location": "FraxlendPair.sol", "Repair Method": "Update maxDeposit and maxMint functions to return 0 when the contract is paused", "Vulnerability Information": "FraxlendPair.sol is not EIP-4626 compliant, variation from the standard could break composability and potentially lead to loss of funds."}

{"Vulnerability Type": "Multiple liquidations of bad debt", "Vulnerability Location": "liquidateClean function in FraxlendPairCore.sol", "Repair Method": "Subtract leftover shares in liquidateClean from user's borrowed shares", "Vulnerability Information": "Any borrower with bad debt can be liquidated multiple times to lock funds in the lending pair."}

1. {"Vulnerability Type": "Front-running", "Vulnerability Location": "FraxlendPairDeployer.deployCustom()", "Repair Method": "Validate the `_name` parameter in the `FraxlendPairDeployer.deployCustom` function to not equal the string `public`, thus preventing the usage of the same salt as a standard pair deployment. Additionally, consider prefixing the name of a custom pair deployment to also prevent front-running this way.", "Vulnerability Information": "The `FraxlendPairDeployer` contract used to deploy Fraxlend pairs prevents deploying pairs with the same `salt` and `_configData`. This makes it vulnerable to front-running pair deployments and prevents deploying honest Fraxlend pairs."}
2. {"Vulnerability Type": "Incorrect Calculation", "Vulnerability Location": "FraxlendPair.changeFee()", "Repair Method": "Modify `changeFee()` to call `_addInterest()` before changing the fee.", "Vulnerability Information": "This function is changing the protocol fee that is used during interest calculation. But it doesn't update interest before changing the fee so the `_feesAmount` will be calculated wrongly."}

1. {"Vulnerability Type": "Interest miscalculation", "Vulnerability Location": "FraxlendPair.sol", "Repair Method": "Divide the interest calculation into small periods of time in case a long period has passed since last time addInterest() ran", "Vulnerability Information": "Calling addInterest() infrequently can lead to lower interest rates."}
2. {"Vulnerability Type": "Denial of Service", "Vulnerability Location": "FraxlendPairDeployer.sol", "Repair Method": "Initialize the _updatedAddresses array in globalPause function", "Vulnerability Information": "The globalPause function returns an array (_updatedAddresses) that has never been initialized, causing the transaction to fail."}
3. {"Vulnerability Type": "Time Lock Circumvention", "Vulnerability Location": "FraxlendPair.sol", "Repair Method": "Implement a minimal time lock directly in the contract without trusting any external contract", "Vulnerability Information": "The owner of FraxlendPair can set an arbitrary time lock contract address to circumvent the time lock, allowing for sudden protocol fee changes."}

