1. {"Vulnerability Type": "No checks if given product is created by the factory", "Vulnerability Location": "Collateral contract", "Repair Method": "Add a mapping inside `Collateral`, which verifies whether a product is created by factory or not. This mapping should get updated by the factory. Or directly call a function from factory to verify.", "Vulnerability Information": "An attacker can create a fake product. `Collateral` contract does not check whether the given product is created by the factory. A malicious product can return arbitrary maintenance amounts, therefore they can make any deposit to fake product stuck (simply return collateral 1 as maintenance) and fake product owner can change the maintenance and liquidate whenever wanted and claim full collateral."}
2. {"Vulnerability Type": "Multiple initialization of Collateral contract", "Vulnerability Location": "initialize method of the Collateral contract", "Repair Method": "Use `initializer` modifier", "Vulnerability Information": "The attacker can initialize the contract, take malicious actions, and allow it to be re-initialized by the project without any error being noticed."}
3. {"Vulnerability Type": "Wrong shortfall calculation", "Vulnerability Location": "settleAccount function of OptimisticLedger contract", "Repair Method": "Move the setting of `self.shortfall` to inside the if function and change the line to: `self.shortfall = shortfall`", "Vulnerability Information": "Every time an account is settled, if shortfall is created, due to a wrong calculation shortfall will double in size and add the new shortfall."}
4. {"Vulnerability Type": "withdrawTo Does Not Sync Before Checking A Position's Margin Requirements", "Vulnerability Location": "Collateral contract, AccountPosition contract", "Repair Method": "Consider adding `settleForAccount(msg.sender)` to the `Collateral.withdrawTo` function to ensure the most up to date oracle price is used when assessing an account's margin requirements.", "Vulnerability Information": "The `maintenanceInvariant` modifier in `Collateral` aims to check if a user meets the margin requirements to withdraw collateral by checking its current and next maintenance. `maintenanceInvariant` inevitably calls `AccountPosition.maintenance` which uses the oracle's price to calculate the margin requirements for a given position. Hence, if the oracle has not synced in a long time, `maintenanceInvariant` may end up utilising an outdated price for a withdrawal. This may allow a user to withdraw collateral on an undercollaterized position."}

{"Vulnerability Type": "Stale Data", "Vulnerability Location": "ChainlinkOracle.sol", "Repair Method": "Add missing checks for stale data", "Vulnerability Information": "Using latestRoundData without checking if the return value indicates stale data could lead to stale prices according to the Chainlink documentation."}

