[
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IMochiEngine.sol\";\r\nimport \"../interfaces/ICurveVotingEscrow.sol\";\r\n\r\ncontract MochiTreasuryV0 {\r\n    IMochiEngine public immutable engine;\r\n\r\n    IUniswapV2Router02 public immutable uniswapRouter;\r\n\r\n    IERC20 public immutable crv;\r\n    ICurveVotingEscrow public immutable veCrv;\r\n    bool public lockCrv;\r\n    uint256 public operationShare;\r\n    uint256 public veCRVShare;\r\n\r\n    constructor(\r\n        address _engine,\r\n        address _uniswap,\r\n        address _crv,\r\n        address _veCrv\r\n    ) {\r\n        engine = IMochiEngine(_engine);\r\n        uniswapRouter = IUniswapV2Router02(_uniswap);\r\n        crv = IERC20(_crv);\r\n        veCrv = ICurveVotingEscrow(_veCrv);\r\n        lockCrv = false;\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    function withdrawCRV() external {\r\n        require(msg.sender == engine.governance(), \"!gov\");\r\n        crv.transfer(msg.sender, crv.balanceOf(address(this)));\r\n    }\r\n\r\n    function withdrawLock() external {\r\n        veCrv.withdraw();\r\n    }\r\n\r\n    function veCRVInitialize() external {\r\n        require(lockCrv, \"!lock\");\r\n        updateFee();\r\n        _buyCRV();\r\n        veCrv.create_lock(\r\n            crv.balanceOf(address(this)),\r\n            block.timestamp + 90 days\r\n        );\r\n    }\r\n\r\n    function toggleLocking() external {\r\n        require(msg.sender == engine.governance(), \"!gov\");\r\n        lockCrv = !lockCrv;\r\n    }\r\n\r\n    function updateFee() public {\r\n        uint256 updatedFee = engine.usdm().balanceOf(address(this)) -\r\n            operationShare -\r\n            veCRVShare;\r\n        operationShare += updatedFee / 2;\r\n        veCRVShare += updatedFee / 2;\r\n    }\r\n\r\n    function claimOperationCost() external {\r\n        updateFee();\r\n        engine.usdm().transfer(engine.operationWallet(), operationShare);\r\n        operationShare = 0;\r\n    }\r\n\r\n    function veCRVlock() external {\r\n        require(lockCrv, \"!lock\");\r\n        updateFee();\r\n        _buyCRV();\r\n        _lockCRV();\r\n        veCRVShare = 0;\r\n    }\r\n\r\n    function _buyCRV() internal {\r\n        IUSDM usdm = engine.usdm();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(usdm);\r\n        path[1] = address(crv);\r\n        usdm.approve(address(uniswapRouter), veCRVShare);\r\n        uniswapRouter.swapExactTokensForTokens(\r\n            veCRVShare,\r\n            1,\r\n            path,\r\n            address(this),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    function _lockCRV() internal {\r\n        crv.approve(address(veCrv), crv.balanceOf(address(this)));\r\n        veCrv.increase_amount(crv.balanceOf(address(this)));\r\n        veCrv.increase_unlock_time(block.timestamp + 90 days);\r\n    }\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-10-mochi#h-09-treasury-is-vulnerable-to-sandwich-attack",
                "Location": "veCRVlock fuction",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.There\u2019s a permissionless function veCRVlock in MochiTreasury. Since everyone can trigger this function, the attacker can launch a sandwich attack with flashloan to steal the funds.",
                "Repair": "Recommend to add onlyOwner modifier."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\";\r\nimport \"../interfaces/IFeePool.sol\";\r\nimport \"../interfaces/IUSDM.sol\";\r\nimport \"../interfaces/IMochiEngine.sol\";\r\n\r\ncontract FeePoolV0 is IFeePool {\r\n    IMochiEngine public immutable engine;\r\n\r\n    IUniswapV2Router02 public immutable uniswapRouter;\r\n\r\n    address public crvVoterRewardPool;\r\n\r\n    uint256 public treasuryRatio;\r\n\r\n    uint256 public vMochiRatio;\r\n\r\n    uint256 public mochiShare;\r\n\r\n    uint256 public treasuryShare;\r\n\r\n    constructor(address _engine, address _uniswap) {\r\n        engine = IMochiEngine(_engine);\r\n        uniswapRouter = IUniswapV2Router02(_uniswap);\r\n        treasuryRatio = 20e16;\r\n        vMochiRatio = 80e16;\r\n    }\r\n\r\n    function updateReserve() external override {\r\n        uint256 newReserve = engine.usdm().balanceOf(address(this)) -\r\n            mochiShare -\r\n            treasuryShare;\r\n        treasuryShare += (newReserve * treasuryRatio) / 1e18;\r\n        mochiShare = engine.usdm().balanceOf(address(this)) - treasuryShare;\r\n    }\r\n\r\n    function changecrvVoterRewardPool(address _pool) external {\r\n        require(msg.sender == engine.governance(), \"!gov\");\r\n        crvVoterRewardPool = _pool;\r\n    }\r\n\r\n    function changeTreasuryRatio(uint256 _ratio) external {\r\n        require(msg.sender == engine.governance(), \"!gov\");\r\n        treasuryRatio = _ratio;\r\n    }\r\n\r\n    function changevMochiRatio(uint256 _ratio) external {\r\n        require(msg.sender == engine.governance(), \"!gov\");\r\n        vMochiRatio = _ratio;\r\n    }\r\n\r\n    // this will open up arb oppertunity for Mochi\r\n    // so we will not reward the caller, caller can benefit from flashbot\r\n    // should decide which market we should use UniV2?V3? BalancerV2?\r\n    function distributeMochi() external {\r\n        // buy Mochi with mochiShare\r\n        _buyMochi();\r\n        _shareMochi();\r\n    }\r\n\r\n    function _buyMochi() internal {\r\n        IUSDM usdm = engine.usdm();\r\n        address[] memory path = new address[](2);\r\n        path[0] = address(usdm);\r\n        path[1] = address(engine.mochi());\r\n        usdm.approve(address(uniswapRouter), mochiShare);\r\n        uniswapRouter.swapExactTokensForTokens(\r\n            mochiShare,\r\n            1,\r\n            path,\r\n            address(this),\r\n            type(uint256).max\r\n        );\r\n    }\r\n\r\n    function _shareMochi() internal {\r\n        IMochi mochi = engine.mochi();\r\n        uint256 mochiBalance = mochi.balanceOf(address(this));\r\n        // send Mochi to vMochi Vault\r\n        mochi.transfer(\r\n            address(engine.vMochi()),\r\n            (mochiBalance * vMochiRatio) / 1e18\r\n        );\r\n        // send Mochi to veCRV Holders\r\n        mochi.transfer(\r\n            crvVoterRewardPool,\r\n            (mochiBalance * (1e18 - vMochiRatio)) / 1e18\r\n        );\r\n        // flush mochiShare\r\n        mochiShare = 0;\r\n        treasuryShare = 0;\r\n    }\r\n\r\n    function sendToTreasury() external {\r\n        engine.usdm().transfer(engine.treasury(), treasuryShare);\r\n        treasuryShare = 0;\r\n    }\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-10-mochi#h-12-feepool-is-vulnerable-to-sandwich-attack",
                "Location": "distributeMochi function",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.There\u2019s a permissionless function distributeMochi in FeePoolV0.sol L55-L62. Since everyone can trigger this function, an attacker can launch a sandwich attack with flashloan to steal the funds. The devs have mentioned this concern in the comment. An attacker can steal the funds with a flash loan attack.",
                "Repair": "If the dev wants to make this a permissionless control, the contract should calculate a min return based on TWAP and check the slippage."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: UNLICENSED\r\npragma solidity ^0.8.10;\r\n\r\nimport \"./curve/ICurve.sol\";\r\nimport \"./BaseStrategy.sol\";\r\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\n/**\r\n * Strategy that handles non-UST tokens, by first converting them to UST via\r\n * Curve (https://curve.fi/), and only then depositing into EthAnchor\r\n */\r\ncontract NonUSTStrategy is BaseStrategy {\r\n    using SafeERC20 for IERC20;\r\n\r\n    // address of the Curve pool to use\r\n    ICurve public curvePool;\r\n\r\n    // index of the underlying token in the pool\r\n    int128 public underlyingI;\r\n\r\n    // index of the UST token in the pool\r\n    int128 public ustI;\r\n\r\n    constructor(\r\n        address _vault,\r\n        address _treasury,\r\n        address _ethAnchorRouter,\r\n        address _exchangeRateFeeder,\r\n        IERC20 _ustToken,\r\n        IERC20 _aUstToken,\r\n        uint16 _perfFeePct,\r\n        address _owner,\r\n        address _curvePool,\r\n        int128 _underlyingI,\r\n        int128 _ustI\r\n    )\r\n        BaseStrategy(\r\n            _vault,\r\n            _treasury,\r\n            _ethAnchorRouter,\r\n            _exchangeRateFeeder,\r\n            _ustToken,\r\n            _aUstToken,\r\n            _perfFeePct,\r\n            _owner\r\n        )\r\n    {\r\n        require(underlying != _ustToken, \"invalid underlying\");\r\n        require(_curvePool != address(0), \"0x addr\");\r\n        curvePool = ICurve(_curvePool);\r\n        underlyingI = _underlyingI;\r\n        ustI = _ustI;\r\n\r\n        ustToken.safeApprove(_curvePool, type(uint256).max);\r\n        underlying.safeApprove(_curvePool, type(uint256).max);\r\n    }\r\n\r\n    /**\r\n     * Swaps the underlying currency for UST, and initiates a deposit of all\r\n     * the converted UST into EthAnchor\r\n     *\r\n     * @notice since EthAnchor uses an asynchronous model, this function\r\n     * only starts the deposit process, but does not finish it.\r\n     */\r\n    function doHardWork() external override(BaseStrategy) restricted {\r\n        _swapUnderlyingToUst();\r\n        _initDepositStable();\r\n    }\r\n\r\n    /**\r\n     * Calls Curve to convert the existing underlying balance into UST\r\n     */\r\n    function _swapUnderlyingToUst() internal {\r\n        uint256 underlyingBalance = _getUnderlyingBalance();\r\n        if (underlyingBalance > 0) {\r\n            // slither-disable-next-line unused-return\r\n            curvePool.exchange_underlying(\r\n                underlyingI,\r\n                ustI,\r\n                underlyingBalance,\r\n                0\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls Curve to convert the existing UST back into the underlying token\r\n     */\r\n    function _swapUstToUnderlying() internal {\r\n        uint256 ustBalance = _getUstBalance();\r\n        if (ustBalance > 0) {\r\n            // slither-disable-next-line unused-return\r\n            curvePool.exchange_underlying(ustI, underlyingI, ustBalance, 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Calls EthAnchor with a pending redeem ID, and attempts to finish it.\r\n     * Once UST is retrieved, convert it back to underlying via Curve\r\n     *\r\n     * @notice Must be called some time after `initRedeemStable()`. Will only work if\r\n     * the EthAnchor bridge has finished processing the deposit.\r\n     *\r\n     * @param idx Id of the pending redeem operation\r\n     */\r\n    function finishRedeemStable(uint256 idx) public override(BaseStrategy) {\r\n        super.finishRedeemStable(idx);\r\n        _swapUstToUnderlying();\r\n    }\r\n\r\n    /**\r\n     * Amount, expressed in the underlying currency, currently in the strategy\r\n     *\r\n     * @notice both held and invested amounts are included here, using the\r\n     * latest known exchange rates to the underlying currency\r\n     *\r\n     * @return The total amount of underlying\r\n     */\r\n    function investedAssets()\r\n        external\r\n        view\r\n        override(BaseStrategy)\r\n        returns (uint256)\r\n    {\r\n        uint256 underlyingBalance = _getUnderlyingBalance();\r\n        uint256 aUstBalance = _getAUstBalance() + pendingRedeems;\r\n\r\n        uint256 ustAssets = ((exchangeRateFeeder.exchangeRateOf(\r\n            address(aUstToken),\r\n            true\r\n        ) * aUstBalance) / 1e18) + pendingDeposits;\r\n        return\r\n            underlyingBalance +\r\n            curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);\r\n    }\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2022-01-sandclock#h-03-vaults-with-non-ust-underlying-asset-vulnerable-to-flash-loan-attack-on-curve-pool",
                "Location": "curvePool.get_dy_underlying(ustI, underlyingI, ustAssets);",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.In short, the NonUSTStrategy is vulnerable to attacks by flash loans on curve pools. Here\u2019s an outline of the attack: Assume there is a vault with DAI underlying and a NonUSTStrategy with a DAI / UST curve pool Take out a flash loan of DAI Exchange a ton of DAI for UST The exchange rate from DAI to UST has gone up (!!) Withdraw or deposit from vault with more favorable terms than market Transfer back UST to DAI Repay flash loan",
                "Repair": "Use an oracle"
            }
        ]
    },
    {
        "Code": "function burn(uint256 id, address to)\r\n        external\r\n        override\r\n        onlyRouter\r\n        returns (\r\n            uint256 amountNative,\r\n            uint256 amountForeign,\r\n            uint256 coveredLoss\r\n        )\r\n    {\r\n        (amountNative, amountForeign) = _burn(id, to);\r\n\r\n        Position storage position = positions[id];\r\n\r\n        uint256 creation = position.creation;\r\n        uint256 originalNative = position.originalNative;\r\n        uint256 originalForeign = position.originalForeign;\r\n\r\n        delete positions[id];\r\n\r\n        uint256 loss = VaderMath.calculateLoss(\r\n            originalNative,\r\n            originalForeign,\r\n            amountNative,\r\n            amountForeign\r\n        );\r\n\r\n        // TODO: Original Implementation Applied 100 Days\r\n        coveredLoss =\r\n            (loss * _min(block.timestamp - creation, _ONE_YEAR)) /\r\n            _ONE_YEAR;\r\n    }\r\n\r\n    function calculateLoss(\r\n        uint256 originalVader,\r\n        uint256 originalAsset,\r\n        uint256 releasedVader,\r\n        uint256 releasedAsset\r\n    ) internal pure returns (uint256 loss) {\r\n        //\r\n        // TODO: Vader Formula Differs https://github.com/vetherasset/vaderprotocol-contracts/blob/main/contracts/Utils.sol#L347-L356\r\n        //\r\n\r\n        // [(A0 * P1) + V0]\r\n        uint256 originalValue = ((originalAsset * releasedVader) /\r\n            releasedAsset) + originalVader;\r\n\r\n        // [(A1 * P1) + V1]\r\n        uint256 releasedValue = ((releasedAsset * releasedVader) /\r\n            releasedAsset) + releasedVader;\r\n\r\n        // [(A0 * P1) + V0] - [(A1 * P1) + V1]\r\n        if (originalValue > releasedValue) loss = originalValue - releasedValue;\r\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-12-vader#h-06-lps-of-vaderpoolv2-can-manipulate-pool-reserves-to-extract-funds-from-the-reserve",
                "Location": "uint256 originalValue = ((originalAsset * releasedVader) /\r\n            releasedAsset) + originalVader;\r\n\r\n        // [(A1 * P1) + V1]\r\n        uint256 releasedValue = ((releasedAsset * releasedVader) /\r\n            releasedAsset) + releasedVader;\r\n\r\n        // [(A0 * P1) + V0] - [(A1 * P1) + V1]\r\n        if (originalValue > releasedValue) loss = originalValue - releasedValue;",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.In VaderPoolV2.burn we calculate the current losses that the LP has made to impermanent loss.These losses are then refunded to the LP in VADER tokens from the reserve.This loss is calculated by the current reserves of the pool so if an LP can manipulate the pool\u2019s reserves they can artificially engineer a huge amount of IL in order to qualify for a payout up to the size of their LP position.",
                "Repair": "Use a manipulation resistant oracle for the relative prices of the pool\u2019s assets (TWAP, etc.)"
            }
        ]
    },
    {
        "Code": "///@notice handles staking logic for EYE and EYE based assets so that correct rate of fate is earned.\r\n  ///@param finalAssetBalance after staking, what is the final user balance on LimboDAO of the asset in question\r\n  ///@param finalEYEBalance if EYE is being staked, this value is the same as finalAssetBalance but for LPs it's about half\r\n  ///@param rootEYE offload high gas arithmetic to the client. Cheap to verify. Square root in fixed point requires Babylonian algorithm\r\n  ///@param asset the asset being staked\r\n  function setEYEBasedAssetStake(\r\n    uint256 finalAssetBalance,\r\n    uint256 finalEYEBalance,\r\n    uint256 rootEYE,\r\n    address asset\r\n  ) public isLive incrementFate {\r\n    require(assetApproved[asset], \"LimboDAO: illegal asset\");\r\n    address sender = _msgSender();\r\n    FateGrowthStrategy strategy = fateGrowthStrategy[asset];\r\n\r\n    //verifying that rootEYE value is accurate within precision.\r\n    uint256 rootEYESquared = rootEYE * rootEYE;\r\n    uint256 rootEYEPlusOneSquared = (rootEYE + 1) * (rootEYE + 1);\r\n    require(\r\n      rootEYESquared <= finalEYEBalance && rootEYEPlusOneSquared > finalEYEBalance,\r\n      \"LimboDAO: Stake EYE invariant.\"\r\n    );\r\n    AssetClout storage clout = stakedUserAssetWeight[sender][asset];\r\n    fateState[sender].fatePerDay -= clout.fateWeight;\r\n    uint256 initialBalance = clout.balance;\r\n    //EYE\r\n    if (strategy == FateGrowthStrategy.directRoot) {\r\n      require(finalAssetBalance == finalEYEBalance, \"LimboDAO: staking eye invariant.\");\r\n      require(asset == domainConfig.eye);\r\n\r\n      clout.fateWeight = rootEYE;\r\n      clout.balance = finalAssetBalance;\r\n      fateState[sender].fatePerDay += rootEYE;\r\n    } else if (strategy == FateGrowthStrategy.indirectTwoRootEye) {\r\n      //LP\r\n      clout.fateWeight = 2 * rootEYE;\r\n      fateState[sender].fatePerDay += clout.fateWeight;\r\n\r\n      uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(asset);\r\n      require(actualEyeBalance > 0, \"LimboDAO: No EYE\");\r\n      uint256 totalSupply = IERC20(asset).totalSupply();\r\n      uint256 eyePerUnit = (actualEyeBalance * ONE) / totalSupply;\r\n      uint256 impliedEye = (eyePerUnit * finalAssetBalance) / (ONE * precision);\r\n      finalEYEBalance /= precision;\r\n      require(\r\n        finalEYEBalance == impliedEye, //precision cap\r\n        \"LimboDAO: stake invariant check 2.\"\r\n      );\r\n      clout.balance = finalAssetBalance;\r\n    } else {\r\n      revert(\"LimboDAO: asset growth strategy not accounted for\");\r\n    }\r\n    int256 netBalance = int256(finalAssetBalance) - int256(initialBalance);\r\n    asset.ERC20NetTransfer(sender, address(this), netBalance);\r\n  }\r\n \r\n\r\n/**\r\n   *@notice Acquiring enough fate to either influence a decision or to lodge a proposal can take very long.\r\n   * If a very important decision has to be acted on via a proposal, the option exists to buy large quantities for fate instantly by burning an EYE based asset\r\n   * This may be necessary if a vote is nearly complete by the looming outcome is considered unacceptable.\r\n   * While Fate accumulation is quadratic for staking, burning is linear and subject to a factor of 10. This gives whales effective veto power but at the cost of a permanent\r\n   * loss of EYE.\r\n   *@param asset the asset to burn and can be EYE or EYE based assets\r\n   *@param amount the amount of asset to burn\r\n   */\r\n  function burnAsset(address asset, uint256 amount) public isLive incrementFate {\r\n    require(assetApproved[asset], \"LimboDAO: illegal asset\");\r\n    address sender = _msgSender();\r\n    require(ERC677(asset).transferFrom(sender, address(this), amount), \"LimboDAO: transferFailed\");\r\n    uint256 fateCreated = fateState[_msgSender()].fateBalance;\r\n    if (asset == domainConfig.eye) {\r\n      fateCreated = amount * 10;\r\n      ERC677(domainConfig.eye).burn(amount);\r\n    } else {\r\n      uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(asset);\r\n      require(actualEyeBalance > 0, \"LimboDAO: No EYE\");\r\n      uint256 totalSupply = IERC20(asset).totalSupply();\r\n      uint256 eyePerUnit = (actualEyeBalance * ONE) / totalSupply;\r\n      uint256 impliedEye = (eyePerUnit * amount) / ONE;\r\n      fateCreated = impliedEye * 20;\r\n    }\r\n    fateState[_msgSender()].fateBalance += fateCreated;\r\n    emit assetBurnt(_msgSender(), asset, fateCreated);\r\n  }",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2022-01-behodler#h-07-lp-pricing-formula-is-vulnerable-to-flashloan-manipulation",
                "Location": "uint256 actualEyeBalance = IERC20(domainConfig.eye).balanceOf(asset);",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The LP pricing formula used in the burnAsset function of LimboDAO is vulnerable to flashloan manipulation. By swapping a large number of EYE into the underlying pool, an attacker can intentionally inflate the value of the LP tokens to get more fate than he is supposed to with a relatively low cost. With the large portion of fate he gets, he has more voting power to influence the system\u2019s decisions, or even he can convert his fate to Flan tokens for a direct profit.",
                "Repair": "Use a fair pricing formula for the LP tokens, for example, the one proposed by Alpha Finance."
            }
        ]
    },
    {
        "Code": "function buy(uint256 _id) external payable isValidPair(_id){\r\n    requlre(pairs[_id].owner 1-msg.sender,\"ouner can not buy\"); \r\n    Pair memory pair -pairs[_id];\r\n    uint256 totalAmount-pair.price; i\r\n    if(pair.currency --address(exe)){\r\n\t\trequire(msg.value>-totalAmount,\"insufficient eth amount\"): \r\n\t\t// refund extra eth\r\n\t\tpayable(msg.sender).transfer(msg.value.sub(totalAmount)); \r\n\t\t// transfer service fee\r\n\t\tpayable(feewallet).transfer(totalAmount,mul(serviceFee).div(PERCENT_DIVIDER));\r\n\t\t// transfer creator fee\r\n\t\tpayable(palr.creator).transfer(totalAmount,mul(pair,creatorFee).dlv(PERCENT_DIVIDER)); \r\n\t\t// transfer remain amount to owner\r\n\t\tuint256 ownerPercent-PERCENT_DIVIDER.sub(serviceFee).sub(pair,creatorFee); \r\n\t\tpayable(pair.owner).transfer(totalAnount.mul(ownerPercent).div(PERCENT_DIVIDER));\r\n\t}else {\r\n        IERC20 currency - IERC20(pair,currency):\r\n        uint256 tokenBalane= currency.balanceof(msg.sender);\r\n        require(tokenBalane>-totalAmount, \"insufficient token balance\"); \r\n        // transfer service fee\r\n        require(currency.transferFrom(msg,sender,feewallet,totalAmount.nul(serviceFee).div(PERCENT_DIVIDER)),\"failed to transfer Admin fee\"); \r\n        // transfer creator fee\r\n        require(currency.transferFrom(msg,sender,pair,creator,totalAmount.nul(pair,creatorFee).div(PERCENT_DIVIDER)),\"failed to transfer creator fee\");\r\n        // transfer remain amount to owner\r\n        uint256 ownerPercent-PERCENT_DIVIDER.sub(serviceFee).sub(pair,creatorFee);\r\n        require(currency.transferFrom(msg.sender,pair.owner,totalAmount,mul(ownerPercent).div(PERCENT_DIVIDER)),\"failed to transfer to owner\"); \r\n    }\r\n    // transfer NFT token to buyer\r\n    IERC721(pairs[_id].collection),safeTransferFrom(address(this),msg.sender,pair.tokenId);\r\n    pairs[_id].bvalid- false;\r\n    emit Suapped(msg.sender,pair); \r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "Beosin/BOG_202204071430.pdf/[BOG-2]Transaction-Ordering Attacks",
                "Location": "buy function",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.The buy function in the BattleOfGuardiansMarket contract has a transaction-ordering dependency attack. During the transaction process, if the buyer decides to buy the NFT and initiates a transaction, the seller can preempt the transaction and change the currency address or price before the buyer's transaction is confirmed. This can lead to unexpected transactions.",
                "Repair": "It is recommended to specify currency and price by user input in the buy function. "
            }
        ]
    },
    {
        "Code": "function VSpecia12(uint256 amount) public returns (uint256 result){\r\n\tPRBMath.UD60x18 memory_a-PRBMathUD60x18.fromUint(a());\r\n    _a=PRBMathUD060x18.mul(_a,PRBMathUD60x18.fromUint(scaleFactor)); \r\n    PRBMath.UD60x18 memory _amount=PRBMathUD60x18.fromUint(amount); \r\n    PRBMath.UD60x18 memory _S1= PRBMathUD60x18.fromUint(starSupply);\r\n    PRBMath.UD60x18 memory_S0 =PRBMathUD60x18.sub(_amount,PRBMathUD60x18.fromUint(supplySold)); \r\n    _S0=PRBMathUD60x18.sub(_S1,_S0);\r\n    curve350 = PRBMathUD60x18.toUint(_S0);\r\n    _S0 = PRBMathUD60x18.mul(_SO,PRBMathUD60x18.fromUint(scaleFactor)); \r\n    _S1=PRBMathUD60x18.mul(_S1, PRBMathUD60x18.fromUint(scaleFactor)); \r\n    PRBMath.UD60x18 memory InNumerator =PRBMathU060x18.e();\r\n    PRBMath.UD60x18 memory powerNum-PRBMathUD60x18.mul(PRBMathUD60x18.fromUint(33),_S1); \r\n    powerNum = PRBMathUD60x18.div(powerNum,PRBMathUD60x18.fromUint(10));\r\n    powerNum=PRBMathUD60x18.div(powerNum,_a); \r\n    if (PRBMathUD60x18\uff0etoUint\uff08powerNum\uff09>14\uff09\uff5b}else{}\r\n}\r\n",
        "VulnerabilityDesc": [
            {
                "Name": "/Beosin/promfans_202109061825.pdf/The system variable curve3S0 can be modified by anyone",
                "Location": "curve350 = PRBMathUD60x18.toUint(_S0);",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The visibility of the SSpecial and VSpecial2 functions in the contract is \"public\", which means \r\nthat they can be called by any user. But the function will internally modify curve3S0 according to the \r\nincoming value, which may cause the price of the contract's token transaction to be manipulated",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "function harvest() public override whenNotPaused {\r\n    if (balanceOfPool() > 0) {\r\n    \\/\\/ claim diff\r\n    miniChef.harvest(pid, address(this));\r\n \r\n    uint256 diffBal = diff.balanceOf(address(this));\r\n    if (diffBal > 0) {\r\n    \\/\\/ charge fees\r\n    uint256 harvestFee = diffBal.mul(harvestFeeRate).div(\r\n    FEE_PRECISION\r\n    );\r\n   diff.safeTransfer(feeRecipient, harvestFee);\r\n\r\n   \\/\\/ swap diff\r\n    uint256 diffBalHalf = diffBal.sub(harvestFee).div(2);\r\n    if (lpToken0 != diff) {\r\n    uniRouter.swapExactTokensForTokens(\r\n    diffBalHalf,\r\n    0,\r\n    diffToLpToken0,\r\n    address(this),\r\n    now\r\n    );\r\n \r\n    }\r\n    if (lpToken1 != diff) {\r\n    uniRouter.swapExactTokensForTokens(\r\n    diffBalHalf,\r\n    0,\r\n    diffToLpToken1,\r\n    address(this),\r\n    now\r\n    );\r\n    }\r\n \r\n    \\/\\/ Adds liquidity and gets more want tokens.\r\n    uniRouter.addLiquidity(\r\n    address(lpToken0),\r\n    address(lpToken1),\r\n    lpToken0.balanceOf(address(this)),\r\n    lpToken1.balanceOf(address(this)),\r\n    1,\r\n    1,\r\n    address(this),\r\n    now\r\n    );\r\n\r\n   \\/\\/ reinvest\r\n   deposit();\r\n\r\n   emit Harvested(diffBal, harvestFee);\r\n   }\r\n  }\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "/blocksec/1660885789323-2.pdf/Possible price manipulation attack",
                "Location": "if (lpToken0 != diff) ; if (lpToken1 != diff)",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The function harvest of StratDiffusion swaps the DIFF token for the underlying tokens\n(line 155 and 164). It\u2019s susceptible to the price manipulation attack.Specifically, the DIFF token will be transferred into the strategy contract, and then swapped to the\nunderlying tokens in the DEX pools. However, the price of the DIFF could be manipulated in the DEX pool\nso that it\u2019s price is very low and the underlying token exchanged will be less than expected. Besides, there\nis no slippage protection when swapping the DIFF for the underlying token.",
                "Repair": "Ensure that only the EOA account can invoke the deposit function in the vault contract and\nthe harvest function in the strategy. A slippage protection could be leveraged in the function. Besides, the\nproject can monitor the accumulated DIFF token in the Chef contract and invoke the harvest function when\nthe accumulated DIFF token exceeds a threshold."
            }
        ]
    },
    {
        "Code": "function tradeCollaterals() public {\r\n    \\/\\/ for all lp tokens in the collateral array\r\n    uint256 len = allCollaterals.length;\r\n    for (uint256 i = 0; i < len; ++i) {\r\n        tradeCollateral(allCollaterals[i]);\r\n    }\r\n}\r\n   \r\nfunction getPathToStnd(address input) private view returns (address[] memory) {\r\n    address[] memory path = new address[](3);\r\n    path[0] = input;\r\n    path[1] = stablecoin;\r\n    path[2] = stnd;\r\n   \r\n    return path;\r\n}\r\n   \r\nfunction tradeCollateral (\r\n    address collateral\r\n    ) internal {\r\n    IUniswapV2Router01(router).swapExactTokensForTokens(\r\n    IERC20(collateral).balanceOf(address(this)),\r\n    0,\r\n    getPathToStnd(collateral),\r\n    dstnd,\r\n    block.timestamp + 20000000\r\n    );\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "/blocksec/1660886228484-2.pdf/Price manipulation attacks against FeeRoll contract",
                "Location": "tradeCollaterals function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The function tradeCollaterals in the following code snippets is used to trade fees distributed from vaults for\r\nSTND tokens, which can support the value of STND in DeFi market.\r\nThere are two price manipulation methods that can cause the FeeRoll contract to lose collaterals.\r\nFor example, the collateral token to be sold is WETH. The function tradeCollateralls will sell WETH for\r\nMTR and then for STND. The attack consists of three steps. The first step, an attacker borrows a huge amount\r\nof WETH via flashloan to swap for the MTR, then the WETH\u2019s price in the pool is manipulated to be very low.\r\nSecond, the attacker invokes tradeCollaterals of the FeeRoll contract that cheaply sells WETH reserves\r\nfor little MTR and then for little STND. Third, the attacker swaps his MTR for WETH back, which can profit from\r\nthe trade that FeeRoll contract makes",
                "Repair": "Add a check require(msg.sender == tx.origin) in the function tradeCollateralls to ensure the caller\r\nis EOA.\r\nAdd a check to make sure the existence of the swap pool between input and stablecoin in the function\r\ngetPathToStnd\r\nLeverage the price oracle to implement a slippage check for swapExactTokensForTokens rather than filling\r\n0 (in line 843)"
            }
        ]
    },
    {
        "Code": "@internal\r\ndef _checkpoint(addr: address):\r\n    \"\"\"\r\n    @notice Checkpoint for a user\r\n    @param addr User address\r\n    \"\"\"\r\n    _point_period: int128 = self.point_period\r\n    _point_period_timestamp: uint256 = self.point_period_timestamp[_point_period]\r\n    _point_integrate_inv_supply: uint256 = self.point_integrate_inv_supply[_point_period]\r\n   \r\n    rate: uint256 = self.point_rate\r\n    prev_epoch: uint256 = self.point_current_epoch_time\r\n    new_rate: uint256 = rate\r\n    next_epoch: uint256 = prev_epoch + WEEK\r\n\r\n    if block.timestamp > next_epoch:\r\n        new_totalSupply: uint256 = ERC20(self.lp_token).totalSupply()\r\n        if new_totalSupply > 0:\r\n            new_rate = self.point_proportion * new_totalSupply \\/ WEEK\r\n        self.point_current_epoch_time = next_epoch\r\n        self.point_rate = new_rate\r\n   \r\n    # Update integral of 1\\/supply\r\n    if block.timestamp > _point_period_timestamp and not self.is_killed:\r\n        prev_week_time: uint256 = _point_period_timestamp\r\n        week_time: uint256 = min((_point_period_timestamp + WEEK) \\/ WEEK * WEEK, block.timestamp)\r\n        _totalSupply: uint256 = self.lpTotalSupply\r\n   \r\n        for i in range(500):\r\n            dt: uint256 = week_time - prev_week_time\r\n            if _totalSupply > 0:\r\n                if next_epoch >= prev_week_time and next_epoch < week_time:\r\n                    # If we went across epoch, apply the rate\r\n                    # of the first epoch until it ends, and then the rate of\r\n                    # the last epoch.\r\n                    _point_integrate_inv_supply += rate * (next_epoch - prev_week_time) \\/ _totalSupply\r\n                    rate = new_rate\r\n                    _point_integrate_inv_supply += rate * (week_time - next_epoch) \\/ _totalSupply\r\n\r\n\r\n@external\r\ndef user_checkpoint(addr: address) -> bool:\r\n    \"\"\"\r\n    @notice Record a checkpoint for \u2018addr\u2018\r\n    @param addr User address\r\n    @return bool success\r\n    \"\"\"\r\n    assert (msg.sender == addr) or (msg.sender == self.minter) # dev: unauthorized\r\n    self._checkpoint(addr)\r\n    self._checkpoint_dao(addr)\r\n    self._checkpoint_rewards(addr, False, ZERO_ADDRESS)\r\n    self._update_liquidity_limit(addr, self._balance_of(addr), self.totalSupply)\r\n    return True",
        "VulnerabilityDesc": [
            {
                "Name": "/blocksec_filda_dao_v1.0_signed.pdf/Potential price manipulation on the reward allocation speed",
                "Location": "_checkpoint function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.There exists a price manipulation problem in the _checkpoint function of the LiquidityGaugeV3 contract. The project provides incentives to the holders of fTokens (a series of Compound-CToken-like to\u0002kens) by adopting a mechanism similar to the Curve DAO project. Every time the function is invoked, a\r\ncheckpoint is recorded for allocating the rewards. Specifically, every balance change of fTokens would trigger a hook calling to the corresponding\r\nLiquidityGaugeV3 contract and accumulate the reward in FILDA tokens. This hook updates the reward\r\nallocation points (points for short) based on the following two-step calculation:\r\n1. The reward allocation speed for a certain time t is calculated as r(t) = p \u2217 s(t)\\/W EEK, where p is a system parameter, s(t) is the total supply of fToken recorded in the first checkpoint of a week, W EEK is the total seconds in a week (604800).\r\n2. The points of a certain user is calculated as Iu =R r(t)bu(t)s(t), where bu(t) is the balance of the user at time t, and s(t) is the current total supply of fToken.\r\n",
                "Repair": "Check the rate updating mechanism"
            }
        ]
    },
    {
        "Code": "function getTokenPrice ( address token_address , address token1_address )\r\n    external\r\n    view\r\n    override\r\n    returns ( uint256 price )\r\n{\r\n    uint256 token_decimals = IERC20Metadata ( token_address ). decimals () ;\r\n\r\n    uint256 min_amountIn = 1 * 10** token_decimals ;\r\n    if ( token_address == token1_address ) {\r\n        price = min_amountIn ;\r\n    } else {\r\n        ( uint256 reserve0 , uint256 reserve1 ) = getReserves (\r\n            token_address ,\r\n            token1_address\r\n         );\r\n         price = uniswapV2Router . getAmountOut (\r\n             min_amountIn ,\r\n             reserve0 ,\r\n             reserve1\r\n         );\r\n    }\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "PeckShield/PeckShield-Audit-Report-Velvet-v1.0.pdf/3.3 Flashloan-Based Oracle Price Manipulation\n",
                "Location": "price = uniswapV2Router . getAmountOut (\r\n             min_amountIn ,\r\n             reserve0 ,\r\n             reserve1\r\n         );",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The Velvet Capital protocol has a PriceOracle contract to facilitate the token price discovery. Our\nanalysis shows the current approach to compute the on-chain token price can be manipulated\u3002To elaborate, we show above the related getTokenPrice() function. It comes to our attention that\nthe conversion is routed to UniswapV2-based DEXs and the related spot reserves are used to compute\nthe price! Therefore, they are vulnerable to possible front-running attacks, resulting in possible loss\nfor the token conversion.\n",
                "Repair": "Develop an effective mitigation (e.g., slippage control) to the above front-running attack to better protect the interests of protocol users"
            }
        ]
    },
    {
        "Code": "function _kalmPrice () internal view returns ( uint256 ) {\r\n    IPancakeswapV2Pair pair = IPancakeswapV2Pair (lp) ;\r\n    address other = pair . token0 () == kalm ? pair . token1 () : pair . token0 () ;\r\n    ( uint256 Res0 , uint256 Res1 , ) = pair . getReserves () ;\r\n    ( uint256 kalmReserve , uint256 otherReserve ) = pair . token0 () == kalm ? (Res0 ,\r\n        ) : (Res1 , Res0 );\r\n    uint256 decimalsOther = IERC20Detailed ( other ) . decimals () ;\r\n    \\/\\/ amount\r\n    uint256 otherPERkalm = (1 e18* otherReserve )\\/ kalmReserve ;\r\n\r\n    uint256 kalmPrice = ( otherPERkalm * _usdTokenPrice () ) \\/(10** decimalsOther );\r\n    return kalmPrice ;\r\n}",
        "VulnerabilityDesc": [
            {
                "Name": "/PeckShield/PeckShield-Audit-Report-Kalmar-Bond-v1.0.pdf/3.1 Possible Price manipulation For _kalmPrice()/_getLpPrice()",
                "Location": "uint256 kalmPrice = ( otherPERkalm * _usdTokenPrice () ) /(10** decimalsOther );",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The KalmarBondingStrategy contract defines two functions (i.e., _kalmPrice() and _getLpPrice()) to\r\nobtain the prices of kalm Token and lp Token. During the analysis of these two functions, we notice\r\nthe prices of kalm Token\\/lp Token are possible to be manipulated. In the following, we use the\r\n_kalmPrice() routine as an example.\r\nTo elaborate, we show below the related code snippet of the KalmarBondingStrategy contract.\r\nSpecifically, if we examine the implementation of the _kalmPrice(), the final price of the kalm Token\r\nis derived from (otherPERkalm*_usdTokenPrice())\\/(10**decimalsOther) (line 236), where the value of\r\notherPERkalm is calculated by (1e18*otherReserve)\\/kalmReserve. Although the price of BUSD is obtained\r\nfrom the chainlink and cannot be manipulated, kalmReserve or otherReserve is the token amount in\r\nthe pool thus can be manipulated by flash loans, which causes the final values of the kalm Token not\r\ntrustworthy.",
                "Repair": "Revise current execution logic of _kalmPrice()/_getLpPrice() to defensively\ndetect any manipulation attempts in the kalm Token/lp Token prices."
            }
        ]
    },
    {
        "Code": "function prePurchase ( uint256 _expectedPrice , uint256 _startTime , uint256\r\n_expiredTime ) public payable {\r\n    require ( _expiredTime > _startTime , \" Incorrect time period !\" );\r\n    uint256 accountQuota = getAccountPurchaseQuota ( msg . sender );\r\n    require ( accountQuota > 0 , \" Exceed account quota !\" );\r\n    uint256 currAmount = 0;\r\n    PrePurchaseInfo [] storage purchases = prePurchaseList [ msg. sender ];\r\n    PrePurchaseInfo memory pcInfo ;\r\n    uint256 ethPrice = 0;\r\n    uint256 usdtPrice = 0;\r\n    ( ethPrice , usdtPrice ) = getANBPrice () ;\r\n    if( msg . value > 0) {\r\n        require ( ethPrice > 0, \" Invalid ethPrice !\");\r\n        uint256 highestEthPrice = ethPrice * maxPriceMultiple * (100 + expectedPriceFloatVal ) / 100;\r\n        require ( _expectedPrice <= highestEthPrice , \" expectedPrice too high !\" ) ;\r\n        currAmount = msg . value * 10 ** angryTokenDecimals / ethPrice ;\r\n        pcInfo . price = ethPrice ;\r\n        pcInfo . paymentAmount = msg . value ;\r\n        pcInfo . paymentType = 1;\r\n    } else {\r\n        require ( usdtPrice > 0 , \" Invalid usdtPrice !\") ;\r\n        uint256 highestUSDTPrice = usdtPrice * maxPriceMultiple * (100 + expectedPriceFloatVal ) / 100;\r\n        require ( _expectedPrice <= highestUSDTPrice , \" expectedPrice too high !\" );\r\n        uint256 allowance = usdtToken . allowance ( msg . sender , address ( this ) );\r\n        require ( allowance > 0, \"Not any payments !\" );\r\n        currAmount = allowance * 10 ** angryTokenDecimals / usdtPrice ;\r\n        pcInfo . price = usdtPrice ;\r\n        usdtToken . safeTransferFrom (\r\n            msg . sender ,\r\n            address ( this ) ,\r\n            allowance\r\n        );\r\n        pcInfo . paymentAmount = allowance ;\r\n        pcInfo . paymentType = 2;\r\n    }\r\n    uint256 totalQuota = queryCurrPrePurchaseQuota () ;\r\n    require ( ( currAmount + totalPrePurcaseAmount ) <= totalQuota , \" Exceed daily quota!\" );\r\n    require ( currAmount <= accountQuota , \" Exceed account quota !\" );\r\n    if( purchases . length == 0) {\r\n        prePurchaseAccounts . push ( msg . sender );\r\n    }\r\n    pcInfo . amount = currAmount ;\r\n    pcInfo . expectedPrice = _expectedPrice ;\r\n    pcInfo . startTime = _startTime ;\r\n    pcInfo . expiredTime = _expiredTime ;\r\n    pcInfo . status = 0;\r\n    purchases . push ( pcInfo );\r\n    totalPrePurcaseAmount = totalPrePurcaseAmount + currAmount ;\r\n    emit PrePurchase ( msg . sender , purchases . length -1 , currAmount , pcInfo .\r\n        paymentAmount , pcInfo .price , _expectedPrice , _startTime , _expiredTime ,\r\n        pcInfo . paymentType , pcInfo . status ) ;\r\n}\r\n\r\n\r\nfunction getANBPrice () public view returns ( uint256 _ethPrice , uint256 _usdtPrice ){\r\n    address [] memory path = new address [](3) ;\r\n    path [0] = angryTokenAddr ;\r\n    path [1] = uniswapRouterV2 . WETH () ;\r\n    path [2] = usdtTokenAddr ;\r\n    uint256 [] memory amounts = uniswapRouterV2 . getAmountsOut (10 **\r\nangryTokenDecimals , path );\r\n    _ethPrice = amounts [1];\r\n    _usdtPrice = amounts [2];\r\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/PeckShield/PeckShield-Audit-Report-AngryToken-v1.0.pdf/4.2 Possible Sandwich/MEV For Reduced Purchase Price",
                "Location": "uint256 [] memory amounts = uniswapRouterV2 . getAmountsOut (10 **\nangryTokenDecimals , path );\n    _ethPrice = amounts [1];\n    _usdtPrice = amounts [2];\n }",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.As mentioned earlier, the AngryToken contract supports pre-sale that allows early adopters to purchase\r\nthe token. While examining the pre-sale support, we notice the purchase price can be arbitrarily\r\nmanipulated.\r\nTo elaborate, we show below the prePurchase() function. As the name indicates, it is designed to\r\nimplement the pre-sale functionality. It comes to our attention that the purchase price is computed\r\non-chain via an internal helper getANBPrice().Specifically, the purchase price is directly returned by querying the trading price of UniswapV2\non the trading path ANB -> WETH -> USDT without imposing any restriction. As a result, the current\npricing approach is vulnerable to possible sandwich attacks, resulting in a manipulated purchase price.",
                "Repair": "Develop an effective mitigation to the above sandwich attack to better\nprotect the interests of purchasing users."
            }
        ]
    },
    {
        "Code": "function _updatePriceWithSignature(\n    uint256 timestamp,uint256 price,uint8 v,bytes32 r,bytes32 s\n    )internal\n{\n    if(block.number!=_lastPriceBlockNumber){\n        require(timestamp>=_lastPriceTimestamp,\"Perpetual Pool:price is not the newest\");\n        require(block.timestamp\u2212timestamp<=_priceDelayAllowance,\"Perpetual Pool: price is older than allowance\");\n        _checkPriceSignature(timestamp,price,v,r,s);\n        _price=price;\n        _lastPriceTimestamp=timestamp;\n        _lastPriceBlockNumber=block.number;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "/PeckShield/PeckShield-Audit-Report-Deri-v1.0.pdf/3.3 Potential Replay Of Signed Prices",
                "Location": "timestamp",
                "Type": "Price oracle manipulation",
                "Description": "Non-AMM price oracle manipulation.In the current implementation of the Deri protocol, the _price is provided by a trusted oracle. If the\noracle is an on-chain contract, PerpetualPool can get a price by the oracle\u2019s interface. Conversely,\nif the oracle is an EOA account, PerpetualPool should check the price signature first to verify if the\nprice is authorized. We notice that the price signature is signed with a timestamp. However, if the\nsignature is not signed in the currently active chain, e.g., a testnet. It could lead to a replay attack.\nIn particular, we show the related code snippet below.\n",
                "Repair": "Add new fields into signature calculation, i.e., chainID and the address of\nPerpetualPool."
            }
        ]
    },
    {
        "Code": "functiongetPrice()publicoverridereturns(uint256){\n   IUniswapV2Pair p = IUniswapV2Pair(pair);\n   uint256 reserveQ;\n   uint256 reserveB;\n   uint256 timestamp;\n   if(isQuoteToken0){(reserveQ,reserveB,timestamp)=p.getReserves();\n   }else{(reserveB,reserveQ,timestamp)=p.getReserves();}\n   if(timestamp!=timestampLast2){\n      priceCumulativeLast1=priceCumulativeLast2;\n      timestampLast1=timestampLast2;\n      priceCumulativeLast2=isQuoteToken0?p.price0CumulativeLast():p.price1CumulativeLast();\n      timestampLast2=timestamp;\n   }\n   uint256 price;\n   if(timestampLast1!=0){\n   //TWAP\n   price=(priceCumulativeLast2\u2212priceCumulativeLast1)\\ (timestampLast2\u2212 timestampLast1)\u221710\u2217\u2217(18+qDecimals\u2212bDecimals)\\ Q112;\n   }else{\n   //Spot\n   //this price will only be used when BToken is newly added to pool\n   //since the liquidity for newly added BToken is always zero,\n   //there will be no manipulation consequences for this price\n   price=reserveB\u221710\u2217\u2217(18+qDecimals\u2212bDecimals)\\ reserveQ;\n}\n67returnprice;\n68}",
        "VulnerabilityDesc": [
            {
                "Name": "/PeckShield/PeckShield-Audit-Report-DeriV2-v1.0.pdf/3.8 Potential Manipulation of BToken Prices",
                "Location": "price=(priceCumulativeLast2\u2212priceCumulativeLast1)\\ (timestampLast2\u2212 timestampLast1)\u221710\u2217\u2217(18+qDecimals\u2212bDecimals)\\ Q112;",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.In the Deri-V2 protocol, each base token has a price oracle that is based on the widely used UniswapV2\ntime-weighted average price (TWAP). The TWAP is constructed by reading the cumulative price from\na UniswapV2 pair at the beginning and at the end of the desired interval. The difference in this\ncumulative price can then be divided by the length of the interval to create a TWAP for that period.\nTo elaborate, we show below the getPrice() implementation. It comes to our attention that\nthe interval used to compute the TWAP is not restricted (line 58). As a result, it leaves the room or\npossibility for undesired price manipulation. To mitigate, it is helpful to ensure a minimum interval\nfor the TWAP-based price calculation.",
                "Repair": "Develop an effective mitigation to avoid the price oracle from being manipulated"
            }
        ]
    },
    {
        "Code": "function getPriceByWBTCDAI() public view returns(uint256){\n address[] memory WbtcToDaiSwapPath;\n WbtcToDaiSwapPath = new address[](2);\n WbtcToDaiSwapPath[0] = address(0x2260FAC5E5542a773Aa44fBCfeDf7C193bc2C599);\n WbtcToDaiSwapPath[1] = address(0x113587939c8967e61Aa2360613951B23AB2Af49a);\n uint256 amount = 1e8*1e18;\n n return uniswapRouter.getAmountsIn(amount, WbtcToDaiSwapPath)[0];\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/SlowMist/SlowMist Audit Report - Shield_en-us.pdf/4.3.1.1 Risk of Oracle Manipulation",
                "Location": "return uniswapRouter.getAmountsIn(amount, WbtcToDaiSwapPath)[0];",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.the price is obtained from Uniswap's getAmountsIn through the getPriceByWBTCDAI function, but this interface obtains the real-time price of the WBTC/DAI pool, and there is a risk of malicious manipulation",
                "Repair": " It is recommended to use Uniswap's delayed price feed oracle for acquisition."
            }
        ]
    },
    {
        "Code": "function IOUPrice() public view returns (uint256) {\n uint256 IOUSupply = totalSupply();\n return IOUSupply == 0\n ? 1e18\n : (totalFarmingTokenBalance() * 1e18) / IOUSupply;\n }\n function totalFarmingTokenBalance() public view returns (uint256) {\n return farmingToken().balanceOf(address(this)) + strategy.balanceOf();\n}",
        "VulnerabilityDesc": [
            {
                "Name": "/SlowMist/SlowMist Audit Report - Shield_en-us.pdf/[N4] [Medium] Price manipulation issue",
                "Location": "totalFarmingTokenBalance function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The IOUPrice is calculated using totalFarmingTokenBalance. Attackers can control totalFarmingTokenBalance to manipulate IOUPrice.",
                "Repair": "It is recommended not to use IOUPrice for other contracts as the calculation of the asset price on-chain."
            }
        ]
    },
    {
        "Code": "function IOUPrice() public view returns (uint256) {\n uint256 IOUSupply = totalSupply();\n return IOUSupply == 0\n ? 1e18\n : (totalFarmingTokenBalance() * 1e18) / IOUSupply;\n }\n function totalFarmingTokenBalance() public view returns (uint256) {\n return farmingToken().balanceOf(address(this)) + strategy.balanceOf();\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/SlowMist/SlowMist Audit Report - Cross Yield V1.0.0_en-us.pdf/[N4] [Medium] Price manipulation issue",
                "Location": "totalFarmingTokenBalance function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The IOUPrice is calculated using totalFarmingTokenBalance. Attackers can control totalFarmingTokenBalance to manipulate IOUPrice.",
                "Repair": "It is recommended not to use IOUPrice for other contracts as the calculation of the asset price on-chain"
            }
        ]
    },
    {
        "Code": "pragma solidity 0.6.12;\n import 'OpenZeppelin/openzeppelin-contracts@3.4.0/contracts/proxy/Initializable.sol';\n \n import '../../interfaces/IKeep3rV1Oracle.sol';\n import '../../interfaces/IUniswapV2Pair.sol';\n \n contract BaseKP3ROracle is Initializable {\n   uint public constant MIN_TWAP_TIME = 15 minutes;\n   uint public constant MAX_TWAP_TIME = 60 minutes;\n \n   IKeep3rV1Oracle public immutable kp3r;\n   address public immutable factory;\n   address public immutable weth;\n \n   constructor(IKeep3rV1Oracle _kp3r) public {\n     kp3r = _kp3r;\n     factory = _kp3r.factory();\n     weth = _kp3r.WETH();\n   }\n \n   function price0TWAP(address pair) public view returns (uint) {\n     uint length = kp3r.observationLength(pair);\n     require(length > 0, 'no length-1 observation');\n     (uint lastTime, uint lastPx0Cumu, ) = kp3r.observations(pair, length - 1);\n     if (lastTime > block.timestamp - MIN_TWAP_TIME) {\n       require(length > 1, 'no length-2 observation');\n       (lastTime, lastPx0Cumu, ) = kp3r.observations(pair, length - 2);\n     }\n     uint elapsedTime = block.timestamp - lastTime;\n     require(elapsedTime >= MIN_TWAP_TIME && elapsedTime <= MAX_TWAP_TIME, 'bad TWAP time');\n     uint currPx0Cumu = currentPx0Cumu(pair);\n     return (currPx0Cumu - lastPx0Cumu) / (block.timestamp - lastTime); \n   }\n \n   function price1TWAP(address pair) public view returns (uint) {\n     uint length = kp3r.observationLength(pair);\n     require(length > 0, 'no length-1 observation');\n     (uint lastTime, , uint lastPx1Cumu) = kp3r.observations(pair, length - 1);\n     if (lastTime > block.timestamp - MIN_TWAP_TIME) {\n       require(length > 1, 'no length-2 observation');\n       (lastTime, , lastPx1Cumu) = kp3r.observations(pair, length - 2);\n     }\n     uint elapsedTime = block.timestamp - lastTime;\n     require(elapsedTime >= MIN_TWAP_TIME && elapsedTime <= MAX_TWAP_TIME, 'bad TWAP time');\n     uint currPx1Cumu = currentPx1Cumu(pair);\n     return (currPx1Cumu - lastPx1Cumu) / (block.timestamp - lastTime); \n   }\n \n \n   function currentPx0Cumu(address pair) public view returns (uint px0Cumu) {\n     uint32 currTime = uint32(block.timestamp);\n     px0Cumu = IUniswapV2Pair(pair).price0CumulativeLast();\n     (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\n     if (lastTime != block.timestamp) {\n       uint32 timeElapsed = currTime - lastTime; \n       px0Cumu += uint((reserve1 << 112) / reserve0) * timeElapsed; \n     }\n   }\n \n \n   function currentPx1Cumu(address pair) public view returns (uint px1Cumu) {\n     uint32 currTime = uint32(block.timestamp);\n     px1Cumu = IUniswapV2Pair(pair).price1CumulativeLast();\n     (uint reserve0, uint reserve1, uint32 lastTime) = IUniswapV2Pair(pair).getReserves();\n     if (lastTime != currTime) {\n       uint32 timeElapsed = currTime - lastTime;\n       px1Cumu += uint((reserve0 << 112) / reserve1) * timeElapsed; \n     }\n   }\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/Quantstamp/alpha-homora-v-2.pdf/QSP-4 Oracle attack is possible by manipulating a Uniswap pool High Fixed",
                "Location": "price0TWAP and price1TWAP functions, IUniswapV2Pair(pair).getReserves()",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.Uniswap oracle (https://uniswap.org/docs/v2/core-concepts/oracles/) aggregates prices from all the blocks weighted by block time into cumulative prices whereas Keep3r oracle takes 30-minute samples of Uniswap cumulative prices. The price calculations (i.e., function and ) in calculates the sample provided by Keep3r with a last-minute ( ) spot price from Uniswap. This is fine as long as the accumulation weight is okay, but under heavy congestion and delays the weight (i.e., in function and ) can be too big. And together with the ( ) in , this platform could be attacked by flash loans.",
                "Repair": "Use only observations on the Keep3r oracle, use more data points, and do not fine-tune the oracle with current prices"
            }
        ]
    },
    {
        "Code": "pragma solidity ^0.5.2;\n interface UniswapV2Library {\n     function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n }\n \n contract Oracle {\n     function read() external view returns (bytes32) {\n         address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n \n         uint256 _amountIn = 1e18;\n \n         address[] memory _path = new address[](2);\n         _path[0] = 0x431ad2ff6a9C365805eBaD47Ee021148d6f7DBe0;\n         _path[1] = 0xeb269732ab75A6fD61Ea60b06fE994cD32a83549; \n         \n \n         uint[] memory amounts = UniswapV2Library(_router).getAmountsOut(_amountIn, _path);\n         if (amounts[1] != uint256(0)) {\n             return bytes32(amounts[1]);\n         }\n         return bytes32(uint256(0.1e15));\n     }\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/Quantstamp/illuvium-part-4-staking-v-2.pdf/QSP-1 Missing Validation of the Oracle\u2019s Output High Acknowledged",
                "Location": "read function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The implemented contract in calls the uniswap router to get the swap output value to be used as price estimation. However, depending on its usage, the router output can be manipulated by trading X amount back and forth on that specific Uniswap pair and the oracle call can be placed in between.",
                "Repair": "Uniswap implemented a special oracle that provide time weighted cumulative price that can be averaged later depending on the project needs"
            }
        ]
    },
    {
        "Code": "function getLpTokenValue ( address _lpToken , uint256 _amount) public view returns (\n uint256 value ) {\n uint256 totalSupply = IERC20(_lpToken) . totalSupply () ;\n address token0 = ISwapPair (_lpToken) . token0 () ;\n address token1 = ISwapPair (_lpToken) . token1 () ;\n uint256 token0Decimal = IERC20p( token0 ) . decimals () ;\n uint256 token1Decimal = IERC20p( token1 ) . decimals () ;\n ( uint256 reserve0 , uint256 reserve1 ) = SwapLibrary . getReserves ( factory , token0 ,token1 ) ;\n  uint256 token0Value = ( getAveragePrice ( token0 ) ) . mul( reserve0 ) . div (10\u2217\u2217token0Decimal ) ;\n  uint256 token1Value = ( getAveragePrice ( token1 ) ) . mul( reserve1 ) . div (10\u2217\u2217token1Decimal ) ;\n  value = ( token0Value . add( token1Value ) ) . mul(_amount) . div ( totalSupply ) ;\n }",
        "VulnerabilityDesc": [
            {
                "Name": "/PeckShield/PeckShield-Audit-Report-DSG-v1.0.pdf/3.11 Possible Price manipulation For Oracle::getLpTokenValue()",
                "Location": "value = ( token0Value . add( token1Value ) ) . mul(_amount) . div ( totalSupply ) ;",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.if we examine the implementation of the getLpTokenValue() , the final price of the LP Token is derived from (token0Value.add(token1Value)).mul(_amount).div(totalSupply) (line 174), where each of the tokenValue is calculated by (getAveragePrice(token0)).mul(reserve0) . Although the price of token0 or token1 is the average price from history prices and cannot be manipulated, reserve0 or reserve1 is the token amount in the pool thus can be manipulated by flash loans, which cause the final values of the LP Token not trustworthy.",
                "Repair": "Revise current execution logic of getLpTokenValue() to defensively detect any manipulation attempts in the LP Token price."
            }
        ]
    },
    {
        "Code": "    function stake(uint256 amount, uint256 amountOutMin) external nonReentrant whenNotPaused {\n        require(amount > 0, 'amount cant be zero');\n        require(wusdClaimAmount[msg.sender] == 0, 'you have to claim first');\n        require(amount <= maxStakeAmount, 'amount too high');\n        \n        usdt.safeTransferFrom(msg.sender, address(this), amount);\n        if(feePermille > 0) {\n            uint256 feeAmount = amount * feePermille / 1000;\n            usdt.safeTransfer(treasury, feeAmount);\n            amount = amount - feeAmount;\n        }\n        wusd.mint(address(this), amount);\n        uint256 wexAmount = amount * wexPermille / 1000;\n        usdt.approve(address(wswapRouter), wexAmount);\n        wswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wexAmount,\n            amountOutMin,\n            swapPath,\n            address(this),\n            block.timestamp\n        );\n        \n        wusdClaimAmount[msg.sender] = amount;\n        wusdClaimBlock[msg.sender] = block.number;\n        \n        emit Stake(msg.sender, amount);\n    }     function claimUsdt(uint256 amountOutMin) external nonReentrant whenNotPaused {\n        require(usdtClaimAmount[msg.sender] > 0, 'there is nothing to claim');\n        require(usdtClaimBlock[msg.sender] < block.number, 'you cant claim yet');\n        \n        uint256 amount = usdtClaimAmount[msg.sender];\n        usdtClaimAmount[msg.sender] = 0;\n        \n        uint256 usdtTransferAmount = amount * (1000 - wexPermille - treasuryPermille) / 1000;\n        uint256 usdtTreasuryAmount = amount * treasuryPermille / 1000;\n        uint256 wexTransferAmount = wex.balanceOf(address(this)) * amount / wusd.totalSupply();\n        wusd.burn(dead, amount);\n        usdt.safeTransfer(treasury, usdtTreasuryAmount);\n        usdt.safeTransfer(msg.sender, usdtTransferAmount);\n        wex.approve(address(wswapRouter), wexTransferAmount);\n        wswapRouter.swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            wexTransferAmount,\n            amountOutMin,\n            swapPathReverse,\n            msg.sender,\n            block.timestamp\n        );\n        \n        emit UsdtClaim(msg.sender, amount);\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-WUSD-&-WUSDMaster-v13.pdf  :   Potential WEX-USDT Exchange Rate Manipulatio",
                "Location": "",
                "Type": "Price oracle manipulation",
                "Description": "In the function WUSDMaster.stake() , a portion of staked USDT will be used to swap for WEX; in the function WUSDMaster.claimUsdt() , a portion of WEX will be used to swap for USDT. The WEX-USDT exchange rate might be manipulated by these processes. For example, if WUSD is used for lending, people can make profits through the following strategy: 1. Borrow WUSD from the lending pool. 2. Call WUSDMaster.redeem() to get prepared for triggering WUSDMaster.claimUsdt() in the next block. Borrowed WUSD is sent to the contract in this step. 3. Call WUSDMaster.claimUsdt() and receive USDT. A portion of WEX in this contract is swapped for USDT so the price of WEX decreases in this step. Although the amount of claimed USDT is restricted in the previous step, people can create multiple accounts and trigger WUSDMaster.claimUsdt() for multiple accounts in one transaction so the change of WEX-USDT exchange rate should not be ignored. 4. Swap USDT for WEX at a low WEX price. 5. Call WUSDMaster.stake() to get prepared for claiming WUSD in the next block. USDT is sent to the contract, with a portion of it is used to swap for WEX, which leads to an increase in WEX's price. 6. Swap WEX for USDT. Considering the price of WEX has been increased by the previous step, people make profits by steps 4 and 6. Steps 3 to 6 should happen in one transaction. 7. Call WUSDMaster.claimWusd() and receive WUSD. 8. Return borrowed WUSD to the lending pool.",
                "Repair": "We advise the Wault Finance team to restrict the change of WEX-USDT exchange rate made by WUSDMaster.stake() and WUSDMaster.claimUsdt() ."
            }
        ]
    },
    {
        "Code": "    function _convertPrice(\n        address _fromAsset,\n        address _toAsset,\n        uint256 _fromAmount\n    ) internal view returns(uint256) {\n        require(_fromAsset != _toAsset, \"!SAME_ASSET\");\n        require(assets[_fromAsset].priceFeed != address(0), \"!INVALID(fromAsset)\");\n        require(assets[_toAsset].priceFeed != address(0), \"!NOT_ALLOWED(toAsset)\");\n\n        if (_fromAmount == 0) {\n            return 0;\n        }\n\n        int256 oraclePrice;\n        uint256 updatedAt;\n\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_fromAsset].priceFeed).latestRoundData();\n        uint256 fromOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n        ( , oraclePrice, , updatedAt, ) = AggregatorV3Interface(assets[_toAsset].priceFeed).latestRoundData();\n        uint256 toOraclePrice = uint256(oraclePrice);\n        require(maxPriceFeedAge == 0 || block.timestamp - updatedAt <= maxPriceFeedAge, \"!PRICE_OUTDATED\");\n\n        if (assets[_fromAsset].priceFeedDecimals != assets[_toAsset].priceFeedDecimals) {\n            // since oracle precision is different, scale everything\n            // to _toAsset precision and do conversion\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\n                    _scalePrice(fromOraclePrice, assets[_fromAsset].priceFeedDecimals, assets[_toAsset].assetDecimals) /\n                    _scalePrice(toOraclePrice, assets[_toAsset].priceFeedDecimals, assets[_toAsset].assetDecimals);\n        } else {\n            // oracles are already in same precision, so just scale _amount to asset precision,\n            // and multiply by the price feed ratio\n            return _scalePrice(_fromAmount, assets[_fromAsset].assetDecimals, assets[_toAsset].assetDecimals) *\n                fromOraclePrice / toOraclePrice;\n        }\n    }\n",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Cask-v4.pdf  :   How to Guarantee The AggregatorV3Interface Price Pairs Is Correct",
                "Location": "",
                "Type": "Price oracle manipulation",
                "Description": "As the design of Chainlink Data Feeds we could calculate the currency price across two price pairs.For example, if you needed a BTC / EUR price, you could take the BTC / USD feed and the EUR / USD feed and derive BTC / EUR using the division. So here comes a question: Is there any protection in CaskVault contracts to make sure the fromOraclePrice and toOraclePrice are based on the same currency denomination? If assets[_fromAsset].priceFeed provide a TokenA / ETH price\uff0c but assets[_toAsset].priceFeed provides a TokenB / BTC price. The calculation result for will be TokenA * BTC / TokenB * ETH , and it's not expected.",
                "Repair": "Recommend to conform the data feed setup logic is well restricted"
            }
        ]
    },
    {
        "Code": "    function deposit(\n        uint256 deposit0,\n        uint256 deposit1,\n        address to\n    ) external nonReentrant override returns (uint256 shares) {\n        require(deposit0 > 0 || deposit1 > 0, \"deposits must be nonzero\");\n        require(deposit0 < deposit0Max && deposit1 < deposit1Max, \"deposits must be less than maximum amounts\");\n        require(to != address(0) && to != address(this), \"to\");\n\n        // update fees for inclusion in total pool amounts\n        (uint128 baseLiquidity,,) = _position(baseLower, baseUpper);\n        if (baseLiquidity > 0) {\n            pool.burn(baseLower, baseUpper, 0);\n        }\n        (uint128 limitLiquidity,,)  = _position(limitLower, limitUpper);\n        if (limitLiquidity > 0) {\n            pool.burn(limitLower, limitUpper, 0);\n        }\n\n        uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(currentTick());\n        uint256 price = FullMath.mulDiv(uint256(sqrtPrice).mul(uint256(sqrtPrice)), PRECISION, 2**(96 * 2));\n\n        (uint256 pool0, uint256 pool1) = getTotalAmounts();\n\n        uint256 deposit0PricedInToken1 = deposit0.mul(price).div(PRECISION);\n        shares = deposit1.add(deposit0PricedInToken1);\n\n        if (deposit0 > 0) {\n          token0.safeTransferFrom(msg.sender, address(this), deposit0);\n        }\n        if (deposit1 > 0) {\n          token1.safeTransferFrom(msg.sender, address(this), deposit1);\n        }\n\n        if (totalSupply() != 0) {\n          uint256 pool0PricedInToken1 = pool0.mul(price).div(PRECISION);\n          shares = shares.mul(totalSupply()).div(pool0PricedInToken1.add(pool1));\n        }\n        _mint(to, shares);\n        emit Deposit(msg.sender, to, shares, deposit0, deposit1);\n        // Check total supply cap not exceeded. A value of 0 means no limit.\n        require(maxTotalSupply == 0 || totalSupply() <= maxTotalSupply, \"maxTotalSupply\");\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "REP-Liquidrium-Limited-2021-12-04.pdf  :   Potential Price Manipulation In Shares Calculatio",
                "Location": "        uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(currentTick());\n        uint256 price = FullMath.mulDiv(uint256(sqrtPrice).mul(uint256(sqrtPrice)), PRECISION, 2**(96 * 2));\n\n        (uint256 pool0, uint256 pool1) = getTotalAmounts();\n\n        uint256 deposit0PricedInToken1 = deposit0.mul(price).div(PRECISION);\n        shares = deposit1.add(deposit0PricedInToken1);\n     function currentTick() public view returns (int24 tick) {\n        int24 _tick = getTwap();\n        return _tick;\n    }",
                "Type": "Price oracle manipulation",
                "Description": "In the function HyperLiquidrium.deposit,the number of shares deposited is calculated using the price from the UniswapV3 pool. The function HyperLiquidrium.currentTick() returns the current price in the UniswapV3 pool instead of a TWAP (time-weighted average price)Attackers would be able to manipulate the current price in UniswapV3 pool by a flashloan and attack the project. Attackers would be able to manipulate the current price in UniswapV3 pool by a flashloan and attack the project",
                "Repair": "it is recommended to use a TWAP oracle to provide the price for shares calculation in the function HyperLiquidrium.deposit() "
            }
        ]
    },
    {
        "Code": "    /// @notice This method is defined in the BaseStrategy contract and is meant\n    ///         to provide an accurate conversion from amtInWei (denominated in wei)\n    ///         to want token (using the native decimal characteristics of want token).\n    /// @param amtInWei The amount (in wei/1e-18 ETH) to convert to want tokens.\n    /// @return The amount in want tokens.\n    function ethToWant(uint256 amtInWei)\n        public\n        view\n        virtual\n        override\n        returns (uint256)\n    {\n        address[] memory path = new address[](2);\n        path[0] = wethToken;\n        path[1] = wbtcToken;\n\n        // As of writing this contract, there's no pool available that trades\n        // an underlying token with ETH. To overcome this, the ETH amount\n        // denominated in WEI should be converted into an amount denominated\n        // in one of the tokens accepted by the tBTC v2 Curve pool using Uniswap.\n        // The wBTC token was chosen arbitrarily since it is already used in this\n        // contract for other operations on Uniswap.\n        // amounts[0] -> ETH in wei\n        // amounts[1] -> wBTC\n        uint256[] memory amounts = IUniswapV2Router(uniswap).getAmountsOut(\n            amtInWei,\n            path\n        );\n\n        // Use the amount denominated in wBTC to calculate the amount of LP token\n        // (vault's underlying token) that could be obtained if that wBTC amount\n        // was deposited in the Curve pool that has tBTC v2 in it. This way we\n        // obtain an estimated value of the original WEI amount represented in\n        // the vault's underlying token.\n        //\n        // TODO: When the new curve pool with tBTC v2 is deployed, verify that\n        // the index of wBTC (amounts[1]) in the array is correct.\n        return\n            ICurvePool(tbtcCurvePoolDepositor).calc_token_amount(\n                [0, 0, amounts[1], 0],\n                true\n            );\n    }\n",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-KEEP.pdf  :   Potential manipulation on token pric",
                "Location": "    uint256[] memory amounts = IUniswapV2Router(uniswap).getAmountsOut(\n            amtInWei,\n            path\n        );\n        return\n            ICurvePool(tbtcCurvePoolDepositor).calc_token_amount(\n                [0, 0, amounts[1], 0],\n                true\n            );",
                "Type": "Price oracle manipulation",
                "Description": "ethToWant uses DEX API to determine the amount of token to be swapped. However, this price can be significantly manipulated by trading with DEX. It seems like Sandwich Attacks.",
                "Repair": "If a project requires price references, it needs to be caution of flash loans that might manipulate token prices. To minimize the chance of happening, we recommend the client to consider following according to the project's business model 1. Use multiple reliable on-chain price oracle sources, such as Chainlink and Uniswap. 2. Use Time-Weighted Average Price (TWAP). The TWAP represents the average price of a token over a specified time frame. If an attacker manipulates the price in one block, it will not affect too much on the average price. 3. Flash loans only allow users to borrow money within a single transaction. If the contract use cases allowed, force critical transactions to span at least two blocks."
            }
        ]
    },
    {
        "Code": "contract UniswapUtils is IUniswapUtils {\n\n    using SafeMath for uint256;\n\n    uint24 public constant POOL_FEE = 3000;\n\n    uint32 public constant TWAP_PERIOD = 60;\n\n    function calculateLimitTicks(\n        IUniswapV3Pool _pool,\n        uint160 _sqrtPriceX96,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external override view\n    returns (\n        int24 _lowerTick,\n        int24 _upperTick,\n        uint128 _liquidity,\n        uint128 _orderType\n    ) {\n\n        int24 tickSpacing = _pool.tickSpacing();\n        (uint160 sqrtRatioX96,, , , , , ) = _pool.slot0();\n\n        int24 _targetTick = TickMath.getTickAtSqrtRatio(_sqrtPriceX96);\n\n        int24 tickFloor = _floor(_targetTick, tickSpacing);\n\n        return _checkLiquidityRange(\n            tickFloor - tickSpacing,\n            tickFloor,\n            tickFloor,\n            tickFloor + tickSpacing,\n            _amount0,\n            _amount1,\n            sqrtRatioX96,\n            tickSpacing\n        );\n\n    }\n\n    function quoteKROM(IUniswapV3Factory factory, address WETH, address KROM, uint256 _weiAmount)\n    external override view returns (uint256 quote) {\n\n        address _poolAddress = factory.getPool(WETH, KROM, POOL_FEE);\n        require(_poolAddress != address(0), \"UUC_PA\");\n\n        if (_weiAmount > 0) {\n            (int24 arithmeticMeanTick,) = OracleLibrary.consult(_poolAddress, TWAP_PERIOD);\n            quote = OracleLibrary.getQuoteAtTick(\n                arithmeticMeanTick,\n                _toUint128(_weiAmount),\n                WETH,\n                KROM\n            );\n        }\n    }\n\n    function _checkLiquidityRange(int24 _bidLower, int24 _bidUpper,\n        int24 _askLower, int24 _askUpper,\n        uint256 _amount0, uint256 _amount1,\n        uint160 sqrtRatioX96, int24 _tickSpacing) internal pure\n    returns (int24 _lowerTick, int24 _upperTick, uint128 _liquidity, uint128 _orderType) {\n\n        _checkRange(_bidLower, _bidUpper, _tickSpacing);\n        _checkRange(_askLower, _askUpper, _tickSpacing);\n\n        uint128 bidLiquidity = _liquidityForAmounts(sqrtRatioX96, _bidLower, _bidUpper, _amount0, _amount1);\n        uint128 askLiquidity = _liquidityForAmounts(sqrtRatioX96, _askLower, _askUpper, _amount0, _amount1);\n\n        require(bidLiquidity > 0 || askLiquidity > 0, \"UUC_BAL\");\n\n        if (bidLiquidity > askLiquidity) {\n            (_lowerTick, _upperTick, _liquidity, _orderType) = (_bidLower, _bidUpper, bidLiquidity, uint128(1));\n        } else {\n            (_lowerTick, _upperTick, _liquidity, _orderType) = (_askLower, _askUpper, askLiquidity, uint128(2));\n        }\n    }\n\n    /// @dev Casts uint256 to uint128 with overflow check.\n    function _toUint128(uint256 x) internal pure returns (uint128) {\n        require(x <= type(uint128).max, \"UUC_IC\");\n        return uint128(x);\n    }\n\n    /// @dev Wrapper around `LiquidityAmounts.getLiquidityForAmounts()`.\n    function _liquidityForAmounts(\n        uint160 sqrtRatioX96,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128) {\n        return\n        LiquidityAmounts.getLiquidityForAmounts(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            amount0,\n            amount1\n        );\n    }\n\n    /// @dev Wrapper around `LiquidityAmounts.getAmountsForLiquidity()`.\n    function _amountsForLiquidity(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    ) external override view returns (uint256, uint256) {\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n        return\n        LiquidityAmounts.getAmountsForLiquidity(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            liquidity\n        );\n    }\n\n    function _checkRange(int24 _tickLower, int24 _tickUpper, int24 _tickSpacing) internal pure {\n\n        require(_tickLower < _tickUpper, \"UUC_TLU\");\n        require(_tickLower >= TickMath.MIN_TICK, \"UUC_TLMIN\");\n        require(_tickUpper <= TickMath.MAX_TICK, \"UUC_TAMAX\");\n        require(_tickLower % _tickSpacing == 0, \"UUC_TLS\");\n        require(_tickUpper % _tickSpacing == 0, \"UUC_TUS\");\n    }\n\n    /// @dev Rounds tick down towards negative infinity so that it's a multiple\n    /// of `tickSpacing`.\n    function _floor(int24 tick, int24 _tickSpacing) internal pure returns (int24) {\n        int24 compressed = tick / _tickSpacing;\n        if (tick < 0 && tick % _tickSpacing != 0) compressed--;\n        return compressed * _tickSpacing;\n    }\n\n    receive() external payable {}\n}",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Kromatika.Finance-v13.pdf  :   Potential Oracle Manipulatio",
                "Location": "    uint32 public constant TWAP_PERIOD = 60;     function quoteKROM(IUniswapV3Factory factory, address WETH, address KROM, uint256 _weiAmount)\n    external override view returns (uint256 quote) {\n\n        address _poolAddress = factory.getPool(WETH, KROM, POOL_FEE);\n        require(_poolAddress != address(0), \"UUC_PA\");\n\n        if (_weiAmount > 0) {\n            (int24 arithmeticMeanTick,) = OracleLibrary.consult(_poolAddress, TWAP_PERIOD);\n            quote = OracleLibrary.getQuoteAtTick(\n                arithmeticMeanTick,\n                _toUint128(_weiAmount),\n                WETH,\n                KROM\n            );\n        }\n    }",
                "Type": "Price oracle manipulation",
                "Description": "In the function quoteKROM() , timeWeightedAverageTick is used to calculate the amount of KROM token received in exchange given a tick and a token amount. However, the timeWeightedAverageTick is fetched using Uniswap V3 oracle given the pool address and the TWAP_PERIOD that is used to calculate the time weighted average. To be noticed, the TWAP_PERIOD is in units of seconds. By the current setting, the TWAP_PERIOD is a constant and it's only 20 seconds, which means the timeWeightedAverageTick is vulnerable to oracle manipulation. The attacker could manipulate the pool for a few seconds to further manipulate the timeWeightedAverageTick since the time weight is relatively focused in a short period of time which makes it be easily manipulated.",
                "Repair": "consider increasing the value of TWAP_PERIOD to increase the quote resilience from potential oracle manipulation"
            }
        ]
    },
    {
        "Code": "contract UniswapUtils is IUniswapUtils {\n\n    using SafeMath for uint256;\n\n    uint24 public constant POOL_FEE = 3000;\n\n    uint32 public constant TWAP_PERIOD = 60;\n\n    function calculateLimitTicks(\n        IUniswapV3Pool _pool,\n        uint160 _sqrtPriceX96,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external override view\n    returns (\n        int24 _lowerTick,\n        int24 _upperTick,\n        uint128 _liquidity,\n        uint128 _orderType\n    ) {\n\n        int24 tickSpacing = _pool.tickSpacing();\n        (uint160 sqrtRatioX96,, , , , , ) = _pool.slot0();\n\n        int24 _targetTick = TickMath.getTickAtSqrtRatio(_sqrtPriceX96);\n\n        int24 tickFloor = _floor(_targetTick, tickSpacing);\n\n        return _checkLiquidityRange(\n            tickFloor - tickSpacing,\n            tickFloor,\n            tickFloor,\n            tickFloor + tickSpacing,\n            _amount0,\n            _amount1,\n            sqrtRatioX96,\n            tickSpacing\n        );\n\n    }\n\n    function quoteKROM(IUniswapV3Factory factory, address WETH, address KROM, uint256 _weiAmount)\n    external override view returns (uint256 quote) {\n\n        address _poolAddress = factory.getPool(WETH, KROM, POOL_FEE);\n        require(_poolAddress != address(0), \"UUC_PA\");\n\n        if (_weiAmount > 0) {\n            (int24 arithmeticMeanTick,) = OracleLibrary.consult(_poolAddress, TWAP_PERIOD);\n            quote = OracleLibrary.getQuoteAtTick(\n                arithmeticMeanTick,\n                _toUint128(_weiAmount),\n                WETH,\n                KROM\n            );\n        }\n    }\n\n    function _checkLiquidityRange(int24 _bidLower, int24 _bidUpper,\n        int24 _askLower, int24 _askUpper,\n        uint256 _amount0, uint256 _amount1,\n        uint160 sqrtRatioX96, int24 _tickSpacing) internal pure\n    returns (int24 _lowerTick, int24 _upperTick, uint128 _liquidity, uint128 _orderType) {\n\n        _checkRange(_bidLower, _bidUpper, _tickSpacing);\n        _checkRange(_askLower, _askUpper, _tickSpacing);\n\n        uint128 bidLiquidity = _liquidityForAmounts(sqrtRatioX96, _bidLower, _bidUpper, _amount0, _amount1);\n        uint128 askLiquidity = _liquidityForAmounts(sqrtRatioX96, _askLower, _askUpper, _amount0, _amount1);\n\n        require(bidLiquidity > 0 || askLiquidity > 0, \"UUC_BAL\");\n\n        if (bidLiquidity > askLiquidity) {\n            (_lowerTick, _upperTick, _liquidity, _orderType) = (_bidLower, _bidUpper, bidLiquidity, uint128(1));\n        } else {\n            (_lowerTick, _upperTick, _liquidity, _orderType) = (_askLower, _askUpper, askLiquidity, uint128(2));\n        }\n    }\n\n    /// @dev Casts uint256 to uint128 with overflow check.\n    function _toUint128(uint256 x) internal pure returns (uint128) {\n        require(x <= type(uint128).max, \"UUC_IC\");\n        return uint128(x);\n    }\n\n    /// @dev Wrapper around `LiquidityAmounts.getLiquidityForAmounts()`.\n    function _liquidityForAmounts(\n        uint160 sqrtRatioX96,\n        int24 tickLower,\n        int24 tickUpper,\n        uint256 amount0,\n        uint256 amount1\n    ) internal pure returns (uint128) {\n        return\n        LiquidityAmounts.getLiquidityForAmounts(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            amount0,\n            amount1\n        );\n    }\n\n    /// @dev Wrapper around `LiquidityAmounts.getAmountsForLiquidity()`.\n    function _amountsForLiquidity(\n        IUniswapV3Pool pool,\n        int24 tickLower,\n        int24 tickUpper,\n        uint128 liquidity\n    ) external override view returns (uint256, uint256) {\n        (uint160 sqrtRatioX96, , , , , , ) = pool.slot0();\n        return\n        LiquidityAmounts.getAmountsForLiquidity(\n            sqrtRatioX96,\n            TickMath.getSqrtRatioAtTick(tickLower),\n            TickMath.getSqrtRatioAtTick(tickUpper),\n            liquidity\n        );\n    }\n\n    function _checkRange(int24 _tickLower, int24 _tickUpper, int24 _tickSpacing) internal pure {\n\n        require(_tickLower < _tickUpper, \"UUC_TLU\");\n        require(_tickLower >= TickMath.MIN_TICK, \"UUC_TLMIN\");\n        require(_tickUpper <= TickMath.MAX_TICK, \"UUC_TAMAX\");\n        require(_tickLower % _tickSpacing == 0, \"UUC_TLS\");\n        require(_tickUpper % _tickSpacing == 0, \"UUC_TUS\");\n    }\n\n    /// @dev Rounds tick down towards negative infinity so that it's a multiple\n    /// of `tickSpacing`.\n    function _floor(int24 tick, int24 _tickSpacing) internal pure returns (int24) {\n        int24 compressed = tick / _tickSpacing;\n        if (tick < 0 && tick % _tickSpacing != 0) compressed--;\n        return compressed * _tickSpacing;\n    }\n\n    receive() external payable {}\n}",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Kromatika.Finance-v13.pdf  :   Potential Price Manipulatio",
                "Location": "    function calculateLimitTicks(\n        IUniswapV3Pool _pool,\n        uint160 _sqrtPriceX96,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external override view\n    returns (\n        int24 _lowerTick,\n        int24 _upperTick,\n        uint128 _liquidity,\n        uint128 _orderType\n    ) {\n\n        int24 tickSpacing = _pool.tickSpacing();\n        (uint160 sqrtRatioX96,, , , , , ) = _pool.slot0();\n\n        int24 _targetTick = TickMath.getTickAtSqrtRatio(_sqrtPriceX96);\n\n        int24 tickFloor = _floor(_targetTick, tickSpacing);\n\n        return _checkLiquidityRange(\n            tickFloor - tickSpacing,\n            tickFloor,\n            tickFloor,\n            tickFloor + tickSpacing,\n            _amount0,\n            _amount1,\n            sqrtRatioX96,\n            tickSpacing\n        );\n\n    }     function calculateLimitTicks(\n        IUniswapV3Pool _pool,\n        uint160 _sqrtPriceX96,\n        uint256 _amount0,\n        uint256 _amount1\n    ) external override view\n    returns (\n        int24 _lowerTick,\n        int24 _upperTick,\n        uint128 _liquidity,\n        uint128 _orderType\n    ) {\n\n        int24 tickSpacing = _pool.tickSpacing();\n        (uint160 sqrtRatioX96,, , , , , ) = _pool.slot0();\n\n        int24 _targetTick = TickMath.getTickAtSqrtRatio(_sqrtPriceX96);\n\n        int24 tickFloor = _floor(_targetTick, tickSpacing);\n\n        return _checkLiquidityRange(\n            tickFloor - tickSpacing,\n            tickFloor,\n            tickFloor,\n            tickFloor + tickSpacing,\n            _amount0,\n            _amount1,\n            sqrtRatioX96,\n            tickSpacing\n        );\n\n    }",
                "Type": "Price oracle manipulation",
                "Description": "n the function calculateLimitTicks() , Uniswap V3 pool's spot price is used to calculate the liquidity range. (uint160 sqrtRatioX96,, , , , , ) = _pool.slot0(); The spot price of Uniswap V3 pools can be manipulated by flash loan attacks to generate a liquidity range that favors the attacker. In the function _amountsForLiquidity() , Uniswap V3 pool's spot price is also used to compute the token0 and token1 value for a given amount of liquidity. (uint160 sqrtRatioX96, , , , , , ) = pool.slot0(); The spot price of Uniswap V3 pools can be manipulated by flash loan attacks to generate token values that favor the attacker.",
                "Repair": "Considering using time weighted average price to reduce the effects from the pool price manipulation."
            }
        ]
    },
    {
        "Code": "    function getExchangeCountOfOneUsdt(address lptoken)\n        public\n        view\n        returns (uint256)\n    {\n        require(_lpPools[lptoken].tradeContract != address(0));\n\n        if (lptoken == address(2)) //BNB\n        {\n            (uint112 _reserve0, uint112 _reserve1, ) =\n                IPancakePair(_bnbtradeaddress).getReserves();\n            uint256 a = _reserve0;\n            uint256 b = _reserve1;\n            return b.mul(1e18).div(a);\n        }\n\n        if (lptoken == _Lizaddr) {\n            (uint112 _reserve0, uint112 _reserve1, ) =\n                IPancakePair(_Liztrade).getReserves();\n            uint256 a = _reserve0;\n            uint256 b = _reserve1;\n            return b.mul(1e18).div(a);\n        } else {\n            (uint112 _reserve0, uint112 _reserve1, ) =\n                IPancakePair(_bnbtradeaddress).getReserves();\n            (uint112 _reserve3, uint112 _reserve4, ) =\n                IPancakePair(_lpPools[lptoken].tradeContract).getReserves();\n\n            uint256 balancea = _reserve0;\n            uint256 balanceb = _reserve1;\n            uint256 balancec =\n                IPancakePair(_lpPools[lptoken].tradeContract).token0() ==\n                    lptoken\n                    ? _reserve3\n                    : _reserve4;\n            uint256 balanced =\n                IPancakePair(_lpPools[lptoken].tradeContract).token0() ==\n                    lptoken\n                    ? _reserve4\n                    : _reserve3;\n            if (balancea == 0 || balanceb == 0 || balanced == 0) return 0;\n            return balancec.mul(1e18).div(balancea.mul(balanced).div(balanceb));\n        }\n    } ",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Lizard.pdf  :   Potential flash loans manipulate the token pric",
                "Location": "uint256 balancec = IPancakePair(_lpPools[lptoken].tradeContract).token0() == lptoken ? _reserve3 : _reserve4;",
                "Type": "Price oracle manipulation",
                "Description": "Function getExchangeCountOfOneUsdt is used to calculate the token price by the number of tokens in the pair of Pancake Swap. And the pair pool may be affected by a huge number of token transactions. Flash loans are a way to borrow large amounts of tokens for a certain fee. An attacker can use the borrowed token as the initial funds for an exploit to enlarge the profit and/or manipulate the token price in the decentralized exchanges. We find that the buyVip , TakeBack , deposit , and some other functions rely on price calculations that are based on-chain, meaning that they would be susceptible to flash-loan attacks by manipulating the price of given pairs to the attacker's benefit.",
                "Repair": "If a project requires price references, it needs to be careful of flash loans that might manipulate token prices. To prevent this from happening, we recommend the following: 1. Use a reliable on-chain price oracle, such as Chainlink. 2. Use Time-Weighted Average Price (TWAP). The TWAP represents the average price of a token over a specified time frame. If an attacker manipulates the price in one block, it will not affect too much on the average price. 3. If the business model allows, restrict the function caller to be a non-contract/EOA address. 4. Flash loans only allow users to borrow money within a single transaction. If the contract use cases allowed, force critical transactions to span at least two blocks."
            }
        ]
    },
    {
        "Code": "    function getUpdatedPriceInPeg(address token, uint256 inAmount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                MarginRouter(router()).getAmountsOut(\n                    UNI,\n                    inAmount,\n                    tokenPrice.liquidationPath\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n\n            if (\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\n                outAmount < UPDATE_MAX_PEG_AMOUNT\n            ) {\n                confidentUpdatePriceInPeg(tokenPrice, inAmount, outAmount);\n            }\n\n            return outAmount;\n        }\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-MarginSwap---Core-Implementation-Contracts-v2.pdf  :   Susceptible to Oracle Price Manipulation  ",
                "Location": "uint256[] memory pathAmounts = MarginRouter(router()).getAmountsOut( UNI, inAmount, tokenPrice.liquidationPath );",
                "Type": "Price oracle manipulation",
                "Description": "The getUpdatedPriceInPeg relies on a price update based on UniSwap using the getAmountsOut function which can yield unreliable results in case a flash loan has been deposited temporarily to the pair",
                "Repair": "Although ranges do exist within L91-L94 that are meant to guarantee the fluctuation of price is within a minimum and maximum range, the function can still be exploited whereby the price is kept \"still\" or even slightly moved within the bounds as this can be pre-calculated. We advise the calculation of price based on TWAPs (Time-Weighted Average Prices) rather than spot prices to ensure security in the protocol. A confidence rating is utilized in L130-L143, however, sharp changes in price can still overpower the \"weighted\" average imposed here as it is not sufficiently parameterized to prevent such an attack."
            }
        ]
    },
    {
        "Code": "function _transfer(\naddress from,\naddress to,\nuint256 amount\n) private {\nrequire(from != address(0), \"ERC20: transfer from the zero address\");\nrequire(to != address(0), \"ERC20: transfer to the zero address\");\nrequire(amount > 0, \"Transfer amount must be greater than zero\");\nrequire(tradingOpen || _tradingOpenExempt[from] , \"Trading not open yet\");\nrequire(launchedBlock + deadBlocks <= block.number || _tradingOpenExempt[from], \"BOT not allowed\");\n\nif (!_isMaxWalletExempt[from] && to != address(this)  && to != address(DEAD_ADDRESS) && to != uniswapV2Pair && to != marketingFeeReceiver && to != autoLiquidityReceiver){\nuint256 heldTokens = balanceOf(to);\nrequire((heldTokens + amount) <= _maxWalletAmount,\"Total Holding is currently limited, you can not buy that much.\");}\n\nrequire(amount <= _maxTxAmount || _isMaxTaxExempt[to] || _isMaxTaxExempt[from] , \"Transfer amount exceeds the maxTxAmount.\");\n\nif (from == uniswapV2Pair &&\n!_isTimelockExempt[to]) {\nrequire(cooldownTimer[to] < block.timestamp,\"Please wait for cooldown between two buys\");\ncooldownTimer[to] = block.timestamp + cooldownTimerInterval;\n}\n\n// is the token balance of this contract address over the min number of\n// tokens that we need to initiate a swap + liquidity lock?\n// also, don't get caught in a circular liquidity event.\n// also, don't swap & liquify if sender is uniswap pair.\nuint256 contractTokenBalance = balanceOf(address(this));\n\nbool isSell = setIsSell(to);\n\nif (isSell && from != owner()){\n_amountTokensLastSold += _getSellBnBAmount(amount);\n}\n\n\nif(contractTokenBalance >= _maxTxAmount)\n{\ncontractTokenBalance = _maxTxAmount;\n}\n\nbool overMinTokenBalance = contractTokenBalance >= minTokensBeforeSwap;\nif (\noverMinTokenBalance &&\n!inSwapAndLiquify &&\nfrom != uniswapV2Pair &&\nswapAndLiquifyEnabled\n) {\ncontractTokenBalance = minTokensBeforeSwap;\n//add liquidity\nswapAndLiquify(contractTokenBalance);\n\nuint256 balance = address(this).balance;\nif (buyBackEnabled) {\nif(balance > buyBackUpperLimit){\nuint256 buyBackAmount = _amountTokensLastSold.div(1000).mul(_percentLastSoldToBuyBackTimesTen);\nif(buyBackAmount < balance){\nbuyBackTokens(buyBackAmount);\n_amountTokensLastSold = 0;\n}else{\namountTokensLastSold = 0;\n}\n}\n}\n}\n\n//indicates if fee should be deducted from transfer\nbool takeFee = true;\n\n//if any account belongs to _isExcludedFromFee account then remove the fee\nif(_isExcludedFromFee[from] || _isExcludedFromFee[to] || inSwapAndLiquify ){\ntakeFee = false;\n}\n//transfer amount, it will take tax, burn, liquidity fee\n_tokenTransfer(from,to,amount,takeFee, isSell);\n\n}     function _getSellBnBAmount(uint256 tokenAmount) private view returns(uint256) {\n        address[] memory path = new address[](2);\n\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, path);\n\n        return amounts[1];\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Party-dog-v8.pdf  :   Arbitrage through Pair Price Manipulatio",
                "Location": "    function _getSellBnBAmount(uint256 tokenAmount) private view returns(uint256) {\n        address[] memory path = new address[](2);\n\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        uint[] memory amounts = uniswapV2Router.getAmountsOut(tokenAmount, path);\n\n        return amounts[1];\n    }",
                "Type": "Price oracle manipulation",
                "Description": "_amountTokensLastSold is determined by the token versus bnb ratio on the uniswap pair which is the same pair used for buyBack. Maybe it is possible to manipulate the price on that pair using a large amount of token or bnb and take advantage of it through the buyBack feature during transfer",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "    function trade(address trader, uint256 symbolId, int256 tradeVolume) external override _lock_ {\n        _checkRouter();\n        Data memory data = _getBTokensAndSymbols(type(uint256).max, symbolId);\n        _getMarginsAndPositions(data, trader);\n        SymbolData memory s = data.symbols[symbolId];\n        IPToken.Position memory p = data.positions[symbolId];\n\n        tradeVolume = tradeVolume.reformat(0);\n        require(tradeVolume != 0, '0 tradeVolume');\n\n        int256 curCost = DpmmPricerFutures._calculateDpmmCost(\n            s.indexPrice,\n            s.K,\n            s.tradersNetPosition,\n            tradeVolume * s.multiplier / ONE\n        );\n        int256 fee = curCost.abs() * s.feeRatio / ONE;\n\n        int256 realizedCost;\n        if (!(p.volume >= 0 && tradeVolume >= 0) && !(p.volume <= 0 && tradeVolume <= 0)) {\n            int256 absVolume = p.volume.abs();\n            int256 absTradeVolume = tradeVolume.abs();\n            if (absVolume <= absTradeVolume) {\n                realizedCost = curCost * absVolume / absTradeVolume + p.cost;\n            } else {\n                realizedCost = p.cost * absTradeVolume / absVolume + curCost;\n            }\n        }\n\n        int256 preVolume = p.volume;\n        p.volume += tradeVolume;\n        p.cost += curCost - realizedCost;\n        p.lastCumulativeFundingRate = s.cumulativeFundingRate;\n        s.positionUpdated = true;\n\n        data.margins[0] -= fee + realizedCost;\n\n        int256 protocolFee = fee * _protocolFeeCollectRatio / ONE;\n        _protocolFeeAccrued += protocolFee;\n        data.undistributedPnl += fee - protocolFee;\n\n        s.distributedUnrealizedPnl += realizedCost;\n        _distributePnlToBTokens(data);\n\n        s.tradersNetVolume += tradeVolume;\n        s.tradersNetCost += curCost - realizedCost;\n\n        data.totalTraderNontional += (p.volume.abs() - preVolume.abs()) * s.indexPrice / ONE * s.multiplier / ONE;\n        data.totalNotional += s.tradersNetVolume.abs() * s.indexPrice / ONE * s.multiplier / ONE - s.notional;\n\n        IPToken(_pTokenAddress).updatePosition(trader, symbolId, p);\n        _updateBTokensAndSymbols(data);\n        _updateMarginsAndPositions(data);\n\n        require(data.totalEquity * ONE >= data.totalNotional * _minPoolMarginRatio, \"insuf't liq\");\n        require(data.totalTraderEquity * ONE >= data.totalTraderNontional * _initialMarginRatio, \"insuf't margin\");\n\n        emit Trade(trader, symbolId, s.indexPrice, tradeVolume, curCost, fee);\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "REP-deriprotocol-v2-2021-06-02.pdf  :   Traders May Manipulate Pric",
                "Location": "function trade",
                "Type": "Price oracle manipulation",
                "Description": "Flash loans are a way to borrow large amounts of money for a certain fee. The requirement is that the loans need to be returned within the same transaction in a block. If not, the transaction will be reverted. An attacker can use the borrowed money as the initial funds for an exploit to enlarge the profit and/or manipulate the token price in the decentralized exchanges. We find that the [PerpetualPool.sol/trade()] rely on price calculations that are based on-chain, meaning that they would be susceptible to flash-loan attacks by manipulating the price of given pairs to the attacker's benefit.",
                "Repair": "If a project requires price references, it needs to be careful of flash loans that might manipulate token prices"
            }
        ]
    },
    {
        "Code": "    function deposit(\n        uint256 deposit0,\n        uint256 deposit1,\n        address to\n    ) external nonReentrant override returns (uint256 shares) {\n        require(deposit0 > 0 || deposit1 > 0, \"deposits must be nonzero\");\n        require(deposit0 < deposit0Max && deposit1 < deposit1Max, \"deposits must be less than maximum amounts\");\n        require(to != address(0) && to != address(this), \"to\");\n\n        // update fees for inclusion in total pool amounts\n        (uint128 baseLiquidity,,) = _position(baseLower, baseUpper);\n        if (baseLiquidity > 0) {\n            pool.burn(baseLower, baseUpper, 0);\n        }\n        (uint128 limitLiquidity,,)  = _position(limitLower, limitUpper);\n        if (limitLiquidity > 0) {\n            pool.burn(limitLower, limitUpper, 0);\n        }\n\n        uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(currentTick());\n        uint256 price = FullMath.mulDiv(uint256(sqrtPrice).mul(uint256(sqrtPrice)), PRECISION, 2**(96 * 2));\n\n        (uint256 pool0, uint256 pool1) = getTotalAmounts();\n\n        uint256 deposit0PricedInToken1 = deposit0.mul(price).div(PRECISION);\n        shares = deposit1.add(deposit0PricedInToken1);\n\n        if (deposit0 > 0) {\n          token0.safeTransferFrom(msg.sender, address(this), deposit0);\n        }\n        if (deposit1 > 0) {\n          token1.safeTransferFrom(msg.sender, address(this), deposit1);\n        }\n\n        if (totalSupply() != 0) {\n          uint256 pool0PricedInToken1 = pool0.mul(price).div(PRECISION);\n          shares = shares.mul(totalSupply()).div(pool0PricedInToken1.add(pool1));\n        }\n        _mint(to, shares);\n        emit Deposit(msg.sender, to, shares, deposit0, deposit1);\n        // Check total supply cap not exceeded. A value of 0 means no limit.\n        require(maxTotalSupply == 0 || totalSupply() <= maxTotalSupply, \"maxTotalSupply\");\n    } function currentTick() public view returns (int24 tick) { int24 _tick = getTwap(); return tick;}",
        "VulnerabilityDesc": [
            {
                "Name": "REP-Liquidrium-Limited-2021-12-04.pdf  :   Potential Price Manipulation In Shares Calculatio",
                "Location": "uint160 sqrtPrice = TickMath.getSqrtRatioAtTick(currentTick());\n        uint256 price = FullMath.mulDiv(uint256(sqrtPrice).mul(uint256(sqrtPrice)), PRECISION, 2**(96 * 2));\n\n        (uint256 pool0, uint256 pool1) = getTotalAmounts();\n\n uint256 deposit0PricedInToken1 = deposit0.mul(price).div(PRECISION);\n        shares = deposit1.add(deposit0PricedInToken1);\n\n",
                "Type": "Price oracle manipulation",
                "Description": "In the function HyperLiquidrium.deposit() , the number of shares deposited is calculated using the price from the UniswapV3 pool. The function HyperLiquidrium.currentTick() returns the current price in the UniswapV3 pool instead of a TWAP (time-weighted average price).  Attackers would be able to manipulate the current price in UniswapV3 pool by a flashloan and attack the project.",
                "Repair": "It is recommended to use a TWAP oracle to provide the price for shares calculation in the function HyperLiquidrium.deposit() ."
            }
        ]
    },
    {
        "Code": "function buy ( uint256 maxPrice_ ) external virtual whenNotPaused\nnonReentrant {\nif( endTime [ FEATURE_ENDTIME_BUY ] != 0) {\nrequire ( now256 () < endTime [ FEATURE_ENDTIME_BUY ] , \" sale is\nexpire \") ;\n}\nrequire ( maxPrice_ > 0 , \" invalid max price \") ;\n\ntransferFromHighToken ( _msgSender () , address ( this ) , maxPrice_ );\n\n( uint256 change ) = _buy ( maxPrice_ ) ;\nif( change > 0) {\ntransferHighToken ( _msgSender () , change ) ;\n}\nfunction sell ( uint32 amount_ ) external virtual whenNotPaused\nnonReentrant {\nif( endTime [ FEATURE_ENDTIME_SELL ] != 0) {\nrequire ( now256 () < endTime [ FEATURE_ENDTIME_SELL ], \" sale is\nexpire \") ;\n}\nrequire ( amount_ > 0 , \" Amount must be non - zero .\");\nrequire ( balanceOf ( _msgSender () ) >= amount_ , \" Insufficient tokens\n.\");\n\nuint256 price = _sell ( amount_ );\ntransferHighToken ( _msgSender () , price ) ;\n}\nfunction initialize (\nstring memory _name ,\nstring memory _symbol ,\naddress _high ,\naddress _bondingCurve ,\naddress _productNft ,\nuint32 _reserveRatio ,\nuint32 _maxTokenCount ,\nuint32 _supplyOffset ,\nuint256 _baseReserve ,\nuint256 _endTime\n) public virtual initializer {\nHIGH = _high ;\nProductTokenCore . initialize (\n_name ,\n_symbol ,\n_bondingCurve ,\n_productNft ,\n_reserveRatio ,\n_maxTokenCount ,\n_supplyOffset ,\n_baseReserve\n) ;\nif( _endTime > 0) {\nupdateEndTime ( FEATURE_ENDTIME_MAX , _endTime ) ;\n}\n}\n",
        "VulnerabilityDesc": [
            {
                "Name": "HighStreetMarket_ProductToken_Smart_Contract_Security_Audit_Report_Halborn_Final.pdf  :   PRODUCTTOKENHIGHBASE CONTRACT IS VULNERABLE TO SANDWIC",
                "Location": "function buy ( uint256 maxPrice_ ) external virtual whenNotPaused\nnonReentrant {\nif( endTime [ FEATURE_ENDTIME_BUY ] != 0) {\nrequire ( now256 () < endTime [ FEATURE_ENDTIME_BUY ] , \" sale is\nexpire \") ;\n}\nrequire ( maxPrice_ > 0 , \" invalid max price \") ;\n\ntransferFromHighToken ( _msgSender () , address ( this ) , maxPrice_ );\n\n( uint256 change ) = _buy ( maxPrice_ ) ;\nif( change > 0) {\ntransferHighToken ( _msgSender () , change ) ;\n}\nfunction sell ( uint32 amount_ ) external virtual whenNotPaused\nnonReentrant {\nif( endTime [ FEATURE_ENDTIME_SELL ] != 0) {\nrequire ( now256 () < endTime [ FEATURE_ENDTIME_SELL ], \" sale is\nexpire \") ;\n}\nrequire ( amount_ > 0 , \" Amount must be non - zero .\");\nrequire ( balanceOf ( _msgSender () ) >= amount_ , \" Insufficient tokens\n.\");\n\nuint256 price = _sell ( amount_ );\ntransferHighToken ( _msgSender () , price ) ;\n}\n",
                "Type": "Price oracle manipulation",
                "Description": "ProductTokenHighBase is an ERC20 contract that allows users to buy and sell a product token. The buying and selling price of the token is based on a pricing algorithm called Bonding Curve. This algorithm causes the price of the token to increase with every purchase, meaning that early buyers are rewarded as they can, then, sell the tokens back for a profit. The function sell(uint32 amount_) allows users to sell a product token, returning the equivalent HIGH tokens. The growth of the price with each purchase is determined by the different bonding curve parameters, which are set in the initialize() function of the ProductTokenHighBase contract. As there are no restriction or cooldown period to sell the product token after its purchase, the buy() function calls are vulnerable to a sandwich attack.",
                "Repair": "It is recommended to redesign the application logic to use only one pair contract for each token pair."
            }
        ]
    },
    {
        "Code": "contract Uniswapv2Oracle is IUsdcOracle, AccessControl {\n    /* ==========  Libraries  ========== */\n\n    using Prices for address;\n    using Prices for Prices.PriceObservation;\n    using Prices for Prices.TwoWayAveragePrice;\n    using FixedPoint for FixedPoint.uq112x112;\n    using FixedPoint for FixedPoint.uq144x112;\n\n    /* ==========  Constants  ========== */\n\n    // Period over which prices are observed, each period should have 1 price observation.\n    // Minimum time elapsed between price observations\n    uint32 public immutable MINIMUM_OBSERVATION_DELAY;\n\n    address public immutable USDC; // 0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48;\n    address public immutable WETH; // 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address public immutable uniswapFactory; // 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\n\n    uint32 public immutable maxObservationAge;\n\n    /* ==========  Storage  ========== */\n\n    uint32 public observationPeriod;\n    // Price observations for tokens indexed by time period.\n    mapping(address => mapping(uint256 => Prices.PriceObservation)) internal priceObservations;\n\n    /* ==========  Events  ========== */\n\n    event PriceUpdated(\n        address indexed token,\n        uint224 tokenPriceCumulativeLast,\n        uint224 ethPriceCumulativeLast\n    );\n\n    /* ==========  Constructor  ========== */\n\n    constructor(address _uniswapFactory, uint32 _initialObservationPeriod, address _usdc, address _weth) {\n        require(_uniswapFactory != address(0), \"ERR_UNISWAPV2_FACTORY_INIT\");\n        require(_weth!= address(0), \"ERR_WETH_INIT\");\n        uniswapFactory = _uniswapFactory;\n        USDC = _usdc;\n        WETH = _weth;\n        observationPeriod = _initialObservationPeriod;\n        MINIMUM_OBSERVATION_DELAY = _initialObservationPeriod / 2;\n        maxObservationAge = _initialObservationPeriod * 2;\n    }\n\n    /* ==========  External Functions  ========== */\n\n    function getLastPriceObservation(address token)\n        external\n        view\n        returns (Prices.PriceObservation memory)\n    {\n        Prices.PriceObservation memory current = Prices.observeTwoWayPrice(\n            uniswapFactory,\n            token,\n            WETH\n        );\n        Prices.PriceObservation memory previous = _getLatestUsableObservation(\n            token,\n            current.timestamp\n        );\n        return previous;\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "CertiK-Audit-for-Delta-Finance--v5.pdf  :   Funds Can Be Stolen via Multi-Strategy Value Manipulatio https://github.com/Singularity-DAO/dynaset-contracts/blob/master/contracts/oracles/Uniswapv2Oracle.sol#L361",
                "Location": "    // Price observations for tokens indexed by time period.\n    mapping(address => mapping(uint256 => Prices.PriceObservation)) internal priceObservations;\n\n    /* ==========  Events  ========== */\n\n    event PriceUpdated(\n        address indexed token,\n        uint224 tokenPriceCumulativeLast,\n        uint224 ethPriceCumulativeLast\n    );\n\n    function getLastPriceObservation(address token)\n        external\n        view\n        returns (Prices.PriceObservation memory)\n    {\n        Prices.PriceObservation memory current = Prices.observeTwoWayPrice(\n            uniswapFactory,\n            token,\n            WETH\n        );\n        Prices.PriceObservation memory previous = _getLatestUsableObservation(\n            token,\n            current.timestamp\n        );\n        return previous;\n    }",
                "Type": "Price oracle manipulation",
                "Description": "Uniswapv3Oracle and Uniswapv2Oracle contracts use Uniswap router for the prices obtaining. The prices in the Uniswap may be disbalanced using the flashloan, and the price may be manipulated.",
                "Repair": "do not the current price for the price calculation, replace the arithmetic mean with the geometric mean in the Uniswapv2Oracle."
            }
        ]
    },
    {
        "Code": "function getPirce() public view returns (uint256) {\n        (uint256 reserve0, uint256 reserve1, ) = addr.pair.getReserves();\n        if (addr.pair.token0() == address(addr.usdt)) {\n            return (reserve0 * 1e18) / reserve1;\n        } else {\n            return (reserve1 * 1e18) / reserve0;\n        }\n    }",
        "VulnerabilityDesc": [
            {
                "Name": "/Secure3/Lymex_final_Secure3_Audit_Report.pdf/Price manipulation risk in\nLymSignPool::getPirce() function",
                "Location": " (reserve0 * 1e18) / reserve1",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation. the getPirce() function only gets the single tick price of that moment, which is very vulnerable to the price\nmanipulation especially for the low liquidity tokens. this can lead to mis-compute power in the registerSignMining() function as registerSignMining -> coutingPower -> getPirce.",
                "Repair": " use more robust algorithms such as time weighted average price (TWAP) to calculate the price."
            }
        ]
    },
    {
        "Code": "no code",
        "VulnerabilityDesc": [
            {
                "Name": "REP-Moma-2021-05-19.pdf  :   Risk of Flash Loan Attack on Price Oracl",
                "Location": "",
                "Type": "Price oracle manipulation",
                "Description": "",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "pragma solidity ^0.8.0;\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\nstruct TokenPrice {\n    uint256 blockLastUpdated;\n    uint256 tokenPer1k;\n    address[] liquidationPairs;\n    address[] inverseLiquidationPairs;\n    address[] liquidationTokens;\n    address[] inverseLiquidationTokens;\n}\n\nabstract contract PriceAware is Ownable, RoleAware {\n    address public immutable peg;\n    mapping(address => TokenPrice) public tokenPrices;\n\n    uint16 public priceUpdateWindow = 8;\n    uint256 public UPDATE_RATE_PERMIL = 80;\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\n\n    constructor(address _peg) Ownable() {\n        peg = _peg;\n    }\n\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\n        priceUpdateWindow = window;\n    }\n    function getCurrentPriceInPeg(\n        address token,\n        uint256 inAmount,\n        bool forceCurBlock\n    ) public returns (uint256) {\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        if (forceCurBlock) {\n            if (\n                block.number - tokenPrice.blockLastUpdated > priceUpdateWindow\n            ) {\n                return getPriceFromAMM(token, inAmount);\n            } else {\n                return viewCurrentPriceInPeg(token, inAmount);\n            }\n        } else if (tokenPrice.tokenPer1k == 0) {\n            return getPriceFromAMM(token, inAmount);\n        }\n\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\n            getPriceFromAMM(token, inAmount);\n        }\n\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\n    }\n\n    function getPriceFromAMM(address token, uint256 inAmount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n\n            if (\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\n                outAmount < UPDATE_MAX_PEG_AMOUNT\n            ) {\n                setPriceVal(tokenPrice, inAmount, outAmount);\n            }\n\n            return outAmount;\n        }\n    }\n\n    function setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        _setPriceVal(tokenPrice, inAmount, outAmount, UPDATE_RATE_PERMIL);\n        tokenPrice.blockLastUpdated = block.number;\n    }\n\n    function _setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount,\n        uint256 weightPerMil\n    ) internal {\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\n        tokenPrice.tokenPer1k =\n            (tokenPrice.tokenPer1k *\n                (1000 - weightPerMil) +\n                updatePer1k *\n                weightPerMil) /\n            1000;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-04-marginswap#h-03-price-feed-can-be-manipulated",
                "Location": "PriceAware.getCurrentPriceInPeg(token, inAmount, forceCurBlock=true)",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.Anyone can trigger an update to the price feed by calling PriceAware.getCurrentPriceInPeg(token, inAmount, forceCurBlock=true). If the update window has passed, the price will be computed by simulating a Uniswap-like trade with the amounts. This simulation uses the reserves of the Uniswap pairs which can be changed drastically using flash loans to yield almost arbitrary output amounts, and thus prices. Wrong prices break the core functionality of the contracts such as borrowing on margin, liquidations, etc.",
                "Repair": "Recommend against using the Uniswap spot price as the real price. Uniswap itself warns against this and instead recommends implementing a TWAP price oracle using the price*CumulativeLast variables."
            }
        ]
    },
    {
        "Code": "pragma solidity ^0.8.0;\nimport \"./lib/LibMath.sol\";\nimport \"./lib/LibPrices.sol\";\nimport \"./Interfaces/IPricing.sol\";\nimport \"./Interfaces/ITracerPerpetualSwaps.sol\";\nimport \"./Interfaces/IInsurance.sol\";\nimport \"./Interfaces/IOracle.sol\";\nimport \"prb-math/contracts/PRBMathSD59x18.sol\";\ncontract Pricing is IPricing {\n    using LibMath for uint256;\n    using LibMath for int256;\n    using PRBMathSD59x18 for int256;\n    address public tracer;\n    IInsurance public insurance;\n    IOracle public oracle;\n    Prices.PriceInstant[24] internal hourlyTracerPrices;\n    Prices.PriceInstant[24] internal hourlyOraclePrices;\n    mapping(uint256 => Prices.FundingRateInstant) public fundingRates;\n    mapping(uint256 => Prices.FundingRateInstant) public insuranceFundingRates;\n    int256 public override timeValue;\n    uint256 public override currentFundingIndex;\n    uint256 public startLastHour;\n    uint256 public startLast24Hours;\n    uint8 public override currentHour;\n    event HourlyPriceUpdated(uint256 price, uint256 currentHour);\n    event FundingRateUpdated(int256 fundingRate, int256 cumulativeFundingRate);\n    event InsuranceFundingRateUpdated(int256 insuranceFundingRate, int256 insuranceFundingRateValue);\n    constructor(\n        address _tracer,\n        address _insurance,\n        address _oracle\n    ) {\n        tracer = _tracer;\n        insurance = IInsurance(_insurance);\n        oracle = IOracle(_oracle);\n        startLastHour = block.timestamp;\n        startLast24Hours = block.timestamp;\n    }\n    function recordTrade(uint256 tradePrice) external override onlyTracer {\n        uint256 currentOraclePrice = oracle.latestAnswer();\n        if (startLastHour <= block.timestamp - 1 hours) {\n            uint256 hourlyTracerPrice = getHourlyAvgTracerPrice(currentHour);\n            emit HourlyPriceUpdated(hourlyTracerPrice, currentHour);\n            updateFundingRate();\n            if (startLast24Hours <= block.timestamp - 24 hours) {\n                updateTimeValue();\n                startLast24Hours = block.timestamp;\n            }\n            startLastHour = block.timestamp;\n            if (currentHour == 23) {\n                currentHour = 0;\n            } else {\n                currentHour = currentHour + 1;\n            }\n            updatePrice(tradePrice, currentOraclePrice, true);\n        } else {\n            updatePrice(tradePrice, currentOraclePrice, false);\n        }\n    }\n    function updateTimeValue() internal {\n        (uint256 avgPrice, uint256 oracleAvgPrice) = get24HourPrices();\n\n        timeValue += Prices.timeValue(avgPrice, oracleAvgPrice);\n    }\n\n    function setInsuranceFundingRate(int256 fundingRate, int256 cumulativeFundingRate) internal {\n        insuranceFundingRates[currentFundingIndex] = Prices.FundingRateInstant(\n            block.timestamp,\n            fundingRate,\n            cumulativeFundingRate\n        );\n    }\n    function getTWAPs(uint256 hour) public view override returns (Prices.TWAP memory) {\n        return Prices.calculateTWAP(hour, hourlyTracerPrices, hourlyOraclePrices);\n    }\n\n    function get24HourPrices() public view override returns (uint256, uint256) {\n        return (Prices.averagePriceForPeriod(hourlyTracerPrices), Prices.averagePriceForPeriod(hourlyOraclePrices));\n    }\n\n    function getHourlyAvgTracerPrice(uint256 hour) public view override returns (uint256) {\n        return Prices.averagePrice(hourlyTracerPrices[hour]);\n    }\n    modifier onlyTracer() {\n        require(msg.sender == tracer, \"PRC: Only Tracer\");\n        _;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-06-tracer#h-01-wrong-trading-pricing-calculations",
                "Location": "recordTrade function. Pricing.sol#L129",
                "Type": "Price oracle manipulation",
                "Description": "Non-AMM price oracle manipulation..In the Pricing contract, an agent can manipulate the trading prices by spamming a high amount of trades. Indeed an agent can create a high amount of orders at an arbitrary price and with a near-zero amount (so the agent doesn\u2019t even need large funds); next he/she pairs the orders with another account and calls Trader.executeTrade; now every order calls a Pricing.recordTrade using the arbitrary price set by the agent. Since the trades are all made in the same hour, by the way hourlyTracerPrices[currentHour] is calculated, it skews the average price towards the price set by the agent. This arbitrary value is used to calculate the fundingRates and the fairPrice, allowing a malicious agent the ability to manipulate the market.",
                "Repair": "Recommend passing the fillAmount parameter to recordTrade(...), and calculate hourlyTracerPrices[currentHour].trades summing fillAmount instead of 1 every trade."
            }
        ]
    },
    {
        "Code": "pragma solidity 0.8.3;\nimport \"./Pool.sol\";  \nimport \"./interfaces/iPOOLFACTORY.sol\";\ncontract Synth is iBEP20 {\n    address public BASE;\n    address public LayerONE; \n    uint public genesis;\n    address public DEPLOYER;\n    string _name; string _symbol;\n    uint8 public override decimals; uint256 public override totalSupply;\n    mapping(address => uint) private _balances;\n    mapping(address => mapping(address => uint)) private _allowances;\n    mapping(address => uint) public mapSynth_LPBalance;\n    mapping(address => uint) public mapSynth_LPDebt;\n    function _DAO() internal view returns(iDAO) {\n        return iBASE(BASE).DAO();\n    }\n    modifier onlyDAO() {\n        require(msg.sender == DEPLOYER, \"!DAO\");\n        _;\n    }\n    modifier onlyPool() {\n        require(iPOOLFACTORY(_DAO().POOLFACTORY()).isCuratedPool(msg.sender) == true, \"!curated\");\n        _;\n    }\n    constructor (address _base, address _token) {\n        BASE = _base;\n        LayerONE = _token;\n        string memory synthName = \"-SpartanProtocolSynthetic\";\n        string memory synthSymbol = \"-SPS\";\n        _name = string(abi.encodePacked(iBEP20(_token).name(), synthName));\n        _symbol = string(abi.encodePacked(iBEP20(_token).symbol(), synthSymbol));\n        decimals = iBEP20(_token).decimals();\n        DEPLOYER = msg.sender;\n        genesis = block.timestamp;\n    }\n    function mintSynth(address member, uint amount) external onlyPool returns (uint syntheticAmount){\n        uint lpUnits = _getAddedLPAmount(msg.sender); // Get the received LP units\n        mapSynth_LPDebt[msg.sender] += amount; // Increase debt by synth amount\n        mapSynth_LPBalance[msg.sender] += lpUnits; // Increase lp balance by LPs received\n        _mint(member, amount); // Mint the synths & tsf to user\n        return amount;\n    }\n    function burnSynth() external returns (bool){\n        uint _syntheticAmount = balanceOf(address(this)); \n        uint _amountUnits = (_syntheticAmount * mapSynth_LPBalance[msg.sender]) / mapSynth_LPDebt[msg.sender]; \n        mapSynth_LPBalance[msg.sender] -= _amountUnits; \n        mapSynth_LPDebt[msg.sender] -= _syntheticAmount; \n        if(_amountUnits > 0){\n            _burn(address(this), _syntheticAmount); \n            Pool(msg.sender).burn(_amountUnits); \n        }\n        return true;\n    }\n    function realise(address pool) external {\n        uint baseValueLP = iUTILS(_DAO().UTILS()).calcLiquidityHoldings(mapSynth_LPBalance[pool], BASE, pool); \n        uint baseValueSynth = iUTILS(_DAO().UTILS()).calcActualSynthUnits(mapSynth_LPDebt[pool], address(this));\n        if(baseValueLP > baseValueSynth){\n            uint premium = baseValueLP - baseValueSynth; \n            if(premium > 10**18){\n                uint premiumLP = iUTILS(_DAO().UTILS()).calcLiquidityUnitsAsym(premium, pool); \n                mapSynth_LPBalance[pool] -= premiumLP; \n                Pool(pool).burn(premiumLP); \n            }\n        }\n    }\n    function _handleTransferIn(address _token, uint256 _amount) internal returns(uint256 _actual){\n        if(_amount > 0) {\n            uint startBal = iBEP20(_token).balanceOf(address(this)); \n            iBEP20(_token).transferFrom(msg.sender, address(this), _amount); \n            _actual = iBEP20(_token).balanceOf(address(this)) - startBal; \n        }\n        return _actual;\n    }\n    function _getAddedLPAmount(address _pool) internal view returns(uint256 _actual){\n        uint _lpCollateralBalance = iBEP20(_pool).balanceOf(address(this)); \n        if(_lpCollateralBalance > mapSynth_LPBalance[_pool]){\n            _actual = _lpCollateralBalance - mapSynth_LPBalance[_pool];\n        } else {\n            _actual = 0;\n        }\n        return _actual;\n    }\n    function getmapAddress_LPBalance(address pool) external view returns (uint){\n        return mapSynth_LPBalance[pool];\n    }\n    function getmapAddress_LPDebt(address pool) external view returns (uint){\n        return mapSynth_LPDebt[pool];\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-07-spartan#h-05-synth-realise-is-vulnerable-to-flash-loan-attacks",
                "Location": "realise fucntion",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.Synth realise function calculates baseValueLP and baseValueSynth base on AMM spot price which is vulnerable to flash loan attack. Synth\u2019s lp is subject to realise whenever the AMM ratio is different than Synth\u2019s debt ratio. The attack does not necessarily require a flash loan. A big whale of the lp token holders could keep calling realise by shifting token ratio of AMM pool back and forth. The vulnerability is located at Synth.sol L187-L199. Where the formula here is dangerous.",
                "Repair": "There are a few steps that might solve the issue: calculate token\u2019s price from a reliable source. Implement a TWAP oracle or uses chainlink oracle. calculate lp token value based on anti-flashloan formula. Alpha finance\u2019s formula is a good reference: https://blog.alphafinance.io/fair-lp-token-pricing"
            }
        ]
    },
    {
        "Code": "pragma solidity 0.8.3;\nimport \"./interfaces/iBEP20.sol\";\nimport \"./interfaces/iDAO.sol\";\nimport \"./interfaces/iBASE.sol\";\nimport \"./interfaces/iPOOL.sol\";\nimport \"./interfaces/iSYNTH.sol\";\nimport \"./interfaces/iUTILS.sol\";\nimport \"./interfaces/iRESERVE.sol\";\nimport \"./interfaces/iSYNTHFACTORY.sol\";\nimport \"./interfaces/iPOOLFACTORY.sol\";\ncontract SynthVault {\n    address public BASE;\n    address public DEPLOYER;\n    uint256 public minimumDepositTime; \n    uint256 public totalWeight;        \n    uint256 public erasToEarn;         \n    uint256 public vaultClaim;         \n    address [] public stakedSynthAssets; \n    uint private lastMonth;             \n    uint public genesis; \n    uint256 public map30DVaultRevenue;\n    uint256 public mapPast30DVaultRevenue; \n    uint256 [] public revenueArray; \n    modifier onlyDAO() {\n        require(msg.sender == _DAO().DAO() || msg.sender == DEPLOYER);\n        _;\n    }\n    constructor(address _base) {\n        BASE = _base;\n        DEPLOYER = msg.sender;\n        erasToEarn = 30;\n        minimumDepositTime = 3600; \n        vaultClaim = 1000;\n        genesis = block.timestamp;\n        lastMonth = 0;\n    }\n    function _DAO() internal view returns(iDAO) {\n        return iBASE(BASE).DAO();\n    }\n    mapping(address => mapping(address => uint256)) private mapMemberSynth_weight;\n    mapping(address => uint256) private mapMemberTotal_weight;\n    mapping(address => mapping(address => uint256)) private mapMemberSynth_deposit;\n    mapping(address => mapping(address => uint256)) private mapMemberSynth_lastTime;\n    mapping(address => uint256) private mapMember_depositTime;\n    mapping(address => uint256) public lastBlock;\n    mapping(address => bool) private isStakedSynth;\n    mapping(address => mapping(address => bool)) private isSynthMember;\n    event MemberDeposits(\n        address indexed synth,\n        address indexed member,\n        uint256 newDeposit,\n        uint256 weight,\n        uint256 totalWeight\n    );\n    event MemberWithdraws(\n        address indexed synth,\n        address indexed member,\n        uint256 amount,\n        uint256 weight,\n        uint256 totalWeight\n    );\n    event MemberHarvests(\n        address indexed synth,\n        address indexed member,\n        uint256 amount,\n        uint256 weight,\n        uint256 totalWeight\n    );\n    function deposit(address synth, uint256 amount) external {\n        depositForMember(synth, msg.sender, amount);\n    }\n    function depositForMember(address synth, address member, uint256 amount) public {\n        require(iSYNTHFACTORY(_DAO().SYNTHFACTORY()).isSynth(synth), \"!synth\"); // Must be a valid synth\n        require(iBEP20(synth).transferFrom(msg.sender, address(this), amount)); // Must successfuly transfer in\n        _deposit(synth, member, amount); // Assess and record the deposit\n    }\n\n    function _deposit(address _synth, address _member, uint256 _amount) internal {\n        if(!isStakedSynth[_synth]){\n            isStakedSynth[_synth] = true; // Record as a staked synth\n            stakedSynthAssets.push(_synth); // Add to staked synth array\n        }\n        mapMemberSynth_lastTime[_member][_synth] = block.timestamp + minimumDepositTime; // Record deposit time (scope: member -> synth)\n        mapMember_depositTime[_member] = block.timestamp + minimumDepositTime; // Record deposit time (scope: member)\n        mapMemberSynth_deposit[_member][_synth] += _amount; // Record balance for member\n        uint256 _weight = iUTILS(_DAO().UTILS()).calcSpotValueInBase(iSYNTH(_synth).LayerONE(), _amount); // Get the SPARTA weight of the deposit\n        mapMemberSynth_weight[_member][_synth] += _weight; // Add the weight to the user (scope: member -> synth)\n        mapMemberTotal_weight[_member] += _weight; // Add to the user's total weight (scope: member)\n        totalWeight += _weight; // Add to the total weight (scope: vault)\n        isSynthMember[_member][_synth] = true; // Record user as a member\n        emit MemberDeposits(_synth, _member, _amount, _weight, totalWeight);\n    }\n    function harvestAll() external returns (bool) {\n        for(uint i = 0; i < stakedSynthAssets.length; i++){\n            if((block.timestamp > mapMemberSynth_lastTime[msg.sender][stakedSynthAssets[i]])){\n                uint256 reward = calcCurrentReward(stakedSynthAssets[i], msg.sender);\n                if(reward > 0){\n                    harvestSingle(stakedSynthAssets[i]);\n                }\n            }\n            \n        }\n        return true;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-07-spartan#h-06-synthvault-rewards-can-be-gamed",
                "Location": "SynthVault._deposit",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The SynthVault._deposit function adds weight for the user that depends on the spot value of the deposit synth amount in BASE. This spot price can be manipulated and the cost of manipulation is relative to the pool\u2019s liquidity. However, the reward (see calcReward) is measured in BASE tokens unrelated to the pool. Therefore, if the pool\u2019s liquidity is low and the reward reserve is high, the attack can be profitable: Manipulate the pool spot price of the iSYNTH(_synth).LayerONE() pool by dripping a lot of BASE into it repeatedly (sending lots of smaller trades is less costly due to the path-independence of the continuous liquidity model). This increases the BASE per token price. Call SynthVault.depositForMember and deposit a small amount of synth token. The iUTILS(_DAO().UTILS()).calcSpotValueInBase(iSYNTH(_synth).LayerONE(), _amount) will return an inflated weight due to the price. Optionally drip more BASE into the pool and repeat the deposits Drip back token to the pool to rebalance it The user\u2019s weight is now inflated compared to the deposited / locked-up amount and they can claim a large share of the rewards. The cost of the attack depends on the pool\u2019s liquidity and the profit depends on the reserve. It could therefore be profitable under certain circumstances.",
                "Repair": "Recommend tracking a TWAP price of the synth instead, store the deposited synths instead, and compute the weight & total weight on the fly based on the TWAP * deposit amount instead of at the time of deposit."
            }
        ]
    },
    {
        "Code": "pragma solidity 0.8.3;\ncontract Pool is iBEP20 {  \n    address public BASE;\n    address public TOKEN;\n    address public DEPLOYER;\n    string _name; string _symbol;\n    uint8 public override decimals; uint256 public override totalSupply;\n    mapping(address => uint) private _balances;\n    mapping(address => mapping(address => uint)) private _allowances;\n    uint256 public baseAmount; \n    uint256 public tokenAmount; \n    uint private lastMonth; \n    uint public genesis; \n    uint256 public map30DPoolRevenue;\n    uint256 public mapPast30DPoolRevenue;\n    uint256 [] public revenueArray; \n    function _DAO() internal view returns(iDAO) {\n        return iBASE(BASE).DAO();\n    }\n\n    constructor (address _base, address _token) {\n        BASE = _base;\n        TOKEN = _token;\n        string memory poolName = \"-SpartanProtocolPool\";\n        string memory poolSymbol = \"-SPP\";\n        _name = string(abi.encodePacked(iBEP20(_token).name(), poolName));\n        _symbol = string(abi.encodePacked(iBEP20(_token).symbol(), poolSymbol));\n        decimals = 18;\n        genesis = block.timestamp;\n        DEPLOYER = msg.sender;\n        lastMonth = 0;\n    function addForMember(address member) public returns(uint liquidityUnits){\n        uint256 _actualInputBase = _getAddedBaseAmount();\n        uint256 _actualInputToken = _getAddedTokenAmount(); \n        if(baseAmount == 0 || tokenAmount == 0){\n        require(_actualInputBase != 0 && _actualInputToken != 0, \"!Balanced\");\n        }\n        liquidityUnits = iUTILS(_DAO().UTILS()).calcLiquidityUnits(_actualInputBase, baseAmount, _actualInputToken, tokenAmount, totalSupply); // Calculate LP tokens to mint\n        _incrementPoolBalances(_actualInputBase, _actualInputToken); \n        _mint(member, liquidityUnits); // Mint the LP tokens directly to the user\n        emit AddLiquidity(member, _actualInputBase, _actualInputToken, liquidityUnits);\n        return liquidityUnits;\n    }\n    function swapTo(address token, address member) public payable returns (uint outputAmount, uint fee) {\n        require((token == BASE || token == TOKEN), \"!BASE||TOKEN\")\n        address _fromToken; uint _amount;\n        if(token == BASE){\n            _fromToken = TOKEN; \n            _amount = _getAddedTokenAmount(); \n            (outputAmount, fee) = _swapTokenToBase(_amount);\n        } else {\n            _fromToken = BASE; \n            _amount = _getAddedBaseAmount(); \n            (outputAmount, fee) = _swapBaseToToken(_amount); \n        }\n        emit Swapped(_fromToken, token, member, _amount, outputAmount, fee);\n        iBEP20(token).transfer(member, outputAmount); \n        return (outputAmount, fee);\n    }\n\n\n    function mintSynth(address synthOut, address member) external returns(uint outputAmount, uint fee) {\n        require(iSYNTHFACTORY(_DAO().SYNTHFACTORY()).isSynth(synthOut) == true, \"!synth\"); \n        uint256 _actualInputBase = _getAddedBaseAmount(); \n        uint output = iUTILS(_DAO().UTILS()).calcSwapOutput(_actualInputBase, baseAmount, tokenAmount);\n        uint _liquidityUnits = iUTILS(_DAO().UTILS()).calcLiquidityUnitsAsym(_actualInputBase, address(this)); \n        _incrementPoolBalances(_actualInputBase, 0);\n        uint _fee = iUTILS(_DAO().UTILS()).calcSwapFee(_actualInputBase, baseAmount, tokenAmount); \n        fee = iUTILS(_DAO().UTILS()).calcSpotValueInBase(TOKEN, _fee);\n        _mint(synthOut, _liquidityUnits); \n        iSYNTH(synthOut).mintSynth(member, output); \n        _addPoolMetrics(fee); \n        emit MintSynth(member, BASE, _actualInputBase, TOKEN, outputAmount);\n      return (output, fee);\n    }\n    \n    function burnSynth(address synthIN, address member) external returns(uint outputAmount, uint fee) {\n        require(iSYNTHFACTORY(_DAO().SYNTHFACTORY()).isSynth(synthIN) == true, \"!synth\"); \n        uint _actualInputSynth = iBEP20(synthIN).balanceOf(address(this)); \n        uint outputBase = iUTILS(_DAO().UTILS()).calcSwapOutput(_actualInputSynth, tokenAmount, baseAmount); \n        fee = iUTILS(_DAO().UTILS()).calcSwapFee(_actualInputSynth, tokenAmount, baseAmount);\n        iBEP20(synthIN).transfer(synthIN, _actualInputSynth); \n        iSYNTH(synthIN).burnSynth(); \n        _decrementPoolBalances(outputBase, 0); \n        iBEP20(BASE).transfer(member, outputBase); \n        _addPoolMetrics(fee);\n        emit BurnSynth(member, BASE, outputBase, TOKEN, _actualInputSynth);\n      return (outputBase, fee);\n    }\n    function _getAddedBaseAmount() internal view returns(uint256 _actual){\n        uint _baseBalance = iBEP20(BASE).balanceOf(address(this)); \n        if(_baseBalance > baseAmount){\n            _actual = _baseBalance-(baseAmount);\n        } else {\n            _actual = 0;\n        }\n        return _actual;\n    }\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-07-spartan#h-07-missing-slippage-checks",
                "Location": "Missing slippage checks",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.There are no minimum amounts out, or checks that frontrunning/slippage is sufficiently mitigated. This means that anyone with enough capital can force arbitrarily large slippage by sandwiching transactions, close to 100%. See issue page for referenced code.",
                "Repair": "Recommend adding a minimum amount out parameter. The function reverts if the minimum amount isn\u2019t obtained."
            }
        ]
    },
    {
        "Code": "pragma solidity 0.8.3;\ncontract Utils {\n    address public BASE;\n    uint public one = 10**18;\n\n    constructor (address _base) {\n        BASE = _base;\n    }\n\n    struct PoolDataStruct {\n        address tokenAddress;\n        address poolAddress;\n        uint genesis;\n        uint baseAmount;\n        uint tokenAmount;\n        uint fees;\n        uint volume;\n        uint txCount;\n        uint poolUnits;\n    }\n\n    function _DAO() internal view returns(iDAO) {\n        return iBASE(BASE).DAO();\n    }\n    function getPoolShareWeight(address token, uint units) external view returns(uint weight){\n        address pool = getPool(token);\n        weight = calcShare(units, iBEP20(pool).totalSupply(), iPOOL(pool).baseAmount());\n        return (weight);\n    }\n    function getPool(address token) public view returns(address pool){\n        return iPOOLFACTORY(_DAO().POOLFACTORY()).getPool(token);\n    }\n    function getFeeOnTransfer(uint256 totalSupply, uint256 maxSupply) external pure returns (uint256) {\n        return calcShare(totalSupply, maxSupply, 100); // 0 -> 100bp\n    }\n\n    function calcPart(uint256 bp, uint256 total) external pure returns (uint256) {\n        require(bp <= 10000, \"!bp\");\n        return calcShare(bp, 10000, total);\n    }\n\n    function calcShare(uint256 part, uint256 total, uint256 amount) public pure returns (uint256 share) {\n        if (part > total) {\n            part = total; \n        }\n        if (total > 0) {\n            share = (amount * part) / total;\n        }\n    }\n\n    function calcLiquidityUnits(uint b, uint B, uint t, uint T, uint P) external view returns (uint units){\n        if(P == 0){\n            return b; \n        } else {\n            uint slipAdjustment = getSlipAdustment(b, B, t, T);\n            uint part1 = t*(B);\n            uint part2 = T*(b);\n            uint part3 = T*(B)*(2);\n            uint _units = (P * (part1 + (part2))) \n            return _units * slipAdjustment / one;  \n        }\n    }\n    function getSlipAdustment(uint b, uint B, uint t, uint T) public view returns (uint slipAdjustment){\n        uint part1 = B * (t);\n        uint part2 = b * (T);\n        uint part3 = b * (2) + (B);\n        uint part4 = t + (T);\n        uint numerator;\n        if(part1 > part2){\n            numerator = part1 - (part2);\n        } else {\n            numerator = part2 - (part1);\n        }\n        uint denominator = part3 * (part4);\n        return one - ((numerator * (one)) / (denominator)); \n    }\n    function calcLiquidityHoldings(uint units, address token, address pool) external view returns (uint share){\n        uint amount;\n        if(token == BASE){\n            amount = iPOOL(pool).baseAmount();\n        } else {\n            amount = iPOOL(pool).tokenAmount();\n        }\n        uint totalSupply = iBEP20(pool).totalSupply();\n        return(amount*(units))/(totalSupply);\n    }\n    function calcSwapOutput(uint x, uint X, uint Y) public pure returns (uint output){\n       \n        uint numerator = x * (X * (Y));\n        uint denominator = (x + (X)) * (x + (X));\n        return numerator / (denominator);\n    }\n    function calcSwapFee(uint x, uint X, uint Y) external pure returns (uint output){\n        uint numerator = x * (x * (Y));\n        uint denominator = (x + (X)) * (x + (X));\n        return numerator / (denominator);\n    }\n    function calcAsymmetricValueToken(address pool, uint amount) external view returns (uint tokenValue){\n        uint baseAmount = calcShare(amount, iBEP20(pool).totalSupply(), iPOOL(pool).baseAmount());\n        uint tokenAmount = calcShare(amount, iBEP20(pool).totalSupply(), iPOOL(pool).tokenAmount());\n        uint baseSwapped = calcSwapValueInTokenWithPool(pool, baseAmount);\n        tokenValue = tokenAmount + baseSwapped;\n        return tokenValue;\n    }\n    function calcLiquidityUnitsAsym(uint amount, address pool) external view returns (uint units){\n        uint baseAmount = iPOOL(pool).baseAmount();\n        uint totalSupply = iBEP20(pool).totalSupply();\n        uint two = 2;\n        return (totalSupply * amount) / (two * (amount + baseAmount));\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-07-spartan#h-13-flash-loan-manipulation-on-getpoolshareweight-of-utils",
                "Location": "getPoolShareWeight function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The getPoolShareWeight function returns a user\u2019s pool share weight by calculating how many SPARTAN the user\u2019s LP tokens account for. However, this approach is vulnerable to flash loan manipulation since an attacker can swap a large number of TOKEN to SPARTAN to increase the number of SPARTAN in the pool, thus effectively increasing his pool share weight. According to the implementation of getPoolShareWeight, a user\u2019s pool share weight is calculated by uints * baseAmount / totalSupply, where uints is the number of user\u2019s LP tokens, totalSupply is the total supply of LP tokens, and baseAmount is the number of SPARTAN in the pool. Thus, a user\u2019s pool share weight is proportional to the number of SPARTAN in the pool.",
                "Repair": "Recommended mitigation has been included in contributors ongoing discussions to make this more resistant to manipulation"
            }
        ]
    },
    {
        "Code": "pragma solidity >0.7.0;\npragma experimental ABIEncoderV2;\nlibrary AssetHandler {\n    using SafeMath for uint256;\n    using SafeInt256 for int256;\n    using CashGroup for CashGroupParameters;\n    using AssetRate for AssetRateParameters;\n\n    function isLiquidityToken(uint256 assetType) internal pure returns (bool) {\n        return\n            assetType >= Constants.MIN_LIQUIDITY_TOKEN_INDEX &&\n            assetType <= Constants.MAX_LIQUIDITY_TOKEN_INDEX;\n    }\n    function getSettlementDate(PortfolioAsset memory asset) internal pure returns (uint256) {\n        require(asset.assetType > 0 && asset.assetType <= Constants.MAX_LIQUIDITY_TOKEN_INDEX);\n\n        if (asset.assetType <= Constants.MIN_LIQUIDITY_TOKEN_INDEX) return asset.maturity;\n\n        uint256 marketLength = DateTime.getTradedMarket(asset.assetType - 1);\n   \n        return asset.maturity.sub(marketLength).add(Constants.QUARTER);\n    }\n    function getCashClaims(PortfolioAsset memory token, MarketParameters memory market)\n        internal\n        pure\n        returns (int256 assetCash, int256 fCash)\n    {\n        require(isLiquidityToken(token.assetType) && token.notional >= 0); \n\n        assetCash = market.totalAssetCash.mul(token.notional).div(market.totalLiquidity);\n        fCash = market.totalfCash.mul(token.notional).div(market.totalLiquidity);\n    }\n    function getHaircutCashClaims(\n        PortfolioAsset memory token,\n        MarketParameters memory market,\n        CashGroupParameters memory cashGroup\n    ) internal pure returns (int256, int256) {\n        require(isLiquidityToken(token.assetType) && token.notional >= 0);\n\n        require(token.currencyId == cashGroup.currencyId); \n\n        int256 haircut = int256(cashGroup.getLiquidityHaircut(token.assetType));\n\n        int256 assetCash =\n            _calcToken(market.totalAssetCash, token.notional, haircut, market.totalLiquidity);\n\n        int256 fCash =\n            _calcToken(market.totalfCash, token.notional, haircut, market.totalLiquidity);\n\n        return (assetCash, fCash);\n    }\n    function getLiquidityTokenValue(\n        uint256 index,\n        CashGroupParameters memory cashGroup,\n        MarketParameters memory market,\n        PortfolioAsset[] memory assets,\n        uint256 blockTime,\n        bool riskAdjusted\n    ) internal view returns (int256, int256) {\n        PortfolioAsset memory liquidityToken = assets[index];\n        require(isLiquidityToken(liquidityToken.assetType) && liquidityToken.notional >= 0); \n\n        {\n            (uint256 marketIndex, bool idiosyncratic) =\n                DateTime.getMarketIndex(\n                    cashGroup.maxMarketIndex,\n                    liquidityToken.maturity,\n                    blockTime\n                );\n            require(!idiosyncratic);\n\n           \n            cashGroup.loadMarket(market, marketIndex, true, blockTime);\n        }\n\n        int256 assetCashClaim;\n        int256 fCashClaim;\n        if (riskAdjusted) {\n            (assetCashClaim, fCashClaim) = getHaircutCashClaims(liquidityToken, market, cashGroup);\n        } else {\n            (assetCashClaim, fCashClaim) = getCashClaims(liquidityToken, market);\n        }\n        if (\n            index > 0 &&\n            assets[index - 1].currencyId == liquidityToken.currencyId &&\n            assets[index - 1].maturity == liquidityToken.maturity &&\n            assets[index - 1].assetType == Constants.FCASH_ASSET_TYPE\n        ) {\n            assets[index - 1].notional = assets[index - 1].notional.add(fCashClaim);\n            return (assetCashClaim, 0);\n        }\n\n      \n        if (riskAdjusted) {\n            int256 pv =\n                getRiskAdjustedPresentValue(\n                    cashGroup,\n                    fCashClaim,\n                    liquidityToken.maturity,\n                    blockTime,\n                    market.oracleRate\n                );\n\n            return (assetCashClaim, pv);\n        } else {\n            int256 pv =\n                getPresentValue(fCashClaim, liquidityToken.maturity, blockTime, market.oracleRate);\n\n            return (assetCashClaim, pv);\n        }\n    }\n\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-08-notional#h-10-liquidity-token-value-can-be-manipulated",
                "Location": "// @audit token.notional are the LP tokens to redeem\r\nassetCash = market.totalAssetCash.mul(token.notional).div(market.totalLiquidity);\r\nfCash = market.totalfCash.mul(token.notional).div(market.totalLiquidity);",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The liquidity token value (AssetHandler.getLiquidityTokenValue) is the sum of the value of the individual claims on cash (underlying or rather cTokens) and fCash. The amount to redeem on each of these is computed as the LP token to redeem relative to the total LP tokens, see AssetHandler.getCashClaims / AssetHandler.getHaircutCashClaims.This means the value depends on the current market reserves which can be manipulated. You\u2019re essentially computing a spot price (even though the individual values use a TWAP price) because you use the current market reserves which can be manipulated.",
                "Repair": "Recommend not using the current market reserves to determine the value of LP tokens. Also, think about how to implement a TWAP oracle for the LP tokens themselves, instead of combining it from the two TWAPs of the claimables."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./BasePoolV2.sol\";\nimport \"../../interfaces/shared/IERC20Extended.sol\";\nimport \"../../interfaces/dex-v2/pool/IVaderPoolV2.sol\";\nimport \"../../interfaces/dex-v2/wrapper/ILPWrapper.sol\";\nimport \"../../interfaces/dex-v2/synth/ISynthFactory.sol\";\n\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n    bool public queueActive;\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n    function cumulativePrices(IERC20 foreignAsset)\n        public\n        view\n        returns (\n            uint256 price0CumulativeLast,\n            uint256 price1CumulativeLast,\n            uint32 blockTimestampLast\n        )\n    {\n        PriceCumulative memory priceCumulative = pairInfo[foreignAsset]\n            .priceCumulative;\n        price0CumulativeLast = priceCumulative.nativeLast;\n        price1CumulativeLast = priceCumulative.foreignLast;\n        blockTimestampLast = pairInfo[foreignAsset].blockTimestampLast;\n    }\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n\n    function mintSynth(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        address from,\n        address to\n    )\n        external\n        override\n        nonReentrant\n        supportedToken(foreignAsset)\n        returns (uint256 amountSynth)\n    {\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n\n        ISynth synth = synthFactory.synths(foreignAsset);\n\n        if (synth == ISynth(_ZERO_ADDRESS))\n            synth = synthFactory.createSynth(\n                IERC20Extended(address(foreignAsset))\n            );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); \n\n        amountSynth = VaderMath.calculateSwap(\n            nativeDeposit,\n            reserveNative,\n            reserveForeign\n        );\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign,\n            reserveNative,\n            reserveForeign\n        );\n\n        synth.mint(to, amountSynth);\n    }\n    function setTokenSupport(IERC20 foreignAsset, bool support)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            supported[foreignAsset] != support,\n            \"VaderPoolV2::supportToken: Already At Desired State\"\n        );\n        supported[foreignAsset] = support;\n    }\n    function setFungibleTokenSupport(IERC20 foreignAsset)\n        external\n        override\n        onlyOwner\n    {\n        wrapper.createWrapper(foreignAsset);\n    }\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-01-minting-and-burning-synths-exposes-users-to-unlimited-slippage",
                "Location": "mintSynth function",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.Here a user sends nativeDeposit to the pool and the equivalent amount of foreignAsset is minted as a synth to be sent to the user. However the user can\u2019t specify the minimum amount of synth that they would accept. A frontrunner can then manipulate the reserves of the pool in order to make foreignAsset appear more valuable than it really is so the user receives synths which are worth much less than what nativeDeposit is worth. This is equivalent to a swap without a slippage limit. Burning synths essentially runs the same process in behalf so manipulating the pool in the opposite direction will result in the user getting fewer of nativeAsset than they expect.",
                "Repair": "Add a argument for the minimum amount of synths to mint or nativeAsset to receive."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./BasePoolV2.sol\";\nimport \"../../interfaces/shared/IERC20Extended.sol\";\nimport \"../../interfaces/dex-v2/pool/IVaderPoolV2.sol\";\nimport \"../../interfaces/dex-v2/wrapper/ILPWrapper.sol\";\nimport \"../../interfaces/dex-v2/synth/ISynthFactory.sol\";\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n    bool public queueActive;\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n    function cumulativePrices(IERC20 foreignAsset)\n        public\n        view\n        returns (\n            uint256 price0CumulativeLast,\n            uint256 price1CumulativeLast,\n            uint32 blockTimestampLast\n        )\n    {\n        PriceCumulative memory priceCumulative = pairInfo[foreignAsset]\n            .priceCumulative;\n        price0CumulativeLast = priceCumulative.nativeLast;\n        price1CumulativeLast = priceCumulative.foreignLast;\n        blockTimestampLast = pairInfo[foreignAsset].blockTimestampLast;\n    }\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n    function mintSynth(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        address from,\n        address to\n    )\n        external\n        override\n        nonReentrant\n        supportedToken(foreignAsset)\n        returns (uint256 amountSynth)\n    {\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n\n        ISynth synth = synthFactory.synths(foreignAsset);\n\n        if (synth == ISynth(_ZERO_ADDRESS))\n            synth = synthFactory.createSynth(\n                IERC20Extended(address(foreignAsset))\n            );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); \n\n        amountSynth = VaderMath.calculateSwap(\n            nativeDeposit,\n            reserveNative,\n            reserveForeign\n        );\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign,\n            reserveNative,\n            reserveForeign\n        );\n\n        synth.mint(to, amountSynth);\n    }\n    function toggleQueue() external override onlyOwner {\n        bool _queueActive = !queueActive;\n        queueActive = _queueActive;\n        emit QueueActive(_queueActive);\n    }\n\n    function setTokenSupport(IERC20 foreignAsset, bool support)\n        external\n        override\n        onlyOwner\n    {\n        require(\n            supported[foreignAsset] != support,\n            \"VaderPoolV2::supportToken: Already At Desired State\"\n        );\n        supported[foreignAsset] = support;\n    }\n\n    function setFungibleTokenSupport(IERC20 foreignAsset)\n        external\n        override\n        onlyOwner\n    {\n        wrapper.createWrapper(foreignAsset);\n    }\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-02-redemption-value-of-synths-can-be-manipulated-to-drain-vaderpool-of-all-native-assets",
                "Location": "mintSynth function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.As the pool\u2019s reserves can be manipulated through flashloans similar to on UniswapV2, an attacker may set the exchange rate between nativeAsset and synths (calculated from the reserves). An attacker can exploit this to drain funds from the pool. The attacker first flashloans and sells a huge amount of foreignAsset to the pool. The pool now thinks nativeAsset is extremely valuable. The attacker now uses a relatively small amount of nativeAsset to mint synths using VaderPool.mintSynth. As the pool thinks nativeAsset is very valuable the attacker will receive a huge amount of synths. The attacker can now manipulate the pool in the opposite direction by buying up the foreignAsset they sold to the pool. nativeAsset is now back at its normal price, or perhaps artificially low if the attacker wishes. The attacker now burns all of their synths. As nativeAsset is considered much less valuable than at the point the synths were minted it takes a lot more of nativeAsset in order to pay out for the burned synths. For the price of a flashloan and some swap fees, the attacker has now managed to extract a large amount of nativeAsset from the pool. This process can be repeated as long as it is profitable.",
                "Repair": "Prevent minting of synths or at the very least tie the exchange rate to a manipulation resistant oracle."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n    bool public queueActive;\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n\n    function burn(uint256 id, address to)\n        external\n        override\n        onlyRouter\n        returns (\n            uint256 amountNative,\n            uint256 amountForeign,\n            uint256 coveredLoss\n        )\n    {\n        (amountNative, amountForeign) = _burn(id, to);\n        Position storage position = positions[id];\n        uint256 creation = position.creation;\n        uint256 originalNative = position.originalNative;\n        uint256 originalForeign = position.originalForeign;\n        delete positions[id];\n        uint256 loss = VaderMath.calculateLoss(\n            originalNative,\n            originalForeign,\n            amountNative,\n            amountForeign\n        );\n        coveredLoss =\n            (loss * _min(block.timestamp - creation, _ONE_YEAR)) /\n            _ONE_YEAR;\n    }\n    function burnFungible(\n        IERC20 foreignAsset,\n        uint256 liquidity,\n        address to\n    )\n        external\n        override\n        nonReentrant\n        returns (uint256 amountNative, uint256 amountForeign)\n    {\n        IERC20Extended lp = wrapper.tokens(foreignAsset);\n\n        require(\n            lp != IERC20Extended(_ZERO_ADDRESS),\n            \"VaderPoolV2::burnFungible: Unsupported Token\"\n        );\n\n        IERC20(lp).safeTransferFrom(msg.sender, address(this), liquidity);\n        lp.burn(liquidity);\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); // gas savings\n\n        PairInfo storage pair = pairInfo[foreignAsset];\n        uint256 _totalSupply = pair.totalSupply;\n        amountNative = (liquidity * reserveNative) / _totalSupply;\n        amountForeign = (liquidity * reserveForeign) / _totalSupply;\n        require(\n            amountNative > 0 && amountForeign > 0,\n            \"VaderPoolV2::burnFungible: Insufficient Liquidity Burned\"\n        );\n        pair.totalSupply = _totalSupply - liquidity;\n\n        nativeAsset.safeTransfer(to, amountNative);\n        foreignAsset.safeTransfer(to, amountForeign);\n\n        _update(\n            foreignAsset,\n            reserveNative - amountNative,\n            reserveForeign - amountForeign,\n            reserveNative,\n            reserveForeign\n        );\n        emit Burn(msg.sender, amountNative, amountForeign, to);\n    }\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-05-lps-of-vaderpoolv2-can-manipulate-pool-reserves-to-extract-funds-from-the-reserve",
                "Location": "burn function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.we calculate the current losses that the LP has made to impermanent loss.These losses are then refunded to the LP in VADER tokens from the reserve.This loss is calculated by the current reserves of the pool so if an LP can manipulate the pool\u2019s reserves they can artificially engineer a huge amount of IL in order to qualify for a payout up to the size of their LP position.",
                "Repair": "Use a manipulation resistant oracle for the relative prices of the pool\u2019s assets (TWAP, etc.)"
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\nlibrary VaderMath {\n\n    uint256 public constant ONE = 1 ether;\n\n    function calculateLiquidityUnits(\n        uint256 vaderDeposited,\n        uint256 vaderBalance,\n        uint256 assetDeposited,\n        uint256 assetBalance,\n        uint256 totalPoolUnits\n    ) public pure returns (uint256) {\n        uint256 slip = calculateSlipAdjustment(\n            vaderDeposited,\n            vaderBalance,\n            assetDeposited,\n            assetBalance\n        );\n        uint256 poolUnitFactor = (vaderBalance * assetDeposited) +\n            (vaderDeposited * assetBalance);\n        uint256 denominator = ONE * 2 * vaderBalance * assetBalance;\n        return ((totalPoolUnits * poolUnitFactor) / denominator) * slip;\n    }\n    function calculateSlipAdjustment(\n        uint256 vaderDeposited,\n        uint256 vaderBalance,\n        uint256 assetDeposited,\n        uint256 assetBalance\n    ) public pure returns (uint256) {\n        uint256 vaderAsset = vaderBalance * assetDeposited;\n        uint256 assetVader = assetBalance * vaderDeposited;\n        uint256 denominator = (vaderDeposited + vaderBalance) *\n            (assetDeposited + assetBalance);\n        return ONE - (delta(vaderAsset, assetVader) / denominator);\n    }\n    function calculateLoss(\n        uint256 originalVader,\n        uint256 originalAsset,\n        uint256 releasedVader,\n        uint256 releasedAsset\n    ) public pure returns (uint256 loss) {\n        uint256 originalValue = ((originalAsset * releasedVader) /\n            releasedAsset) + originalVader;\n        uint256 releasedValue = ((releasedAsset * releasedVader) /\n            releasedAsset) + releasedVader;\n        if (originalValue > releasedValue) loss = originalValue - releasedValue;\n    }\n\n    function calculateSwap(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure returns (uint256 amountOut) {\n        uint256 numerator = amountIn * reserveIn * reserveOut;\n        uint256 denominator = pow(amountIn + reserveIn);\n        amountOut = numerator / denominator;\n    }\n    function calculateSwapReverse(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) public pure returns (uint256 amountIn) {\n        uint256 XY = reserveIn * reserveOut;\n        uint256 y2 = amountOut * 2;\n        uint256 y4 = y2 * 2;\n        require(\n            y4 < reserveOut,\n            \"VaderMath::calculateSwapReverse: Desired Output Exceeds Maximum Output Possible (1/4 of Liquidity Pool)\"\n        );\n        uint256 numeratorA = root(XY) * root(reserveIn * (reserveOut - y4));\n\n        uint256 numeratorB = y2 * reserveIn;\n        uint256 numeratorC = XY;\n        uint256 numerator = numeratorC - numeratorA - numeratorB;\n        uint256 denominator = y2;\n        amountIn = numerator / denominator;\n    }\n    function delta(uint256 a, uint256 b) public pure returns (uint256) {\n        return a > b ? a - b : b - a;\n    }\n    function pow(uint256 a) public pure returns (uint256) {\n        return a * a;\n    }\n    function root(uint256 a) public pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 x = a / 2 + 1;\n            while (x < c) {\n                c = x;\n                x = (a / x + x) / 2;\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-10--calculate-loss-is-vulnerable-to-flashloan-attack",
                "Location": "calculateLoss function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.The lp value is calculated as [(A0 * P1) + V0] and // [(A1 * P1) + V1]. Assume that there\u2019s an ETH pool and there\u2019s 100 ETH and 100 Vader in the pool.",
                "Repair": "Please use the fair lp pricing formula from alpha finance instead."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderRouterV2 is IVaderRouterV2, ProtocolConstants, Ownable {\n    using SafeERC20 for IERC20;\n    IVaderPoolV2 public immutable pool;\n    IERC20 public immutable nativeAsset;\n    IVaderReserve public reserve;\n    constructor(IVaderPoolV2 _pool) {\n        require(\n            _pool != IVaderPoolV2(_ZERO_ADDRESS),\n            \"VaderRouterV2::constructor: Incorrect Arguments\"\n        );\n\n        pool = _pool;\n        nativeAsset = pool.nativeAsset();\n    }\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 id,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        public\n        override\n        ensure(deadline)\n        returns (uint256 amountA, uint256 amountB)\n    {\n        IERC20 _foreignAsset = pool.positionForeignAsset(id);\n        IERC20 _nativeAsset = nativeAsset;\n\n        bool isNativeA = _nativeAsset == IERC20(tokenA);\n\n        if (isNativeA) {\n            require(\n                IERC20(tokenB) == _foreignAsset,\n                \"VaderRouterV2::removeLiquidity: Incorrect Addresses Specified\"\n            );\n        } else {\n            require(\n                IERC20(tokenA) == _foreignAsset &&\n                    IERC20(tokenB) == _nativeAsset,\n                \"VaderRouterV2::removeLiquidity: Incorrect Addresses Specified\"\n            );\n        }\n\n        pool.transferFrom(msg.sender, address(pool), id);\n\n        (\n            uint256 amountNative,\n            uint256 amountForeign,\n            uint256 coveredLoss\n        ) = pool.burn(id, to);\n\n        (amountA, amountB) = isNativeA\n            ? (amountNative, amountForeign)\n            : (amountForeign, amountNative);\n\n        require(\n            amountA >= amountAMin,\n            \"VaderRouterV2: INSUFFICIENT_A_AMOUNT\"\n        );\n        require(\n            amountB >= amountBMin,\n            \"VaderRouterV2: INSUFFICIENT_B_AMOUNT\"\n        );\n\n        reserve.reimburseImpermanentLoss(msg.sender, coveredLoss);\n    }\n    function _swap(\n        uint256 amountIn,\n        IERC20[] calldata path,\n        address to\n    ) private returns (uint256 amountOut) {\n        if (path.length == 3) {\n            require(\n                path[0] != path[1] &&\n                    path[1] == pool.nativeAsset() &&\n                    path[2] != path[1],\n                \"VaderRouterV2::_swap: Incorrect Path\"\n            );\n\n            path[0].safeTransferFrom(msg.sender, address(pool), amountIn);\n\n            return pool.doubleSwap(path[0], path[2], amountIn, to);\n        } else {\n            require(\n                path.length == 2,\n                \"VaderRouterV2::_swap: Incorrect Path Length\"\n            );\n            IERC20 _nativeAsset = nativeAsset;\n            require(path[0] != path[1], \"VaderRouterV2::_swap: Incorrect Path\");\n\n            path[0].safeTransferFrom(msg.sender, address(pool), amountIn);\n            if (path[0] == _nativeAsset) {\n                return pool.swap(path[1], amountIn, 0, to);\n            } else {\n                require(\n                    path[1] == _nativeAsset,\n                    \"VaderRouterV2::_swap: Incorrect Path\"\n                );\n                return pool.swap(path[0], 0, amountIn, to);\n            }\n        }\n    }\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"VaderRouterV2::ensure: Expired\");\n        _;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-18-attacker-can-claim-more-il-by-manipulating-pool-price-then-removeliquidity-",
                "Location": "VaderRouterV2 : reserve.reimburseImpermanentLoss(msg.sender, coveredLoss)",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.Vader reimburse user IL immediately when user withdraw from the pool (VaderRouterV2.sol:L227), an attacker can therefore manipulate the pool balance causing a high IL, remove liquidity and restore the pool balance such that he will receive a larger IL reimbursement.Let\u2019s assume our attacker own 100% of FOO-VADER Attacker add 100 FOO and 100 VADER to the Pool wait some block, or 1 year for max IL protection In 1 transaction, attacker Swap 9900 FOO to 99 Vader Pool now have 10000 FOO and 1 VADER By VaderMath.sol:L84 the loss is 100*1/10000+100-2 = 98.01 VADER Remove liquidity and receive 10000 FOO and 99.01 VADER Restore the pool balance Such that the attacker will gain 98.01 VADER without risk The profit is constrained by gas cost, pool fee, % of pool controlled by the attacker and % of IL protection.",
                "Repair": "Use twap price to determine P1 in VaderMath.sol:L84 when calculating IL to reduce risk of manipulation"
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n    bool public queueActive;\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n    function cumulativePrices(IERC20 foreignAsset)\n        public\n        view\n        returns (\n            uint256 price0CumulativeLast,\n            uint256 price1CumulativeLast,\n            uint32 blockTimestampLast\n        )\n    {\n        PriceCumulative memory priceCumulative = pairInfo[foreignAsset]\n            .priceCumulative;\n        price0CumulativeLast = priceCumulative.nativeLast;\n        price1CumulativeLast = priceCumulative.foreignLast;\n        blockTimestampLast = pairInfo[foreignAsset].blockTimestampLast;\n    }\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n    function mintSynth(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        address from,\n        address to\n    )\n        external\n        override\n        nonReentrant\n        supportedToken(foreignAsset)\n        returns (uint256 amountSynth)\n    {\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n\n        ISynth synth = synthFactory.synths(foreignAsset);\n\n        if (synth == ISynth(_ZERO_ADDRESS))\n            synth = synthFactory.createSynth(\n                IERC20Extended(address(foreignAsset))\n            );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); \n        amountSynth = VaderMath.calculateSwap(\n            nativeDeposit,\n            reserveNative,\n            reserveForeign\n        );\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign,\n            reserveNative,\n            reserveForeign\n        );\n        synth.mint(to, amountSynth);\n    }\n    function burnSynth(\n        IERC20 foreignAsset,\n        uint256 synthAmount,\n        address to\n    ) external override nonReentrant returns (uint256 amountNative) {\n        ISynth synth = synthFactory.synths(foreignAsset);\n\n        require(\n            synth != ISynth(_ZERO_ADDRESS),\n            \"VaderPoolV2::burnSynth: Inexistent Synth\"\n        );\n\n        require(\n            synthAmount > 0,\n            \"VaderPoolV2::burnSynth: Insufficient Synth Amount\"\n        );\n\n        IERC20(synth).safeTransferFrom(msg.sender, address(this), synthAmount);\n        synth.burn(synthAmount);\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); \n\n        amountNative = VaderMath.calculateSwap(\n            synthAmount,\n            reserveForeign,\n            reserveNative\n        );\n\n       \n        _update(\n            foreignAsset,\n            reserveNative - amountNative,\n            reserveForeign,\n            reserveNative,\n            reserveForeign\n        );\n\n        nativeAsset.safeTransfer(to, amountNative);\n    }\n\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-22-mintsynth-and-burnsynth-can-be-front-run",
                "Location": "mintSynth function , burnSynth function",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.Given that mintSynth() and burnSynth() will issue and redeem assets based on the price of the pool (reserves), and they will create price impact based on the volume being minted and burnt. However, the current implementation provides no parameter for slippage control, making them vulnerable to front-run attacks. Especially for transactions with rather large volumes.",
                "Repair": "Consider adding a minAmountOut parameter."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n    bool public queueActive;\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n\n    function cumulativePrices(IERC20 foreignAsset)\n        public\n        view\n        returns (\n            uint256 price0CumulativeLast,\n            uint256 price1CumulativeLast,\n            uint32 blockTimestampLast\n        )\n    {\n        PriceCumulative memory priceCumulative = pairInfo[foreignAsset]\n            .priceCumulative;\n        price0CumulativeLast = priceCumulative.nativeLast;\n        price1CumulativeLast = priceCumulative.foreignLast;\n        blockTimestampLast = pairInfo[foreignAsset].blockTimestampLast;\n    }\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n\n    function mintFungible(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        uint256 foreignDeposit,\n        address from,\n        address to\n    ) external override nonReentrant returns (uint256 liquidity) {\n        IERC20Extended lp = wrapper.tokens(foreignAsset);\n\n        require(\n            lp != IERC20Extended(_ZERO_ADDRESS),\n            \"VaderPoolV2::mintFungible: Unsupported Token\"\n        );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        ); // gas savings\n\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n        foreignAsset.safeTransferFrom(from, address(this), foreignDeposit);\n\n        PairInfo storage pair = pairInfo[foreignAsset];\n        uint256 totalLiquidityUnits = pair.totalSupply;\n        if (totalLiquidityUnits == 0) liquidity = nativeDeposit;\n        else\n            liquidity = VaderMath.calculateLiquidityUnits(\n                nativeDeposit,\n                reserveNative,\n                foreignDeposit,\n                reserveForeign,\n                totalLiquidityUnits\n            );\n\n        require(\n            liquidity > 0,\n            \"VaderPoolV2::mintFungible: Insufficient Liquidity Provided\"\n        );\n\n        pair.totalSupply = totalLiquidityUnits + liquidity;\n\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign + foreignDeposit,\n            reserveNative,\n            reserveForeign\n        );\n\n        lp.mint(to, liquidity);\n\n        emit Mint(from, to, nativeDeposit, foreignDeposit);\n    }\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-29-vaderpoolv2mintfungible-exposes-users-to-unlimited-slippage",
                "Location": "mintFungible function",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.Users can provide liquidity to VaderPoolV2 through the mintFungible function.This allows users to provide tokens in any ratio and the pool will calculate what fraction of the value in the pool this makes up and mint the corresponding amount of liquidity units as an ERC20. However there\u2019s no way for users to specify the minimum number of liquidity units they will accept. As the number of liquidity units minted is calculated from the current reserves, this allows frontrunners to manipulate the pool\u2019s reserves in such a way that the LP receives fewer liquidity units than they should. e.g. LP provides a lot of nativeAsset but very little foreignAsset, the frontrunner can then sell a lot of nativeAsset to the pool to devalue it. Once this is done the attacker returns the pool\u2019s reserves back to normal and pockets a fraction of the value which the LP meant to provide as liqudity.",
                "Repair": "Add a user-specified minimum amount of LP tokens to mint."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderRouterV2 is IVaderRouterV2, ProtocolConstants, Ownable {\n    using SafeERC20 for IERC20;\n    IVaderPoolV2 public immutable pool;\n    IERC20 public immutable nativeAsset;\n    IVaderReserve public reserve;\n    constructor(IVaderPoolV2 _pool) {\n        require(\n            _pool != IVaderPoolV2(_ZERO_ADDRESS),\n            \"VaderRouterV2::constructor: Incorrect Arguments\"\n        );\n\n        pool = _pool;\n        nativeAsset = pool.nativeAsset();\n    }\n    function addLiquidity(\n        IERC20 tokenA,\n        IERC20 tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256, // amountAMin = unused\n        uint256, // amountBMin = unused\n        address to,\n        uint256 deadline\n    ) external override returns (uint256 liquidity) {\n        return\n            addLiquidity(\n                tokenA,\n                tokenB,\n                amountADesired,\n                amountBDesired,\n                to,\n                deadline\n            );\n    }\n    function addLiquidity(\n        IERC20 tokenA,\n        IERC20 tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        address to,\n        uint256 deadline\n    ) public override ensure(deadline) returns (uint256 liquidity) {\n        IERC20 foreignAsset;\n        uint256 nativeDeposit;\n        uint256 foreignDeposit;\n\n        if (tokenA == nativeAsset) {\n            require(\n                pool.supported(tokenB),\n                \"VaderRouterV2::addLiquidity: Unsupported Assets Specified\"\n            );\n            foreignAsset = tokenB;\n            foreignDeposit = amountBDesired;\n            nativeDeposit = amountADesired;\n        } else {\n            require(\n                tokenB == nativeAsset && pool.supported(tokenA),\n                \"VaderRouterV2::addLiquidity: Unsupported Assets Specified\"\n            );\n            foreignAsset = tokenA;\n            foreignDeposit = amountADesired;\n            nativeDeposit = amountBDesired;\n        }\n\n        liquidity = pool.mint(\n            foreignAsset,\n            nativeDeposit,\n            foreignDeposit,\n            msg.sender,\n            to\n        );\n    }\n    function _swap(\n        uint256 amountIn,\n        IERC20[] calldata path,\n        address to\n    ) private returns (uint256 amountOut) {\n        if (path.length == 3) {\n            require(\n                path[0] != path[1] &&\n                    path[1] == pool.nativeAsset() &&\n                    path[2] != path[1],\n                \"VaderRouterV2::_swap: Incorrect Path\"\n            );\n\n            path[0].safeTransferFrom(msg.sender, address(pool), amountIn);\n\n            return pool.doubleSwap(path[0], path[2], amountIn, to);\n        } else {\n            require(\n                path.length == 2,\n                \"VaderRouterV2::_swap: Incorrect Path Length\"\n            );\n            IERC20 _nativeAsset = nativeAsset;\n            require(path[0] != path[1], \"VaderRouterV2::_swap: Incorrect Path\");\n\n            path[0].safeTransferFrom(msg.sender, address(pool), amountIn);\n            if (path[0] == _nativeAsset) {\n                return pool.swap(path[1], amountIn, 0, to);\n            } else {\n                require(\n                    path[1] == _nativeAsset,\n                    \"VaderRouterV2::_swap: Incorrect Path\"\n                );\n                return pool.swap(path[0], 0, amountIn, to);\n            }\n        }\n    }\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"VaderRouterV2::ensure: Expired\");\n        _;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-11-vader#h-31-unused-slippage-params",
                "Location": "function addLiquidity(\r\n        IERC20 tokenA,\r\n        IERC20 tokenB,\r\n        uint256 amountADesired,\r\n        uint256 amountBDesired,\r\n        uint256, // amountAMin = unused\r\n        uint256, // amountBMin = unused\r\n        address to,\r\n        uint256 deadline\r\n    )",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.Unused slippage params. function addLiquidity in VaderRouter (both V1 and V2) do not use slippage parameters: uint256, // amountAMin = unused uint256, // amountBMin = unused,making it susceptible to sandwich attacks / MEV.",
                "Repair": "Consider paying some attention to the slippage to reduce possible manipulation attacks from mempool snipers."
            }
        ]
    },
    {
        "Code": "pragma solidity =0.8.9;\ncontract VaderPoolV2 is IVaderPoolV2, BasePoolV2, Ownable {\n\n    using SafeERC20 for IERC20;\n    ILPWrapper public wrapper;\n    ISynthFactory public synthFactory;\n\n    bool public queueActive;\n\n    constructor(bool _queueActive, IERC20 _nativeAsset)\n        BasePoolV2(_nativeAsset)\n    {\n        queueActive = _queueActive;\n    }\n\n    function initialize(\n        ILPWrapper _wrapper,\n        ISynthFactory _synthFactory,\n        address _router\n    ) external onlyOwner {\n        require(\n            wrapper == ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Already initialized\"\n        );\n        require(\n            _wrapper != ILPWrapper(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect Wrapper Specified\"\n        );\n        require(\n            _synthFactory != ISynthFactory(_ZERO_ADDRESS),\n            \"VaderPoolV2::initialize: Incorrect SynthFactory Specified\"\n        );\n        require(\n            _router != _ZERO_ADDRESS,\n            \"VaderPoolV2::initialize: Incorrect Router Specified\"\n        );\n        wrapper = _wrapper;\n        synthFactory = _synthFactory;\n        router = _router;\n    }\n\n    function mintSynth(\n        IERC20 foreignAsset,\n        uint256 nativeDeposit,\n        address from,\n        address to\n    )\n        external\n        override\n        nonReentrant\n        supportedToken(foreignAsset)\n        returns (uint256 amountSynth)\n    {\n        nativeAsset.safeTransferFrom(from, address(this), nativeDeposit);\n\n        ISynth synth = synthFactory.synths(foreignAsset);\n\n        if (synth == ISynth(_ZERO_ADDRESS))\n            synth = synthFactory.createSynth(\n                IERC20Extended(address(foreignAsset))\n            );\n\n        (uint112 reserveNative, uint112 reserveForeign, ) = getReserves(\n            foreignAsset\n        );\n\n        amountSynth = VaderMath.calculateSwap(\n            nativeDeposit,\n            reserveNative,\n            reserveForeign\n        );\n        _update(\n            foreignAsset,\n            reserveNative + nativeDeposit,\n            reserveForeign,\n            reserveNative,\n            reserveForeign\n        );\n\n        synth.mint(to, amountSynth);\n    }\n    function _min(uint256 a, uint256 b) private pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2021-12-vader#h-07-redemption-value-of-synths-can-be-manipulated-to-drain-vaderpoolv2-of-all-native-assets-in-the-associated-pair",
                "Location": "mintSynth function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.As the pool\u2019s reserves can be manipulated through flashloans similar to on UniswapV2 (the slip mechanism can be mitigated by splitting the manipulation over a number of trades), an attacker may set the exchange rate between nativeAsset and synths (calculated from the reserves). An attacker can exploit this to drain funds from the pool.",
                "Repair": "Tie the exchange rate use for minting/burning synths to a manipulation resistant oracle."
            }
        ]
    },
    {
        "Code": "pragma solidity 0.8.4;\ncontract FlanBackstop is Governable {\n  constructor(\n    address dao,\n    address flan,\n    address pyroFlan\n  ) Governable(dao) {\n    config.pyroFlan = pyroFlan;\n    config.flan = flan;\n    IERC20(flan).approve(pyroFlan, 2**256 - 1);\n  }\n  struct ConfigVars {\n    address flan;\n    address pyroFlan;\n    mapping(address => address) flanLPs;\n    mapping(address => address) pyroFlanLPs;\n    mapping(address => uint256) acceptableHighestPrice;\n    mapping(address => uint8) decimalPlaces;\n  }\n  ConfigVars public config;\n  function setBacker(\n    address stablecoin,\n    address flanLP,\n    address pyroFlanLP,\n    uint256 acceptableHighestPrice,\n    uint8 decimalPlaces\n  ) external onlySuccessfulProposal {\n    config.flanLPs[stablecoin] = flanLP;\n    config.pyroFlanLPs[stablecoin] = pyroFlanLP;\n    config.acceptableHighestPrice[stablecoin] = acceptableHighestPrice;\n    config.decimalPlaces[stablecoin] = decimalPlaces;\n  }\n  function purchasePyroFlan(address stablecoin, uint256 amount) external {\n    uint normalizedAmount = normalize(stablecoin, amount);\n    address flanLP = config.flanLPs[stablecoin];\n    address pyroFlanLP = config.pyroFlanLPs[stablecoin];\n    require(flanLP != address(0) && pyroFlanLP != address(0), \"BACKSTOP: configure stablecoin\");\n    uint256 balanceOfFlanBefore = IERC20(config.flan).balanceOf(flanLP);\n    uint256 balanceOfStableBefore = IERC20(stablecoin).balanceOf(flanLP);\n    uint256 priceBefore = (balanceOfFlanBefore * getMagnitude(stablecoin)) / balanceOfStableBefore;\n    FlanLike(config.flan).mint(address(this), normalizedAmount / 2);\n    IERC20(config.flan).transfer(flanLP, normalizedAmount / 4);\n    IERC20(stablecoin).transferFrom(msg.sender, flanLP, amount / 2);\n    UniPairLike(flanLP).mint(address(this));\n    uint256 redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();\n    PyroTokenLike(config.pyroFlan).mint(pyroFlanLP, normalizedAmount / 4);\n    redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();\n    redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();\n    IERC20(stablecoin).transferFrom(msg.sender, pyroFlanLP, amount / 2);\n    UniPairLike(pyroFlanLP).mint(address(this));\n    uint256 balanceOfFlan = IERC20(config.flan).balanceOf(flanLP);\n    uint256 balanceOfStable = IERC20(stablecoin).balanceOf(flanLP);\n    uint256 tiltedPrice = (balanceOfFlan * getMagnitude(stablecoin)) / balanceOfStable;\n    require(tiltedPrice < config.acceptableHighestPrice[stablecoin], \"BACKSTOP: potential price manipulation\");\n    uint256 growth = ((priceBefore - tiltedPrice) * 100) / priceBefore;\n    uint256 flanToMint = (tiltedPrice * normalizedAmount) / (1 ether);\n    uint256 premium = (flanToMint * (growth / 2)) / 100;\n\n    FlanLike(config.flan).mint(address(this), flanToMint + premium);\n    redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();\n    PyroTokenLike(config.pyroFlan).mint(msg.sender, flanToMint + premium);\n    redeemRate = PyroTokenLike(config.pyroFlan).redeemRate();\n  }\n\n  function getMagnitude(address token) internal view returns (uint256) {\n    uint256 places = config.decimalPlaces[token];\n    return 10**places;\n  }\n  function normalize(address token, uint256 amount) internal view returns (uint256) {\n    uint256 places = config.decimalPlaces[token];\n    uint256 bump = 10**(18 - places);\n    return amount * bump;\n  }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2022-01-behodler#h-05-flash-loan-price-manipulation-in-purchasepyroflan",
                "Location": "uint256 priceBefore = (balanceOfFlanBefore * getMagnitude(stablecoin)) / balanceOfStableBefore;\r\nuint256 growth = ((priceBefore - tiltedPrice) * 100) / priceBefore;\r\nuint256 premium = (flanToMint * (growth / 2)) / 100;",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.Problems can occur when the volumes that the purchasePyroFlan() function sends to the Uniswap pool are large compared to the pool\u2019s liquidity volume, or if the Uniswap pool price is temporarily tilted with a flashloan (or a whale). Because this function purposefully changes the exchange rate of the LP, by transferring tokens to the LP in a 2-to-1 ratio, a large volume could caught a large price impact in the LP. The code attempts to protect against this manipulation in line 102 with a require statement, but this can be worked around by reducing the volume per flashloan and repeating the attack multiple times. A user can manipulate the LP, especially when the LP is new with low liquidity, in order to achieve large amounts of flan and pyroflan.",
                "Repair": "Use a TWAP instead of the pool price at a single point in time to increase the cost of performing a flashloan sandwich attack. See the Uniswap v2 price oracle solution documentation for more explanations on how Uniswap designed an approach to providing asset prices while reducing the change of manipulation."
            }
        ]
    },
    {
        "Code": "pragma solidity ^0.8.11;\ncontract USDMPegRecovery is Ownable {\n    using SafeERC20 for IERC20; \n    IERC20 public immutable usdm;\n    IERC20 public immutable pool3;\n    ICurveMetaPool public immutable usdm3crv;\n    address public immutable kpiOracle;\n    uint256 public step;\n    uint256 public startLiquidity;\n    struct Liquidity {\n        uint128 usdm;\n        uint128 pool3;\n    }\n    event Deposit(address indexed depositor, Liquidity deposits);\n    event Withdraw(address indexed withdrawer, Liquidity withdrawals);\n    Liquidity public totalLiquidity;\n    mapping(address => Liquidity) public userLiquidity;\n    mapping(address => bool) public isGuardian;\n    bool public unlockable;\n    modifier onlyGuardian() {\n        require(isGuardian[msg.sender], \"!guardian\");\n        _;\n    }\n    constructor(\n        uint256 _startLiquidity,\n        address _kpiOracle\n    ) Ownable() {\n        startLiquidity = _startLiquidity;\n        usdm = IERC20(0x31d4Eb09a216e181eC8a43ce79226A487D6F0BA9);\n        pool3 = IERC20(0x6c3F90f043a72FA612cbac8115EE7e52BDe6E490);\n        usdm3crv = ICurveMetaPool(0x5B3b5DF2BF2B6543f78e053bD91C4Bdd820929f1);\n        step = 250000e18;\n        kpiOracle = _kpiOracle;\n    }\n    function addGuardian(address _guardian) external onlyOwner {\n        isGuardian[_guardian] = true;\n    }\n    function removeGuardian(address _guardian) external onlyOwner {\n        isGuardian[_guardian] = false;\n    }\n    function provide(uint256 _minimumLP) external onlyGuardian {\n        require(usdm.balanceOf(address(this)) >= totalLiquidity.usdm, \"<liquidity\");\n        // truncate amounts under step\n        uint256 addingLiquidity = (usdm.balanceOf(address(this)) / step) * step;\n        // match usdm : pool3 = 1 : 1\n        uint256[2] memory amounts = [addingLiquidity, addingLiquidity];\n        usdm.approve(address(usdm3crv), addingLiquidity);\n        pool3.approve(address(usdm3crv), addingLiquidity);\n        usdm3crv.add_liquidity(amounts, _minimumLP);\n    }\n    function deposit(Liquidity calldata _deposits) external {\n        Liquidity memory total = totalLiquidity;\n        Liquidity memory user = userLiquidity[msg.sender];\n        if(_deposits.usdm > 0) {\n            usdm.safeTransferFrom(msg.sender, address(this), uint256(_deposits.usdm));\n            total.usdm += _deposits.usdm;\n            user.usdm += _deposits.usdm;\n        }\n\n        if(_deposits.pool3 > 0) {\n            require(totalLiquidity.usdm > 4000000e18, \"usdm low\");\n            pool3.safeTransferFrom(msg.sender, address(this), uint256(_deposits.pool3));\n            total.pool3 += _deposits.pool3;\n            user.pool3 += _deposits.pool3;\n        }\n        totalLiquidity = total;\n        userLiquidity[msg.sender] = user;\n        emit Deposit(msg.sender, _deposits);\n    }\n\n    function withdraw(Liquidity calldata _withdrawal) external {\n        Liquidity memory total = totalLiquidity;\n        Liquidity memory user = userLiquidity[msg.sender];\n        if(_withdrawal.usdm > 0) {\n            require(unlockable, \"!unlock usdm\");\n            usdm.safeTransfer(msg.sender, uint256(_withdrawal.usdm));\n            total.usdm -= _withdrawal.usdm;\n            user.usdm -= _withdrawal.usdm;\n        }\n        if(_withdrawal.pool3 > 0) {\n            pool3.safeTransfer(msg.sender, uint256(_withdrawal.pool3));\n            total.pool3 -= _withdrawal.pool3;\n            user.pool3 -= _withdrawal.pool3;\n        }\n        totalLiquidity = total;\n        userLiquidity[msg.sender] = user;\n        emit Withdraw(msg.sender, _withdrawal);\n    }\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2022-02-concur#h-05-usdmpegrecovery-risk-of-fund-locked-due-to-discrepancy-between-curvelp-token-value-against-internal-contract-math",
                "Location": "deposit function , withdraw function",
                "Type": "Price oracle manipulation",
                "Description": "AMM price oracle manipulation.In USDMPegRecovery deposit and withdraw allow for direct deposits of a specific token (3crv or usdm). The balances are directly changed and tracked in storage. provide seems to be using the real balances (not the ones store) to provide liquidity. Because of how curve works, you\u2019ll be able (first deposit) to provide exactly matching liquidity. But after (even just 1 or) multiple swaps, the pool will be slightly imbalanced, adding or removing liquidity at that point will drastically change the balances in the contract from the ones tracked in storage. Eventually users won\u2019t be able to withdraw the exact amounts they deposited. This will culminate with real balances not matching user deposits, sometimes to user advantage and other times to user disadvantage, ultimately to the protocol dismay.",
                "Repair": "Either find a way to price the user contribution based on the LP tokens (use virtual_price) Or simply have people deposit the LP token directly (avoiding the IL math which is a massive headache)"
            }
        ]
    },
    {
        "Code": "pragma solidity ^0.8.17;\ncontract Pair is ERC20, ERC721TokenReceiver {\n    using SafeTransferLib for address;\n    using SafeTransferLib for ERC20;\n\n    uint256 public constant ONE = 1e18;\n    uint256 public constant CLOSE_GRACE_PERIOD = 7 days;\n\n    address public immutable nft;\n    address public immutable baseToken; // address(0) for ETH\n    bytes32 public immutable merkleRoot;\n    LpToken public immutable lpToken;\n    Caviar public immutable caviar;\n    uint256 public closeTimestamp;\n\n    event Add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);\n    event Remove(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 lpTokenAmount);\n    event Buy(uint256 inputAmount, uint256 outputAmount);\n    event Sell(uint256 inputAmount, uint256 outputAmount);\n    event Wrap(uint256[] tokenIds);\n    event Unwrap(uint256[] tokenIds);\n    event Close(uint256 closeTimestamp);\n    event Withdraw(uint256 tokenId);\n\n    constructor(\n        address _nft,\n        address _baseToken,\n        bytes32 _merkleRoot,\n        string memory pairSymbol,\n        string memory nftName,\n        string memory nftSymbol\n    ) ERC20(string.concat(nftName, \" fractional token\"), string.concat(\"f\", nftSymbol), 18) {\n        nft = _nft;\n        baseToken = _baseToken;\n        merkleRoot = _merkleRoot;\n        lpToken = new LpToken(pairSymbol);\n        caviar = Caviar(msg.sender);\n    }\n    function add(uint256 baseTokenAmount, uint256 fractionalTokenAmount, uint256 minLpTokenAmount)\n        public\n        payable\n        returns (uint256 lpTokenAmount)\n    {\n        require(baseTokenAmount > 0 && fractionalTokenAmount > 0, \"Input token amount is zero\");\n        require(baseToken == address(0) ? msg.value == baseTokenAmount : msg.value == 0, \"Invalid ether input\");\n        lpTokenAmount = addQuote(baseTokenAmount, fractionalTokenAmount);\n        require(lpTokenAmount >= minLpTokenAmount, \"Slippage: lp token amount out\");\n        _transferFrom(msg.sender, address(this), fractionalTokenAmount);\n        lpToken.mint(msg.sender, lpTokenAmount);\n        if (baseToken != address(0)) {\n            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), baseTokenAmount);\n        }\n        emit Add(baseTokenAmount, fractionalTokenAmount, lpTokenAmount);\n    }\n    function buy(uint256 outputAmount, uint256 maxInputAmount) public payable returns (uint256 inputAmount) {\n        require(baseToken == address(0) ? msg.value == maxInputAmount : msg.value == 0, \"Invalid ether input\");\n        inputAmount = buyQuote(outputAmount);\n        require(inputAmount <= maxInputAmount, \"Slippage: amount in\");\n        _transferFrom(address(this), msg.sender, outputAmount);\n        if (baseToken == address(0)) {\n            uint256 refundAmount = maxInputAmount - inputAmount;\n            if (refundAmount > 0) msg.sender.safeTransferETH(refundAmount);\n        } else {\n            ERC20(baseToken).safeTransferFrom(msg.sender, address(this), inputAmount);\n        }\n        emit Buy(inputAmount, outputAmount);\n    }\n    function nftSell(uint256[] calldata tokenIds, uint256 minOutputAmount, bytes32[][] calldata proofs)\n        public\n        returns (uint256 outputAmount)\n    {\n        uint256 inputAmount = wrap(tokenIds, proofs);\n        outputAmount = sell(inputAmount, minOutputAmount);\n    }\n    function baseTokenReserves() public view returns (uint256) {\n        return _baseTokenReserves();\n    }\n\n    function fractionalTokenReserves() public view returns (uint256) {\n        return balanceOf[address(this)];\n    }\n\n    function buyQuote(uint256 outputAmount) public view returns (uint256) {\n        return (outputAmount * 1000 * baseTokenReserves()) / ((fractionalTokenReserves() - outputAmount) * 997);\n    }\n\n\n    function sellQuote(uint256 inputAmount) public view returns (uint256) {\n        uint256 inputAmountWithFee = inputAmount * 997;\n        return (inputAmountWithFee * baseTokenReserves()) / ((fractionalTokenReserves() * 1000) + inputAmountWithFee);\n    }\n\n    function addQuote(uint256 baseTokenAmount, uint256 fractionalTokenAmount) public view returns (uint256) {\n        uint256 lpTokenSupply = lpToken.totalSupply();\n        if (lpTokenSupply > 0) {\n            uint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();\n            uint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();\n            return Math.min(baseTokenShare, fractionalTokenShare);\n        } else {\n            return Math.sqrt(baseTokenAmount * fractionalTokenAmount);\n        }\n    }\n    function removeQuote(uint256 lpTokenAmount) public view returns (uint256, uint256) {\n        uint256 lpTokenSupply = lpToken.totalSupply();\n        uint256 baseTokenOutputAmount = (baseTokenReserves() * lpTokenAmount) / lpTokenSupply;\n        uint256 fractionalTokenOutputAmount = (fractionalTokenReserves() * lpTokenAmount) / lpTokenSupply;\n\n        return (baseTokenOutputAmount, fractionalTokenOutputAmount);\n    }\n\n}",
        "VulnerabilityDesc": [
            {
                "Name": "https://code4rena.com/reports/2022-12-caviar#h-02-liquidity-providers-may-lose-funds-when-adding-liquidity",
                "Location": "// calculate amount of lp tokens as a fraction of existing reserves\r\nuint256 baseTokenShare = (baseTokenAmount * lpTokenSupply) / baseTokenReserves();\r\nuint256 fractionalTokenShare = (fractionalTokenAmount * lpTokenSupply) / fractionalTokenReserves();\r\nreturn Math.min(baseTokenShare, fractionalTokenShare);",
                "Type": "Price oracle manipulation",
                "Description": "Sandwich attack.Liquidity providers may lose a portion of provided liquidity in either of the pair tokens. While the minLpTokenAmount protects from slippage when adding liquidity, it doesn\u2019t protect from providing liquidity at different K.",
                "Repair": "In the add function, consider calculating optimal token amounts based on the amounts specified by user, current pool reserves, and the minimal LP tokens amount specified by user. As a reference, consider this piece from the Uniswap V2 Router"
            }
        ]
    }
]