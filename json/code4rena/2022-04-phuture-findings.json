[
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\nimport \"./libraries/BP.sol\";\nimport \"./libraries/IndexLibrary.sol\";\n\nimport \"./interfaces/IvToken.sol\";\nimport \"./interfaces/IOrderer.sol\";\nimport \"./interfaces/IIndexLogic.sol\";\nimport \"./interfaces/IvTokenFactory.sol\";\nimport \"./interfaces/IPhuturePriceOracle.sol\";\n\nimport \"./PhutureIndex.sol\";\n\n/// @title Index logic\n/// @notice Contains common logic for index minting and burning\ncontract IndexLogic is PhutureIndex, IIndexLogic {\n    using FullMath for uint;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Asset role\n    bytes32 internal constant ASSET_ROLE = keccak256(\"ASSET_ROLE\");\n    /// @notice Role granted for asset which should be skipped during burning\n    bytes32 internal constant SKIPPED_ASSET_ROLE = keccak256(\"SKIPPED_ASSET_ROLE\");\n\n    /// @notice Mints index to `_recipient` address\n    /// @param _recipient Recipient address\n    function mint(address _recipient) external override {\n        address feePool = IIndexRegistry(registry).feePool();\n        _chargeAUMFee(feePool);\n\n        IPhuturePriceOracle oracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\n\n        uint lastAssetBalanceInBase;\n        uint minAmountInBase = type(uint).max;\n        for (uint i; i < assets.length(); ++i) {\n            require(IAccessControl(registry).hasRole(ASSET_ROLE, assets.at(i)), \"Index: INVALID_ASSET\");\n            if (weightOf[assets.at(i)] == 0) {\n                continue;\n            }\n            uint assetPerBaseInUQ = oracle.refreshedAssetPerBaseInUQ(assets.at(i));\n            // Q_b * w_i * p_i = Q_i\n            // Q_b = Q_i / (w_i * p_i)\n            IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(assets.at(i)));\n            uint amountInAsset = IERC20(assets.at(i)).balanceOf(address(vToken)) - vToken.lastBalance();\n            uint weightedPrice = assetPerBaseInUQ * weightOf[assets.at(i)];\n            uint _minAmountInBase = amountInAsset.mulDiv(FixedPoint112.Q112 * IndexLibrary.MAX_WEIGHT, weightedPrice);\n            if (_minAmountInBase < minAmountInBase) {\n                minAmountInBase = _minAmountInBase;\n            }\n            uint lastBalanceInAsset = vToken.lastAssetBalanceOf(address(this));\n            vToken.mint();\n            uint balanceInBase = lastBalanceInAsset.mulDiv(FixedPoint112.Q112, assetPerBaseInUQ);\n            lastAssetBalanceInBase += balanceInBase;\n        }\n\n        for (uint i; i < inactiveAssets.length(); ++i) {\n            if (!IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, inactiveAssets.at(i))) {\n                uint lastBalanceInAsset = IvToken(\n                    IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(inactiveAssets.at(i))\n                ).lastAssetBalanceOf(address(this));\n                lastAssetBalanceInBase += lastBalanceInAsset.mulDiv(\n                    FixedPoint112.Q112,\n                    oracle.refreshedAssetPerBaseInUQ(inactiveAssets.at(i))\n                );\n            }\n        }\n\n        assert(minAmountInBase != type(uint).max);\n\n        uint value;\n        if (totalSupply() != 0) {\n            require(lastAssetBalanceInBase > 0, \"Index: INSUFFICIENT_AMOUNT\");\n            value =\n                (oracle.convertToIndex(minAmountInBase, decimals()) * totalSupply()) /\n                oracle.convertToIndex(lastAssetBalanceInBase, decimals());\n        } else {\n            value = oracle.convertToIndex(minAmountInBase, decimals()) - IndexLibrary.INITIAL_QUANTITY;\n            _mint(address(0xdead), IndexLibrary.INITIAL_QUANTITY);\n        }\n\n        uint fee = (value * IFeePool(feePool).mintingFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\n        if (fee > 0) {\n            _mint(feePool, fee);\n            value -= fee;\n        }\n\n        _mint(_recipient, value);\n    }\n\n    /// @notice Burns index and transfers assets to `_recipient` address\n    /// @param _recipient Recipient address\n    function burn(address _recipient) external override {\n        uint value = balanceOf(address(this));\n        require(value > 0, \"Index: INSUFFICIENT_AMOUNT\");\n        uint length = assets.length();\n\n        bool containsBlacklistedAssets;\n        for (uint i; i < length; ++i) {\n            if (!IAccessControl(registry).hasRole(ASSET_ROLE, assets.at(i))) {\n                containsBlacklistedAssets = true;\n                break;\n            }\n        }\n\n        if (!containsBlacklistedAssets) {\n            address feePool = IIndexRegistry(registry).feePool();\n\n            uint fee = (value * IFeePool(feePool).burningFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\n\n            if (fee > 0) {\n                // AUM charged in _transfer method\n                _transfer(address(this), feePool, fee);\n                value -= fee;\n            } else {\n                _chargeAUMFee(feePool);\n            }\n        }\n\n        address orderer = IIndexRegistry(registry).orderer();\n        uint lastOrderId = IOrderer(orderer).lastOrderIdOf(address(this));\n        for (uint i; i < length + inactiveAssets.length(); ++i) {\n            address asset = i < length ? assets.at(i) : inactiveAssets.at(i - length);\n            if (containsBlacklistedAssets && IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, asset)) {\n                continue;\n            }\n\n            IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).vTokenOf(asset));\n            uint indexAssetBalance = vToken.balanceOf(address(this));\n            uint accountBalance = (value * indexAssetBalance) / totalSupply();\n            if (accountBalance == 0) {\n                continue;\n            }\n\n            // calculate index value in vault to be burned\n            vToken.transfer(address(vToken), accountBalance);\n            vToken.burn(_recipient);\n            if (lastOrderId > 0) {\n                IOrderer(orderer).reduceOrderAsset(asset, totalSupply() - value, totalSupply());\n            }\n        }\n\n        _burn(address(this), value);\n    }\n}\n\n\n",
        "CodeNames": [
            "IndexLogic.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [],
                "Type": "  IndexLogic : An attacker can mint tokens for himself using assets deposited by other users",
                "Description": "\nIn the mint function of the IndexLogic contract, users are required to transfer assets to vToken in advance, and then call the mint function to mint tokens.\nThe attacker can monitor the asset balance in the vToken contract. When the balance is greater than lastBalance, the attacker can call the mint function to mint tokens for himself.\n\n\nIndexLogic.sol#L48(https://github.com/code-423n4/2022-04-phuture/blob/main/contracts/IndexLogic.sol#L48)<br\n\n",
                "Repair": "\nCall the transferfrom function in the mint function of the IndexLogic contract to transfer the user's assets.\n\nolivermehr (Phuture Finance) disputed(https://github.com/code-423n4/2022-04-phuture-findings/issues/19)\n\njn-lp (Phuture Finance) commented(https://github.com/code-423n4/2022-04-phuture-findings/issues/19#issuecomment-1123844013):\n  We don't expect users to directly call the Mint/Burn functions on Index. Instead, they should use the Router contract, as our frontend does.\n\nmoose-code (judge) commented(https://github.com/code-423n4/2022-04-phuture-findings/issues/19#issuecomment-1134800163):\n  There is no mention of the router contract in the contest documentation and this is unreasonable for wardens to know about the Router.<br\n\n \n We would like wardens to focus on any core functional logic, boundary case errors or similar issues which could be utilized by an attacker to take funds away from clients who have funds deposited in the protocol.\n <br\n\n This a core logic error that could be used to take funds away from clients and given there is no mention of the router and only part of the code is submitted, I am siding with the wardens on this and awarding in full.\n\n\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\";\n\nimport \"./interfaces/IUniswapV2PriceOracle.sol\";\n\n/// @title Uniswap V2 price oracle\n/// @notice Contains logic for price calculation of asset using Uniswap V2 Pair\n/// @dev Oracle works through base asset which is set in initialize function\ncontract UniswapV2PriceOracle is IUniswapV2PriceOracle, ERC165 {\n    using UniswapV2OracleLibrary for address;\n\n    /// @notice Minimum oracle update interval\n    /// @dev If min update interval hasn't passed (24h) before update, previously cached value is returned\n    uint private constant MIN_UPDATE_INTERVAL = 24 hours;\n\n    IUniswapV2Pair immutable pair;\n    /// @inheritdoc IUniswapV2PriceOracle\n    address public immutable override asset0;\n    /// @inheritdoc IUniswapV2PriceOracle\n    address public immutable override asset1;\n\n    uint private price0CumulativeLast;\n    uint private price1CumulativeLast;\n    uint32 private blockTimestampLast;\n    uint private price0Average;\n    uint private price1Average;\n\n    constructor(\n        address _factory,\n        address _assetA,\n        address _assetB\n    ) {\n        IUniswapV2Pair _pair = IUniswapV2Pair(IUniswapV2Factory(_factory).getPair(_assetA, _assetB));\n        pair = _pair;\n        asset0 = _pair.token0();\n        asset1 = _pair.token1();\n\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"UniswapV2PriceOracle: RESERVES\");\n\n        uint _price0CumulativeLast = _pair.price0CumulativeLast();\n        uint _price1CumulativeLast = _pair.price1CumulativeLast();\n        (uint price0Cml, uint price1Cml, uint32 blockTimestamp) = address(_pair).currentCumulativePrices();\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n        price0CumulativeLast = _price0CumulativeLast;\n        price1CumulativeLast = _price1CumulativeLast;\n        price0Average = (price0Cml - _price0CumulativeLast) / timeElapsed;\n        price1Average = (price1Cml - _price1CumulativeLast) / timeElapsed;\n    }\n\n    /// @inheritdoc IPriceOracle\n    /// @dev Updates and returns cumulative price value\n    /// @dev If min update interval hasn't passed (24h), previously cached value is returned\n    function refreshedAssetPerBaseInUQ(address _asset) external override returns (uint) {\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = address(pair).currentCumulativePrices();\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n\n        if (timeElapsed >= MIN_UPDATE_INTERVAL) {\n            price0Average = (price0Cumulative - price0CumulativeLast) / timeElapsed;\n            price1Average = (price1Cumulative - price1CumulativeLast) / timeElapsed;\n\n            price0CumulativeLast = price0Cumulative;\n            price1CumulativeLast = price1Cumulative;\n            blockTimestampLast = blockTimestamp;\n        }\n\n        return lastAssetPerBaseInUQ(_asset);\n    }\n\n    /// @inheritdoc IPriceOracle\n    /// @dev Returns cumulative price value cached during last refresh call\n    function lastAssetPerBaseInUQ(address _asset) public view override returns (uint) {\n        if (_asset == asset0) {\n            return price1Average;\n        } else {\n            require(_asset == asset1, \"UniswapV2PriceOracle: UNKNOWN\");\n            return price0Average;\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IUniswapV2PriceOracle).interfaceId ||\n            _interfaceId == type(IPriceOracle).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\n\nimport \"./libraries/FullMath.sol\";\nimport \"./libraries/FixedPoint112.sol\";\n\nimport \"./interfaces/IChainlinkPriceOracle.sol\";\n\n/// @title Chainlink price oracle\n/// @notice Contains logic for getting asset's price from Chainlink data feed\n/// @dev Oracle works through base asset which is set in initialize function\ncontract ChainlinkPriceOracle is IChainlinkPriceOracle, ERC165 {\n    using FullMath for uint;\n\n    struct AssetInfo {\n        AggregatorV2V3Interface aggregator;\n        uint8 answerDecimals;\n        uint8 decimals;\n        uint lastAssetPerBaseInUQ;\n    }\n\n    /// @notice Role allows configure asset related data/components\n    bytes32 private constant ASSET_MANAGER_ROLE = keccak256(\"ASSET_MANAGER_ROLE\");\n\n    /// @notice Index registry address\n    IAccessControl private immutable registry;\n\n    /// @notice Chainlink aggregator for the base asset\n    AggregatorV2V3Interface private immutable baseAggregator;\n\n    /// @notice Number of decimals in base asset answer\n    uint8 private immutable baseDecimals;\n\n    /// @notice Number of decimals in base asset answer\n    uint8 private immutable baseAnswerDecimals;\n\n    /// @notice Infos of added assets\n    mapping(address => AssetInfo) private assetInfoOf;\n\n    constructor(\n        address _registry,\n        address _base,\n        address _baseAggregator\n    ) {\n        require(_baseAggregator != address(0) && _base != address(0), \"ChainlinkPriceOracle: ZERO\");\n\n        registry = IAccessControl(_registry);\n        baseAnswerDecimals = AggregatorV2V3Interface(_baseAggregator).decimals();\n        baseDecimals = IERC20Metadata(_base).decimals();\n        baseAggregator = AggregatorV2V3Interface(_baseAggregator);\n    }\n\n    /// @inheritdoc IChainlinkPriceOracle\n    function addAsset(address _asset, address _assetAggregator) external override {\n        require(registry.hasRole(ASSET_MANAGER_ROLE, msg.sender), \"ChainlinkPriceOracle: FORBIDDEN\");\n        require(_asset != address(0), \"ChainlinkPriceOracle: ZERO\");\n\n        assetInfoOf[_asset] = AssetInfo({\n            aggregator: AggregatorV2V3Interface(_assetAggregator),\n            answerDecimals: AggregatorV2V3Interface(_assetAggregator).decimals(),\n            decimals: IERC20Metadata(_asset).decimals(),\n            lastAssetPerBaseInUQ: 0\n        });\n\n        refreshedAssetPerBaseInUQ(_asset);\n    }\n\n    /// @inheritdoc IPriceOracle\n    function lastAssetPerBaseInUQ(address _asset) external view override returns (uint) {\n        return assetInfoOf[_asset].lastAssetPerBaseInUQ;\n    }\n\n    /// @inheritdoc IPriceOracle\n    function refreshedAssetPerBaseInUQ(address _asset) public override returns (uint) {\n        AssetInfo storage assetInfo = assetInfoOf[_asset];\n\n        (, int basePrice, , , ) = baseAggregator.latestRoundData();\n        (, int quotePrice, , , ) = assetInfo.aggregator.latestRoundData();\n\n        require(basePrice > 0 && quotePrice > 0, \"ChainlinkPriceOracle: NEGATIVE\");\n\n        uint assetPerBaseInUQ = ((uint(basePrice) * 10**assetInfo.decimals).mulDiv(\n            FixedPoint112.Q112,\n            (uint(quotePrice) * 10**baseDecimals)\n        ) * 10**assetInfo.answerDecimals) / 10**baseAnswerDecimals;\n        assetInfo.lastAssetPerBaseInUQ = assetPerBaseInUQ;\n        return assetPerBaseInUQ;\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IChainlinkPriceOracle).interfaceId ||\n            _interfaceId == type(IPriceOracle).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./libraries/FullMath.sol\";\nimport \"./libraries/FixedPoint112.sol\";\n\nimport \"./interfaces/IUniswapV2PriceOracle.sol\";\nimport \"./interfaces/IUniswapV2PathPriceOracle.sol\";\n\n/// @title Uniswap path price oracle\n/// @notice Contains logic for price calculation of asset which doesn't have a pair with a base asset\ncontract UniswapV2PathPriceOracle is IUniswapV2PathPriceOracle, ERC165 {\n    using FullMath for uint;\n\n    /// @notice List of assets to compose exchange pairs, where first element is input asset\n    address[] private path;\n    /// @notice List of corresponding price oracles for provided path\n    address[] private oracles;\n\n    constructor(address[] memory _path, address[] memory _oracles) {\n        require(_path.length >= 2, \"UniswapV2PathPriceOracle: PATH\");\n        require(_oracles.length == _path.length - 1, \"UniswapV2PathPriceOracle: ORACLES\");\n\n        path = _path;\n        oracles = _oracles;\n    }\n\n    /// @inheritdoc IPriceOracle\n    function refreshedAssetPerBaseInUQ(address _asset) external override returns (uint currentAssetPerBaseInUQ) {\n        currentAssetPerBaseInUQ = FixedPoint112.Q112;\n        for (uint i = 0; i < path.length - 1; i++) {\n            address asset = path[i + 1];\n            currentAssetPerBaseInUQ = currentAssetPerBaseInUQ.mulDiv(\n                IUniswapV2PriceOracle(oracles[i]).refreshedAssetPerBaseInUQ(asset),\n                FixedPoint112.Q112\n            );\n            if (_asset == asset) {\n                break;\n            }\n        }\n    }\n\n    /// @inheritdoc IPriceOracle\n    function lastAssetPerBaseInUQ(address _asset) external view override returns (uint currentAssetPerBaseInUQ) {\n        currentAssetPerBaseInUQ = FixedPoint112.Q112;\n        for (uint i = 0; i < path.length - 1; i++) {\n            address asset = path[i + 1];\n            currentAssetPerBaseInUQ = currentAssetPerBaseInUQ.mulDiv(\n                IUniswapV2PriceOracle(oracles[i]).lastAssetPerBaseInUQ(asset),\n                FixedPoint112.Q112\n            );\n            if (_asset == asset) {\n                break;\n            }\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IUniswapV2PathPriceOracle).interfaceId ||\n            _interfaceId == type(IPriceOracle).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc IUniswapV2PathPriceOracle\n    function anatomy() public view virtual override returns (address[] memory _path, address[] memory _oracles) {\n        _path = path;\n        _oracles = oracles;\n    }\n}\n\n\n",
        "CodeNames": [
            "UniswapV2PriceOracle.sol",
            "ChainlinkPriceOracle.sol",
            "UniswapV2PathPriceOracle.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "//solidity\n(uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = address(pair).currentCumulativePrices();\n",
                    "//solidity\nif (blockTimestampLast != blockTimestamp) {\n    // subtraction overflow is desired\n    uint32 timeElapsed = blockTimestamp blockTimestampLast;\n    // addition overflow is desired\n    // counterfactual\n    price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n    // counterfactual\n    price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n}\n"
                ],
                "Type": "  UniswapV2PriceOracle.sol   currentCumulativePrices()  will revert when  priceCumulative  addition overflow",
                "Description": "\nUniswapV2PriceOracle.sol#L62(https://github.com/code-423n4/2022-04-phuture/blob/594459d0865fb6603ba388b53f3f01648f5bb6fb/contracts/UniswapV2PriceOracle.sol#L62)<br\n\nsolidity\n(uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = address(pair).currentCumulativePrices();\n\n\nBecause the Solidity version used by the current implementation of UniswapV2OracleLibrary.sol is =0.8.7, and there are some breaking changes in Solidity v0.8.0:\n\n Arithmetic operations revert on underflow and overflow.\n\nRef: <https://docs.soliditylang.org/en/v0.8.13/080-breaking-changes.html#silent-changes-of-the-semantics\n\nWhile in UniswapV2OracleLibrary.sol, subtraction overflow is desired at blockTimestamp blockTimestampLast in currentCumulativePrices():\n\n<https://github.com/Uniswap/v2-periphery/blob/master/contracts/libraries/UniswapV2OracleLibrary.sol#L25-L33\n\nsolidity\nif (blockTimestampLast != blockTimestamp) {\n    // subtraction overflow is desired\n    uint32 timeElapsed = blockTimestamp blockTimestampLast;\n    // addition overflow is desired\n    // counterfactual\n    price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n    // counterfactual\n    price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n}\n\n\nIn another word, Uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary only works at solidity < 0.8.0.\n\nAs a result, when price0Cumulative or price1Cumulative is big enough, currentCumulativePrices will revert due to overflow.\n\n\nSince the overflow is desired in the original version, and it's broken because of using Solidity version 0.8. The UniswapV2PriceOracle contract will break when the desired overflow happens, and further breaks other parts of the system that relies on UniswapV2PriceOracle.\n\n",
                "Repair": "\nNote: this recommended fix requires a fork of the library contract provided by Uniswap.\n\nChange to:\n\nsolidity\nif (blockTimestampLast != blockTimestamp) {\n    unchecked {\n        // subtraction overflow is desired\n        uint32 timeElapsed = blockTimestamp blockTimestampLast;\n        // addition overflow is desired\n        // counterfactual\n        price0Cumulative += uint(FixedPoint.fraction(reserve1, reserve0)._x) * timeElapsed;\n        // counterfactual\n        price1Cumulative += uint(FixedPoint.fraction(reserve0, reserve1)._x) * timeElapsed;\n    }\n}\n\n\njn-lp (Phuture Finance) confirmed and resolved(https://github.com/code-423n4/2022-04-phuture-findings/issues/62)\n\n\n\n*\n\n \n\n"
            }
        ]
    }
]