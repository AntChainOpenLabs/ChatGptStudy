[
    {
        "Code": "/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/HolographERC20Interface.sol\";\nimport \"./interface/Holographable.sol\";\nimport \"./interface/HolographInterface.sol\";\nimport \"./interface/HolographBridgeInterface.sol\";\nimport \"./interface/HolographFactoryInterface.sol\";\nimport \"./interface/HolographOperatorInterface.sol\";\nimport \"./interface/HolographRegistryInterface.sol\";\nimport \"./interface/InitializableInterface.sol\";\n\n/**\n * @title Holograph Bridge\n * @author https://github.com/holographxyz\n * @notice Beam any holographable contracts and assets across blockchains\n * @dev The contract abstracts all the complexities of making bridge requests and uses a universal interface to bridge any type of holographable assets\n */\ncontract HolographBridge is Admin, Initializable, HolographBridgeInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)\n   */\n  bytes32 constant _factorySlot = precomputeslot(\"eip1967.Holograph.factory\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)\n   */\n  bytes32 constant _holographSlot = precomputeslot(\"eip1967.Holograph.holograph\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)\n   */\n  bytes32 constant _jobNonceSlot = precomputeslot(\"eip1967.Holograph.jobNonce\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)\n   */\n  bytes32 constant _operatorSlot = precomputeslot(\"eip1967.Holograph.operator\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n\n  /**\n   * @dev Allow calls only from Holograph Operator contract\n   */\n  modifier onlyOperator() {\n    require(msg.sender == address(_operator()), \"HOLOGRAPH: operator only call\");\n    _;\n  }\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (address factory, address holograph, address operator, address registry) = abi.decode(\n      initPayload,\n      (address, address, address, address)\n    );\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_factorySlot, factory)\n      sstore(_holographSlot, holograph)\n      sstore(_operatorSlot, operator)\n      sstore(_registrySlot, registry)\n    }\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @notice Receive a beam from another chain\n   * @dev This function can only be called by the Holograph Operator module\n   * @param fromChain Holograph Chain ID where the brigeOutRequest was created\n   * @param holographableContract address of the destination contract that the bridgeInRequest is targeted for\n   * @param hToken address of the hToken contract that wrapped the origin chain native gas token\n   * @param hTokenRecipient address of recipient for the hToken reward\n   * @param hTokenValue exact amount of hToken reward in wei\n   * @param doNotRevert boolean used to specify if the call should revert\n   * @param bridgeInPayload actual abi encoded bytes of the data that the holographable contract bridgeIn function will receive\n   */\n  function bridgeInRequest(\n    uint256, /* nonce*/\n    uint32 fromChain,\n    address holographableContract,\n    address hToken,\n    address hTokenRecipient,\n    uint256 hTokenValue,\n    bool doNotRevert,\n    bytes calldata bridgeInPayload\n  ) external payable onlyOperator {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeIn function call to the holographable contract\n     */\n    bytes4 selector = Holographable(holographableContract).bridgeIn(fromChain, bridgeInPayload);\n    /**\n     * @dev ensure returned selector is bridgeIn function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeIn.selector, \"HOLOGRAPH: bridge in failed\");\n    /**\n     * @dev check if a specific reward amount was assigned to this request\n     */\n    if (hTokenValue > 0) {\n      /**\n       * @dev mint the specific hToken amount for hToken recipient\n       *      this value is equivalent to amount that is deposited on origin chain's hToken contract\n       *      recipient can beam the asset to origin chain and unwrap for native gas token at any time\n       */\n      require(\n        HolographERC20Interface(hToken).holographBridgeMint(hTokenRecipient, hTokenValue) ==\n          HolographERC20Interface.holographBridgeMint.selector,\n        \"HOLOGRAPH: hToken mint failed\"\n      );\n    }\n    /**\n     * @dev allow the call to revert on demand, for example use case, look into the Holograph Operator's jobEstimator function\n     */\n    require(doNotRevert, \"HOLOGRAPH: reverted\");\n  }\n\n  /**\n   * @notice Create a beam request for a destination chain\n   * @dev This function works for deploying contracts and beaming supported holographable assets across chains\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function bridgeOutRequest(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external payable {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeOut function call to the holographable contract\n     */\n    (bytes4 selector, bytes memory returnedPayload) = Holographable(holographableContract).bridgeOut(\n      toChain,\n      msg.sender,\n      bridgeOutPayload\n    );\n    /**\n     * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeOut.selector, \"HOLOGRAPH: bridge out failed\");\n    /**\n     * @dev pass the request, along with all data, to Holograph Operator, to handle the cross-chain messaging logic\n     */\n    _operator().send{value: msg.value}(\n      gasLimit,\n      gasPrice,\n      toChain,\n      msg.sender,\n      _jobNonce(),\n      holographableContract,\n      returnedPayload\n    );\n  }\n\n  /**\n   * @notice Do not call this function, it will always revert\n   * @dev Used by getBridgeOutRequestPayload function\n   *      It is purposefully inverted to always revert on a successful call\n   *      Marked as external and not private to allow use inside try/catch of getBridgeOutRequestPayload function\n   *      If this function does not revert and returns a string, it is the actual revert reason\n   * @param sender address of actual sender that is planning to make a bridgeOutRequest call\n   * @param toChain holograph chain id of destination chain\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function revertedBridgeOutRequest(\n    address sender,\n    uint32 toChain,\n    address holographableContract,\n    bytes calldata bridgeOutPayload\n  ) external returns (string memory revertReason) {\n    /**\n     * @dev make a bridgeOut function call to the holographable contract inside of a try/catch\n     */\n    try Holographable(holographableContract).bridgeOut(toChain, sender, bridgeOutPayload) returns (\n      bytes4 selector,\n      bytes memory payload\n    ) {\n      /**\n       * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n       */\n      if (selector != Holographable.bridgeOut.selector) {\n        /**\n         * @dev if selector does not match, then it means the request failed\n         */\n        return \"HOLOGRAPH: bridge out failed\";\n      }\n      assembly {\n        /**\n         * @dev the entire payload is sent back in a revert\n         */\n        revert(add(payload, 0x20), mload(payload))\n      }\n    } catch Error(string memory reason) {\n      return reason;\n    } catch {\n      return \"HOLOGRAPH: unknown error\";\n    }\n  }\n\n  /**\n   * @notice Get the payload created by the bridgeOutRequest function\n   * @dev Use this function to get the payload that will be generated by a bridgeOutRequest\n   *      Only use this with a static call\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   * @return samplePayload bytes made up of the bridgeOutRequest payload\n   */\n  function getBridgeOutRequestPayload(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external returns (bytes memory samplePayload) {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    bytes memory payload;\n    /**\n     * @dev the revertedBridgeOutRequest function is wrapped into a try/catch function\n     */\n    try this.revertedBridgeOutRequest(msg.sender, toChain, holographableContract, bridgeOutPayload) returns (\n      string memory revertReason\n    ) {\n      /**\n       * @dev a non reverted result is actually a revert\n       */\n      revert(revertReason);\n    } catch (bytes memory realResponse) {\n      /**\n       * @dev a revert is actually success, so the return data is stored as payload\n       */\n      payload = realResponse;\n    }\n    uint256 jobNonce;\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n    /**\n     * @dev extract hlgFee from operator\n     */\n    uint256 fee = 0;\n    if (gasPrice < type(uint256).max && gasLimit < type(uint256).max) {\n      (uint256 hlgFee, ) = _operator().getMessageFee(toChain, gasLimit, gasPrice, bridgeOutPayload);\n      fee = hlgFee;\n    }\n    /**\n     * @dev the data is abi encoded into actual bridgeOutRequest payload bytes\n     */\n    bytes memory encodedData = abi.encodeWithSelector(\n      HolographBridgeInterface.bridgeInRequest.selector,\n      /**\n       * @dev the latest job nonce is incremented by one\n       */\n      jobNonce + 1,\n      _holograph().getHolographChainId(),\n      holographableContract,\n      _registry().getHToken(_holograph().getHolographChainId()),\n      address(0),\n      fee,\n      true,\n      payload\n    );\n    /**\n     * @dev this abi encodes the data just like in Holograph Operator\n     */\n    samplePayload = abi.encodePacked(encodedData, gasLimit, gasPrice);\n  }\n\n  /**\n   * @notice Get the fees associated with sending specific payload\n   * @dev Will provide exact costs on protocol and message side, combine the two to get total\n   * @dev @param toChain holograph chain id of destination chain for payload\n   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain\n   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically\n   * @dev @param crossChainPayload the entire packet being sent cross-chain\n   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain\n   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain\n   */\n  function getMessageFee(\n    uint32,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external view returns (uint256, uint256) {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := staticcall(gas(), sload(_operatorSlot), 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Factory module\n   * @dev Used for deploying holographable smart contracts\n   */\n  function getFactory() external view returns (address factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Factory module address\n   * @param factory address of the Holograph Factory smart contract to use\n   */\n  function setFactory(address factory) external onlyAdmin {\n    assembly {\n      sstore(_factorySlot, factory)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Protocol contract\n   * @dev Used for storing a reference to all the primary modules and variables of the protocol\n   */\n  function getHolograph() external view returns (address holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Protocol contract address\n   * @param holograph address of the Holograph Protocol smart contract to use\n   */\n  function setHolograph(address holograph) external onlyAdmin {\n    assembly {\n      sstore(_holographSlot, holograph)\n    }\n  }\n\n  /**\n   * @notice Get the latest job nonce\n   * @dev You can use the job nonce as a way to calculate total amount of bridge requests that have been made\n   */\n  function getJobNonce() external view returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Operator module\n   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module\n   */\n  function getOperator() external view returns (address operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Operator module address\n   * @param operator address of the Holograph Operator smart contract to use\n   */\n  function setOperator(address operator) external onlyAdmin {\n    assembly {\n      sstore(_operatorSlot, operator)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Factory Interface\n   */\n  function _factory() private view returns (HolographFactoryInterface factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interface\n   */\n  function _holograph() private view returns (HolographInterface holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @dev Internal nonce, that increments on each call, used for randomness\n   */\n  function _jobNonce() private returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)\n      sstore(_jobNonceSlot, jobNonce)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Operator Interface\n   */\n  function _operator() private view returns (HolographOperatorInterface operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Registry Interface\n   */\n  function _registry() private view returns (HolographRegistryInterface registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract\n   */\n  receive() external payable {\n    revert();\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n",
        "CodeNames": [
            "HolographBridge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "diff\ndiff --git a/test/06_cross-chain_minting_tests_l1_l2.ts b/test/06_cross-chain_minting_tests_l1_l2.ts\nindex 1f2b959..a1a23b7 100644\n--a/test/06_cross-chain_minting_tests_l1_l2.ts\n+++ b/test/06_cross-chain_minting_tests_l1_l2.ts\n@@ -276,6 +276,7 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             gasLimit: TESTGASLIMIT,\n           })\n         );\n+        estimatedGas = BigNumber.from(50_000_000);\n         // process.stdout.write('n' + 'gas estimation: ' + estimatedGas.toNumber() + 'n');\n \n         let payload: BytesLike = await l1.bridge.callStatic.getBridgeOutRequestPayload(\n@@ -303,7 +304,8 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             '0x' + remove0x((await l1.operator.getMessagingModule()).toLowerCase()).repeat(2),\n             payload\n           );\n-\n+        estimatedGas = BigNumber.from(5_000_000);\n+        \n         process.stdout.write(' '.repeat(10) + 'expected lz gas to be ' + executeJobGas(payload, true).toString());\n         await expect(\n           adminCall(l2.mockLZEndpoint.connect(l2.lzEndpoint), l2.lzModule, 'lzReceive', \n@@ -313,7 +315,7 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             payload,\n             {\n               gasPrice: GASPRICE,\n             gasLimit: executeJobGas(payload),\n+              gasLimit: 5_000_000,\n             },\n           ])\n         )\n"
                ],
                "Type": " An attacker can lock operator out of the pod by setting gas limit that's higher than the block gas limit of dest chain",
                "Description": "*Submitted by 0xA5DF, also found by 0x52*\n\nHolographOperator.sol#L415(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L415)<br\n\nWhen a beaming job is executed, there's a requirement that the gas left would be at least as the gasLimit set by the user.\nGiven that there's no limit on the gasLimit the user can set, a user can set the gasLimit to amount that's higher than the block gas limit on the dest chain, causing the operator to fail to execute the job.\n\n\nOperators would be locked out of the pod, unable to execute any more jobs and not being able to get back the bond they paid.\n\nThe attacker would have to pay a value equivalent to the gas fee if that amount was realistic (i.e. gasPrice &ast; gasLimit in dest chain native token), but this can be a relative low amount for Polygon and Avalanche chain (for Polygon that's 20M gas limit and 200 Gwei gas = 4 Matic, for Avalanche the block gas limit seems to be 8M and the price ~30 nAVAX = 0.24 AVAX). Plus, the operator isn't going to receive that amount.\n\n\nThe following test demonstrates this scenario:\n\ndiff\ndiff --git a/test/06_cross-chain_minting_tests_l1_l2.ts b/test/06_cross-chain_minting_tests_l1_l2.ts\nindex 1f2b959..a1a23b7 100644\n--a/test/06_cross-chain_minting_tests_l1_l2.ts\n+++ b/test/06_cross-chain_minting_tests_l1_l2.ts\n@@ -276,6 +276,7 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             gasLimit: TESTGASLIMIT,\n           })\n         );\n+        estimatedGas = BigNumber.from(50_000_000);\n         // process.stdout.write('n' + 'gas estimation: ' + estimatedGas.toNumber() + 'n');\n \n         let payload: BytesLike = await l1.bridge.callStatic.getBridgeOutRequestPayload(\n@@ -303,7 +304,8 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             '0x' + remove0x((await l1.operator.getMessagingModule()).toLowerCase()).repeat(2),\n             payload\n           );\n-\n+        estimatedGas = BigNumber.from(5_000_000);\n+        \n         process.stdout.write(' '.repeat(10) + 'expected lz gas to be ' + executeJobGas(payload, true).toString());\n         await expect(\n           adminCall(l2.mockLZEndpoint.connect(l2.lzEndpoint), l2.lzModule, 'lzReceive', \n@@ -313,7 +315,7 @@ describe('Testing cross-chain minting (L1 & L2)', async function () {\n             payload,\n             {\n               gasPrice: GASPRICE,\n             gasLimit: executeJobGas(payload),\n+              gasLimit: 5_000_000,\n             },\n           ])\n         )\n\n\nThe test would fail with the following output:\n\n      1) Testing cross-chain minting (L1 & L2)\n           Deploy cross-chain contracts via bridge deploy\n             hToken\n               deploy l1 equivalent on l2:\n         VM Exception while processing transaction: revert HOLOGRAPH: not enough gas left\n\n",
                "Repair": "\nLimit the gasLimit to the maximum realistic amount that can be used on the dest chain (including the gas used up to the point where it's checked).\n\nACC01ADE (Holograph) confirmed and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/414#issuecomment-1308900212):\n  Good idea to generally limit the maximum gas allowed in an operator job.\n\n  Feature/HOLO-604: implementing critical issue fixes(https://github.com/holographxyz/holograph-protocol/pull/84)\n\n\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/InitializableInterface.sol\";\nimport \"./interface/HolographInterface.sol\";\n\n/**\n * @title Holograph Protocol\n * @author https://github.com/holographxyz\n * @notice This is the primary Holograph Protocol smart contract\n * @dev This contract stores a reference to all the primary modules and variables of the protocol\n */\ncontract Holograph is Admin, Initializable, HolographInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)\n   */\n  bytes32 constant _bridgeSlot = precomputeslot(\"eip1967.Holograph.bridge\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.chainId')) - 1)\n   */\n  bytes32 constant _chainIdSlot = precomputeslot(\"eip1967.Holograph.chainId\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)\n   */\n  bytes32 constant _factorySlot = precomputeslot(\"eip1967.Holograph.factory\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holographChainId')) - 1)\n   */\n  bytes32 constant _holographChainIdSlot = precomputeslot(\"eip1967.Holograph.holographChainId\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)\n   */\n  bytes32 constant _interfacesSlot = precomputeslot(\"eip1967.Holograph.interfaces\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)\n   */\n  bytes32 constant _operatorSlot = precomputeslot(\"eip1967.Holograph.operator\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.treasury')) - 1)\n   */\n  bytes32 constant _treasurySlot = precomputeslot(\"eip1967.Holograph.treasury\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)\n   */\n  bytes32 constant _utilityTokenSlot = precomputeslot(\"eip1967.Holograph.utilityToken\");\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (\n      uint32 holographChainId,\n      address bridge,\n      address factory,\n      address interfaces,\n      address operator,\n      address registry,\n      address treasury,\n      address utilityToken\n    ) = abi.decode(initPayload, (uint32, address, address, address, address, address, address, address));\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_chainIdSlot, chainid())\n      sstore(_holographChainIdSlot, holographChainId)\n      sstore(_bridgeSlot, bridge)\n      sstore(_factorySlot, factory)\n      sstore(_interfacesSlot, interfaces)\n      sstore(_operatorSlot, operator)\n      sstore(_registrySlot, registry)\n      sstore(_treasurySlot, treasury)\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @notice Get the address of the Holograph Bridge module\n   * @dev Used for beaming holographable assets cross-chain\n   */\n  function getBridge() external view returns (address bridge) {\n    assembly {\n      bridge := sload(_bridgeSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Bridge module address\n   * @param bridge address of the Holograph Bridge smart contract to use\n   */\n  function setBridge(address bridge) external onlyAdmin {\n    assembly {\n      sstore(_bridgeSlot, bridge)\n    }\n  }\n\n  /**\n   * @notice Get the chain ID that the Protocol was deployed on\n   * @dev Useful for checking if/when a hard fork occurs\n   */\n  function getChainId() external view returns (uint256 chainId) {\n    assembly {\n      chainId := sload(_chainIdSlot)\n    }\n  }\n\n  /**\n   * @notice Update the chain ID\n   * @dev Useful for updating once a hard fork has been mitigated\n   * @param chainId EVM chain ID to use\n   */\n  function setChainId(uint256 chainId) external onlyAdmin {\n    assembly {\n      sstore(_chainIdSlot, chainId)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Factory module\n   * @dev Used for deploying holographable smart contracts\n   */\n  function getFactory() external view returns (address factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Factory module address\n   * @param factory address of the Holograph Factory smart contract to use\n   */\n  function setFactory(address factory) external onlyAdmin {\n    assembly {\n      sstore(_factorySlot, factory)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph chain Id\n   * @dev Holograph uses an internal chain id mapping\n   */\n  function getHolographChainId() external view returns (uint32 holographChainId) {\n    assembly {\n      holographChainId := sload(_holographChainIdSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph chain ID\n   * @dev Useful for updating once a hard fork was mitigated\n   * @param holographChainId Holograph chain ID to use\n   */\n  function setHolographChainId(uint32 holographChainId) external onlyAdmin {\n    assembly {\n      sstore(_holographChainIdSlot, holographChainId)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Interfaces module\n   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules\n   */\n  function getInterfaces() external view returns (address interfaces) {\n    assembly {\n      interfaces := sload(_interfacesSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Interfaces module address\n   * @param interfaces address of the Holograph Interfaces smart contract to use\n   */\n  function setInterfaces(address interfaces) external onlyAdmin {\n    assembly {\n      sstore(_interfacesSlot, interfaces)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Operator module\n   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module\n   */\n  function getOperator() external view returns (address operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Operator module address\n   * @param operator address of the Holograph Operator smart contract to use\n   */\n  function setOperator(address operator) external onlyAdmin {\n    assembly {\n      sstore(_operatorSlot, operator)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Treasury module\n   * @dev All of the Holograph Protocol assets are stored and managed by this module\n   */\n  function getTreasury() external view returns (address treasury) {\n    assembly {\n      treasury := sload(_treasurySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Treasury module address\n   * @param treasury address of the Holograph Treasury smart contract to use\n   */\n  function setTreasury(address treasury) external onlyAdmin {\n    assembly {\n      sstore(_treasurySlot, treasury)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Utility Token address\n   * @dev This is the official utility token of the Holograph Protocol\n   */\n  function getUtilityToken() external view returns (address utilityToken) {\n    assembly {\n      utilityToken := sload(_utilityTokenSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Utility Token address\n   * @param utilityToken address of the Holograph Utility Token smart contract to use\n   */\n  function setUtilityToken(address utilityToken) external onlyAdmin {\n    assembly {\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract\n   */\n  receive() external payable {\n    revert();\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/HolographERC20Interface.sol\";\nimport \"./interface/Holographable.sol\";\nimport \"./interface/HolographInterface.sol\";\nimport \"./interface/HolographBridgeInterface.sol\";\nimport \"./interface/HolographFactoryInterface.sol\";\nimport \"./interface/HolographOperatorInterface.sol\";\nimport \"./interface/HolographRegistryInterface.sol\";\nimport \"./interface/InitializableInterface.sol\";\n\n/**\n * @title Holograph Bridge\n * @author https://github.com/holographxyz\n * @notice Beam any holographable contracts and assets across blockchains\n * @dev The contract abstracts all the complexities of making bridge requests and uses a universal interface to bridge any type of holographable assets\n */\ncontract HolographBridge is Admin, Initializable, HolographBridgeInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)\n   */\n  bytes32 constant _factorySlot = precomputeslot(\"eip1967.Holograph.factory\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)\n   */\n  bytes32 constant _holographSlot = precomputeslot(\"eip1967.Holograph.holograph\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)\n   */\n  bytes32 constant _jobNonceSlot = precomputeslot(\"eip1967.Holograph.jobNonce\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)\n   */\n  bytes32 constant _operatorSlot = precomputeslot(\"eip1967.Holograph.operator\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n\n  /**\n   * @dev Allow calls only from Holograph Operator contract\n   */\n  modifier onlyOperator() {\n    require(msg.sender == address(_operator()), \"HOLOGRAPH: operator only call\");\n    _;\n  }\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (address factory, address holograph, address operator, address registry) = abi.decode(\n      initPayload,\n      (address, address, address, address)\n    );\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_factorySlot, factory)\n      sstore(_holographSlot, holograph)\n      sstore(_operatorSlot, operator)\n      sstore(_registrySlot, registry)\n    }\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @notice Receive a beam from another chain\n   * @dev This function can only be called by the Holograph Operator module\n   * @param fromChain Holograph Chain ID where the brigeOutRequest was created\n   * @param holographableContract address of the destination contract that the bridgeInRequest is targeted for\n   * @param hToken address of the hToken contract that wrapped the origin chain native gas token\n   * @param hTokenRecipient address of recipient for the hToken reward\n   * @param hTokenValue exact amount of hToken reward in wei\n   * @param doNotRevert boolean used to specify if the call should revert\n   * @param bridgeInPayload actual abi encoded bytes of the data that the holographable contract bridgeIn function will receive\n   */\n  function bridgeInRequest(\n    uint256, /* nonce*/\n    uint32 fromChain,\n    address holographableContract,\n    address hToken,\n    address hTokenRecipient,\n    uint256 hTokenValue,\n    bool doNotRevert,\n    bytes calldata bridgeInPayload\n  ) external payable onlyOperator {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeIn function call to the holographable contract\n     */\n    bytes4 selector = Holographable(holographableContract).bridgeIn(fromChain, bridgeInPayload);\n    /**\n     * @dev ensure returned selector is bridgeIn function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeIn.selector, \"HOLOGRAPH: bridge in failed\");\n    /**\n     * @dev check if a specific reward amount was assigned to this request\n     */\n    if (hTokenValue > 0) {\n      /**\n       * @dev mint the specific hToken amount for hToken recipient\n       *      this value is equivalent to amount that is deposited on origin chain's hToken contract\n       *      recipient can beam the asset to origin chain and unwrap for native gas token at any time\n       */\n      require(\n        HolographERC20Interface(hToken).holographBridgeMint(hTokenRecipient, hTokenValue) ==\n          HolographERC20Interface.holographBridgeMint.selector,\n        \"HOLOGRAPH: hToken mint failed\"\n      );\n    }\n    /**\n     * @dev allow the call to revert on demand, for example use case, look into the Holograph Operator's jobEstimator function\n     */\n    require(doNotRevert, \"HOLOGRAPH: reverted\");\n  }\n\n  /**\n   * @notice Create a beam request for a destination chain\n   * @dev This function works for deploying contracts and beaming supported holographable assets across chains\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function bridgeOutRequest(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external payable {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeOut function call to the holographable contract\n     */\n    (bytes4 selector, bytes memory returnedPayload) = Holographable(holographableContract).bridgeOut(\n      toChain,\n      msg.sender,\n      bridgeOutPayload\n    );\n    /**\n     * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeOut.selector, \"HOLOGRAPH: bridge out failed\");\n    /**\n     * @dev pass the request, along with all data, to Holograph Operator, to handle the cross-chain messaging logic\n     */\n    _operator().send{value: msg.value}(\n      gasLimit,\n      gasPrice,\n      toChain,\n      msg.sender,\n      _jobNonce(),\n      holographableContract,\n      returnedPayload\n    );\n  }\n\n  /**\n   * @notice Do not call this function, it will always revert\n   * @dev Used by getBridgeOutRequestPayload function\n   *      It is purposefully inverted to always revert on a successful call\n   *      Marked as external and not private to allow use inside try/catch of getBridgeOutRequestPayload function\n   *      If this function does not revert and returns a string, it is the actual revert reason\n   * @param sender address of actual sender that is planning to make a bridgeOutRequest call\n   * @param toChain holograph chain id of destination chain\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function revertedBridgeOutRequest(\n    address sender,\n    uint32 toChain,\n    address holographableContract,\n    bytes calldata bridgeOutPayload\n  ) external returns (string memory revertReason) {\n    /**\n     * @dev make a bridgeOut function call to the holographable contract inside of a try/catch\n     */\n    try Holographable(holographableContract).bridgeOut(toChain, sender, bridgeOutPayload) returns (\n      bytes4 selector,\n      bytes memory payload\n    ) {\n      /**\n       * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n       */\n      if (selector != Holographable.bridgeOut.selector) {\n        /**\n         * @dev if selector does not match, then it means the request failed\n         */\n        return \"HOLOGRAPH: bridge out failed\";\n      }\n      assembly {\n        /**\n         * @dev the entire payload is sent back in a revert\n         */\n        revert(add(payload, 0x20), mload(payload))\n      }\n    } catch Error(string memory reason) {\n      return reason;\n    } catch {\n      return \"HOLOGRAPH: unknown error\";\n    }\n  }\n\n  /**\n   * @notice Get the payload created by the bridgeOutRequest function\n   * @dev Use this function to get the payload that will be generated by a bridgeOutRequest\n   *      Only use this with a static call\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   * @return samplePayload bytes made up of the bridgeOutRequest payload\n   */\n  function getBridgeOutRequestPayload(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external returns (bytes memory samplePayload) {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    bytes memory payload;\n    /**\n     * @dev the revertedBridgeOutRequest function is wrapped into a try/catch function\n     */\n    try this.revertedBridgeOutRequest(msg.sender, toChain, holographableContract, bridgeOutPayload) returns (\n      string memory revertReason\n    ) {\n      /**\n       * @dev a non reverted result is actually a revert\n       */\n      revert(revertReason);\n    } catch (bytes memory realResponse) {\n      /**\n       * @dev a revert is actually success, so the return data is stored as payload\n       */\n      payload = realResponse;\n    }\n    uint256 jobNonce;\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n    /**\n     * @dev extract hlgFee from operator\n     */\n    uint256 fee = 0;\n    if (gasPrice < type(uint256).max && gasLimit < type(uint256).max) {\n      (uint256 hlgFee, ) = _operator().getMessageFee(toChain, gasLimit, gasPrice, bridgeOutPayload);\n      fee = hlgFee;\n    }\n    /**\n     * @dev the data is abi encoded into actual bridgeOutRequest payload bytes\n     */\n    bytes memory encodedData = abi.encodeWithSelector(\n      HolographBridgeInterface.bridgeInRequest.selector,\n      /**\n       * @dev the latest job nonce is incremented by one\n       */\n      jobNonce + 1,\n      _holograph().getHolographChainId(),\n      holographableContract,\n      _registry().getHToken(_holograph().getHolographChainId()),\n      address(0),\n      fee,\n      true,\n      payload\n    );\n    /**\n     * @dev this abi encodes the data just like in Holograph Operator\n     */\n    samplePayload = abi.encodePacked(encodedData, gasLimit, gasPrice);\n  }\n\n  /**\n   * @notice Get the fees associated with sending specific payload\n   * @dev Will provide exact costs on protocol and message side, combine the two to get total\n   * @dev @param toChain holograph chain id of destination chain for payload\n   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain\n   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically\n   * @dev @param crossChainPayload the entire packet being sent cross-chain\n   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain\n   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain\n   */\n  function getMessageFee(\n    uint32,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external view returns (uint256, uint256) {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := staticcall(gas(), sload(_operatorSlot), 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Factory module\n   * @dev Used for deploying holographable smart contracts\n   */\n  function getFactory() external view returns (address factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Factory module address\n   * @param factory address of the Holograph Factory smart contract to use\n   */\n  function setFactory(address factory) external onlyAdmin {\n    assembly {\n      sstore(_factorySlot, factory)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Protocol contract\n   * @dev Used for storing a reference to all the primary modules and variables of the protocol\n   */\n  function getHolograph() external view returns (address holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Protocol contract address\n   * @param holograph address of the Holograph Protocol smart contract to use\n   */\n  function setHolograph(address holograph) external onlyAdmin {\n    assembly {\n      sstore(_holographSlot, holograph)\n    }\n  }\n\n  /**\n   * @notice Get the latest job nonce\n   * @dev You can use the job nonce as a way to calculate total amount of bridge requests that have been made\n   */\n  function getJobNonce() external view returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Operator module\n   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module\n   */\n  function getOperator() external view returns (address operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Operator module address\n   * @param operator address of the Holograph Operator smart contract to use\n   */\n  function setOperator(address operator) external onlyAdmin {\n    assembly {\n      sstore(_operatorSlot, operator)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Factory Interface\n   */\n  function _factory() private view returns (HolographFactoryInterface factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interface\n   */\n  function _holograph() private view returns (HolographInterface holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @dev Internal nonce, that increments on each call, used for randomness\n   */\n  function _jobNonce() private returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)\n      sstore(_jobNonceSlot, jobNonce)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Operator Interface\n   */\n  function _operator() private view returns (HolographOperatorInterface operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Registry Interface\n   */\n  function _registry() private view returns (HolographRegistryInterface registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract\n   */\n  receive() external payable {\n    revert();\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n",
        "CodeNames": [
            "Holograph.sol",
            "HolographBridge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "bridgeIn",
                    "data",
                    "gasPrice"
                ],
                "Type": " If user sets a low  gasPrice  the operator would have to choose between being locked out of the pod or executing the job anyway",
                "Description": "*Submitted by 0xA5DF, also found by cryptphi, Jeiwan, and Picodes*\n\nHolographOperator.sol#L202-L340(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/HolographOperator.sol#L202-L340)<br\nHolographOperator.sol#L593-L596(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L593-L596)<br\nLayerZeroModule.sol#L277-L294(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/module/LayerZeroModule.sol#L277-L294)<br\n\nDuring the beaming process the user compensates the operator for the gas he has to pay by sending some source-chain-native-tokens via hToken.<br\nThe amount he has to pay is determined according to the gasPrice set by the user, which is supposed to be the maximum gas price to be used on dest chain (therefore predicting the max gas fee the operator would pay and paying him the same value in src chain native tokens).<br\nHowever, in case the user sets a low price (as low as 1 wei) the operator can't skip the job because he's locked out of the pod till he executes the job.<br\nThe operator would have to choose between loosing money by paying a higher gas fee than he's compensated for or being locked out of the pod not able to execute additional jobs or get back his bonded amount.<br\n\n\nOperator would be losing money by having to pay gas fee that's higher than the compensation (gas fee can be a few dozens of USD for heavy txs).<br\nThis could also be used by attackers to make operators pay for the attackers' expensive gas tasks:\n\n*   They can deploy their own contract as the 'source contract'\n*   Use the bridgeIn event and the data that's being sent to it to instruct the source contract what operations need to be executed\n*   They can use it for execute operations where the tx.origin doesn't matter (e.g. USDc gasless send)\n\n\n*   An operator can't execute any further jobs or leave the pod till the job is executed. From the docs(https://docs.holograph.xyz/holograph-protocol/operator-network-specification#:~:text=When%20an%20operator%20is%20selected%20for%20a%20job%2C%20they%20are%20temporarily%20removed%20from%20the%20pod%2C%20until%20they%20complete%20the%20job.%20If%20an%20operator%20successfully%20finalizes%20a%20job%2C%20they%20earn%20a%20reward%20and%20are%20placed%20back%20into%20their%20selected%20pod.):\n\n When an operator is selected for a job, they are temporarily removed from the pod, until they complete the job. If an operator successfully finalizes a job, they earn a reward and are placed back into their selected pod.\n\n*   Operator can't skip a job. Can't prove a negative but that's pretty clear from reading the code.\n*   There's indeed a third option that some other operator/user would execute the job instead of the selected operator, but a) the operator would get slashed for that. b) If the compensation is lower than the gas fee then other users have no incentive to execute it as well.\n\n",
                "Repair": "\nAllow operator to opt out of executing the job if the gasPrice is higher than the current gas price.\n\nalexanderattar (Holograph) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/364#issuecomment-1306348781):\n  Is a known issue, and we will be fixing it.\n\nalexanderattar (Holograph) resolved(https://github.com/code-423n4/2022-10-holograph-findings/issues/364):\n  Feature/HOLO-604: implementing critical issue fixes(https://github.com/holographxyz/holograph-protocol/pull/84)\n\n\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/CrossChainMessageInterface.sol\";\nimport \"./interface/HolographBridgeInterface.sol\";\nimport \"./interface/HolographERC20Interface.sol\";\nimport \"./interface/HolographInterface.sol\";\nimport \"./interface/HolographOperatorInterface.sol\";\nimport \"./interface/HolographRegistryInterface.sol\";\nimport \"./interface/InitializableInterface.sol\";\nimport \"./interface/HolographInterfacesInterface.sol\";\nimport \"./interface/Ownable.sol\";\n\nimport \"./struct/OperatorJob.sol\";\n\n/**\n * @title Holograph Operator\n * @author https://github.com/holographxyz\n * @notice Participate in the Holograph Protocol by becoming an Operator\n * @dev This contract allows operators to bond utility tokens and help execute operator jobs\n */\ncontract HolographOperator is Admin, Initializable, HolographOperatorInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)\n   */\n  bytes32 constant _bridgeSlot = precomputeslot(\"eip1967.Holograph.bridge\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)\n   */\n  bytes32 constant _holographSlot = precomputeslot(\"eip1967.Holograph.holograph\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)\n   */\n  bytes32 constant _interfacesSlot = precomputeslot(\"eip1967.Holograph.interfaces\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)\n   */\n  bytes32 constant _jobNonceSlot = precomputeslot(\"eip1967.Holograph.jobNonce\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.messagingModule')) - 1)\n   */\n  bytes32 constant _messagingModuleSlot = precomputeslot(\"eip1967.Holograph.messagingModule\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)\n   */\n  bytes32 constant _utilityTokenSlot = precomputeslot(\"eip1967.Holograph.utilityToken\");\n\n  /**\n   * @dev Internal number (in seconds), used for defining a window for operator to execute the job\n   */\n  uint256 private _blockTime;\n\n  /**\n   * @dev Minimum amount of tokens needed for bonding\n   */\n  uint256 private _baseBondAmount;\n\n  /**\n   * @dev The multiplier used for calculating bonding amount for pods\n   */\n  uint256 private _podMultiplier;\n\n  /**\n   * @dev The threshold used for limiting number of operators in a pod\n   */\n  uint256 private _operatorThreshold;\n\n  /**\n   * @dev The threshold step used for increasing bond amount once threshold is reached\n   */\n  uint256 private _operatorThresholdStep;\n\n  /**\n   * @dev The threshold divisor used for increasing bond amount once threshold is reached\n   */\n  uint256 private _operatorThresholdDivisor;\n\n  /**\n   * @dev Internal counter of all cross-chain messages received\n   */\n  uint256 private _inboundMessageCounter;\n\n  /**\n   * @dev Internal mapping of operator job details for a specific job hash\n   */\n  mapping(bytes32 => uint256) private _operatorJobs;\n\n  /**\n   * @dev Internal mapping of operator job details for a specific job hash\n   */\n  mapping(bytes32 => bool) private _failedJobs;\n\n  /**\n   * @dev Internal mapping of operator addresses, used for temp storage when defining an operator job\n   */\n  mapping(uint256 => address) private _operatorTempStorage;\n\n  /**\n   * @dev Internal index used for storing/referencing operator temp storage\n   */\n  uint32 private _operatorTempStorageCounter;\n\n  /**\n   * @dev Multi-dimensional array of available operators\n   */\n  address[][] private _operatorPods;\n\n  /**\n   * @dev Internal mapping of bonded operators, to prevent double bonding\n   */\n  mapping(address => uint256) private _bondedOperators;\n\n  /**\n   * @dev Internal mapping of bonded operators, to prevent double bonding\n   */\n  mapping(address => uint256) private _operatorPodIndex;\n\n  /**\n   * @dev Internal mapping of bonded operator amounts\n   */\n  mapping(address => uint256) private _bondedAmounts;\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (address bridge, address holograph, address interfaces, address registry, address utilityToken) = abi.decode(\n      initPayload,\n      (address, address, address, address, address)\n    );\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_bridgeSlot, bridge)\n      sstore(_holographSlot, holograph)\n      sstore(_interfacesSlot, interfaces)\n      sstore(_registrySlot, registry)\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n    _blockTime = 60; // 60 seconds allowed for execution\n    unchecked {\n      _baseBondAmount = 100 * (10**18); // one single token unit * 100\n    }\n    // how much to increase bond amount per pod\n    _podMultiplier = 2; // 1, 4, 16, 64\n    // starting pod max amount\n    _operatorThreshold = 1000;\n    // how often to increase price per each operator\n    _operatorThresholdStep = 10;\n    // we want to multiply by decimals, but instead will have to divide\n    _operatorThresholdDivisor = 100; // == * 0.01\n    // set first operator for each pod as zero address\n    _operatorPods = [[address(0)]];\n    // mark zero address as bonded operator, to prevent abuse\n    _bondedOperators[address(0)] = 1;\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @dev temp function, used for quicker updates/resets during development\n   *      NOT PART OF FINAL CODE !!!\n   */\n  function resetOperator(\n    uint256 blockTime,\n    uint256 baseBondAmount,\n    uint256 podMultiplier,\n    uint256 operatorThreshold,\n    uint256 operatorThresholdStep,\n    uint256 operatorThresholdDivisor\n  ) external onlyAdmin {\n    _blockTime = blockTime;\n    _baseBondAmount = baseBondAmount;\n    _podMultiplier = podMultiplier;\n    _operatorThreshold = operatorThreshold;\n    _operatorThresholdStep = operatorThresholdStep;\n    _operatorThresholdDivisor = operatorThresholdDivisor;\n    _operatorPods = [[address(0)]];\n    _bondedOperators[address(0)] = 1;\n  }\n\n  /**\n   * @notice Execute an available operator job\n   * @dev When making this call, if operating criteria is not met, the call will revert\n   * @param bridgeInRequestPayload the entire cross chain message payload\n   */\n  function executeJob(bytes calldata bridgeInRequestPayload) external payable {\n    /**\n     * @dev derive the payload hash for use in mappings\n     */\n    bytes32 hash = keccak256(bridgeInRequestPayload);\n    /**\n     * @dev check that job exists\n     */\n    require(_operatorJobs[hash] > 0, \"HOLOGRAPH: invalid job\");\n    uint256 gasLimit = 0;\n    uint256 gasPrice = 0;\n    assembly {\n      /**\n       * @dev extract gasLimit\n       */\n      gasLimit := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x40))\n      /**\n       * @dev extract gasPrice\n       */\n      gasPrice := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x20))\n    }\n    /**\n     * @dev unpack bitwise packed operator job details\n     */\n    OperatorJob memory job = getJobDetails(hash);\n    /**\n     * @dev to prevent replay attacks, remove job from mapping\n     */\n    delete _operatorJobs[hash];\n    /**\n     * @dev check that a specific operator was selected for the job\n     */\n    if (job.operator != address(0)) {\n      /**\n       * @dev switch pod to index based value\n       */\n      uint256 pod = job.pod - 1;\n      /**\n       * @dev check if sender is not the selected primary operator\n       */\n      if (job.operator != msg.sender) {\n        /**\n         * @dev sender is not selected operator, need to check if allowed to do job\n         */\n        uint256 elapsedTime = block.timestamp - uint256(job.startTimestamp);\n        uint256 timeDifference = elapsedTime / job.blockTimes;\n        /**\n         * @dev validate that initial selected operator time slot is still active\n         */\n        require(timeDifference > 0, \"HOLOGRAPH: operator has time\");\n        /**\n         * @dev check that the selected missed the time slot due to a gas spike\n         */\n        require(gasPrice >= tx.gasprice, \"HOLOGRAPH: gas spike detected\");\n        /**\n         * @dev check if time is within fallback operator slots\n         */\n        if (timeDifference < 6) {\n          uint256 podIndex = uint256(job.fallbackOperators[timeDifference - 1]);\n          /**\n           * @dev do a quick sanity check to make sure operator did not leave from index or is a zero address\n           */\n          if (podIndex > 0 && podIndex < _operatorPods[pod].length) {\n            address fallbackOperator = _operatorPods[pod][podIndex];\n            /**\n             * @dev ensure that sender is currently valid backup operator\n             */\n            require(fallbackOperator == msg.sender, \"HOLOGRAPH: invalid fallback\");\n          }\n        }\n        /**\n         * @dev time to reward the current operator\n         */\n        uint256 amount = _getBaseBondAmount(pod);\n        /**\n         * @dev select operator that failed to do the job, is slashed the pod base fee\n         */\n        _bondedAmounts[job.operator] -= amount;\n        /**\n         * @dev the slashed amount is sent to current operator\n         */\n        _bondedAmounts[msg.sender] += amount;\n        /**\n         * @dev check if slashed operator has enough tokens bonded to stay\n         */\n        if (_bondedAmounts[job.operator] >= amount) {\n          /**\n           * @dev enough bond amount leftover, put operator back in\n           */\n          _operatorPods[pod].push(job.operator);\n          _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;\n          _bondedOperators[job.operator] = job.pod;\n        } else {\n          /**\n           * @dev slashed operator does not have enough tokens bonded, return remaining tokens only\n           */\n          uint256 leftovers = _bondedAmounts[job.operator];\n          if (leftovers > 0) {\n            _bondedAmounts[job.operator] = 0;\n            _utilityToken().transfer(job.operator, leftovers);\n          }\n        }\n      } else {\n        /**\n         * @dev the selected operator is executing the job\n         */\n        _operatorPods[pod].push(msg.sender);\n        _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;\n        _bondedOperators[msg.sender] = job.pod;\n      }\n    }\n    /**\n     * @dev ensure that there is enough has left for the job\n     */\n    require(gasleft() > gasLimit, \"HOLOGRAPH: not enough gas left\");\n    /**\n     * @dev execute the job\n     */\n    try\n      HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(\n        msg.sender,\n        bridgeInRequestPayload\n      )\n    {\n      /// @dev do nothing\n    } catch {\n      _failedJobs[hash] = true;\n      emit FailedOperatorJob(hash);\n    }\n    /**\n     * @dev every executed job (even if failed) increments total message counter by one\n     */\n    ++_inboundMessageCounter;\n    /**\n     * @dev reward operator (with HLG) for executing the job\n     * @dev this is out of scope and is purposefully omitted from code\n     */\n    ////  _bondedOperators[msg.sender] += reward;\n  }\n\n  /*\n   * @dev Purposefully made to be external so that Operator can call it during executeJob function\n   *      Check the executeJob function to understand it's implementation\n   */\n  function nonRevertingBridgeCall(address msgSender, bytes calldata payload) external payable {\n    require(msg.sender == address(this), \"HOLOGRAPH: operator only call\");\n    assembly {\n      /**\n       * @dev remove gas price from end\n       */\n      calldatacopy(0, payload.offset, sub(payload.length, 0x20))\n      /**\n       * @dev hToken recipient is injected right before making the call\n       */\n      mstore(0x84, msgSender)\n      /**\n       * @dev make non-reverting call\n       */\n      let result := call(\n        /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value\n        mload(sub(payload.length, 0x40)),\n        /// @dev destination is bridge contract\n        sload(_bridgeSlot),\n        /// @dev any value is passed along\n        callvalue(),\n        /// @dev data is retrieved from 0 index memory position\n        0,\n        /// @dev everything except for last 32 bytes (gas limit) is sent\n        sub(payload.length, 0x40),\n        0,\n        0\n      )\n      if eq(result, 0) {\n        revert(0, 0)\n      }\n      return(0, 0)\n    }\n  }\n\n  /**\n   * @notice Receive a cross-chain message\n   * @dev This function is restricted for use by Holograph Messaging Module only\n   */\n  function crossChainMessage(bytes calldata bridgeInRequestPayload) external payable {\n    require(msg.sender == address(_messagingModule()), \"HOLOGRAPH: messaging only call\");\n    /**\n     * @dev would be a good idea to check payload gas price here and if it is significantly lower than current amount\n     *      to set zero address as operator to not lock-up an operator unnecessarily\n     */\n    unchecked {\n      bytes32 jobHash = keccak256(bridgeInRequestPayload);\n      /**\n       * @dev load and increment operator temp storage in one call\n       */\n      ++_operatorTempStorageCounter;\n      /**\n       * @dev use job hash, job nonce, block number, and block timestamp for generating a random number\n       */\n      uint256 random = uint256(keccak256(abi.encodePacked(jobHash, _jobNonce(), block.number, block.timestamp)));\n      /**\n       * @dev divide by total number of pods, use modulus/remainder\n       */\n      uint256 pod = random % _operatorPods.length;\n      /**\n       * @dev identify the total number of available operators in pod\n       */\n      uint256 podSize = _operatorPods[pod].length;\n      /**\n       * @dev select a primary operator\n       */\n      uint256 operatorIndex = random % podSize;\n      /**\n       * @dev If operator index is 0, then it's open season! Anyone can execute this job. First come first serve\n       *      pop operator to ensure that they cannot be selected for any other job until this one completes\n       *      decrease pod size to accomodate popped operator\n       */\n      _operatorTempStorage[_operatorTempStorageCounter] = _operatorPods[pod][operatorIndex];\n      _popOperator(pod, operatorIndex);\n      if (podSize > 1) {\n        podSize--;\n      }\n      _operatorJobs[jobHash] = uint256(\n        ((pod + 1) << 248) |\n          (uint256(_operatorTempStorageCounter) << 216) |\n          (block.number << 176) |\n          (_randomBlockHash(random, podSize, 1) << 160) |\n          (_randomBlockHash(random, podSize, 2) << 144) |\n          (_randomBlockHash(random, podSize, 3) << 128) |\n          (_randomBlockHash(random, podSize, 4) << 112) |\n          (_randomBlockHash(random, podSize, 5) << 96) |\n          (block.timestamp << 16) |\n          0\n      ); // 80 next available bit position && so far 176 bits used with only 128 left\n      /**\n       * @dev emit event to signal to operators that a job has become available\n       */\n      emit AvailableOperatorJob(jobHash, bridgeInRequestPayload);\n    }\n  }\n\n  /**\n   * @notice Calculate the amount of gas needed to execute a bridgeInRequest\n   * @dev Use this function to estimate the amount of gas that will be used by the bridgeInRequest function\n   *      Set a specific gas limit when making this call, subtract return value, to get total gas used\n   *      Only use this with a static call\n   * @param bridgeInRequestPayload abi encoded bytes making up the bridgeInRequest payload\n   * @return the gas amount remaining after the static call is returned\n   */\n  function jobEstimator(bytes calldata bridgeInRequestPayload) external payable returns (uint256) {\n    assembly {\n      calldatacopy(0, bridgeInRequestPayload.offset, sub(bridgeInRequestPayload.length, 0x40))\n      /**\n       * @dev bridgeInRequest doNotRevert is purposefully set to false so a rever would happen\n       */\n      mstore8(0xE3, 0x00)\n      let result := call(gas(), sload(_bridgeSlot), callvalue(), 0, sub(bridgeInRequestPayload.length, 0x40), 0, 0)\n      /**\n       * @dev if for some reason the call does not revert, it is force reverted\n       */\n      if eq(result, 1) {\n        returndatacopy(0, 0, returndatasize())\n        revert(0, returndatasize())\n      }\n      /**\n       * @dev remaining gas is set as the return value\n       */\n      mstore(0x00, gas())\n      return(0x00, 0x20)\n    }\n  }\n\n  /**\n   * @notice Send cross chain bridge request message\n   * @dev This function is restricted to only be callable by Holograph Bridge\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param nonce incremented number used to ensure job hashes are unique\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param bridgeOutPayload bytes made up of the bridgeOutRequest payload\n   */\n  function send(\n    uint256 gasLimit,\n    uint256 gasPrice,\n    uint32 toChain,\n    address msgSender,\n    uint256 nonce,\n    address holographableContract,\n    bytes calldata bridgeOutPayload\n  ) external payable {\n    require(msg.sender == _bridge(), \"HOLOGRAPH: bridge only call\");\n    CrossChainMessageInterface messagingModule = _messagingModule();\n    uint256 hlgFee = messagingModule.getHlgFee(toChain, gasLimit, gasPrice);\n    address hToken = _registry().getHToken(_holograph().getHolographChainId());\n    require(hlgFee < msg.value, \"HOLOGRAPH: not enough value\");\n    payable(hToken).transfer(hlgFee);\n    bytes memory encodedData = abi.encodeWithSelector(\n      HolographBridgeInterface.bridgeInRequest.selector,\n      /**\n       * @dev job nonce is an incremented value that is assigned to each bridge request to guarantee unique hashes\n       */\n      nonce,\n      /**\n       * @dev including the current holograph chain id (origin chain)\n       */\n      _holograph().getHolographChainId(),\n      /**\n       * @dev holographable contract have the same address across all chains, so our destination address will be the same\n       */\n      holographableContract,\n      /**\n       * @dev get the current chain's hToken for native gas token\n       */\n      hToken,\n      /**\n       * @dev recipient will be defined when operator picks up the job\n       */\n      address(0),\n      /**\n       * @dev value is set to zero for now\n       */\n      hlgFee,\n      /**\n       * @dev specify that function call should not revert\n       */\n      true,\n      /**\n       * @dev attach actual holographableContract function call\n       */\n      bridgeOutPayload\n    );\n    /**\n     * @dev add gas variables to the back for later extraction\n     */\n    encodedData = abi.encodePacked(encodedData, gasLimit, gasPrice);\n    /**\n     * @dev Send the data to the current Holograph Messaging Module\n     *      This will be changed to dynamically select which messaging module to use based on destination network\n     */\n    messagingModule.send{value: msg.value - hlgFee}(\n      gasLimit,\n      gasPrice,\n      toChain,\n      msgSender,\n      msg.value - hlgFee,\n      encodedData\n    );\n    /**\n     * @dev for easy indexing, an event is emitted with the payload hash for status tracking\n     */\n    emit CrossChainMessageSent(keccak256(encodedData));\n  }\n\n  /**\n   * @notice Get the fees associated with sending specific payload\n   * @dev Will provide exact costs on protocol and message side, combine the two to get total\n   * @dev @param toChain holograph chain id of destination chain for payload\n   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain\n   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically\n   * @dev @param crossChainPayload the entire packet being sent cross-chain\n   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain\n   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain\n   */\n  function getMessageFee(\n    uint32,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external view returns (uint256, uint256) {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := staticcall(gas(), sload(_messagingModuleSlot), 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @notice Get the details for an available operator job\n   * @dev The job hash is a keccak256 hash of the entire job payload\n   * @param jobHash keccak256 hash of the job\n   * @return an OperatorJob struct with details about a specific job\n   */\n  function getJobDetails(bytes32 jobHash) public view returns (OperatorJob memory) {\n    uint256 packed = _operatorJobs[jobHash];\n    /**\n     * @dev The job is bitwise packed into a single 32 byte slot, this unpacks it before returning the struct\n     */\n    return\n      OperatorJob(\n        uint8(packed >> 248),\n        uint16(_blockTime),\n        _operatorTempStorage[uint32(packed >> 216)],\n        uint40(packed >> 176),\n        // TODO: move the bit-shifting around to have it be sequential\n        uint64(packed >> 16),\n        [\n          uint16(packed >> 160),\n          uint16(packed >> 144),\n          uint16(packed >> 128),\n          uint16(packed >> 112),\n          uint16(packed >> 96)\n        ]\n      );\n  }\n\n  /**\n   * @notice Get number of pods available\n   * @dev This returns number of pods that have been opened via bonding\n   */\n  function getTotalPods() external view returns (uint256 totalPods) {\n    return _operatorPods.length;\n  }\n\n  /**\n   * @notice Get total number of operators in a pod\n   * @dev Use in conjunction with paginated getPodOperators function\n   * @param pod the pod to query\n   * @return total operators in a pod\n   */\n  function getPodOperatorsLength(uint256 pod) external view returns (uint256) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    return _operatorPods[pod - 1].length;\n  }\n\n  /**\n   * @notice Get list of operators in a pod\n   * @dev Use paginated getPodOperators function instead if list gets too long\n   * @param pod the pod to query\n   * @return operators array list of operators in a pod\n   */\n  function getPodOperators(uint256 pod) external view returns (address[] memory operators) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    operators = _operatorPods[pod - 1];\n  }\n\n  /**\n   * @notice Get paginated list of operators in a pod\n   * @dev Use in conjunction with getPodOperatorsLength to know the total length of results\n   * @param pod the pod to query\n   * @param index the array index to start from\n   * @param length the length of result set to be (will be shorter if reached end of array)\n   * @return operators a paginated array of operators\n   */\n  function getPodOperators(\n    uint256 pod,\n    uint256 index,\n    uint256 length\n  ) external view returns (address[] memory operators) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    /**\n     * @dev if pod 0 is selected, this will create a revert\n     */\n    pod--;\n    /**\n     * @dev get total length of pod operators\n     */\n    uint256 supply = _operatorPods[pod].length;\n    /**\n     * @dev check if length is out of bounds for this result set\n     */\n    if (index + length > supply) {\n      /**\n       * @dev adjust length to return remainder of the results\n       */\n      length = supply - index;\n    }\n    /**\n     * @dev create in-memory array\n     */\n    operators = new address[](length);\n    /**\n     * @dev add operators to result set\n     */\n    for (uint256 i = 0; i < length; i++) {\n      operators[i] = _operatorPods[pod][index + i];\n    }\n  }\n\n  /**\n   * @notice Check the base and current price for bonding to a particular pod\n   * @dev Useful for understanding what is required for bonding to a pod\n   * @param pod the pod to get bonding amounts for\n   * @return base the base bond amount required for a pod\n   * @return current the current bond amount required for a pod\n   */\n  function getPodBondAmounts(uint256 pod) external view returns (uint256 base, uint256 current) {\n    base = _getBaseBondAmount(pod - 1);\n    current = _getCurrentBondAmount(pod - 1);\n  }\n\n  /**\n   * @notice Get an operator's currently bonded amount\n   * @dev Useful for checking how much an operator has bonded\n   * @param operator address of operator to check\n   * @return amount total number of utility token bonded\n   */\n  function getBondedAmount(address operator) external view returns (uint256 amount) {\n    return _bondedAmounts[operator];\n  }\n\n  /**\n   * @notice Get an operator's currently bonded pod\n   * @dev Useful for checking if an operator is currently bonded\n   * @param operator address of operator to check\n   * @return pod number that operator is bonded on, returns zero if not bonded or selected for job\n   */\n  function getBondedPod(address operator) external view returns (uint256 pod) {\n    return _bondedOperators[operator];\n  }\n\n  /**\n   * @notice Topup a bonded operator with more utility tokens\n   * @dev Useful function if an operator got slashed and wants to add a safety buffer to not get unbonded\n   *      This function will not work if operator has currently been selected for a job\n   * @param operator address of operator to topup\n   * @param amount utility token amount to add\n   */\n  function topupUtilityToken(address operator, uint256 amount) external {\n    /**\n     * @dev check that an operator is currently bonded\n     */\n    require(_bondedOperators[operator] != 0, \"HOLOGRAPH: operator not bonded\");\n    unchecked {\n      /**\n       * @dev add the additional amount to operator\n       */\n      _bondedAmounts[operator] += amount;\n    }\n    /**\n     * @dev transfer tokens last, to prevent reentrancy attacks\n     */\n    require(_utilityToken().transferFrom(msg.sender, address(this), amount), \"HOLOGRAPH: token transfer failed\");\n  }\n\n  /**\n   * @notice Bond utility tokens and become an operator\n   * @dev An operator can only bond to one pod at a time, per network\n   * @param operator address of operator to bond (can be an ownable smart contract)\n   * @param amount utility token amount to bond (can be greater than minimum)\n   * @param pod number of pod to bond to (can be for one that does not exist yet)\n   */\n  function bondUtilityToken(\n    address operator,\n    uint256 amount,\n    uint256 pod\n  ) external {\n    /**\n     * @dev an operator can only bond to one pod at any give time per network\n     */\n    require(_bondedOperators[operator] == 0 && _bondedAmounts[operator] == 0, \"HOLOGRAPH: operator is bonded\");\n    unchecked {\n      /**\n       * @dev get the current bonding minimum for selected pod\n       */\n      uint256 current = _getCurrentBondAmount(pod - 1);\n      require(current <= amount, \"HOLOGRAPH: bond amount too small\");\n      /**\n       * @dev check if selected pod is greater than currently existing pods\n       */\n      if (_operatorPods.length < pod) {\n        /**\n         * @dev activate pod(s) up until the selected pod\n         */\n        for (uint256 i = _operatorPods.length; i <= pod; i++) {\n          /**\n           * @dev add zero address into pod to mitigate empty pod issues\n           */\n          _operatorPods.push([address(0)]);\n        }\n      }\n      /**\n       * @dev prevent bonding to a pod with more than uint16 max value\n       */\n      require(_operatorPods[pod - 1].length < type(uint16).max, \"HOLOGRAPH: too many operators\");\n      _operatorPods[pod - 1].push(operator);\n      _operatorPodIndex[operator] = _operatorPods[pod - 1].length - 1;\n      _bondedOperators[operator] = pod;\n      _bondedAmounts[operator] = amount;\n      /**\n       * @dev transfer tokens last, to prevent reentrancy attacks\n       */\n      require(_utilityToken().transferFrom(msg.sender, address(this), amount), \"HOLOGRAPH: token transfer failed\");\n    }\n  }\n\n  /**\n   * @notice Unbond HLG utility tokens and stop being an operator\n   * @dev A bonded operator selected for a job cannot unbond until they complete the job, or are slashed\n   * @param operator address of operator to unbond\n   * @param recipient address where to send the bonded tokens\n   */\n  function unbondUtilityToken(address operator, address recipient) external {\n    /**\n     * @dev validate that operator is currently bonded\n     */\n    require(_bondedOperators[operator] != 0, \"HOLOGRAPH: operator not bonded\");\n    /**\n     * @dev check if sender is not actual operator\n     */\n    if (msg.sender != operator) {\n      /**\n       * @dev check if operator is a smart contract\n       */\n      require(_isContract(operator), \"HOLOGRAPH: operator not contract\");\n      /**\n       * @dev check if smart contract is owned by sender\n       */\n      require(Ownable(operator).isOwner(msg.sender), \"HOLOGRAPH: sender not owner\");\n    }\n    /**\n     * @dev get current bonded amount by operator\n     */\n    uint256 amount = _bondedAmounts[operator];\n    /**\n     * @dev unset operator bond amount before making a transfer\n     */\n    _bondedAmounts[operator] = 0;\n    /**\n     * @dev remove all operator references\n     */\n    _popOperator(_bondedOperators[operator] - 1, _operatorPodIndex[operator]);\n    /**\n     * @dev transfer tokens to recipient\n     */\n    require(_utilityToken().transfer(recipient, amount), \"HOLOGRAPH: token transfer failed\");\n  }\n\n  /**\n   * @notice Get the address of the Holograph Bridge module\n   * @dev Used for beaming holographable assets cross-chain\n   */\n  function getBridge() external view returns (address bridge) {\n    assembly {\n      bridge := sload(_bridgeSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Bridge module address\n   * @param bridge address of the Holograph Bridge smart contract to use\n   */\n  function setBridge(address bridge) external onlyAdmin {\n    assembly {\n      sstore(_bridgeSlot, bridge)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Protocol contract\n   * @dev Used for storing a reference to all the primary modules and variables of the protocol\n   */\n  function getHolograph() external view returns (address holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Protocol contract address\n   * @param holograph address of the Holograph Protocol smart contract to use\n   */\n  function setHolograph(address holograph) external onlyAdmin {\n    assembly {\n      sstore(_holographSlot, holograph)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Interfaces module\n   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules\n   */\n  function getInterfaces() external view returns (address interfaces) {\n    assembly {\n      interfaces := sload(_interfacesSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Interfaces module address\n   * @param interfaces address of the Holograph Interfaces smart contract to use\n   */\n  function setInterfaces(address interfaces) external onlyAdmin {\n    assembly {\n      sstore(_interfacesSlot, interfaces)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Messaging Module\n   * @dev All cross-chain message requests will get forwarded to this adress\n   */\n  function getMessagingModule() external view returns (address messagingModule) {\n    assembly {\n      messagingModule := sload(_messagingModuleSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Messaging Module address\n   * @param messagingModule address of the LayerZero Endpoint to use\n   */\n  function setMessagingModule(address messagingModule) external onlyAdmin {\n    assembly {\n      sstore(_messagingModuleSlot, messagingModule)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Utility Token address\n   * @dev This is the official utility token of the Holograph Protocol\n   */\n  function getUtilityToken() external view returns (address utilityToken) {\n    assembly {\n      utilityToken := sload(_utilityTokenSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Utility Token address\n   * @param utilityToken address of the Holograph Utility Token smart contract to use\n   */\n  function setUtilityToken(address utilityToken) external onlyAdmin {\n    assembly {\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Bridge Interface\n   */\n  function _bridge() private view returns (address bridge) {\n    assembly {\n      bridge := sload(_bridgeSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interface\n   */\n  function _holograph() private view returns (HolographInterface holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interfaces Interface\n   */\n  function _interfaces() private view returns (HolographInterfacesInterface interfaces) {\n    assembly {\n      interfaces := sload(_interfacesSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Messaging Module Interface\n   */\n  function _messagingModule() private view returns (CrossChainMessageInterface messagingModule) {\n    assembly {\n      messagingModule := sload(_messagingModuleSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Registry Interface\n   */\n  function _registry() private view returns (HolographRegistryInterface registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Utility Token Interface\n   */\n  function _utilityToken() private view returns (HolographERC20Interface utilityToken) {\n    assembly {\n      utilityToken := sload(_utilityTokenSlot)\n    }\n  }\n\n  /**\n   * @dev Internal nonce, that increments on each call, used for randomness\n   */\n  function _jobNonce() private returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)\n      sstore(_jobNonceSlot, jobNonce)\n    }\n  }\n\n  /**\n   * @dev Internal function used to remove an operator from a particular pod\n   */\n  function _popOperator(uint256 pod, uint256 operatorIndex) private {\n    /**\n     * @dev only pop the operator if it's not a zero address\n     */\n    if (operatorIndex > 0) {\n      unchecked {\n        address operator = _operatorPods[pod][operatorIndex];\n        /**\n         * @dev mark operator as no longer bonded\n         */\n        _bondedOperators[operator] = 0;\n        /**\n         * @dev remove pod reference for operator\n         */\n        _operatorPodIndex[operator] = 0;\n        uint256 lastIndex = _operatorPods[pod].length - 1;\n        if (lastIndex != operatorIndex) {\n          /**\n           * @dev if operator is not last index, move last index to operator's current index\n           */\n          _operatorPods[pod][operatorIndex] = _operatorPods[pod][lastIndex];\n          _operatorPodIndex[_operatorPods[pod][operatorIndex]] = operatorIndex;\n        }\n        /**\n         * @dev delete last index\n         */\n        delete _operatorPods[pod][lastIndex];\n        /**\n         * @dev shorten array length\n         */\n        _operatorPods[pod].pop();\n      }\n    }\n  }\n\n  /**\n   * @dev Internal function used for calculating the base bonding amount for a pod\n   */\n  function _getBaseBondAmount(uint256 pod) private view returns (uint256) {\n    return (_podMultiplier**pod) * _baseBondAmount;\n  }\n\n  /**\n   * @dev Internal function used for calculating the current bonding amount for a pod\n   */\n  function _getCurrentBondAmount(uint256 pod) private view returns (uint256) {\n    uint256 current = (_podMultiplier**pod) * _baseBondAmount;\n    if (pod >= _operatorPods.length) {\n      return current;\n    }\n    uint256 threshold = _operatorThreshold / (2**pod);\n    uint256 position = _operatorPods[pod].length;\n    if (position > threshold) {\n      position -= threshold;\n      //       current += (current / _operatorThresholdDivisor) * position;\n      current += (current / _operatorThresholdDivisor) * (position / _operatorThresholdStep);\n    }\n    return current;\n  }\n\n  /**\n   * @dev Internal function used for generating a random pod operator selection by using previously mined blocks\n   */\n  function _randomBlockHash(\n    uint256 random,\n    uint256 podSize,\n    uint256 n\n  ) private view returns (uint256) {\n    unchecked {\n      return (random + uint256(blockhash(block.number - n))) % podSize;\n    }\n  }\n\n  /**\n   * @dev Internal function used for checking if a contract has been deployed at address\n   */\n  function _isContract(address contractAddress) private view returns (bool) {\n    bytes32 codehash;\n    assembly {\n      codehash := extcodehash(contractAddress)\n    }\n    return (codehash != 0x0 && codehash != precomputekeccak256(\"\"));\n  }\n\n  /**\n   * @dev Purposefully left empty to ensure ether transfers use least amount of gas possible\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/HolographERC20Interface.sol\";\nimport \"./interface/Holographable.sol\";\nimport \"./interface/HolographInterface.sol\";\nimport \"./interface/HolographBridgeInterface.sol\";\nimport \"./interface/HolographFactoryInterface.sol\";\nimport \"./interface/HolographOperatorInterface.sol\";\nimport \"./interface/HolographRegistryInterface.sol\";\nimport \"./interface/InitializableInterface.sol\";\n\n/**\n * @title Holograph Bridge\n * @author https://github.com/holographxyz\n * @notice Beam any holographable contracts and assets across blockchains\n * @dev The contract abstracts all the complexities of making bridge requests and uses a universal interface to bridge any type of holographable assets\n */\ncontract HolographBridge is Admin, Initializable, HolographBridgeInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.factory')) - 1)\n   */\n  bytes32 constant _factorySlot = precomputeslot(\"eip1967.Holograph.factory\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)\n   */\n  bytes32 constant _holographSlot = precomputeslot(\"eip1967.Holograph.holograph\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)\n   */\n  bytes32 constant _jobNonceSlot = precomputeslot(\"eip1967.Holograph.jobNonce\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.operator')) - 1)\n   */\n  bytes32 constant _operatorSlot = precomputeslot(\"eip1967.Holograph.operator\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n\n  /**\n   * @dev Allow calls only from Holograph Operator contract\n   */\n  modifier onlyOperator() {\n    require(msg.sender == address(_operator()), \"HOLOGRAPH: operator only call\");\n    _;\n  }\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (address factory, address holograph, address operator, address registry) = abi.decode(\n      initPayload,\n      (address, address, address, address)\n    );\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_factorySlot, factory)\n      sstore(_holographSlot, holograph)\n      sstore(_operatorSlot, operator)\n      sstore(_registrySlot, registry)\n    }\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @notice Receive a beam from another chain\n   * @dev This function can only be called by the Holograph Operator module\n   * @param fromChain Holograph Chain ID where the brigeOutRequest was created\n   * @param holographableContract address of the destination contract that the bridgeInRequest is targeted for\n   * @param hToken address of the hToken contract that wrapped the origin chain native gas token\n   * @param hTokenRecipient address of recipient for the hToken reward\n   * @param hTokenValue exact amount of hToken reward in wei\n   * @param doNotRevert boolean used to specify if the call should revert\n   * @param bridgeInPayload actual abi encoded bytes of the data that the holographable contract bridgeIn function will receive\n   */\n  function bridgeInRequest(\n    uint256, /* nonce*/\n    uint32 fromChain,\n    address holographableContract,\n    address hToken,\n    address hTokenRecipient,\n    uint256 hTokenValue,\n    bool doNotRevert,\n    bytes calldata bridgeInPayload\n  ) external payable onlyOperator {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeIn function call to the holographable contract\n     */\n    bytes4 selector = Holographable(holographableContract).bridgeIn(fromChain, bridgeInPayload);\n    /**\n     * @dev ensure returned selector is bridgeIn function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeIn.selector, \"HOLOGRAPH: bridge in failed\");\n    /**\n     * @dev check if a specific reward amount was assigned to this request\n     */\n    if (hTokenValue > 0) {\n      /**\n       * @dev mint the specific hToken amount for hToken recipient\n       *      this value is equivalent to amount that is deposited on origin chain's hToken contract\n       *      recipient can beam the asset to origin chain and unwrap for native gas token at any time\n       */\n      require(\n        HolographERC20Interface(hToken).holographBridgeMint(hTokenRecipient, hTokenValue) ==\n          HolographERC20Interface.holographBridgeMint.selector,\n        \"HOLOGRAPH: hToken mint failed\"\n      );\n    }\n    /**\n     * @dev allow the call to revert on demand, for example use case, look into the Holograph Operator's jobEstimator function\n     */\n    require(doNotRevert, \"HOLOGRAPH: reverted\");\n  }\n\n  /**\n   * @notice Create a beam request for a destination chain\n   * @dev This function works for deploying contracts and beaming supported holographable assets across chains\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function bridgeOutRequest(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external payable {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    /**\n     * @dev make a bridgeOut function call to the holographable contract\n     */\n    (bytes4 selector, bytes memory returnedPayload) = Holographable(holographableContract).bridgeOut(\n      toChain,\n      msg.sender,\n      bridgeOutPayload\n    );\n    /**\n     * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n     */\n    require(selector == Holographable.bridgeOut.selector, \"HOLOGRAPH: bridge out failed\");\n    /**\n     * @dev pass the request, along with all data, to Holograph Operator, to handle the cross-chain messaging logic\n     */\n    _operator().send{value: msg.value}(\n      gasLimit,\n      gasPrice,\n      toChain,\n      msg.sender,\n      _jobNonce(),\n      holographableContract,\n      returnedPayload\n    );\n  }\n\n  /**\n   * @notice Do not call this function, it will always revert\n   * @dev Used by getBridgeOutRequestPayload function\n   *      It is purposefully inverted to always revert on a successful call\n   *      Marked as external and not private to allow use inside try/catch of getBridgeOutRequestPayload function\n   *      If this function does not revert and returns a string, it is the actual revert reason\n   * @param sender address of actual sender that is planning to make a bridgeOutRequest call\n   * @param toChain holograph chain id of destination chain\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   */\n  function revertedBridgeOutRequest(\n    address sender,\n    uint32 toChain,\n    address holographableContract,\n    bytes calldata bridgeOutPayload\n  ) external returns (string memory revertReason) {\n    /**\n     * @dev make a bridgeOut function call to the holographable contract inside of a try/catch\n     */\n    try Holographable(holographableContract).bridgeOut(toChain, sender, bridgeOutPayload) returns (\n      bytes4 selector,\n      bytes memory payload\n    ) {\n      /**\n       * @dev ensure returned selector is bridgeOut function signature, to guarantee that the function was called and succeeded\n       */\n      if (selector != Holographable.bridgeOut.selector) {\n        /**\n         * @dev if selector does not match, then it means the request failed\n         */\n        return \"HOLOGRAPH: bridge out failed\";\n      }\n      assembly {\n        /**\n         * @dev the entire payload is sent back in a revert\n         */\n        revert(add(payload, 0x20), mload(payload))\n      }\n    } catch Error(string memory reason) {\n      return reason;\n    } catch {\n      return \"HOLOGRAPH: unknown error\";\n    }\n  }\n\n  /**\n   * @notice Get the payload created by the bridgeOutRequest function\n   * @dev Use this function to get the payload that will be generated by a bridgeOutRequest\n   *      Only use this with a static call\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param bridgeOutPayload actual abi encoded bytes of the data that the holographable contract bridgeOut function will receive\n   * @return samplePayload bytes made up of the bridgeOutRequest payload\n   */\n  function getBridgeOutRequestPayload(\n    uint32 toChain,\n    address holographableContract,\n    uint256 gasLimit,\n    uint256 gasPrice,\n    bytes calldata bridgeOutPayload\n  ) external returns (bytes memory samplePayload) {\n    /**\n     * @dev check that the target contract is either Holograph Factory or a deployed holographable contract\n     */\n    require(\n      _registry().isHolographedContract(holographableContract) || address(_factory()) == holographableContract,\n      \"HOLOGRAPH: not holographed\"\n    );\n    bytes memory payload;\n    /**\n     * @dev the revertedBridgeOutRequest function is wrapped into a try/catch function\n     */\n    try this.revertedBridgeOutRequest(msg.sender, toChain, holographableContract, bridgeOutPayload) returns (\n      string memory revertReason\n    ) {\n      /**\n       * @dev a non reverted result is actually a revert\n       */\n      revert(revertReason);\n    } catch (bytes memory realResponse) {\n      /**\n       * @dev a revert is actually success, so the return data is stored as payload\n       */\n      payload = realResponse;\n    }\n    uint256 jobNonce;\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n    /**\n     * @dev extract hlgFee from operator\n     */\n    uint256 fee = 0;\n    if (gasPrice < type(uint256).max && gasLimit < type(uint256).max) {\n      (uint256 hlgFee, ) = _operator().getMessageFee(toChain, gasLimit, gasPrice, bridgeOutPayload);\n      fee = hlgFee;\n    }\n    /**\n     * @dev the data is abi encoded into actual bridgeOutRequest payload bytes\n     */\n    bytes memory encodedData = abi.encodeWithSelector(\n      HolographBridgeInterface.bridgeInRequest.selector,\n      /**\n       * @dev the latest job nonce is incremented by one\n       */\n      jobNonce + 1,\n      _holograph().getHolographChainId(),\n      holographableContract,\n      _registry().getHToken(_holograph().getHolographChainId()),\n      address(0),\n      fee,\n      true,\n      payload\n    );\n    /**\n     * @dev this abi encodes the data just like in Holograph Operator\n     */\n    samplePayload = abi.encodePacked(encodedData, gasLimit, gasPrice);\n  }\n\n  /**\n   * @notice Get the fees associated with sending specific payload\n   * @dev Will provide exact costs on protocol and message side, combine the two to get total\n   * @dev @param toChain holograph chain id of destination chain for payload\n   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain\n   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically\n   * @dev @param crossChainPayload the entire packet being sent cross-chain\n   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain\n   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain\n   */\n  function getMessageFee(\n    uint32,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external view returns (uint256, uint256) {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := staticcall(gas(), sload(_operatorSlot), 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Factory module\n   * @dev Used for deploying holographable smart contracts\n   */\n  function getFactory() external view returns (address factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Factory module address\n   * @param factory address of the Holograph Factory smart contract to use\n   */\n  function setFactory(address factory) external onlyAdmin {\n    assembly {\n      sstore(_factorySlot, factory)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Protocol contract\n   * @dev Used for storing a reference to all the primary modules and variables of the protocol\n   */\n  function getHolograph() external view returns (address holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Protocol contract address\n   * @param holograph address of the Holograph Protocol smart contract to use\n   */\n  function setHolograph(address holograph) external onlyAdmin {\n    assembly {\n      sstore(_holographSlot, holograph)\n    }\n  }\n\n  /**\n   * @notice Get the latest job nonce\n   * @dev You can use the job nonce as a way to calculate total amount of bridge requests that have been made\n   */\n  function getJobNonce() external view returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := sload(_jobNonceSlot)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Operator module\n   * @dev All cross-chain Holograph Bridge beams are handled by the Holograph Operator module\n   */\n  function getOperator() external view returns (address operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Operator module address\n   * @param operator address of the Holograph Operator smart contract to use\n   */\n  function setOperator(address operator) external onlyAdmin {\n    assembly {\n      sstore(_operatorSlot, operator)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Factory Interface\n   */\n  function _factory() private view returns (HolographFactoryInterface factory) {\n    assembly {\n      factory := sload(_factorySlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interface\n   */\n  function _holograph() private view returns (HolographInterface holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @dev Internal nonce, that increments on each call, used for randomness\n   */\n  function _jobNonce() private returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)\n      sstore(_jobNonceSlot, jobNonce)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Operator Interface\n   */\n  function _operator() private view returns (HolographOperatorInterface operator) {\n    assembly {\n      operator := sload(_operatorSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Registry Interface\n   */\n  function _registry() private view returns (HolographRegistryInterface registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent having any type of ether transfered into the contract\n   */\n  receive() external payable {\n    revert();\n  }\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n",
        "CodeNames": [
            "HolographOperator.sol",
            "HolographBridge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-04",
                "Location": [
                    "getPodOperatorsLength",
                    "random",
                    "getTotalPods",
                    "pod"
                ],
                "Type": " An attacker can manipulate each pod and gain an advantage over the remainder Operators",
                "Description": "*Submitted by eighty, also found by d3e4, eighty, Lambda, and eighty*\n\nIn contracts/HolographOperator.sol#crossChainMessage(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L484-L539), each Operator is selected by:\n\n*   Generating a random number ([L499(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L499))\n*   A pod is selected by dividing the random with the total number of pods, and using the remainder ([L503(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L503))\n*   An Operator of the selected pod is chosen using the same random and dividing by the total number of operators ([L511(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L511)).\n\nThis creates an unintended bias since the first criterion (the random) is used for both selecting the pod and selecting the Operator, as explained in a previous issue (M001-Biased distribution). In this case, an attacker knowing this flaw can continuously monitor the contracts state and see the current number of pods and Operators. Accordingly to the documentation(https://docs.holograph.xyz/holograph-protocol/operator-network-specification#operator-job-selection) and provided flow(https://github.com/code-423n4/2022-10-holograph/blob/main/docs/IMPORTANT_FLOWS.md#joining-pods):\n\n*   An Operator can easily join and leave a pod, albeit when leaving a small fee is paid\n*   An Operator can only join one pod, but an attacker can control multiple Operators\n*   The attacker can then enter and leave a pod to increase (unfairly) his odds of being selected for a job\n\nHonest Operators may feel compelled to leave the protocol if there are no financial incentives (and lose funds in the process), which can also increase the odds of leaving the end-users at the hands of a malicious Operator.\n\n\nConsider the following simulation for 10 pods with a varying number of operators follows (X \u2192 \"does not apply\"):\n\n| Pod n | Pon len | Op0 | Op1 | Op2 | Op3 | Op4 | Op5 | Op6 | Op7 | Op8 | Op9 | Total Pod |\n| ----| ------| --| --| --| --| --| --| --| --| --| --| --------|\n| P0    | 10      | 615 | 0   | 0   | 0   | 0   | 0   | 0   | 0   | 0   | 0   | 615       |\n| P1    | 3       | 203 | 205 | 207 | X   | X   | X   | X   | X   | X   | X   | 615       |\n| P2    | 6       | 208 | 0   | 233 | 0   | 207 | 0   | X   | X   | X   | X   | 648       |\n| P3    | 9       | 61  | 62  | 69  | 70  | 65  | 69  | 61  | 60  | 54  | X   | 571       |\n| P4    | 4       | 300 | 0   | 292 | 0   | X   | X   | X   | X   | X   | X   | 592       |\n| P5    | 10      | 0   | 0   | 0   | 0   | 0   | 586 | 0   | 0   | 0   | 0   | 586       |\n| P6    | 2       | 602 | 0   | X   | X   | X   | X   | X   | X   | X   | X   | 602       |\n| P7    | 7       | 93  | 93  | 100 | 99  | 76  | 74  | 78  | X   | X   | X   | 613       |\n| P8    | 2       | 586 | 0   | X   | X   | X   | X   | X   | X   | X   | X   | 586       |\n| P9    | 6       | 0   | 190 | 0   | 189 | 0   | 192 | X   | X   | X   | X   | 571       |\n\nAt this stage, an attacker Mallory joins the protocol and scans the protocol (or interacts with e.g. getTotalPods, getPodOperatorsLength). As an example, after considering the potential benefits, she chooses pod P9 and sets up some bots [B1, B2, B3]. The number of Operators will determine the odds, so:\n\n| Pod P9 | Alt len | Op0 | Op1 | Op2 | Op3 | Op4 | Op5 | Op6 | Op7 | Op8 | Op9 | Total Pod |\n| -----| ------| --| --| --| --| --| --| --| --| --| --| --------|\n| P9A    | 4       | 0   | 276 | 0   | 295 | X   | X   | X   | X   | X   | X   | 571       |\n| P9B    | 5       | 0   | 0   | 0   | 0   | 571 | X   | X   | X   | X   | X   | 571       |\n| P9     | 6       | 0   | 190 | 0   | 189 | 0   | 192 | X   | X   | X   | X   | 571       |\n| P9C    | 7       | 66  | 77  | 81  | 83  | 87  | 90  | 87  | X   | X   | X   | 571       |\n| P9D    | 8       | 0   | 127 | 0   | 147 | 0   | 149 | 0   | 148 | X   | X   | 571       |\n\nAnd then:\n\n1.  She waits for the next job to fall in P9 and keeps an eye on the number of pods, since it could change the odds.\n2.  After an Operator is selected (he pops(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L518) from the array), the number of available Operators change to 5, and the odds change to P9B.\n3.  She deploys B1 and it goes to position Op5, odds back to P9. If the meantime the previously chosen Operator comes back to the pod, see the alternative timeline.\n4.  She now has 1/3 of the probability to be chosen for the next job:\n\n4.1 If she is not chosen, she will assume the position(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L1138-L1144) of the chosen Operator, and deploys B2 to maintain the odds of P9 and controls 2/3 of the pod.\n4.2 If she is chosen, she chooses between employing another bot or waiting to execute the job to back to the pod (keeping the original odds).\n5. She can then iterate multiple times to swap to the remainder of possible indexes via step 4.1.\n\nAlternative timeline (from previous 3.):\n\n1.  The chosen Operator finishes the job and goes back to the pod. Now there's 7 members with uniform odds (P9C).\n2.  Mallory deploys B2 and the length grows to 8, the odds turn to P9D and she now controls two of the four possible indexes from which she can be chosen.\n\nThere are a lot of ramifications and possible outcomes that Mallory can manipulate to increase the odds of being selected in her favor.\n\n",
                "Repair": "\nAs stated in M001-Biased distribution(https://github.com/code-423n4/2022-10-holograph-findings/issues/167), use two random numbers for pod and Operator selection. Ideally, an independent source for randomness should be used, but following the assumption that the one used in L499(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L499) is safe enough, using the most significant bits (e.g. random  128) should guarantee an unbiased distribution. Also, reading the EIP-4399(https://eips.ethereum.org/EIPS/eip-4399) could be valuable.\n\nAdditionally, since randomness in blockchain is always tricky to achieve without an oracle provider, consider adding additional controls (e.g. waiting times before joining each pod) to increase the difficulty of manipulating the protocol.\n\nAnd finally, in this particular case, removing the swapping mechanism (moving the last index to the chosen operator's current index) for another mechanism (shifting could also create conflicts with backup operators?(https://github.com/code-423n4/2022-10-holograph/blob/main/contracts/HolographOperator.sol#L358-L370)) could also increase the difficulty of manipulating a particular pod.\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1296307048):\n  Considering this as duplicate of #169(https://github.com/code-423n4/2022-10-holograph-findings/issues/169) since they share the same root cause.\n\nACC01ADE (Holograph) confirmed and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1308950227):\n  Really love this analysis!\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1320926135):\n  Judging this as high risk due to possible manipulation.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1321830898):\n  Agree this is a high severity find. Believe issue #167(https://github.com/code-423n4/2022-10-holograph-findings/issues/167) and this one are essentially different exploits of the same flaw and therefore should be bulked.<br\n Relevant org discussion here(https://github.com/code-423n4/org/issues/8).\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/168#issuecomment-1328123349):\n  Agreed.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "H-08",
                "Location": [
                    "//solidity\n// SPDX-License-Identifier: UNLICENSED\npragma //solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\ncontract ContractTest is Test {\n    event FailedOperatorJob(bytes32 jobHash);\n    uint256 private _inboundMessageCounter;\n    mapping(bytes32 = bool) private _failedJobs;\n    constructor(){\n        _inboundMessageCounter = 5;\n    }\n    function testGas64() public {\n        this.entryPoint{gas:1000000}();\n    }\n\n    Bridge bridge = new Bridge();\n    event GasLeftAfterFail(uint left);\n\n    function entryPoint() public {\n\n        console2.log(\"Gas left before call: \", gasleft());\n\n        bytes32 hash = 0x987744358512a04274ccfb3d9649da3c116cd6b19c535e633ef8529a80cb06a0;\n\n        try this.intermediate(){\n        }catch{\n            // check out how much gas is left after the call to the bridge failed\n            console2.log(\"Gas left after failure: \", gasleft());\n            // simulate operations done after failure\n            _failedJobs[hash] = true;\n            emit FailedOperatorJob(hash);\n        }\n        ++_inboundMessageCounter;\n        console2.log(\"Gas left at end: \", gasleft());\n\n    }\n\n    function intermediate() public{\n        bridge.bridgeCall();\n    }\n}\n\n\ncontract Bridge{\n    event Done(uint gasLeft);\n\n    uint256[] myArr;\n\n    function bridgeCall() public {\n        for(uint i =1; i <= 100; i++){\n            myArr.push(i);\n        }\n        // this line would never be reached, we'll be out of gas beforehand\n        emit Done(gasleft());\n    }\n}\n\n"
                ],
                "Type": " Gas limit check is inaccurate, leading to an operator being able to fail a job intentionally",
                "Description": "*Submitted by 0xA5DF, also found by Trust and V_B*\n\nHolographOperator.sol#L316(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/src/HolographOperator.sol#L316)<br\n\nThere's a check at line 316 that verifies that there's enough gas left to execute the HolographBridge.bridgeInRequest() with the gasLimit set by the user, however the actual amount of gas left during the call is less than that (mainly due to the 1/64 rule, see below).<br\nAn attacker can use that gap to fail the job while still having the executeJob() function complete.\n\n\nThe owner of the bridged token would loose access to the token since the job failed.\n\n\nBesides using a few units of gas between the check and the actual call, there's also a rule that only 63/64 of the remaining gas would be dedicated to an (external) function call. Since there are 2 external function calls done (nonRevertingBridgeCall() and the actual call to the bridge) ~2/64 of the gas isn't sent to the bridge call and can be used after the bridge call runs out of gas.\n\nThe following PoC shows that if the amount of gas left before the call is at least 1 million then the execution can continue after the bridge call fails:\n\nsolidity\n// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.0;\n\nimport \"forge-std/Test.sol\";\n\ncontract ContractTest is Test {\n    event FailedOperatorJob(bytes32 jobHash);\n    uint256 private _inboundMessageCounter;\n    mapping(bytes32 = bool) private _failedJobs;\n    constructor(){\n        _inboundMessageCounter = 5;\n    }\n    function testGas64() public {\n        this.entryPoint{gas:1000000}();\n    }\n\n    Bridge bridge = new Bridge();\n    event GasLeftAfterFail(uint left);\n\n    function entryPoint() public {\n\n        console2.log(\"Gas left before call: \", gasleft());\n\n        bytes32 hash = 0x987744358512a04274ccfb3d9649da3c116cd6b19c535e633ef8529a80cb06a0;\n\n        try this.intermediate(){\n        }catch{\n            // check out how much gas is left after the call to the bridge failed\n            console2.log(\"Gas left after failure: \", gasleft());\n            // simulate operations done after failure\n            _failedJobs[hash] = true;\n            emit FailedOperatorJob(hash);\n        }\n        ++_inboundMessageCounter;\n        console2.log(\"Gas left at end: \", gasleft());\n\n    }\n\n    function intermediate() public{\n        bridge.bridgeCall();\n    }\n}\n\n\ncontract Bridge{\n    event Done(uint gasLeft);\n\n    uint256[] myArr;\n\n    function bridgeCall() public {\n        for(uint i =1; i <= 100; i++){\n            myArr.push(i);\n        }\n        // this line would never be reached, we'll be out of gas beforehand\n        emit Done(gasleft());\n    }\n}\n\n\n\nOutput of PoC:\n\n      Gas left before call:  999772\n      Gas left after failure:  30672\n      Gas left at end:  1628\n\nSide note: due to some bug in forge _inboundMessageCounter would be considered warm even though it's not necessarily the case. However in a real world scenario we can warm it up if the selected operator is a contract and we'er using another operator contract to execute a job in the same tx beforehand.\n\nReference for the 1/64 rule EIP-150(https://github.com/ethereum/EIPs/blob/master/EIPS/eip-150.md). Also check out evm.codes(https://www.evm.codes/#f1?fork=grayGlacier:~:text=From%20the%20Tangerine%20Whistle%20fork%2C%20gas%20is%20capped%20at%20all%20but%20one%2064th%20(remaining_gas%20/%2064)%20of%20the%20remaining%20gas%20of%20the%20current%20context.%20If%20a%20call%20tries%20to%20send%20more%2C%20the%20gas%20is%20changed%20to%20match%20the%20maximum%20allowed.).\n\n",
                "Repair": "\nModify the required amount of gas left to gasLimit + any amount of gas spent before reaching the call(), then multiply it by 32/30 to mitigate the 1/64 rule (+ some margin of safety maybe).\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294662144):\n  There are some risks but would require the nested call gas limit to be pretty high (e.g. 1m used in the poc) to have enough gas (1/64) left afterward so that it doesn't revert due to out-of-gas.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294682078):\n  @gzeon actually this is not a limitation. When the call argument passes a gaslimit which is lower than the available gas, it instantly reverts with no gas wasted. Therefore we will have 64/64 of the gas amount to work with post-revert.<br\n I have explained this in duplicate report #437(https://github.com/code-423n4/2022-10-holograph-findings/issues/437).\n\n0xA5DF (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294770261):\n   When the call argument passes a gaslimit which is lower than the available gas, it instantly reverts with no gas wasted.\n \n You mean *higher* than the available gas?<br\n I thought the same, but doing some testing and reading the Yellow Paper it turns out it wouldn't revert just because the gas parameter is higher than the available gas.<br\n You can modify the PoC above to test that too.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294786488):\n  You can check this example in Remix:\n \n contract Storage {\n     /\n      * @dev Return value \n      * @return value of 'number'\n      */\n     function gas_poc() public  returns (uint256, uint256){\n         uint256 left_gas = gasleft();\n         address this_address = address(this);\n         assembly {\n             let result := call(\n         /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value\n             left_gas,\n             /// @dev destination is bridge contract\n             this_address,\n             /// @dev any value is passed along\n             0,\n             /// @dev data is retrieved from 0 index memory position\n             0,\n             /// @dev everything except for last 32 bytes (gas limit) is sent\n             0,\n             0,\n             0\n             )\n         }\n         uint256 after_left_gas = gasleft();\n         return (left_gas, after_left_gas);\n     }\n \n     fallback() external {\n \n     }\n }\n \n We pass a lower gas limit than what we have in the \"call\" opcode, which reverts.<br\n The function returns \n \n {\n \t\"0\": \"uint256: 3787\",\n \t\"1\": \"uint256: 3579\"\n }\n \n Meaning only the gas consumed by the call opcode was deducted, not 63/64.\n\n0xA5DF (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294800675):\n  In your example the fallback function is actually being called, it's just doesn't use much gas, I've added an event to confirm that:\n \n solidity\n contract Storage {\n     event Cool();\n     /\n      * @dev Return value \n      * @return value of 'number'\n      */\n     function gas_poc() public  returns (uint256, uint256){\n         uint256 left_gas = gasleft();\n         address this_address = address(this);\n         assembly {\n             let result := call(\n         /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value\n             left_gas,\n             /// @dev destination is bridge contract\n             this_address,\n             /// @dev any value is passed along\n             0,\n             /// @dev data is retrieved from 0 index memory position\n             0,\n             /// @dev everything except for last 32 bytes (gas limit) is sent\n             0,\n             0,\n             0\n             )\n         }\n         uint256 after_left_gas = gasleft();\n         return (left_gas, after_left_gas);\n     }\n \n     fallback() external {\n         emit Cool();\n     }\n }\n \n Output:<br\n ![image(https://user-images.githubusercontent.com/108216601/198561406-53968c73-3196-4f94-ad65-9ce4f2877d28.png)\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294817386):\n  A child call can never use more than 63/64 of gasleft post eip-150.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294843497):\n  @0xA5DF Yeah , it seems my setup when I tested this during the contest was wrong, because it instantly reverted in the CALL opcode.<br\n Page 37 of the Yellow book describes the GASCAP as minimum of gasLeft input and current gas counter minus costs:<br\n ![image(https://user-images.githubusercontent.com/9900020/198568925-2f91aaed-61e2-454d-b8cf-42e9f1ce1477.png)<br\n Thanks for the good direct counterexample.<br\n \n @gzeon Right, we were discussing if call to child will instantly revert because requestedGas  availableGas, but it doesn't.\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294849312):\n  That's true, and the code also doesn't forward a limited amount of gas explicitly too.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1294854809):\n  The point was that executor can always craft supplied gas to the contract, so that during the CALL opcode, gas left would be smaller than requested gas limit. If EVM behavior reverts in this check, we have deterministic failing of bridgeIn.\n\nalexanderattar (Holograph) confirmed and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#issuecomment-1307829065):\n  Nice find! Gas limit sent by operator could be used maliciously to ensure that job fails. This will be updated to mitigate the issue observed.\n\nACC01ADE (Holograph) resolved(https://github.com/code-423n4/2022-10-holograph-findings/issues/176#event-7817152060):\n  Feature/HOLO-604: implementing critical issue fixes(https://github.com/holographxyz/holograph-protocol/pull/84)\n\n\n\n*\n \n\n"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-06",
                "Location": [
                    "//solidity\nrequire(gasPrice = tx.gasprice, \"HOLOGRAPH: gas spike detected\");\n",
                    "//solidity\n        /\n         * @dev select operator that failed to do the job, is slashed the pod base fee\n         */\n        _bondedAmounts[job.operator] -= amount;\n        /\n         * @dev the slashed amount is sent to current operator\n         */\n        _bondedAmounts[msg.sender] += amount;\n",
                    "//solidity\nrequire(timeDifference  0, \"HOLOGRAPH: operator has time\");\n"
                ],
                "Type": " Gas price spikes cause the selected operator to be vulnerable to frontrunning and be slashed",
                "Description": "*Submitted by Chom, also found by Lambda and Trust*\n\nHolographOperator.sol#L354(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L354)<br\n\nsolidity\nrequire(gasPrice = tx.gasprice, \"HOLOGRAPH: gas spike detected\");\n\n\nsolidity\n        /\n         * @dev select operator that failed to do the job, is slashed the pod base fee\n         */\n        _bondedAmounts[job.operator] -= amount;\n        /\n         * @dev the slashed amount is sent to current operator\n         */\n        _bondedAmounts[msg.sender] += amount;\n\n\nSince you have designed a mechanism to prevent other operators to slash the operator due to \"the selected missed the time slot due to a gas spike\". It can induce that operators won't perform their job if a gas price spike happens due to negative profit.\n\nBut your designed mechanism has a vulnerability. Other operators can submit their transaction to the mempool and queue it using gasPrice in bridgeInRequestPayload. It may get executed before the selected operator as the selected operator is waiting for the gas price to drop but doesn't submit any transaction yet. If it doesn't, these operators lose a little gas fee. But a slashed reward may be greater than the risk of losing a little gas fee.\n\nsolidity\nrequire(timeDifference  0, \"HOLOGRAPH: operator has time\");\n\n\nOnce 1 epoch has passed, selected operator is vulnerable to slashing and frontrunning.\n\n",
                "Repair": "\nModify your operator node software to queue transactions immediately with gasPrice in bridgeInRequestPayload if a gas price spike happened. Or allow gas fee loss tradeoff to prevent being slashed.\n\nalexanderattar (Holograph) confirmed and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/44#issuecomment-1307886755):\n  Valid, we have not fully finalized this mechanism and will consider mitigation strategies.\n\ngzeon (judge) increased severity to High and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/44#issuecomment-1320927380):\n  High risk because potential slashing.\n\n\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "/*HOLOGRAPH_LICENSE_HEADER*/\n\n/*SOLIDITY_COMPILER_VERSION*/\n\nimport \"./abstract/Admin.sol\";\nimport \"./abstract/Initializable.sol\";\n\nimport \"./interface/CrossChainMessageInterface.sol\";\nimport \"./interface/HolographBridgeInterface.sol\";\nimport \"./interface/HolographERC20Interface.sol\";\nimport \"./interface/HolographInterface.sol\";\nimport \"./interface/HolographOperatorInterface.sol\";\nimport \"./interface/HolographRegistryInterface.sol\";\nimport \"./interface/InitializableInterface.sol\";\nimport \"./interface/HolographInterfacesInterface.sol\";\nimport \"./interface/Ownable.sol\";\n\nimport \"./struct/OperatorJob.sol\";\n\n/**\n * @title Holograph Operator\n * @author https://github.com/holographxyz\n * @notice Participate in the Holograph Protocol by becoming an Operator\n * @dev This contract allows operators to bond utility tokens and help execute operator jobs\n */\ncontract HolographOperator is Admin, Initializable, HolographOperatorInterface {\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.bridge')) - 1)\n   */\n  bytes32 constant _bridgeSlot = precomputeslot(\"eip1967.Holograph.bridge\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.holograph')) - 1)\n   */\n  bytes32 constant _holographSlot = precomputeslot(\"eip1967.Holograph.holograph\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.interfaces')) - 1)\n   */\n  bytes32 constant _interfacesSlot = precomputeslot(\"eip1967.Holograph.interfaces\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.jobNonce')) - 1)\n   */\n  bytes32 constant _jobNonceSlot = precomputeslot(\"eip1967.Holograph.jobNonce\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.messagingModule')) - 1)\n   */\n  bytes32 constant _messagingModuleSlot = precomputeslot(\"eip1967.Holograph.messagingModule\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.registry')) - 1)\n   */\n  bytes32 constant _registrySlot = precomputeslot(\"eip1967.Holograph.registry\");\n  /**\n   * @dev bytes32(uint256(keccak256('eip1967.Holograph.utilityToken')) - 1)\n   */\n  bytes32 constant _utilityTokenSlot = precomputeslot(\"eip1967.Holograph.utilityToken\");\n\n  /**\n   * @dev Internal number (in seconds), used for defining a window for operator to execute the job\n   */\n  uint256 private _blockTime;\n\n  /**\n   * @dev Minimum amount of tokens needed for bonding\n   */\n  uint256 private _baseBondAmount;\n\n  /**\n   * @dev The multiplier used for calculating bonding amount for pods\n   */\n  uint256 private _podMultiplier;\n\n  /**\n   * @dev The threshold used for limiting number of operators in a pod\n   */\n  uint256 private _operatorThreshold;\n\n  /**\n   * @dev The threshold step used for increasing bond amount once threshold is reached\n   */\n  uint256 private _operatorThresholdStep;\n\n  /**\n   * @dev The threshold divisor used for increasing bond amount once threshold is reached\n   */\n  uint256 private _operatorThresholdDivisor;\n\n  /**\n   * @dev Internal counter of all cross-chain messages received\n   */\n  uint256 private _inboundMessageCounter;\n\n  /**\n   * @dev Internal mapping of operator job details for a specific job hash\n   */\n  mapping(bytes32 => uint256) private _operatorJobs;\n\n  /**\n   * @dev Internal mapping of operator job details for a specific job hash\n   */\n  mapping(bytes32 => bool) private _failedJobs;\n\n  /**\n   * @dev Internal mapping of operator addresses, used for temp storage when defining an operator job\n   */\n  mapping(uint256 => address) private _operatorTempStorage;\n\n  /**\n   * @dev Internal index used for storing/referencing operator temp storage\n   */\n  uint32 private _operatorTempStorageCounter;\n\n  /**\n   * @dev Multi-dimensional array of available operators\n   */\n  address[][] private _operatorPods;\n\n  /**\n   * @dev Internal mapping of bonded operators, to prevent double bonding\n   */\n  mapping(address => uint256) private _bondedOperators;\n\n  /**\n   * @dev Internal mapping of bonded operators, to prevent double bonding\n   */\n  mapping(address => uint256) private _operatorPodIndex;\n\n  /**\n   * @dev Internal mapping of bonded operator amounts\n   */\n  mapping(address => uint256) private _bondedAmounts;\n\n  /**\n   * @dev Constructor is left empty and init is used instead\n   */\n  constructor() {}\n\n  /**\n   * @notice Used internally to initialize the contract instead of through a constructor\n   * @dev This function is called by the deployer/factory when creating a contract\n   * @param initPayload abi encoded payload to use for contract initilaization\n   */\n  function init(bytes memory initPayload) external override returns (bytes4) {\n    require(!_isInitialized(), \"HOLOGRAPH: already initialized\");\n    (address bridge, address holograph, address interfaces, address registry, address utilityToken) = abi.decode(\n      initPayload,\n      (address, address, address, address, address)\n    );\n    assembly {\n      sstore(_adminSlot, origin())\n      sstore(_bridgeSlot, bridge)\n      sstore(_holographSlot, holograph)\n      sstore(_interfacesSlot, interfaces)\n      sstore(_registrySlot, registry)\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n    _blockTime = 60; // 60 seconds allowed for execution\n    unchecked {\n      _baseBondAmount = 100 * (10**18); // one single token unit * 100\n    }\n    // how much to increase bond amount per pod\n    _podMultiplier = 2; // 1, 4, 16, 64\n    // starting pod max amount\n    _operatorThreshold = 1000;\n    // how often to increase price per each operator\n    _operatorThresholdStep = 10;\n    // we want to multiply by decimals, but instead will have to divide\n    _operatorThresholdDivisor = 100; // == * 0.01\n    // set first operator for each pod as zero address\n    _operatorPods = [[address(0)]];\n    // mark zero address as bonded operator, to prevent abuse\n    _bondedOperators[address(0)] = 1;\n    _setInitialized();\n    return InitializableInterface.init.selector;\n  }\n\n  /**\n   * @dev temp function, used for quicker updates/resets during development\n   *      NOT PART OF FINAL CODE !!!\n   */\n  function resetOperator(\n    uint256 blockTime,\n    uint256 baseBondAmount,\n    uint256 podMultiplier,\n    uint256 operatorThreshold,\n    uint256 operatorThresholdStep,\n    uint256 operatorThresholdDivisor\n  ) external onlyAdmin {\n    _blockTime = blockTime;\n    _baseBondAmount = baseBondAmount;\n    _podMultiplier = podMultiplier;\n    _operatorThreshold = operatorThreshold;\n    _operatorThresholdStep = operatorThresholdStep;\n    _operatorThresholdDivisor = operatorThresholdDivisor;\n    _operatorPods = [[address(0)]];\n    _bondedOperators[address(0)] = 1;\n  }\n\n  /**\n   * @notice Execute an available operator job\n   * @dev When making this call, if operating criteria is not met, the call will revert\n   * @param bridgeInRequestPayload the entire cross chain message payload\n   */\n  function executeJob(bytes calldata bridgeInRequestPayload) external payable {\n    /**\n     * @dev derive the payload hash for use in mappings\n     */\n    bytes32 hash = keccak256(bridgeInRequestPayload);\n    /**\n     * @dev check that job exists\n     */\n    require(_operatorJobs[hash] > 0, \"HOLOGRAPH: invalid job\");\n    uint256 gasLimit = 0;\n    uint256 gasPrice = 0;\n    assembly {\n      /**\n       * @dev extract gasLimit\n       */\n      gasLimit := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x40))\n      /**\n       * @dev extract gasPrice\n       */\n      gasPrice := calldataload(sub(add(bridgeInRequestPayload.offset, bridgeInRequestPayload.length), 0x20))\n    }\n    /**\n     * @dev unpack bitwise packed operator job details\n     */\n    OperatorJob memory job = getJobDetails(hash);\n    /**\n     * @dev to prevent replay attacks, remove job from mapping\n     */\n    delete _operatorJobs[hash];\n    /**\n     * @dev check that a specific operator was selected for the job\n     */\n    if (job.operator != address(0)) {\n      /**\n       * @dev switch pod to index based value\n       */\n      uint256 pod = job.pod - 1;\n      /**\n       * @dev check if sender is not the selected primary operator\n       */\n      if (job.operator != msg.sender) {\n        /**\n         * @dev sender is not selected operator, need to check if allowed to do job\n         */\n        uint256 elapsedTime = block.timestamp - uint256(job.startTimestamp);\n        uint256 timeDifference = elapsedTime / job.blockTimes;\n        /**\n         * @dev validate that initial selected operator time slot is still active\n         */\n        require(timeDifference > 0, \"HOLOGRAPH: operator has time\");\n        /**\n         * @dev check that the selected missed the time slot due to a gas spike\n         */\n        require(gasPrice >= tx.gasprice, \"HOLOGRAPH: gas spike detected\");\n        /**\n         * @dev check if time is within fallback operator slots\n         */\n        if (timeDifference < 6) {\n          uint256 podIndex = uint256(job.fallbackOperators[timeDifference - 1]);\n          /**\n           * @dev do a quick sanity check to make sure operator did not leave from index or is a zero address\n           */\n          if (podIndex > 0 && podIndex < _operatorPods[pod].length) {\n            address fallbackOperator = _operatorPods[pod][podIndex];\n            /**\n             * @dev ensure that sender is currently valid backup operator\n             */\n            require(fallbackOperator == msg.sender, \"HOLOGRAPH: invalid fallback\");\n          }\n        }\n        /**\n         * @dev time to reward the current operator\n         */\n        uint256 amount = _getBaseBondAmount(pod);\n        /**\n         * @dev select operator that failed to do the job, is slashed the pod base fee\n         */\n        _bondedAmounts[job.operator] -= amount;\n        /**\n         * @dev the slashed amount is sent to current operator\n         */\n        _bondedAmounts[msg.sender] += amount;\n        /**\n         * @dev check if slashed operator has enough tokens bonded to stay\n         */\n        if (_bondedAmounts[job.operator] >= amount) {\n          /**\n           * @dev enough bond amount leftover, put operator back in\n           */\n          _operatorPods[pod].push(job.operator);\n          _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;\n          _bondedOperators[job.operator] = job.pod;\n        } else {\n          /**\n           * @dev slashed operator does not have enough tokens bonded, return remaining tokens only\n           */\n          uint256 leftovers = _bondedAmounts[job.operator];\n          if (leftovers > 0) {\n            _bondedAmounts[job.operator] = 0;\n            _utilityToken().transfer(job.operator, leftovers);\n          }\n        }\n      } else {\n        /**\n         * @dev the selected operator is executing the job\n         */\n        _operatorPods[pod].push(msg.sender);\n        _operatorPodIndex[job.operator] = _operatorPods[pod].length - 1;\n        _bondedOperators[msg.sender] = job.pod;\n      }\n    }\n    /**\n     * @dev ensure that there is enough has left for the job\n     */\n    require(gasleft() > gasLimit, \"HOLOGRAPH: not enough gas left\");\n    /**\n     * @dev execute the job\n     */\n    try\n      HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(\n        msg.sender,\n        bridgeInRequestPayload\n      )\n    {\n      /// @dev do nothing\n    } catch {\n      _failedJobs[hash] = true;\n      emit FailedOperatorJob(hash);\n    }\n    /**\n     * @dev every executed job (even if failed) increments total message counter by one\n     */\n    ++_inboundMessageCounter;\n    /**\n     * @dev reward operator (with HLG) for executing the job\n     * @dev this is out of scope and is purposefully omitted from code\n     */\n    ////  _bondedOperators[msg.sender] += reward;\n  }\n\n  /*\n   * @dev Purposefully made to be external so that Operator can call it during executeJob function\n   *      Check the executeJob function to understand it's implementation\n   */\n  function nonRevertingBridgeCall(address msgSender, bytes calldata payload) external payable {\n    require(msg.sender == address(this), \"HOLOGRAPH: operator only call\");\n    assembly {\n      /**\n       * @dev remove gas price from end\n       */\n      calldatacopy(0, payload.offset, sub(payload.length, 0x20))\n      /**\n       * @dev hToken recipient is injected right before making the call\n       */\n      mstore(0x84, msgSender)\n      /**\n       * @dev make non-reverting call\n       */\n      let result := call(\n        /// @dev gas limit is retrieved from last 32 bytes of payload in-memory value\n        mload(sub(payload.length, 0x40)),\n        /// @dev destination is bridge contract\n        sload(_bridgeSlot),\n        /// @dev any value is passed along\n        callvalue(),\n        /// @dev data is retrieved from 0 index memory position\n        0,\n        /// @dev everything except for last 32 bytes (gas limit) is sent\n        sub(payload.length, 0x40),\n        0,\n        0\n      )\n      if eq(result, 0) {\n        revert(0, 0)\n      }\n      return(0, 0)\n    }\n  }\n\n  /**\n   * @notice Receive a cross-chain message\n   * @dev This function is restricted for use by Holograph Messaging Module only\n   */\n  function crossChainMessage(bytes calldata bridgeInRequestPayload) external payable {\n    require(msg.sender == address(_messagingModule()), \"HOLOGRAPH: messaging only call\");\n    /**\n     * @dev would be a good idea to check payload gas price here and if it is significantly lower than current amount\n     *      to set zero address as operator to not lock-up an operator unnecessarily\n     */\n    unchecked {\n      bytes32 jobHash = keccak256(bridgeInRequestPayload);\n      /**\n       * @dev load and increment operator temp storage in one call\n       */\n      ++_operatorTempStorageCounter;\n      /**\n       * @dev use job hash, job nonce, block number, and block timestamp for generating a random number\n       */\n      uint256 random = uint256(keccak256(abi.encodePacked(jobHash, _jobNonce(), block.number, block.timestamp)));\n      /**\n       * @dev divide by total number of pods, use modulus/remainder\n       */\n      uint256 pod = random % _operatorPods.length;\n      /**\n       * @dev identify the total number of available operators in pod\n       */\n      uint256 podSize = _operatorPods[pod].length;\n      /**\n       * @dev select a primary operator\n       */\n      uint256 operatorIndex = random % podSize;\n      /**\n       * @dev If operator index is 0, then it's open season! Anyone can execute this job. First come first serve\n       *      pop operator to ensure that they cannot be selected for any other job until this one completes\n       *      decrease pod size to accomodate popped operator\n       */\n      _operatorTempStorage[_operatorTempStorageCounter] = _operatorPods[pod][operatorIndex];\n      _popOperator(pod, operatorIndex);\n      if (podSize > 1) {\n        podSize--;\n      }\n      _operatorJobs[jobHash] = uint256(\n        ((pod + 1) << 248) |\n          (uint256(_operatorTempStorageCounter) << 216) |\n          (block.number << 176) |\n          (_randomBlockHash(random, podSize, 1) << 160) |\n          (_randomBlockHash(random, podSize, 2) << 144) |\n          (_randomBlockHash(random, podSize, 3) << 128) |\n          (_randomBlockHash(random, podSize, 4) << 112) |\n          (_randomBlockHash(random, podSize, 5) << 96) |\n          (block.timestamp << 16) |\n          0\n      ); // 80 next available bit position && so far 176 bits used with only 128 left\n      /**\n       * @dev emit event to signal to operators that a job has become available\n       */\n      emit AvailableOperatorJob(jobHash, bridgeInRequestPayload);\n    }\n  }\n\n  /**\n   * @notice Calculate the amount of gas needed to execute a bridgeInRequest\n   * @dev Use this function to estimate the amount of gas that will be used by the bridgeInRequest function\n   *      Set a specific gas limit when making this call, subtract return value, to get total gas used\n   *      Only use this with a static call\n   * @param bridgeInRequestPayload abi encoded bytes making up the bridgeInRequest payload\n   * @return the gas amount remaining after the static call is returned\n   */\n  function jobEstimator(bytes calldata bridgeInRequestPayload) external payable returns (uint256) {\n    assembly {\n      calldatacopy(0, bridgeInRequestPayload.offset, sub(bridgeInRequestPayload.length, 0x40))\n      /**\n       * @dev bridgeInRequest doNotRevert is purposefully set to false so a rever would happen\n       */\n      mstore8(0xE3, 0x00)\n      let result := call(gas(), sload(_bridgeSlot), callvalue(), 0, sub(bridgeInRequestPayload.length, 0x40), 0, 0)\n      /**\n       * @dev if for some reason the call does not revert, it is force reverted\n       */\n      if eq(result, 1) {\n        returndatacopy(0, 0, returndatasize())\n        revert(0, returndatasize())\n      }\n      /**\n       * @dev remaining gas is set as the return value\n       */\n      mstore(0x00, gas())\n      return(0x00, 0x20)\n    }\n  }\n\n  /**\n   * @notice Send cross chain bridge request message\n   * @dev This function is restricted to only be callable by Holograph Bridge\n   * @param gasLimit maximum amount of gas to spend for executing the beam on destination chain\n   * @param gasPrice maximum amount of gas price (in destination chain native gas token) to pay on destination chain\n   * @param toChain Holograph Chain ID where the beam is being sent to\n   * @param nonce incremented number used to ensure job hashes are unique\n   * @param holographableContract address of the contract for which the bridge request is being made\n   * @param bridgeOutPayload bytes made up of the bridgeOutRequest payload\n   */\n  function send(\n    uint256 gasLimit,\n    uint256 gasPrice,\n    uint32 toChain,\n    address msgSender,\n    uint256 nonce,\n    address holographableContract,\n    bytes calldata bridgeOutPayload\n  ) external payable {\n    require(msg.sender == _bridge(), \"HOLOGRAPH: bridge only call\");\n    CrossChainMessageInterface messagingModule = _messagingModule();\n    uint256 hlgFee = messagingModule.getHlgFee(toChain, gasLimit, gasPrice);\n    address hToken = _registry().getHToken(_holograph().getHolographChainId());\n    require(hlgFee < msg.value, \"HOLOGRAPH: not enough value\");\n    payable(hToken).transfer(hlgFee);\n    bytes memory encodedData = abi.encodeWithSelector(\n      HolographBridgeInterface.bridgeInRequest.selector,\n      /**\n       * @dev job nonce is an incremented value that is assigned to each bridge request to guarantee unique hashes\n       */\n      nonce,\n      /**\n       * @dev including the current holograph chain id (origin chain)\n       */\n      _holograph().getHolographChainId(),\n      /**\n       * @dev holographable contract have the same address across all chains, so our destination address will be the same\n       */\n      holographableContract,\n      /**\n       * @dev get the current chain's hToken for native gas token\n       */\n      hToken,\n      /**\n       * @dev recipient will be defined when operator picks up the job\n       */\n      address(0),\n      /**\n       * @dev value is set to zero for now\n       */\n      hlgFee,\n      /**\n       * @dev specify that function call should not revert\n       */\n      true,\n      /**\n       * @dev attach actual holographableContract function call\n       */\n      bridgeOutPayload\n    );\n    /**\n     * @dev add gas variables to the back for later extraction\n     */\n    encodedData = abi.encodePacked(encodedData, gasLimit, gasPrice);\n    /**\n     * @dev Send the data to the current Holograph Messaging Module\n     *      This will be changed to dynamically select which messaging module to use based on destination network\n     */\n    messagingModule.send{value: msg.value - hlgFee}(\n      gasLimit,\n      gasPrice,\n      toChain,\n      msgSender,\n      msg.value - hlgFee,\n      encodedData\n    );\n    /**\n     * @dev for easy indexing, an event is emitted with the payload hash for status tracking\n     */\n    emit CrossChainMessageSent(keccak256(encodedData));\n  }\n\n  /**\n   * @notice Get the fees associated with sending specific payload\n   * @dev Will provide exact costs on protocol and message side, combine the two to get total\n   * @dev @param toChain holograph chain id of destination chain for payload\n   * @dev @param gasLimit amount of gas to provide for executing payload on destination chain\n   * @dev @param gasPrice maximum amount to pay for gas price, can be set to 0 and will be chose automatically\n   * @dev @param crossChainPayload the entire packet being sent cross-chain\n   * @return hlgFee the amount (in wei) of native gas token that will cost for finalizing job on destiantion chain\n   * @return msgFee the amount (in wei) of native gas token that will cost for sending message to destiantion chain\n   */\n  function getMessageFee(\n    uint32,\n    uint256,\n    uint256,\n    bytes calldata\n  ) external view returns (uint256, uint256) {\n    assembly {\n      calldatacopy(0, 0, calldatasize())\n      let result := staticcall(gas(), sload(_messagingModuleSlot), 0, calldatasize(), 0, 0)\n      returndatacopy(0, 0, returndatasize())\n      switch result\n      case 0 {\n        revert(0, returndatasize())\n      }\n      default {\n        return(0, returndatasize())\n      }\n    }\n  }\n\n  /**\n   * @notice Get the details for an available operator job\n   * @dev The job hash is a keccak256 hash of the entire job payload\n   * @param jobHash keccak256 hash of the job\n   * @return an OperatorJob struct with details about a specific job\n   */\n  function getJobDetails(bytes32 jobHash) public view returns (OperatorJob memory) {\n    uint256 packed = _operatorJobs[jobHash];\n    /**\n     * @dev The job is bitwise packed into a single 32 byte slot, this unpacks it before returning the struct\n     */\n    return\n      OperatorJob(\n        uint8(packed >> 248),\n        uint16(_blockTime),\n        _operatorTempStorage[uint32(packed >> 216)],\n        uint40(packed >> 176),\n        // TODO: move the bit-shifting around to have it be sequential\n        uint64(packed >> 16),\n        [\n          uint16(packed >> 160),\n          uint16(packed >> 144),\n          uint16(packed >> 128),\n          uint16(packed >> 112),\n          uint16(packed >> 96)\n        ]\n      );\n  }\n\n  /**\n   * @notice Get number of pods available\n   * @dev This returns number of pods that have been opened via bonding\n   */\n  function getTotalPods() external view returns (uint256 totalPods) {\n    return _operatorPods.length;\n  }\n\n  /**\n   * @notice Get total number of operators in a pod\n   * @dev Use in conjunction with paginated getPodOperators function\n   * @param pod the pod to query\n   * @return total operators in a pod\n   */\n  function getPodOperatorsLength(uint256 pod) external view returns (uint256) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    return _operatorPods[pod - 1].length;\n  }\n\n  /**\n   * @notice Get list of operators in a pod\n   * @dev Use paginated getPodOperators function instead if list gets too long\n   * @param pod the pod to query\n   * @return operators array list of operators in a pod\n   */\n  function getPodOperators(uint256 pod) external view returns (address[] memory operators) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    operators = _operatorPods[pod - 1];\n  }\n\n  /**\n   * @notice Get paginated list of operators in a pod\n   * @dev Use in conjunction with getPodOperatorsLength to know the total length of results\n   * @param pod the pod to query\n   * @param index the array index to start from\n   * @param length the length of result set to be (will be shorter if reached end of array)\n   * @return operators a paginated array of operators\n   */\n  function getPodOperators(\n    uint256 pod,\n    uint256 index,\n    uint256 length\n  ) external view returns (address[] memory operators) {\n    require(_operatorPods.length >= pod, \"HOLOGRAPH: pod does not exist\");\n    /**\n     * @dev if pod 0 is selected, this will create a revert\n     */\n    pod--;\n    /**\n     * @dev get total length of pod operators\n     */\n    uint256 supply = _operatorPods[pod].length;\n    /**\n     * @dev check if length is out of bounds for this result set\n     */\n    if (index + length > supply) {\n      /**\n       * @dev adjust length to return remainder of the results\n       */\n      length = supply - index;\n    }\n    /**\n     * @dev create in-memory array\n     */\n    operators = new address[](length);\n    /**\n     * @dev add operators to result set\n     */\n    for (uint256 i = 0; i < length; i++) {\n      operators[i] = _operatorPods[pod][index + i];\n    }\n  }\n\n  /**\n   * @notice Check the base and current price for bonding to a particular pod\n   * @dev Useful for understanding what is required for bonding to a pod\n   * @param pod the pod to get bonding amounts for\n   * @return base the base bond amount required for a pod\n   * @return current the current bond amount required for a pod\n   */\n  function getPodBondAmounts(uint256 pod) external view returns (uint256 base, uint256 current) {\n    base = _getBaseBondAmount(pod - 1);\n    current = _getCurrentBondAmount(pod - 1);\n  }\n\n  /**\n   * @notice Get an operator's currently bonded amount\n   * @dev Useful for checking how much an operator has bonded\n   * @param operator address of operator to check\n   * @return amount total number of utility token bonded\n   */\n  function getBondedAmount(address operator) external view returns (uint256 amount) {\n    return _bondedAmounts[operator];\n  }\n\n  /**\n   * @notice Get an operator's currently bonded pod\n   * @dev Useful for checking if an operator is currently bonded\n   * @param operator address of operator to check\n   * @return pod number that operator is bonded on, returns zero if not bonded or selected for job\n   */\n  function getBondedPod(address operator) external view returns (uint256 pod) {\n    return _bondedOperators[operator];\n  }\n\n  /**\n   * @notice Topup a bonded operator with more utility tokens\n   * @dev Useful function if an operator got slashed and wants to add a safety buffer to not get unbonded\n   *      This function will not work if operator has currently been selected for a job\n   * @param operator address of operator to topup\n   * @param amount utility token amount to add\n   */\n  function topupUtilityToken(address operator, uint256 amount) external {\n    /**\n     * @dev check that an operator is currently bonded\n     */\n    require(_bondedOperators[operator] != 0, \"HOLOGRAPH: operator not bonded\");\n    unchecked {\n      /**\n       * @dev add the additional amount to operator\n       */\n      _bondedAmounts[operator] += amount;\n    }\n    /**\n     * @dev transfer tokens last, to prevent reentrancy attacks\n     */\n    require(_utilityToken().transferFrom(msg.sender, address(this), amount), \"HOLOGRAPH: token transfer failed\");\n  }\n\n  /**\n   * @notice Bond utility tokens and become an operator\n   * @dev An operator can only bond to one pod at a time, per network\n   * @param operator address of operator to bond (can be an ownable smart contract)\n   * @param amount utility token amount to bond (can be greater than minimum)\n   * @param pod number of pod to bond to (can be for one that does not exist yet)\n   */\n  function bondUtilityToken(\n    address operator,\n    uint256 amount,\n    uint256 pod\n  ) external {\n    /**\n     * @dev an operator can only bond to one pod at any give time per network\n     */\n    require(_bondedOperators[operator] == 0 && _bondedAmounts[operator] == 0, \"HOLOGRAPH: operator is bonded\");\n    unchecked {\n      /**\n       * @dev get the current bonding minimum for selected pod\n       */\n      uint256 current = _getCurrentBondAmount(pod - 1);\n      require(current <= amount, \"HOLOGRAPH: bond amount too small\");\n      /**\n       * @dev check if selected pod is greater than currently existing pods\n       */\n      if (_operatorPods.length < pod) {\n        /**\n         * @dev activate pod(s) up until the selected pod\n         */\n        for (uint256 i = _operatorPods.length; i <= pod; i++) {\n          /**\n           * @dev add zero address into pod to mitigate empty pod issues\n           */\n          _operatorPods.push([address(0)]);\n        }\n      }\n      /**\n       * @dev prevent bonding to a pod with more than uint16 max value\n       */\n      require(_operatorPods[pod - 1].length < type(uint16).max, \"HOLOGRAPH: too many operators\");\n      _operatorPods[pod - 1].push(operator);\n      _operatorPodIndex[operator] = _operatorPods[pod - 1].length - 1;\n      _bondedOperators[operator] = pod;\n      _bondedAmounts[operator] = amount;\n      /**\n       * @dev transfer tokens last, to prevent reentrancy attacks\n       */\n      require(_utilityToken().transferFrom(msg.sender, address(this), amount), \"HOLOGRAPH: token transfer failed\");\n    }\n  }\n\n  /**\n   * @notice Unbond HLG utility tokens and stop being an operator\n   * @dev A bonded operator selected for a job cannot unbond until they complete the job, or are slashed\n   * @param operator address of operator to unbond\n   * @param recipient address where to send the bonded tokens\n   */\n  function unbondUtilityToken(address operator, address recipient) external {\n    /**\n     * @dev validate that operator is currently bonded\n     */\n    require(_bondedOperators[operator] != 0, \"HOLOGRAPH: operator not bonded\");\n    /**\n     * @dev check if sender is not actual operator\n     */\n    if (msg.sender != operator) {\n      /**\n       * @dev check if operator is a smart contract\n       */\n      require(_isContract(operator), \"HOLOGRAPH: operator not contract\");\n      /**\n       * @dev check if smart contract is owned by sender\n       */\n      require(Ownable(operator).isOwner(msg.sender), \"HOLOGRAPH: sender not owner\");\n    }\n    /**\n     * @dev get current bonded amount by operator\n     */\n    uint256 amount = _bondedAmounts[operator];\n    /**\n     * @dev unset operator bond amount before making a transfer\n     */\n    _bondedAmounts[operator] = 0;\n    /**\n     * @dev remove all operator references\n     */\n    _popOperator(_bondedOperators[operator] - 1, _operatorPodIndex[operator]);\n    /**\n     * @dev transfer tokens to recipient\n     */\n    require(_utilityToken().transfer(recipient, amount), \"HOLOGRAPH: token transfer failed\");\n  }\n\n  /**\n   * @notice Get the address of the Holograph Bridge module\n   * @dev Used for beaming holographable assets cross-chain\n   */\n  function getBridge() external view returns (address bridge) {\n    assembly {\n      bridge := sload(_bridgeSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Bridge module address\n   * @param bridge address of the Holograph Bridge smart contract to use\n   */\n  function setBridge(address bridge) external onlyAdmin {\n    assembly {\n      sstore(_bridgeSlot, bridge)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Protocol contract\n   * @dev Used for storing a reference to all the primary modules and variables of the protocol\n   */\n  function getHolograph() external view returns (address holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Protocol contract address\n   * @param holograph address of the Holograph Protocol smart contract to use\n   */\n  function setHolograph(address holograph) external onlyAdmin {\n    assembly {\n      sstore(_holographSlot, holograph)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Interfaces module\n   * @dev Holograph uses this contract to store data that needs to be accessed by a large portion of the modules\n   */\n  function getInterfaces() external view returns (address interfaces) {\n    assembly {\n      interfaces := sload(_interfacesSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Interfaces module address\n   * @param interfaces address of the Holograph Interfaces smart contract to use\n   */\n  function setInterfaces(address interfaces) external onlyAdmin {\n    assembly {\n      sstore(_interfacesSlot, interfaces)\n    }\n  }\n\n  /**\n   * @notice Get the address of the Holograph Messaging Module\n   * @dev All cross-chain message requests will get forwarded to this adress\n   */\n  function getMessagingModule() external view returns (address messagingModule) {\n    assembly {\n      messagingModule := sload(_messagingModuleSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Messaging Module address\n   * @param messagingModule address of the LayerZero Endpoint to use\n   */\n  function setMessagingModule(address messagingModule) external onlyAdmin {\n    assembly {\n      sstore(_messagingModuleSlot, messagingModule)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Registry module\n   * @dev This module stores a reference for all deployed holographable smart contracts\n   */\n  function getRegistry() external view returns (address registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Registry module address\n   * @param registry address of the Holograph Registry smart contract to use\n   */\n  function setRegistry(address registry) external onlyAdmin {\n    assembly {\n      sstore(_registrySlot, registry)\n    }\n  }\n\n  /**\n   * @notice Get the Holograph Utility Token address\n   * @dev This is the official utility token of the Holograph Protocol\n   */\n  function getUtilityToken() external view returns (address utilityToken) {\n    assembly {\n      utilityToken := sload(_utilityTokenSlot)\n    }\n  }\n\n  /**\n   * @notice Update the Holograph Utility Token address\n   * @param utilityToken address of the Holograph Utility Token smart contract to use\n   */\n  function setUtilityToken(address utilityToken) external onlyAdmin {\n    assembly {\n      sstore(_utilityTokenSlot, utilityToken)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Bridge Interface\n   */\n  function _bridge() private view returns (address bridge) {\n    assembly {\n      bridge := sload(_bridgeSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interface\n   */\n  function _holograph() private view returns (HolographInterface holograph) {\n    assembly {\n      holograph := sload(_holographSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Interfaces Interface\n   */\n  function _interfaces() private view returns (HolographInterfacesInterface interfaces) {\n    assembly {\n      interfaces := sload(_interfacesSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Messaging Module Interface\n   */\n  function _messagingModule() private view returns (CrossChainMessageInterface messagingModule) {\n    assembly {\n      messagingModule := sload(_messagingModuleSlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Registry Interface\n   */\n  function _registry() private view returns (HolographRegistryInterface registry) {\n    assembly {\n      registry := sload(_registrySlot)\n    }\n  }\n\n  /**\n   * @dev Internal function used for getting the Holograph Utility Token Interface\n   */\n  function _utilityToken() private view returns (HolographERC20Interface utilityToken) {\n    assembly {\n      utilityToken := sload(_utilityTokenSlot)\n    }\n  }\n\n  /**\n   * @dev Internal nonce, that increments on each call, used for randomness\n   */\n  function _jobNonce() private returns (uint256 jobNonce) {\n    assembly {\n      jobNonce := add(sload(_jobNonceSlot), 0x0000000000000000000000000000000000000000000000000000000000000001)\n      sstore(_jobNonceSlot, jobNonce)\n    }\n  }\n\n  /**\n   * @dev Internal function used to remove an operator from a particular pod\n   */\n  function _popOperator(uint256 pod, uint256 operatorIndex) private {\n    /**\n     * @dev only pop the operator if it's not a zero address\n     */\n    if (operatorIndex > 0) {\n      unchecked {\n        address operator = _operatorPods[pod][operatorIndex];\n        /**\n         * @dev mark operator as no longer bonded\n         */\n        _bondedOperators[operator] = 0;\n        /**\n         * @dev remove pod reference for operator\n         */\n        _operatorPodIndex[operator] = 0;\n        uint256 lastIndex = _operatorPods[pod].length - 1;\n        if (lastIndex != operatorIndex) {\n          /**\n           * @dev if operator is not last index, move last index to operator's current index\n           */\n          _operatorPods[pod][operatorIndex] = _operatorPods[pod][lastIndex];\n          _operatorPodIndex[_operatorPods[pod][operatorIndex]] = operatorIndex;\n        }\n        /**\n         * @dev delete last index\n         */\n        delete _operatorPods[pod][lastIndex];\n        /**\n         * @dev shorten array length\n         */\n        _operatorPods[pod].pop();\n      }\n    }\n  }\n\n  /**\n   * @dev Internal function used for calculating the base bonding amount for a pod\n   */\n  function _getBaseBondAmount(uint256 pod) private view returns (uint256) {\n    return (_podMultiplier**pod) * _baseBondAmount;\n  }\n\n  /**\n   * @dev Internal function used for calculating the current bonding amount for a pod\n   */\n  function _getCurrentBondAmount(uint256 pod) private view returns (uint256) {\n    uint256 current = (_podMultiplier**pod) * _baseBondAmount;\n    if (pod >= _operatorPods.length) {\n      return current;\n    }\n    uint256 threshold = _operatorThreshold / (2**pod);\n    uint256 position = _operatorPods[pod].length;\n    if (position > threshold) {\n      position -= threshold;\n      //       current += (current / _operatorThresholdDivisor) * position;\n      current += (current / _operatorThresholdDivisor) * (position / _operatorThresholdStep);\n    }\n    return current;\n  }\n\n  /**\n   * @dev Internal function used for generating a random pod operator selection by using previously mined blocks\n   */\n  function _randomBlockHash(\n    uint256 random,\n    uint256 podSize,\n    uint256 n\n  ) private view returns (uint256) {\n    unchecked {\n      return (random + uint256(blockhash(block.number - n))) % podSize;\n    }\n  }\n\n  /**\n   * @dev Internal function used for checking if a contract has been deployed at address\n   */\n  function _isContract(address contractAddress) private view returns (bool) {\n    bytes32 codehash;\n    assembly {\n      codehash := extcodehash(contractAddress)\n    }\n    return (codehash != 0x0 && codehash != precomputekeccak256(\"\"));\n  }\n\n  /**\n   * @dev Purposefully left empty to ensure ether transfers use least amount of gas possible\n   */\n  receive() external payable {}\n\n  /**\n   * @dev Purposefully reverts to prevent any calls to undefined functions\n   */\n  fallback() external payable {\n    revert();\n  }\n}\n\n\n",
        "CodeNames": [
            "HolographOperator.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-07",
                "Location": [
                    "//solidity\nfunction executeJob(bytes calldata bridgeInRequestPayload) external payable {\n...\ndelete _operatorJobs[hash];\n...\n    try\n      HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(\n        msg.sender,\n        bridgeInRequestPayload\n      )\n    {\n      /// @dev do nothing\n    } catch {\n      _failedJobs[hash] = true;\n      emit FailedOperatorJob(hash);\n    }\n}\n"
                ],
                "Type": " Failed job can't be recovered. NFT may be lost.",
                "Description": "*Submitted by Chom, also found by 0x52, 0xA5DF, adriro, and ladboy233*\n\nHolographOperator.sol#L329(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L329)<br\nHolographOperator.sol#L419-L429(https://github.com/code-423n4/2022-10-holograph/blob/f8c2eae866280a1acfdc8a8352401ed031be1373/contracts/HolographOperator.sol#L419-L429)<br\n\nsolidity\nfunction executeJob(bytes calldata bridgeInRequestPayload) external payable {\n...\ndelete _operatorJobs[hash];\n...\n    try\n      HolographOperatorInterface(address(this)).nonRevertingBridgeCall{value: msg.value}(\n        msg.sender,\n        bridgeInRequestPayload\n      )\n    {\n      /// @dev do nothing\n    } catch {\n      _failedJobs[hash] = true;\n      emit FailedOperatorJob(hash);\n    }\n}\n\n\nFirst, it will delete _operatorJobs[hash]; to have it not replayable.\n\nNext, assume nonRevertingBridgeCall failed. NFT won't be minted and the catch block is entered.\n\n_failedJobs[hash] is set to true and event is emitted\n\nNotice that _operatorJobs[hash] has been deleted, so this job is not replayable. This mean NFT is lost forever since we can't retry executeJob.\n\n",
                "Repair": "\nMove delete _operatorJobs[hash]; to the end of function executeJob covered in if (!_failedJobs[hash])\n\nsolidity\n...\nif (!_failedJobs[hash]) delete _operatorJobs[hash];\n...\n\n\nBut this implementation is not safe. The selected operator may get slashed. Additionally, you may need to check _failedJobs flag to allow retry for only the selected operator.\n\ngzeon (judge) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1296298124):\n  While the use of non-blocking call is good to unstuck operator, consider making the failed job still executable by anyone (so the user can e.g. use a higher gas limit) to avoid lost fund. Kinda like how Arbitrum retryable ticket works. Can be high risk due to asset lost.\n\nTrust (warden) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1296346691):\n  I think it's a design choice to make it not replayable. Sponsor discussed having a refund mechanism at the source chain, if we were to leave it replayable the refunding could lead to double mint attack.\n\nalexanderattar (Holograph) commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1307872286):\n  This is a valid point and the desired code is planned but wasn't implemented in time for the audit. We will add logic to handle this case.\n\ngzeon (judge) increased severity to High and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1320929853):\n  Since asset can be lost, I think it is fair to judge this as High risk.\n\nalexanderattar (Holograph) resolved and commented(https://github.com/code-423n4/2022-10-holograph-findings/issues/102#issuecomment-1351772822):\n  We have a fix for this: https://github.com/holographxyz/holograph-protocol/pull/98/files#diff-552f4c851fa3089f9c8efd33a2f10681bc27743917bb63000a5d19d5b41e0d3f\n\n\n\n*\n\n\n"
            }
        ]
    }
]