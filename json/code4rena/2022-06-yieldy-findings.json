[
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/ILiquidityReserve.sol\";\nimport \"./LiquidityReserveStorage.sol\";\n\ncontract LiquidityReserve is\n    LiquidityReserveStorage,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    ILiquidityReserve\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event FeeChanged(uint256 fee);\n\n    // check if sender is the stakingContract\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"Not staking contract\");\n        _;\n    }\n\n    /**\n        @notice initialize by setting stakingContract & setting initial liquidity\n        @param _tokenName name of the lrToken to be created\n        @param _tokenSymbol symbol of the lrToken to be created.\n        @param _stakingToken the staking token in use\n        @param _rewardToken the reward token in use\n     */\n    function initialize(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        address _stakingToken,\n        address _rewardToken\n    ) external initializer {\n        ERC20Upgradeable.__ERC20_init(_tokenName, _tokenSymbol);\n        OwnableUpgradeable.__Ownable_init();\n        require(\n            _stakingToken != address(0) && _rewardToken != address(0),\n            \"Invalid address\"\n        );\n        stakingToken = _stakingToken;\n        rewardToken = _rewardToken;\n    }\n\n    /**\n        @notice callable once after initialized by the owner to set the staking contract and enable\n        our reserve to be used.\n        @param _stakingContract address of the staking contract\n     */\n    function enableLiquidityReserve(address _stakingContract)\n        external\n        onlyOwner\n    {\n        require(!isReserveEnabled, \"Already enabled\");\n        require(_stakingContract != address(0), \"Invalid address\");\n\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            msg.sender\n        );\n        // require address has minimum liquidity\n        require(\n            stakingTokenBalance >= MINIMUM_LIQUIDITY,\n            \"Not enough staking tokens\"\n        );\n        stakingContract = _stakingContract;\n\n        // permanently lock the first MINIMUM_LIQUIDITY of lrTokens\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            MINIMUM_LIQUIDITY\n        );\n        _mint(address(this), MINIMUM_LIQUIDITY);\n        IERC20Upgradeable(rewardToken).approve(\n            stakingContract,\n            type(uint256).max\n        );\n        isReserveEnabled = true;\n    }\n\n    /**\n        @notice sets Fee (in basis points eg. 100 bps = 1%) for instant unstaking\n        @param _fee uint - fee in basis points\n     */\n    function setFee(uint256 _fee) external onlyOwner {\n        // check range before setting fee\n        require(_fee <= BASIS_POINTS, \"Out of range\");\n        fee = _fee;\n\n        emit FeeChanged(_fee);\n    }\n\n    /**\n        @notice addLiquidity for the stakingToken and receive lrToken in exchange\n        @param _amount uint - amount of staking tokens to add\n     */\n    function addLiquidity(uint256 _amount) external {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 lrFoxSupply = totalSupply();\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n\n        uint256 amountToMint = (_amount * lrFoxSupply) / totalLockedValue;\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        _mint(msg.sender, amountToMint);\n    }\n\n    /**\n        @notice calculate current lrToken withdraw value\n        @param _amount uint - amount of tokens that will be withdrawn\n        @return uint - converted amount of staking tokens to withdraw from lr tokens\n     */\n    function _calculateReserveTokenValue(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 lrFoxSupply = totalSupply();\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n        uint256 convertedAmount = (_amount * totalLockedValue) / lrFoxSupply;\n\n        return convertedAmount;\n    }\n\n    /**\n        @notice removeLiquidity by swapping your lrToken for stakingTokens\n        @param _amount uint - amount of tokens to remove from liquidity reserve\n     */\n    function removeLiquidity(uint256 _amount) external {\n        // check balance before removing liquidity\n        require(_amount <= balanceOf(msg.sender), \"Not enough lr tokens\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountToWithdraw = _calculateReserveTokenValue(_amount);\n\n        // verify that we have enough stakingTokens\n        require(\n            IERC20Upgradeable(stakingToken).balanceOf(address(this)) >=\n                amountToWithdraw,\n            \"Not enough funds\"\n        );\n\n        _burn(msg.sender, _amount);\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            msg.sender,\n            amountToWithdraw\n        );\n    }\n\n    /**\n        @notice allow instant unstake their stakingToken for a fee paid to the liquidity providers\n        @param _amount uint - amount of tokens to instantly unstake\n        @param _recipient address - address to send staking tokens to\n     */\n    function instantUnstake(uint256 _amount, address _recipient)\n        external\n        onlyStakingContract\n    {\n        require(isReserveEnabled, \"Not enabled yet\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountMinusFee = _amount - ((_amount * fee) / BASIS_POINTS);\n\n        IERC20Upgradeable(rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            _recipient,\n            amountMinusFee\n        );\n        unstakeAllRewardTokens();\n    }\n\n    /**\n        @notice find balance of reward tokens in contract and unstake them from staking contract\n     */\n    function unstakeAllRewardTokens() public {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        if (coolDownAmount == 0) {\n            uint256 amount = IERC20Upgradeable(rewardToken).balanceOf(\n                address(this)\n            );\n            if (amount > 0) IStaking(stakingContract).unstake(amount, false);\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "LiquidityReserve.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "withdraw"
                ],
                "Type": " No withdrawal possible for ETH TOKE pool",
                "Description": "\nThe withdraw function of the ETH Tokemak pool has an additional parameter asEth. This can be seen in the Tokemak Github repository(https://github.com/Tokemak/tokemak-smart-contracts-public/blob/2f54689d5d16ddfd1751493b161a049d6c98c382/contracts/pools/EthPool.sol#L94) or also when looking at the deployed code of the ETH pool(https://etherscan.io/address/0xb104A7fA1041168556218DDb40Fe2516F88246d5#code). Compare that to e.g. the USDC pool(https://etherscan.io/address/0xca5e07804beef19b6e71b9db18327d215cd58d4e#code), which does not have this parameter.\n\nThis means that the call to withdraw will when the staking token is ETH / WETH and no withdrawals would be possible.\n\n\nA new Staking contract with ETH / WETH as the staking token is deployed. Deposits in Tokemak work fine, so users stake their tokens. However, because of the previously described issue, no withdrawal is possible, leaving the funds locked.\n\n",
                "Repair": "\nHandle the case where the underlying asset is WETH / ETH separately and pass this boolean in that case.\n\ntoshiSat (Yieldy) confirmed and resolved(https://github.com/code-423n4/2022-06-yieldy-findings/issues/87) \n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../interfaces/IStakingV1.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/IYieldy.sol\";\n\ncontract Migration {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    address public immutable OLD_CONTRACT;\n    address public immutable NEW_CONTRACT;\n    address public immutable OLD_YIELDY_TOKEN;\n\n    constructor(address _oldContract, address _newContract) {\n        // addresses can't be 0x0\n        require(\n            _oldContract != address(0) && _newContract != address(0),\n            \"Invalid address\"\n        );\n\n        OLD_CONTRACT = _oldContract;\n        NEW_CONTRACT = _newContract;\n\n        OLD_YIELDY_TOKEN = IStakingV1(_oldContract).REWARD_TOKEN();\n        address stakingToken = IStaking(_newContract).STAKING_TOKEN();\n\n        IYieldy(OLD_YIELDY_TOKEN).approve(_oldContract, type(uint256).max);\n        IERC20Upgradeable(stakingToken).approve(\n            _newContract,\n            type(uint256).max\n        );\n    }\n\n    /**\n        @notice unstake user's FOXy from the old Staking contract and immediately\n        restake into the upgraded one\n        Note: user needs to approve reward token spend before calling this\n     */\n    function moveFundsToUpgradedContract() external {\n        uint256 userWalletBalance = IYieldy(OLD_YIELDY_TOKEN).balanceOf(\n            msg.sender\n        );\n\n        IYieldy(OLD_YIELDY_TOKEN).transferFrom(\n            msg.sender,\n            address(this),\n            userWalletBalance\n        );\n\n        IStaking(OLD_CONTRACT).instantUnstake(false);\n\n        IStaking(NEW_CONTRACT).stake(userWalletBalance, msg.sender);\n    }\n}\n\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/ILiquidityReserve.sol\";\nimport \"./LiquidityReserveStorage.sol\";\n\ncontract LiquidityReserve is\n    LiquidityReserveStorage,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    ILiquidityReserve\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event FeeChanged(uint256 fee);\n\n    // check if sender is the stakingContract\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"Not staking contract\");\n        _;\n    }\n\n    /**\n        @notice initialize by setting stakingContract & setting initial liquidity\n        @param _tokenName name of the lrToken to be created\n        @param _tokenSymbol symbol of the lrToken to be created.\n        @param _stakingToken the staking token in use\n        @param _rewardToken the reward token in use\n     */\n    function initialize(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        address _stakingToken,\n        address _rewardToken\n    ) external initializer {\n        ERC20Upgradeable.__ERC20_init(_tokenName, _tokenSymbol);\n        OwnableUpgradeable.__Ownable_init();\n        require(\n            _stakingToken != address(0) && _rewardToken != address(0),\n            \"Invalid address\"\n        );\n        stakingToken = _stakingToken;\n        rewardToken = _rewardToken;\n    }\n\n    /**\n        @notice callable once after initialized by the owner to set the staking contract and enable\n        our reserve to be used.\n        @param _stakingContract address of the staking contract\n     */\n    function enableLiquidityReserve(address _stakingContract)\n        external\n        onlyOwner\n    {\n        require(!isReserveEnabled, \"Already enabled\");\n        require(_stakingContract != address(0), \"Invalid address\");\n\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            msg.sender\n        );\n        // require address has minimum liquidity\n        require(\n            stakingTokenBalance >= MINIMUM_LIQUIDITY,\n            \"Not enough staking tokens\"\n        );\n        stakingContract = _stakingContract;\n\n        // permanently lock the first MINIMUM_LIQUIDITY of lrTokens\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            MINIMUM_LIQUIDITY\n        );\n        _mint(address(this), MINIMUM_LIQUIDITY);\n        IERC20Upgradeable(rewardToken).approve(\n            stakingContract,\n            type(uint256).max\n        );\n        isReserveEnabled = true;\n    }\n\n    /**\n        @notice sets Fee (in basis points eg. 100 bps = 1%) for instant unstaking\n        @param _fee uint - fee in basis points\n     */\n    function setFee(uint256 _fee) external onlyOwner {\n        // check range before setting fee\n        require(_fee <= BASIS_POINTS, \"Out of range\");\n        fee = _fee;\n\n        emit FeeChanged(_fee);\n    }\n\n    /**\n        @notice addLiquidity for the stakingToken and receive lrToken in exchange\n        @param _amount uint - amount of staking tokens to add\n     */\n    function addLiquidity(uint256 _amount) external {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 lrFoxSupply = totalSupply();\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n\n        uint256 amountToMint = (_amount * lrFoxSupply) / totalLockedValue;\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        _mint(msg.sender, amountToMint);\n    }\n\n    /**\n        @notice calculate current lrToken withdraw value\n        @param _amount uint - amount of tokens that will be withdrawn\n        @return uint - converted amount of staking tokens to withdraw from lr tokens\n     */\n    function _calculateReserveTokenValue(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 lrFoxSupply = totalSupply();\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n        uint256 convertedAmount = (_amount * totalLockedValue) / lrFoxSupply;\n\n        return convertedAmount;\n    }\n\n    /**\n        @notice removeLiquidity by swapping your lrToken for stakingTokens\n        @param _amount uint - amount of tokens to remove from liquidity reserve\n     */\n    function removeLiquidity(uint256 _amount) external {\n        // check balance before removing liquidity\n        require(_amount <= balanceOf(msg.sender), \"Not enough lr tokens\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountToWithdraw = _calculateReserveTokenValue(_amount);\n\n        // verify that we have enough stakingTokens\n        require(\n            IERC20Upgradeable(stakingToken).balanceOf(address(this)) >=\n                amountToWithdraw,\n            \"Not enough funds\"\n        );\n\n        _burn(msg.sender, _amount);\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            msg.sender,\n            amountToWithdraw\n        );\n    }\n\n    /**\n        @notice allow instant unstake their stakingToken for a fee paid to the liquidity providers\n        @param _amount uint - amount of tokens to instantly unstake\n        @param _recipient address - address to send staking tokens to\n     */\n    function instantUnstake(uint256 _amount, address _recipient)\n        external\n        onlyStakingContract\n    {\n        require(isReserveEnabled, \"Not enabled yet\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountMinusFee = _amount - ((_amount * fee) / BASIS_POINTS);\n\n        IERC20Upgradeable(rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            _recipient,\n            amountMinusFee\n        );\n        unstakeAllRewardTokens();\n    }\n\n    /**\n        @notice find balance of reward tokens in contract and unstake them from staking contract\n     */\n    function unstakeAllRewardTokens() public {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        if (coolDownAmount == 0) {\n            uint256 amount = IERC20Upgradeable(rewardToken).balanceOf(\n                address(this)\n            );\n            if (amount > 0) IStaking(stakingContract).unstake(amount, false);\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./LiquidityReserve.sol\";\nimport \"./StakingStorage.sol\";\nimport \"../interfaces/IYieldy.sol\";\nimport \"../interfaces/ITokeManager.sol\";\nimport \"../interfaces/ITokePool.sol\";\nimport \"../interfaces/ITokeReward.sol\";\nimport \"../interfaces/ILiquidityReserve.sol\";\nimport \"../interfaces/ICurvePool.sol\";\nimport \"../interfaces/ICowSettlement.sol\";\n\ncontract Staking is OwnableUpgradeable, StakingStorage {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event LogSetEpochDuration(uint256 indexed blockNumber, uint256 duration);\n    event LogSetWarmUpPeriod(uint256 indexed blockNumber, uint256 period);\n    event LogSetCoolDownPeriod(uint256 indexed blockNumber, uint256 period);\n    event LogSetPauseStaking(uint256 indexed blockNumber, bool shouldPause);\n    event LogSetPauseUnstaking(uint256 indexed blockNumber, bool shouldPause);\n    event LogSetPauseInstantUnstaking(\n        uint256 indexed blockNumber,\n        bool shouldPause\n    );\n    event LogSetAffiliateAddress(\n        uint256 indexed blockNumber,\n        address affilateAddress\n    );\n    event LogSetAffiliateFee(uint256 indexed blockNumber, uint256 fee);\n\n    event LogSetCurvePool(address indexed curvePool, int128 to, int128 from);\n\n    function initialize(\n        address _stakingToken,\n        address _yieldyToken,\n        address _tokeToken,\n        address _tokePool,\n        address _tokeManager,\n        address _tokeReward,\n        address _liquidityReserve,\n        address _feeAddress,\n        address _curvePool,\n        uint256 _epochDuration,\n        uint256 _firstEpochEndTime\n    ) external initializer {\n        OwnableUpgradeable.__Ownable_init();\n\n        // must have valid initial addresses\n        require(\n            _stakingToken != address(0) &&\n                _yieldyToken != address(0) &&\n                _tokeToken != address(0) &&\n                _tokePool != address(0) &&\n                _tokeManager != address(0) &&\n                _tokeReward != address(0) &&\n                _liquidityReserve != address(0),\n            \"Invalid address\"\n        );\n        STAKING_TOKEN = _stakingToken;\n        YIELDY_TOKEN = _yieldyToken;\n        TOKE_TOKEN = _tokeToken;\n        TOKE_POOL = _tokePool;\n        TOKE_MANAGER = _tokeManager;\n        TOKE_REWARD = _tokeReward;\n        LIQUIDITY_RESERVE = _liquidityReserve;\n        FEE_ADDRESS = _feeAddress;\n        CURVE_POOL = _curvePool;\n        COW_SETTLEMENT = 0x9008D19f58AAbD9eD0D60971565AA8510560ab41;\n        COW_RELAYER = 0xC92E8bdf79f0507f65a392b0ab4667716BFE0110;\n\n        timeLeftToRequestWithdrawal = 12 hours;\n\n        if (CURVE_POOL != address(0)) {\n            IERC20(TOKE_POOL).approve(CURVE_POOL, type(uint256).max);\n            setToAndFromCurve();\n        }\n\n        IERC20(STAKING_TOKEN).approve(TOKE_POOL, type(uint256).max);\n        IERC20Upgradeable(YIELDY_TOKEN).approve(\n            LIQUIDITY_RESERVE,\n            type(uint256).max\n        );\n        IERC20Upgradeable(YIELDY_TOKEN).approve(\n            LIQUIDITY_RESERVE,\n            type(uint256).max\n        );\n        IERC20Upgradeable(TOKE_TOKEN).approve(COW_RELAYER, type(uint256).max);\n\n        epoch = Epoch({\n            duration: _epochDuration,\n            number: 1,\n            timestamp: block.timestamp, // we know about the issues surrounding block.timestamp, using it here will not cause any problems\n            endTime: _firstEpochEndTime,\n            distribute: 0\n        });\n    }\n\n    /**\n        @notice claim TOKE rewards from Tokemak\n        @dev must get amount through toke reward contract using latest cycle from reward hash contract\n        @param _recipient Recipient struct that contains chainId, cycle, address, and amount \n        @param _v uint - recovery id\n        @param _r bytes - output of ECDSA signature\n        @param _s bytes - output of ECDSA signature\n     */\n    function claimFromTokemak(\n        Recipient calldata _recipient,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        // cannot claim 0\n        require(_recipient.amount > 0, \"Must enter valid amount\");\n\n        ITokeReward tokeRewardContract = ITokeReward(TOKE_REWARD);\n        tokeRewardContract.claim(_recipient, _v, _r, _s);\n        _sendAffiliateFee(_recipient.amount);\n    }\n\n    /**\n        @notice send affiliate fee\n        @param _amount uint - total amount to deduct fee from\n     */\n    function _sendAffiliateFee(uint256 _amount) internal {\n        if (affiliateFee != 0 && FEE_ADDRESS != address(0)) {\n            uint256 feeAmount = (_amount * affiliateFee) / BASIS_POINTS;\n            IERC20Upgradeable(TOKE_TOKEN).safeTransfer(FEE_ADDRESS, feeAmount);\n        }\n    }\n\n    /**\n        @notice transfer TOKE from staking contract to address\n        @dev used so DAO can get TOKE and manually trade to return FOX to the staking contract\n        @param _claimAddress address to send TOKE rewards\n     */\n    function transferToke(address _claimAddress) external onlyOwner {\n        // _claimAddress can't be 0x0\n        require(_claimAddress != address(0), \"Invalid address\");\n        uint256 totalTokeAmount = IERC20Upgradeable(TOKE_TOKEN).balanceOf(\n            address(this)\n        );\n        IERC20Upgradeable(TOKE_TOKEN).safeTransfer(\n            _claimAddress,\n            totalTokeAmount\n        );\n    }\n\n    /**\n        @notice sets the curve pool address\n        @param _curvePool uint\n     */\n    function setCurvePool(address _curvePool) external onlyOwner {\n        CURVE_POOL = _curvePool;\n        setToAndFromCurve();\n    }\n\n    /**\n        @notice sets the affiliate fee\n        @dev fee is set in basis points\n        @param _affiliateFee uint\n     */\n    function setAffiliateFee(uint256 _affiliateFee) external onlyOwner {\n        affiliateFee = _affiliateFee;\n        emit LogSetAffiliateFee(block.number, _affiliateFee);\n    }\n\n    /**\n        @notice sets the affiliate address to receive the affiliate fee in TOKE\n        @dev if set to 0x000.. then no affiliate will be sent\n        @param _affiliateAddress address\n     */\n    function setAffiliateAddress(address _affiliateAddress) external onlyOwner {\n        FEE_ADDRESS = _affiliateAddress;\n        emit LogSetAffiliateAddress(block.number, _affiliateAddress);\n    }\n\n    /**\n        @notice override whether or not staking is paused\n        @dev used to pause staking in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseStaking(bool _shouldPause) public onlyOwner {\n        isStakingPaused = _shouldPause;\n        emit LogSetPauseStaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice override whether or not unstake & instantUnstake is paused\n        @dev used to pause unstake & instantUnstake in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseUnstaking(bool _shouldPause) external onlyOwner {\n        isUnstakingPaused = _shouldPause;\n        emit LogSetPauseUnstaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice override whether or not instantUnstake is paused\n        @dev used to pause instantUnstake in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseInstantUnstaking(bool _shouldPause) external onlyOwner {\n        isInstantUnstakingPaused = _shouldPause;\n        emit LogSetPauseInstantUnstaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice set epoch duration\n        @dev epoch's determine how long until a rebase can occur\n        @param duration uint\n     */\n    function setEpochDuration(uint256 duration) external onlyOwner {\n        epoch.duration = duration;\n        emit LogSetEpochDuration(block.number, duration);\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _vestingPeriod uint\n     */\n    function setWarmUpPeriod(uint256 _vestingPeriod) external onlyOwner {\n        warmUpPeriod = _vestingPeriod;\n        emit LogSetWarmUpPeriod(block.number, _vestingPeriod);\n    }\n\n    /**\n     * @notice set cooldown period for stakers\n     * @param _vestingPeriod uint\n     */\n    function setCoolDownPeriod(uint256 _vestingPeriod) external onlyOwner {\n        coolDownPeriod = _vestingPeriod;\n        emit LogSetCoolDownPeriod(block.number, _vestingPeriod);\n    }\n\n    /**\n        @notice sets the time before Tokemak cycle ends to requestWithdrawals\n        @dev requestWithdrawals is called once per cycle.\n        @dev this allows us to change how much time before the end of the cycle we send the withdraw requests\n        @param _timestamp uint - time before end of cycle\n     */\n    function setTimeLeftToRequestWithdrawal(uint256 _timestamp)\n        external\n        onlyOwner\n    {\n        timeLeftToRequestWithdrawal = _timestamp;\n    }\n\n    /**\n        @notice returns true if claim is available\n        @dev this shows whether or not our epoch's have passed\n        @param _recipient address - warmup address to check if claim is available\n        @return bool - true if available to claim\n     */\n    function _isClaimAvailable(address _recipient)\n        internal\n        view\n        returns (bool)\n    {\n        Claim memory info = warmUpInfo[_recipient];\n        return epoch.number >= info.expiry && info.expiry != 0;\n    }\n\n    /**\n        @notice returns true if claimWithdraw is available\n        @dev this shows whether or not our epoch's have passed as well as if the cycle has increased\n        @param _recipient address - address that's checking for available claimWithdraw\n        @return bool - true if available to claimWithdraw\n     */\n    function _isClaimWithdrawAvailable(address _recipient)\n        internal\n        returns (bool)\n    {\n        Claim memory info = coolDownInfo[_recipient];\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\n            .requestedWithdrawals(address(this));\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n        return\n            epoch.number >= info.expiry &&\n            info.expiry != 0 &&\n            info.amount != 0 &&\n            ((requestedWithdrawals.minCycle <= currentCycleIndex &&\n                requestedWithdrawals.amount + withdrawalAmount >=\n                info.amount) || withdrawalAmount >= info.amount);\n    }\n\n    /**\n        @notice withdraw stakingTokens from Tokemak\n        @dev needs a valid requestWithdrawal inside Tokemak with a completed cycle rollover to withdraw\n     */\n    function _withdrawFromTokemak() internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\n            .requestedWithdrawals(address(this));\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n\n        if (\n            requestedWithdrawals.amount > 0 &&\n            requestedWithdrawals.minCycle <= currentCycleIndex\n        ) {\n            tokePoolContract.withdraw(requestedWithdrawals.amount);\n            requestWithdrawalAmount -= requestedWithdrawals.amount;\n            withdrawalAmount += requestedWithdrawals.amount;\n        }\n    }\n\n    /**\n        @notice creates a withdrawRequest with Tokemak\n        @dev requestedWithdraws take 1 tokemak cycle to be available for withdraw\n        @param _amount uint - amount to request withdraw\n     */\n    function _requestWithdrawalFromTokemak(uint256 _amount) internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        uint256 balance = ITokePool(TOKE_POOL).balanceOf(address(this));\n\n        // the only way balance < _amount is when using unstakeAllFromTokemak\n        uint256 amountToRequest = balance < _amount ? balance : _amount;\n\n        if (amountToRequest > 0) tokePoolContract.requestWithdrawal(_amount);\n    }\n\n    /**\n        @notice deposit stakingToken to tStakingToken Tokemak reactor\n        @param _amount uint - amount to deposit\n     */\n    function _depositToTokemak(uint256 _amount) internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        tokePoolContract.deposit(_amount);\n    }\n\n    /**\n        @notice gets balance of stakingToken that's locked into the TOKE stakingToken pool\n        @return uint - amount of stakingToken in TOKE pool\n     */\n    function _getTokemakBalance() internal view returns (uint256) {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        return tokePoolContract.balanceOf(address(this));\n    }\n\n    /**\n        @notice checks TOKE's cycleTime is within duration to batch the transactions\n        @dev this function returns true if we are within timeLeftToRequestWithdrawal of the end of the TOKE cycle\n        @dev as well as if the current cycle index is more than the last cycle index\n        @return bool - returns true if can batch transactions\n     */\n    function canBatchTransactions() public view returns (bool) {\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        uint256 duration = tokeManager.getCycleDuration();\n        uint256 currentCycleStart = tokeManager.getCurrentCycle();\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n        uint256 nextCycleStart = currentCycleStart + duration;\n\n        return\n            block.timestamp + timeLeftToRequestWithdrawal >= nextCycleStart &&\n            currentCycleIndex > lastTokeCycleIndex &&\n            requestWithdrawalAmount > 0;\n    }\n\n    /**\n        @notice owner function to requestWithdraw all FOX from tokemak in case of an attack on tokemak\n        @dev this bypasses the normal flow of sending a withdrawal request and allows the owner to requestWithdraw entire pool balance\n     */\n    function unstakeAllFromTokemak() public onlyOwner {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        uint256 tokePoolBalance = ITokePool(tokePoolContract).balanceOf(\n            address(this)\n        );\n        // pause any future staking\n        shouldPauseStaking(true);\n        requestWithdrawalAmount = tokePoolBalance;\n        _requestWithdrawalFromTokemak(tokePoolBalance);\n    }\n\n    /**\n        @notice sends batched requestedWithdrawals due to TOKE's requestWithdrawal overwriting the amount if you call it more than once per cycle\n     */\n    function sendWithdrawalRequests() public {\n        // check to see if near the end of a TOKE cycle\n        if (canBatchTransactions()) {\n            // if has withdrawal amount to be claimed then claim\n            _withdrawFromTokemak();\n\n            // if more requestWithdrawalAmount exists after _withdrawFromTokemak then request the new amount\n            ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n            if (requestWithdrawalAmount > 0) {\n                _requestWithdrawalFromTokemak(requestWithdrawalAmount);\n            }\n\n            uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n            lastTokeCycleIndex = currentCycleIndex;\n        }\n    }\n\n    /**\n        @notice stake staking tokens to receive Yieldy tokens\n        @param _amount uint\n        @param _recipient address\n     */\n    function stake(uint256 _amount, address _recipient) public {\n        // if override staking, then don't allow stake\n        require(!isStakingPaused, \"Staking is paused\");\n        // amount must be non zero\n        require(_amount > 0, \"Must have valid amount\");\n\n        uint256 yieldyTotalSupply = IYieldy(YIELDY_TOKEN).totalSupply();\n\n        // Don't rebase unless tokens are already staked or could get locked out of staking\n        if (yieldyTotalSupply > 0) {\n            rebase();\n        }\n\n        IERC20Upgradeable(STAKING_TOKEN).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        Claim storage info = warmUpInfo[_recipient];\n\n        // if claim is available then auto claim tokens\n        if (_isClaimAvailable(_recipient)) {\n            claim(_recipient);\n        }\n\n        _depositToTokemak(_amount);\n\n        // skip adding to warmup contract if period is 0\n        if (warmUpPeriod == 0) {\n            IYieldy(YIELDY_TOKEN).mint(_recipient, _amount);\n        } else {\n            // create a claim and mint tokens so a user can claim them once warm up has passed\n            warmUpInfo[_recipient] = Claim({\n                amount: info.amount + _amount,\n                credits: info.credits +\n                    IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n                expiry: epoch.number + warmUpPeriod\n            });\n\n            IYieldy(YIELDY_TOKEN).mint(address(this), _amount);\n        }\n\n        sendWithdrawalRequests();\n    }\n\n    /**\n        @notice call stake with msg.sender\n        @param _amount uint\n     */\n    function stake(uint256 _amount) external {\n        stake(_amount, msg.sender);\n    }\n\n    /**\n        @notice retrieve reward tokens from warmup\n        @dev if user has funds in warmup then user is able to claim them (including rewards)\n        @param _recipient address\n     */\n    function claim(address _recipient) public {\n        Claim memory info = warmUpInfo[_recipient];\n        if (_isClaimAvailable(_recipient)) {\n            delete warmUpInfo[_recipient];\n\n            if (info.credits > 0) {\n                IYieldy(YIELDY_TOKEN).transfer(\n                    _recipient,\n                    IYieldy(YIELDY_TOKEN).tokenBalanceForCredits(info.credits)\n                );\n            }\n        }\n    }\n\n    /**\n        @notice claims staking tokens after cooldown period\n        @dev if user has a cooldown claim that's past expiry then withdraw staking tokens from tokemak\n        @dev and send them to user\n        @param _recipient address - users unstaking address\n     */\n    function claimWithdraw(address _recipient) public {\n        Claim memory info = coolDownInfo[_recipient];\n        uint256 totalAmountIncludingRewards = IYieldy(YIELDY_TOKEN)\n            .tokenBalanceForCredits(info.credits);\n        if (_isClaimWithdrawAvailable(_recipient)) {\n            // if has withdrawalAmount to be claimed, then claim\n            _withdrawFromTokemak();\n            delete coolDownInfo[_recipient];\n\n            withdrawalAmount -= info.amount;\n\n            // only give amount from when they requested withdrawal since this amount wasn't used in generating rewards\n            // this will later be given to users through addRewardsForStakers\n            IERC20Upgradeable(STAKING_TOKEN).safeTransfer(\n                _recipient,\n                info.amount\n            );\n\n            IYieldy(YIELDY_TOKEN).burn(\n                address(this),\n                totalAmountIncludingRewards\n            );\n        }\n    }\n\n    /**\n        @notice gets reward tokens either from the warmup pool or user's wallet or both\n        @dev when transferring reward tokens the user could have their balance still in the warmup pool\n        @dev this function abstracts the logic to find the correct amount of tokens to use them\n        @param _amount uint\n        @param _user address to pull funds from \n     */\n    function _retrieveBalanceFromUser(uint256 _amount, address _user) internal {\n        Claim memory userWarmInfo = warmUpInfo[_user];\n        uint256 walletBalance = IERC20Upgradeable(YIELDY_TOKEN).balanceOf(\n            _user\n        );\n        uint256 warmUpBalance = IYieldy(YIELDY_TOKEN).tokenBalanceForCredits(\n            userWarmInfo.credits\n        );\n\n        // must have enough funds between wallet and warmup\n        require(\n            _amount <= walletBalance + warmUpBalance,\n            \"Insufficient Balance\"\n        );\n\n        uint256 amountLeft = _amount;\n        if (warmUpBalance > 0) {\n            // remove from warmup first.\n            if (_amount >= warmUpBalance) {\n                // use the entire warmup balance\n                unchecked {\n                    amountLeft -= warmUpBalance;\n                }\n                delete warmUpInfo[_user];\n            } else {\n                // partially consume warmup balance\n                amountLeft = 0;\n                uint256 remainingCreditsAmount = userWarmInfo.credits -\n                    IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount);\n                uint256 remainingAmount = IYieldy(YIELDY_TOKEN)\n                    .tokenBalanceForCredits(remainingCreditsAmount);\n\n                warmUpInfo[_user] = Claim({\n                    amount: remainingAmount,\n                    credits: remainingCreditsAmount,\n                    expiry: userWarmInfo.expiry\n                });\n            }\n        }\n\n        if (amountLeft != 0) {\n            // transfer the rest from the users address\n            IERC20Upgradeable(YIELDY_TOKEN).safeTransferFrom(\n                _user,\n                address(this),\n                amountLeft\n            );\n        }\n    }\n\n    /**\n        @notice instant unstakes from liquidity reserve\n        @param _amount uint - amount to instant unstake\n     */\n    function instantUnstakeReserve(uint256 _amount) external {\n        require(_amount > 0, \"Invalid amount\");\n        // prevent unstaking if override due to vulnerabilities\n        require(\n            !isUnstakingPaused && !isInstantUnstakingPaused,\n            \"Unstaking is paused\"\n        );\n\n        rebase();\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        uint256 reserveBalance = IERC20Upgradeable(STAKING_TOKEN).balanceOf(\n            LIQUIDITY_RESERVE\n        );\n\n        require(reserveBalance >= _amount, \"Not enough funds in reserve\");\n\n        ILiquidityReserve(LIQUIDITY_RESERVE).instantUnstake(\n            _amount,\n            msg.sender\n        );\n    }\n\n    /**\n        @notice instant unstake from curve\n        @param _amount uint - amount to instant unstake\n        @param _minAmount uint - minimum amount with slippage to instant unstake\n        @return uint - amount received\n     */\n    function instantUnstakeCurve(uint256 _amount, uint256 _minAmount)\n        external\n        returns (uint256)\n    {\n        require(_amount > 0, \"Invalid amount\");\n        require(\n            CURVE_POOL != address(0) &&\n                (curvePoolFrom == 1 || curvePoolTo == 1),\n            \"Invalid Curve Pool\"\n        );\n        // prevent unstaking if override due to vulnerabilities\n        require(\n            !isUnstakingPaused && !isInstantUnstakingPaused,\n            \"Unstaking is paused\"\n        );\n\n        rebase();\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        return\n            ICurvePool(CURVE_POOL).exchange(\n                curvePoolFrom,\n                curvePoolTo,\n                _amount,\n                _minAmount,\n                msg.sender\n            );\n    }\n\n    /**\n        @notice sets to and from coin indexes for curve exchange\n     */\n    function setToAndFromCurve() internal {\n        if (CURVE_POOL != address(0)) {\n            address address0 = ICurvePool(CURVE_POOL).coins(0);\n            address address1 = ICurvePool(CURVE_POOL).coins(1);\n            int128 from = 0;\n            int128 to = 0;\n\n            if (TOKE_POOL == address0 && STAKING_TOKEN == address1) {\n                to = 1;\n            } else if (TOKE_POOL == address1 && STAKING_TOKEN == address0) {\n                from = 1;\n            }\n            require(from == 1 || to == 1, \"Invalid Curve Pool\");\n\n            curvePoolFrom = from;\n            curvePoolTo = to;\n\n            emit LogSetCurvePool(CURVE_POOL, curvePoolTo, curvePoolFrom);\n        }\n    }\n\n    /**\n        @notice estimate received using instant unstake from curve\n        @param _amount uint - amount to instant unstake\n        @return uint - estimated amount received\n     */\n    function estimateInstantCurve(uint256 _amount)\n        external\n        view\n        returns (uint256)\n    {\n        return\n            ICurvePool(CURVE_POOL).get_dy(curvePoolFrom, curvePoolTo, _amount);\n    }\n\n    /**\n        @notice redeem Yieldy tokens for staking tokens with a vesting period based on coolDownPeriod\n        @dev this function will retrieve the _amount of Yieldy tokens from the user and transfer them to the cooldown contract.\n        @dev once the period has expired the user will be able to withdraw their staking tokens\n        @param _amount uint - amount of tokens to unstake\n        @param _trigger bool - should trigger a rebase\n     */\n    function unstake(uint256 _amount, bool _trigger) external {\n        // prevent unstaking if override due to vulnerabilities asdf\n        require(!isUnstakingPaused, \"Unstaking is paused\");\n        if (_trigger) {\n            rebase();\n        }\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        Claim storage userCoolInfo = coolDownInfo[msg.sender];\n\n        // try to claim withdraw if user has withdraws to claim function will check if withdraw is valid\n        claimWithdraw(msg.sender);\n\n        coolDownInfo[msg.sender] = Claim({\n            amount: userCoolInfo.amount + _amount,\n            credits: userCoolInfo.credits +\n                IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n            expiry: epoch.number + coolDownPeriod\n        });\n\n        requestWithdrawalAmount += _amount;\n        sendWithdrawalRequests();\n    }\n\n    /**\n        @notice trigger rebase if epoch has ended\n     */\n    function rebase() public {\n        // we know about the issues surrounding block.timestamp, using it here will not cause any problems\n        if (epoch.endTime <= block.timestamp) {\n            IYieldy(YIELDY_TOKEN).rebase(epoch.distribute, epoch.number);\n\n            epoch.endTime = epoch.endTime + epoch.duration;\n            epoch.timestamp = block.timestamp;\n            epoch.number++;\n\n            uint256 balance = contractBalance();\n            uint256 staked = IYieldy(YIELDY_TOKEN).totalSupply();\n\n            if (balance <= staked) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance - staked;\n            }\n        }\n    }\n\n    /**\n        @notice returns contract staking tokens holdings \n        @dev gets amount of staking tokens that are a part of this system to calculate rewards\n        @dev the staking tokens will be included in this contract plus inside tokemak\n        @return uint - amount of staking tokens\n     */\n    function contractBalance() internal view returns (uint256) {\n        uint256 tokeBalance = _getTokemakBalance();\n        return\n            IERC20Upgradeable(STAKING_TOKEN).balanceOf(address(this)) +\n            tokeBalance;\n    }\n\n    /**\n     * @notice adds staking tokens for rebase rewards\n     * @dev this is the function that gives rewards so the rebase function can distribute profits to reward token holders\n     * @param _amount uint - amount of tokens to add to rewards\n     * @param _shouldTransfer bool - should transfer tokens before adding rewards\n     * @param _trigger bool - should trigger rebase\n     */\n    function addRewardsForStakers(\n        uint256 _amount,\n        bool _shouldTransfer,\n        bool _trigger\n    ) external {\n        if (_shouldTransfer) {\n            IERC20Upgradeable(STAKING_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _amount\n            );\n        }\n\n        // deposit all staking tokens held in contract to Tokemak minus tokens waiting for claimWithdraw\n        uint256 stakingTokenBalance = IERC20Upgradeable(STAKING_TOKEN)\n            .balanceOf(address(this));\n        uint256 amountToDeposit = stakingTokenBalance - withdrawalAmount;\n        _depositToTokemak(amountToDeposit);\n\n        if (_trigger) {\n            rebase();\n        }\n    }\n\n    /**\n     * @notice trades rewards generated from claimFromTokemak for staking token\n     * @dev this is function is called from claimFromTokemak if the autoRebase bool is set to true\n     */\n    function preSign(bytes calldata orderUid) external onlyOwner {\n        ICowSettlement(COW_SETTLEMENT).setPreSignature(orderUid, true);\n    }\n}\n\n\n",
        "CodeNames": [
            "Migration.sol",
            "LiquidityReserve.sol",
            "Staking.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "//solidity\nif (warmUpPeriod == 0) {\n    IYieldy(YIELDY_TOKEN).mint(_recipient, _amount);\n} else {\n    // create a claim and mint tokens so a user can claim them once warm up has passed\n    warmUpInfo[_recipient] = Claim({\n        amount: info.amount + _amount,\n        credits: info.credits +\n            IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n        expiry: epoch.number + warmUpPeriod\n    });\n\n    IYieldy(YIELDY_TOKEN).mint(address(this), _amount);\n}\n"
                ],
                "Type": "  Staking.sol#stake()  DoS by staking 1 wei for the recipient when  warmUpPeriod > 0 ",
                "Description": "\nsolidity\nif (warmUpPeriod == 0) {\n    IYieldy(YIELDY_TOKEN).mint(_recipient, _amount);\n} else {\n    // create a claim and mint tokens so a user can claim them once warm up has passed\n    warmUpInfo[_recipient] = Claim({\n        amount: info.amount + _amount,\n        credits: info.credits +\n            IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n        expiry: epoch.number + warmUpPeriod\n    });\n\n    IYieldy(YIELDY_TOKEN).mint(address(this), _amount);\n}\n\n\nStaking.sol#stake() is a public function and you can specify an arbitrary address as the _recipient.\n\nWhen warmUpPeriod  0, with as little as 1 wei of YIELDY_TOKEN, the _recipient's warmUpInfo will be push back til epoch.number + warmUpPeriod.\n\n",
                "Repair": "\nConsider changing to not allow deposit to another address when warmUpPeriod  0.\n\nDravee (warden) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/187#issuecomment-1167621029):\n  Should be high right? Funds are locked.\n See https://github.com/code-423n4/2022-06-yieldy-findings/issues/245#issuecomment-1167616593\n\nmoose-code (judge) increased severity to High and commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/187#issuecomment-1198122754):\n Agree this should be high. The cost of the attack is negligible and could cause basic perpetual grievance on all users with one simple script. \n\ntoshiSat (Yieldy) confirmed(https://github.com/code-423n4/2022-06-yieldy-findings/issues/187)\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"../interfaces/IStaking.sol\";\nimport \"../structs/Batch.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract BatchRequests is Ownable {\n    address[] public contracts;\n\n    /**\n        @notice sendWithdrawalRequests on all addresses in contracts\n     */\n    function sendWithdrawalRequests() external {\n        uint256 contractsLength = contracts.length;\n        for (uint256 i; i < contractsLength; ) {\n            if (\n                contracts[i] != address(0) &&\n                IStaking(contracts[i]).canBatchTransactions()\n            ) {\n                IStaking(contracts[i]).sendWithdrawalRequests();\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n        @notice shows which contracts can batch\n        @return (address, bool)[]\n     */\n    function canBatchContracts() external view returns (Batch[] memory) {\n        uint256 contractsLength = contracts.length;\n        Batch[] memory batch = new Batch[](contractsLength);\n        for (uint256 i; i < contractsLength; ) {\n            bool canBatch = IStaking(contracts[i]).canBatchTransactions();\n            batch[i] = Batch(contracts[i], canBatch);\n            unchecked {\n                ++i;\n            }\n        }\n        return batch;\n    }\n\n    /**\n        @notice shows if contracts can batch by index\n        @return (address, bool)\n     */\n    function canBatchContractByIndex(uint256 _index)\n        external\n        view\n        returns (address, bool)\n    {\n        return (\n            contracts[_index],\n            IStaking(contracts[_index]).canBatchTransactions()\n        );\n    }\n\n    /**\n        @notice get address in contracts by index\n        @return address\n     */\n    function getAddressByIndex(uint256 _index) external view returns (address) {\n        return contracts[_index];\n    }\n\n    /**\n        @notice get addresses in contracts\n        @return address[]\n     */\n    function getAddresses() external view returns (address[] memory) {\n        return contracts;\n    }\n\n    /**\n        @notice add address to contracts array\n        @param _address - address to add\n     */\n    function addAddress(address _address) external onlyOwner {\n        contracts.push(_address);\n    }\n\n    /**\n        @notice remove address to contracts array\n        @param _address - address to remove\n     */\n    function removeAddress(address _address) external onlyOwner {\n        uint256 contractsLength = contracts.length;\n        for (uint256 i; i < contractsLength; ) {\n            if (contracts[i] == _address) {\n                delete contracts[i];\n            }\n            unchecked {\n                ++i;\n            }\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "BatchRequests.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-03",
                "Location": [
                    "delete",
                    "canBatchContracts",
                    "addAddress('",
                    "removeAddress",
                    "getAddresses()",
                    "address(",
                    "removeAddress("
                ],
                "Type": " Denial of Service by wrong  BatchRequests.removeAddress  logic",
                "Description": "\nNote: issues #[283(https://github.com/code-423n4/2022-06-yieldy-findings/issues/283), 115(https://github.com/code-423n4/2022-06-yieldy-findings/issues/115), 82(https://github.com/code-423n4/2022-06-yieldy-findings/issues/82), 89(https://github.com/code-423n4/2022-06-yieldy-findings/issues/89), 61(https://github.com/code-423n4/2022-06-yieldy-findings/issues/61), and 241(https://github.com/code-423n4/2022-06-yieldy-findings/issues/241) were originally broken out as a separate medium issue. Approximately 1 week after judging and awarding were finalized, the judging team re-assessed that these should have all been grouped under H-03. Accordingly, the 6 warden names have been added as submitters above.\n\n<https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L93\n\n<https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L57\n\n<https://github.com/code-423n4/2022-06-yieldy/blob/34774d3f5e9275978621fd20af4fe466d195a88b/src/contracts/BatchRequests.sol#L37\n\n\nThe BatchRequests.removeAddress logic is wrong and it will produce a denial of service.\n\n\nRemoving the element from the array is done using the delete statement, but this is not the proper way to remove an entry from an array, it will just set that position to address(0).\n\nAppend dummy data:\n\n*   addAddress('0x0000000000000000000000000000000000000001')\n*   addAddress('0x0000000000000000000000000000000000000002')\n*   addAddress('0x0000000000000000000000000000000000000003')\n*   getAddresses() = address[]: 0x0000000000000000000000000000000000000001,0x0000000000000000000000000000000000000002,0x0000000000000000000000000000000000000003\n\nRemove address:\n\n*   removeAddress(0x0000000000000000000000000000000000000002) (or 0x0000000000000000000000000000000000000003)\n*   getAddresses() = address[]: 0x0000000000000000000000000000000000000001,0x0000000000000000000000000000000000000000,0x0000000000000000000000000000000000000003\n\nService is denied because it will try to call canBatchContracts  to address(0).\n\n",
                "Repair": "\n*   To remove an entry in an array you have to use pop and move the last element to the removed entry position.\n\n0xean (Yieldy) confirmed and resolved(https://github.com/code-423n4/2022-06-yieldy-findings/issues/38) \n\nJasoonS (judge) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/38#issuecomment-1199272074):\n  Agree this is high, if the team (owner) didn't know this they could cause some issues for sure.\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/ILiquidityReserve.sol\";\nimport \"./LiquidityReserveStorage.sol\";\n\ncontract LiquidityReserve is\n    LiquidityReserveStorage,\n    ERC20Upgradeable,\n    OwnableUpgradeable,\n    ILiquidityReserve\n{\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event FeeChanged(uint256 fee);\n\n    // check if sender is the stakingContract\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"Not staking contract\");\n        _;\n    }\n\n    /**\n        @notice initialize by setting stakingContract & setting initial liquidity\n        @param _tokenName name of the lrToken to be created\n        @param _tokenSymbol symbol of the lrToken to be created.\n        @param _stakingToken the staking token in use\n        @param _rewardToken the reward token in use\n     */\n    function initialize(\n        string memory _tokenName,\n        string memory _tokenSymbol,\n        address _stakingToken,\n        address _rewardToken\n    ) external initializer {\n        ERC20Upgradeable.__ERC20_init(_tokenName, _tokenSymbol);\n        OwnableUpgradeable.__Ownable_init();\n        require(\n            _stakingToken != address(0) && _rewardToken != address(0),\n            \"Invalid address\"\n        );\n        stakingToken = _stakingToken;\n        rewardToken = _rewardToken;\n    }\n\n    /**\n        @notice callable once after initialized by the owner to set the staking contract and enable\n        our reserve to be used.\n        @param _stakingContract address of the staking contract\n     */\n    function enableLiquidityReserve(address _stakingContract)\n        external\n        onlyOwner\n    {\n        require(!isReserveEnabled, \"Already enabled\");\n        require(_stakingContract != address(0), \"Invalid address\");\n\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            msg.sender\n        );\n        // require address has minimum liquidity\n        require(\n            stakingTokenBalance >= MINIMUM_LIQUIDITY,\n            \"Not enough staking tokens\"\n        );\n        stakingContract = _stakingContract;\n\n        // permanently lock the first MINIMUM_LIQUIDITY of lrTokens\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            MINIMUM_LIQUIDITY\n        );\n        _mint(address(this), MINIMUM_LIQUIDITY);\n        IERC20Upgradeable(rewardToken).approve(\n            stakingContract,\n            type(uint256).max\n        );\n        isReserveEnabled = true;\n    }\n\n    /**\n        @notice sets Fee (in basis points eg. 100 bps = 1%) for instant unstaking\n        @param _fee uint - fee in basis points\n     */\n    function setFee(uint256 _fee) external onlyOwner {\n        // check range before setting fee\n        require(_fee <= BASIS_POINTS, \"Out of range\");\n        fee = _fee;\n\n        emit FeeChanged(_fee);\n    }\n\n    /**\n        @notice addLiquidity for the stakingToken and receive lrToken in exchange\n        @param _amount uint - amount of staking tokens to add\n     */\n    function addLiquidity(uint256 _amount) external {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 lrFoxSupply = totalSupply();\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n\n        uint256 amountToMint = (_amount * lrFoxSupply) / totalLockedValue;\n        IERC20Upgradeable(stakingToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n        _mint(msg.sender, amountToMint);\n    }\n\n    /**\n        @notice calculate current lrToken withdraw value\n        @param _amount uint - amount of tokens that will be withdrawn\n        @return uint - converted amount of staking tokens to withdraw from lr tokens\n     */\n    function _calculateReserveTokenValue(uint256 _amount)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 lrFoxSupply = totalSupply();\n        uint256 stakingTokenBalance = IERC20Upgradeable(stakingToken).balanceOf(\n            address(this)\n        );\n        uint256 rewardTokenBalance = IERC20Upgradeable(rewardToken).balanceOf(\n            address(this)\n        );\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        uint256 totalLockedValue = stakingTokenBalance +\n            rewardTokenBalance +\n            coolDownAmount;\n        uint256 convertedAmount = (_amount * totalLockedValue) / lrFoxSupply;\n\n        return convertedAmount;\n    }\n\n    /**\n        @notice removeLiquidity by swapping your lrToken for stakingTokens\n        @param _amount uint - amount of tokens to remove from liquidity reserve\n     */\n    function removeLiquidity(uint256 _amount) external {\n        // check balance before removing liquidity\n        require(_amount <= balanceOf(msg.sender), \"Not enough lr tokens\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountToWithdraw = _calculateReserveTokenValue(_amount);\n\n        // verify that we have enough stakingTokens\n        require(\n            IERC20Upgradeable(stakingToken).balanceOf(address(this)) >=\n                amountToWithdraw,\n            \"Not enough funds\"\n        );\n\n        _burn(msg.sender, _amount);\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            msg.sender,\n            amountToWithdraw\n        );\n    }\n\n    /**\n        @notice allow instant unstake their stakingToken for a fee paid to the liquidity providers\n        @param _amount uint - amount of tokens to instantly unstake\n        @param _recipient address - address to send staking tokens to\n     */\n    function instantUnstake(uint256 _amount, address _recipient)\n        external\n        onlyStakingContract\n    {\n        require(isReserveEnabled, \"Not enabled yet\");\n        // claim the stakingToken from previous unstakes\n        IStaking(stakingContract).claimWithdraw(address(this));\n\n        uint256 amountMinusFee = _amount - ((_amount * fee) / BASIS_POINTS);\n\n        IERC20Upgradeable(rewardToken).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        IERC20Upgradeable(stakingToken).safeTransfer(\n            _recipient,\n            amountMinusFee\n        );\n        unstakeAllRewardTokens();\n    }\n\n    /**\n        @notice find balance of reward tokens in contract and unstake them from staking contract\n     */\n    function unstakeAllRewardTokens() public {\n        require(isReserveEnabled, \"Not enabled yet\");\n        uint256 coolDownAmount = IStaking(stakingContract)\n            .coolDownInfo(address(this))\n            .amount;\n        if (coolDownAmount == 0) {\n            uint256 amount = IERC20Upgradeable(rewardToken).balanceOf(\n                address(this)\n            );\n            if (amount > 0) IStaking(stakingContract).unstake(amount, false);\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity 0.8.9;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\nimport \"./LiquidityReserve.sol\";\nimport \"./StakingStorage.sol\";\nimport \"../interfaces/IYieldy.sol\";\nimport \"../interfaces/ITokeManager.sol\";\nimport \"../interfaces/ITokePool.sol\";\nimport \"../interfaces/ITokeReward.sol\";\nimport \"../interfaces/ILiquidityReserve.sol\";\nimport \"../interfaces/ICurvePool.sol\";\nimport \"../interfaces/ICowSettlement.sol\";\n\ncontract Staking is OwnableUpgradeable, StakingStorage {\n    using SafeERC20Upgradeable for IERC20Upgradeable;\n\n    event LogSetEpochDuration(uint256 indexed blockNumber, uint256 duration);\n    event LogSetWarmUpPeriod(uint256 indexed blockNumber, uint256 period);\n    event LogSetCoolDownPeriod(uint256 indexed blockNumber, uint256 period);\n    event LogSetPauseStaking(uint256 indexed blockNumber, bool shouldPause);\n    event LogSetPauseUnstaking(uint256 indexed blockNumber, bool shouldPause);\n    event LogSetPauseInstantUnstaking(\n        uint256 indexed blockNumber,\n        bool shouldPause\n    );\n    event LogSetAffiliateAddress(\n        uint256 indexed blockNumber,\n        address affilateAddress\n    );\n    event LogSetAffiliateFee(uint256 indexed blockNumber, uint256 fee);\n\n    event LogSetCurvePool(address indexed curvePool, int128 to, int128 from);\n\n    function initialize(\n        address _stakingToken,\n        address _yieldyToken,\n        address _tokeToken,\n        address _tokePool,\n        address _tokeManager,\n        address _tokeReward,\n        address _liquidityReserve,\n        address _feeAddress,\n        address _curvePool,\n        uint256 _epochDuration,\n        uint256 _firstEpochEndTime\n    ) external initializer {\n        OwnableUpgradeable.__Ownable_init();\n\n        // must have valid initial addresses\n        require(\n            _stakingToken != address(0) &&\n                _yieldyToken != address(0) &&\n                _tokeToken != address(0) &&\n                _tokePool != address(0) &&\n                _tokeManager != address(0) &&\n                _tokeReward != address(0) &&\n                _liquidityReserve != address(0),\n            \"Invalid address\"\n        );\n        STAKING_TOKEN = _stakingToken;\n        YIELDY_TOKEN = _yieldyToken;\n        TOKE_TOKEN = _tokeToken;\n        TOKE_POOL = _tokePool;\n        TOKE_MANAGER = _tokeManager;\n        TOKE_REWARD = _tokeReward;\n        LIQUIDITY_RESERVE = _liquidityReserve;\n        FEE_ADDRESS = _feeAddress;\n        CURVE_POOL = _curvePool;\n        COW_SETTLEMENT = 0x9008D19f58AAbD9eD0D60971565AA8510560ab41;\n        COW_RELAYER = 0xC92E8bdf79f0507f65a392b0ab4667716BFE0110;\n\n        timeLeftToRequestWithdrawal = 12 hours;\n\n        if (CURVE_POOL != address(0)) {\n            IERC20(TOKE_POOL).approve(CURVE_POOL, type(uint256).max);\n            setToAndFromCurve();\n        }\n\n        IERC20(STAKING_TOKEN).approve(TOKE_POOL, type(uint256).max);\n        IERC20Upgradeable(YIELDY_TOKEN).approve(\n            LIQUIDITY_RESERVE,\n            type(uint256).max\n        );\n        IERC20Upgradeable(YIELDY_TOKEN).approve(\n            LIQUIDITY_RESERVE,\n            type(uint256).max\n        );\n        IERC20Upgradeable(TOKE_TOKEN).approve(COW_RELAYER, type(uint256).max);\n\n        epoch = Epoch({\n            duration: _epochDuration,\n            number: 1,\n            timestamp: block.timestamp, // we know about the issues surrounding block.timestamp, using it here will not cause any problems\n            endTime: _firstEpochEndTime,\n            distribute: 0\n        });\n    }\n\n    /**\n        @notice claim TOKE rewards from Tokemak\n        @dev must get amount through toke reward contract using latest cycle from reward hash contract\n        @param _recipient Recipient struct that contains chainId, cycle, address, and amount \n        @param _v uint - recovery id\n        @param _r bytes - output of ECDSA signature\n        @param _s bytes - output of ECDSA signature\n     */\n    function claimFromTokemak(\n        Recipient calldata _recipient,\n        uint8 _v,\n        bytes32 _r,\n        bytes32 _s\n    ) external {\n        // cannot claim 0\n        require(_recipient.amount > 0, \"Must enter valid amount\");\n\n        ITokeReward tokeRewardContract = ITokeReward(TOKE_REWARD);\n        tokeRewardContract.claim(_recipient, _v, _r, _s);\n        _sendAffiliateFee(_recipient.amount);\n    }\n\n    /**\n        @notice send affiliate fee\n        @param _amount uint - total amount to deduct fee from\n     */\n    function _sendAffiliateFee(uint256 _amount) internal {\n        if (affiliateFee != 0 && FEE_ADDRESS != address(0)) {\n            uint256 feeAmount = (_amount * affiliateFee) / BASIS_POINTS;\n            IERC20Upgradeable(TOKE_TOKEN).safeTransfer(FEE_ADDRESS, feeAmount);\n        }\n    }\n\n    /**\n        @notice transfer TOKE from staking contract to address\n        @dev used so DAO can get TOKE and manually trade to return FOX to the staking contract\n        @param _claimAddress address to send TOKE rewards\n     */\n    function transferToke(address _claimAddress) external onlyOwner {\n        // _claimAddress can't be 0x0\n        require(_claimAddress != address(0), \"Invalid address\");\n        uint256 totalTokeAmount = IERC20Upgradeable(TOKE_TOKEN).balanceOf(\n            address(this)\n        );\n        IERC20Upgradeable(TOKE_TOKEN).safeTransfer(\n            _claimAddress,\n            totalTokeAmount\n        );\n    }\n\n    /**\n        @notice sets the curve pool address\n        @param _curvePool uint\n     */\n    function setCurvePool(address _curvePool) external onlyOwner {\n        CURVE_POOL = _curvePool;\n        setToAndFromCurve();\n    }\n\n    /**\n        @notice sets the affiliate fee\n        @dev fee is set in basis points\n        @param _affiliateFee uint\n     */\n    function setAffiliateFee(uint256 _affiliateFee) external onlyOwner {\n        affiliateFee = _affiliateFee;\n        emit LogSetAffiliateFee(block.number, _affiliateFee);\n    }\n\n    /**\n        @notice sets the affiliate address to receive the affiliate fee in TOKE\n        @dev if set to 0x000.. then no affiliate will be sent\n        @param _affiliateAddress address\n     */\n    function setAffiliateAddress(address _affiliateAddress) external onlyOwner {\n        FEE_ADDRESS = _affiliateAddress;\n        emit LogSetAffiliateAddress(block.number, _affiliateAddress);\n    }\n\n    /**\n        @notice override whether or not staking is paused\n        @dev used to pause staking in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseStaking(bool _shouldPause) public onlyOwner {\n        isStakingPaused = _shouldPause;\n        emit LogSetPauseStaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice override whether or not unstake & instantUnstake is paused\n        @dev used to pause unstake & instantUnstake in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseUnstaking(bool _shouldPause) external onlyOwner {\n        isUnstakingPaused = _shouldPause;\n        emit LogSetPauseUnstaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice override whether or not instantUnstake is paused\n        @dev used to pause instantUnstake in case some attack vector becomes present\n        @param _shouldPause bool\n     */\n    function shouldPauseInstantUnstaking(bool _shouldPause) external onlyOwner {\n        isInstantUnstakingPaused = _shouldPause;\n        emit LogSetPauseInstantUnstaking(block.number, _shouldPause);\n    }\n\n    /**\n        @notice set epoch duration\n        @dev epoch's determine how long until a rebase can occur\n        @param duration uint\n     */\n    function setEpochDuration(uint256 duration) external onlyOwner {\n        epoch.duration = duration;\n        emit LogSetEpochDuration(block.number, duration);\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _vestingPeriod uint\n     */\n    function setWarmUpPeriod(uint256 _vestingPeriod) external onlyOwner {\n        warmUpPeriod = _vestingPeriod;\n        emit LogSetWarmUpPeriod(block.number, _vestingPeriod);\n    }\n\n    /**\n     * @notice set cooldown period for stakers\n     * @param _vestingPeriod uint\n     */\n    function setCoolDownPeriod(uint256 _vestingPeriod) external onlyOwner {\n        coolDownPeriod = _vestingPeriod;\n        emit LogSetCoolDownPeriod(block.number, _vestingPeriod);\n    }\n\n    /**\n        @notice sets the time before Tokemak cycle ends to requestWithdrawals\n        @dev requestWithdrawals is called once per cycle.\n        @dev this allows us to change how much time before the end of the cycle we send the withdraw requests\n        @param _timestamp uint - time before end of cycle\n     */\n    function setTimeLeftToRequestWithdrawal(uint256 _timestamp)\n        external\n        onlyOwner\n    {\n        timeLeftToRequestWithdrawal = _timestamp;\n    }\n\n    /**\n        @notice returns true if claim is available\n        @dev this shows whether or not our epoch's have passed\n        @param _recipient address - warmup address to check if claim is available\n        @return bool - true if available to claim\n     */\n    function _isClaimAvailable(address _recipient)\n        internal\n        view\n        returns (bool)\n    {\n        Claim memory info = warmUpInfo[_recipient];\n        return epoch.number >= info.expiry && info.expiry != 0;\n    }\n\n    /**\n        @notice returns true if claimWithdraw is available\n        @dev this shows whether or not our epoch's have passed as well as if the cycle has increased\n        @param _recipient address - address that's checking for available claimWithdraw\n        @return bool - true if available to claimWithdraw\n     */\n    function _isClaimWithdrawAvailable(address _recipient)\n        internal\n        returns (bool)\n    {\n        Claim memory info = coolDownInfo[_recipient];\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\n            .requestedWithdrawals(address(this));\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n        return\n            epoch.number >= info.expiry &&\n            info.expiry != 0 &&\n            info.amount != 0 &&\n            ((requestedWithdrawals.minCycle <= currentCycleIndex &&\n                requestedWithdrawals.amount + withdrawalAmount >=\n                info.amount) || withdrawalAmount >= info.amount);\n    }\n\n    /**\n        @notice withdraw stakingTokens from Tokemak\n        @dev needs a valid requestWithdrawal inside Tokemak with a completed cycle rollover to withdraw\n     */\n    function _withdrawFromTokemak() internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        RequestedWithdrawalInfo memory requestedWithdrawals = tokePoolContract\n            .requestedWithdrawals(address(this));\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n\n        if (\n            requestedWithdrawals.amount > 0 &&\n            requestedWithdrawals.minCycle <= currentCycleIndex\n        ) {\n            tokePoolContract.withdraw(requestedWithdrawals.amount);\n            requestWithdrawalAmount -= requestedWithdrawals.amount;\n            withdrawalAmount += requestedWithdrawals.amount;\n        }\n    }\n\n    /**\n        @notice creates a withdrawRequest with Tokemak\n        @dev requestedWithdraws take 1 tokemak cycle to be available for withdraw\n        @param _amount uint - amount to request withdraw\n     */\n    function _requestWithdrawalFromTokemak(uint256 _amount) internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        uint256 balance = ITokePool(TOKE_POOL).balanceOf(address(this));\n\n        // the only way balance < _amount is when using unstakeAllFromTokemak\n        uint256 amountToRequest = balance < _amount ? balance : _amount;\n\n        if (amountToRequest > 0) tokePoolContract.requestWithdrawal(_amount);\n    }\n\n    /**\n        @notice deposit stakingToken to tStakingToken Tokemak reactor\n        @param _amount uint - amount to deposit\n     */\n    function _depositToTokemak(uint256 _amount) internal {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        tokePoolContract.deposit(_amount);\n    }\n\n    /**\n        @notice gets balance of stakingToken that's locked into the TOKE stakingToken pool\n        @return uint - amount of stakingToken in TOKE pool\n     */\n    function _getTokemakBalance() internal view returns (uint256) {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        return tokePoolContract.balanceOf(address(this));\n    }\n\n    /**\n        @notice checks TOKE's cycleTime is within duration to batch the transactions\n        @dev this function returns true if we are within timeLeftToRequestWithdrawal of the end of the TOKE cycle\n        @dev as well as if the current cycle index is more than the last cycle index\n        @return bool - returns true if can batch transactions\n     */\n    function canBatchTransactions() public view returns (bool) {\n        ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n        uint256 duration = tokeManager.getCycleDuration();\n        uint256 currentCycleStart = tokeManager.getCurrentCycle();\n        uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n        uint256 nextCycleStart = currentCycleStart + duration;\n\n        return\n            block.timestamp + timeLeftToRequestWithdrawal >= nextCycleStart &&\n            currentCycleIndex > lastTokeCycleIndex &&\n            requestWithdrawalAmount > 0;\n    }\n\n    /**\n        @notice owner function to requestWithdraw all FOX from tokemak in case of an attack on tokemak\n        @dev this bypasses the normal flow of sending a withdrawal request and allows the owner to requestWithdraw entire pool balance\n     */\n    function unstakeAllFromTokemak() public onlyOwner {\n        ITokePool tokePoolContract = ITokePool(TOKE_POOL);\n        uint256 tokePoolBalance = ITokePool(tokePoolContract).balanceOf(\n            address(this)\n        );\n        // pause any future staking\n        shouldPauseStaking(true);\n        requestWithdrawalAmount = tokePoolBalance;\n        _requestWithdrawalFromTokemak(tokePoolBalance);\n    }\n\n    /**\n        @notice sends batched requestedWithdrawals due to TOKE's requestWithdrawal overwriting the amount if you call it more than once per cycle\n     */\n    function sendWithdrawalRequests() public {\n        // check to see if near the end of a TOKE cycle\n        if (canBatchTransactions()) {\n            // if has withdrawal amount to be claimed then claim\n            _withdrawFromTokemak();\n\n            // if more requestWithdrawalAmount exists after _withdrawFromTokemak then request the new amount\n            ITokeManager tokeManager = ITokeManager(TOKE_MANAGER);\n            if (requestWithdrawalAmount > 0) {\n                _requestWithdrawalFromTokemak(requestWithdrawalAmount);\n            }\n\n            uint256 currentCycleIndex = tokeManager.getCurrentCycleIndex();\n            lastTokeCycleIndex = currentCycleIndex;\n        }\n    }\n\n    /**\n        @notice stake staking tokens to receive Yieldy tokens\n        @param _amount uint\n        @param _recipient address\n     */\n    function stake(uint256 _amount, address _recipient) public {\n        // if override staking, then don't allow stake\n        require(!isStakingPaused, \"Staking is paused\");\n        // amount must be non zero\n        require(_amount > 0, \"Must have valid amount\");\n\n        uint256 yieldyTotalSupply = IYieldy(YIELDY_TOKEN).totalSupply();\n\n        // Don't rebase unless tokens are already staked or could get locked out of staking\n        if (yieldyTotalSupply > 0) {\n            rebase();\n        }\n\n        IERC20Upgradeable(STAKING_TOKEN).safeTransferFrom(\n            msg.sender,\n            address(this),\n            _amount\n        );\n\n        Claim storage info = warmUpInfo[_recipient];\n\n        // if claim is available then auto claim tokens\n        if (_isClaimAvailable(_recipient)) {\n            claim(_recipient);\n        }\n\n        _depositToTokemak(_amount);\n\n        // skip adding to warmup contract if period is 0\n        if (warmUpPeriod == 0) {\n            IYieldy(YIELDY_TOKEN).mint(_recipient, _amount);\n        } else {\n            // create a claim and mint tokens so a user can claim them once warm up has passed\n            warmUpInfo[_recipient] = Claim({\n                amount: info.amount + _amount,\n                credits: info.credits +\n                    IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n                expiry: epoch.number + warmUpPeriod\n            });\n\n            IYieldy(YIELDY_TOKEN).mint(address(this), _amount);\n        }\n\n        sendWithdrawalRequests();\n    }\n\n    /**\n        @notice call stake with msg.sender\n        @param _amount uint\n     */\n    function stake(uint256 _amount) external {\n        stake(_amount, msg.sender);\n    }\n\n    /**\n        @notice retrieve reward tokens from warmup\n        @dev if user has funds in warmup then user is able to claim them (including rewards)\n        @param _recipient address\n     */\n    function claim(address _recipient) public {\n        Claim memory info = warmUpInfo[_recipient];\n        if (_isClaimAvailable(_recipient)) {\n            delete warmUpInfo[_recipient];\n\n            if (info.credits > 0) {\n                IYieldy(YIELDY_TOKEN).transfer(\n                    _recipient,\n                    IYieldy(YIELDY_TOKEN).tokenBalanceForCredits(info.credits)\n                );\n            }\n        }\n    }\n\n    /**\n        @notice claims staking tokens after cooldown period\n        @dev if user has a cooldown claim that's past expiry then withdraw staking tokens from tokemak\n        @dev and send them to user\n        @param _recipient address - users unstaking address\n     */\n    function claimWithdraw(address _recipient) public {\n        Claim memory info = coolDownInfo[_recipient];\n        uint256 totalAmountIncludingRewards = IYieldy(YIELDY_TOKEN)\n            .tokenBalanceForCredits(info.credits);\n        if (_isClaimWithdrawAvailable(_recipient)) {\n            // if has withdrawalAmount to be claimed, then claim\n            _withdrawFromTokemak();\n            delete coolDownInfo[_recipient];\n\n            withdrawalAmount -= info.amount;\n\n            // only give amount from when they requested withdrawal since this amount wasn't used in generating rewards\n            // this will later be given to users through addRewardsForStakers\n            IERC20Upgradeable(STAKING_TOKEN).safeTransfer(\n                _recipient,\n                info.amount\n            );\n\n            IYieldy(YIELDY_TOKEN).burn(\n                address(this),\n                totalAmountIncludingRewards\n            );\n        }\n    }\n\n    /**\n        @notice gets reward tokens either from the warmup pool or user's wallet or both\n        @dev when transferring reward tokens the user could have their balance still in the warmup pool\n        @dev this function abstracts the logic to find the correct amount of tokens to use them\n        @param _amount uint\n        @param _user address to pull funds from \n     */\n    function _retrieveBalanceFromUser(uint256 _amount, address _user) internal {\n        Claim memory userWarmInfo = warmUpInfo[_user];\n        uint256 walletBalance = IERC20Upgradeable(YIELDY_TOKEN).balanceOf(\n            _user\n        );\n        uint256 warmUpBalance = IYieldy(YIELDY_TOKEN).tokenBalanceForCredits(\n            userWarmInfo.credits\n        );\n\n        // must have enough funds between wallet and warmup\n        require(\n            _amount <= walletBalance + warmUpBalance,\n            \"Insufficient Balance\"\n        );\n\n        uint256 amountLeft = _amount;\n        if (warmUpBalance > 0) {\n            // remove from warmup first.\n            if (_amount >= warmUpBalance) {\n                // use the entire warmup balance\n                unchecked {\n                    amountLeft -= warmUpBalance;\n                }\n                delete warmUpInfo[_user];\n            } else {\n                // partially consume warmup balance\n                amountLeft = 0;\n                uint256 remainingCreditsAmount = userWarmInfo.credits -\n                    IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount);\n                uint256 remainingAmount = IYieldy(YIELDY_TOKEN)\n                    .tokenBalanceForCredits(remainingCreditsAmount);\n\n                warmUpInfo[_user] = Claim({\n                    amount: remainingAmount,\n                    credits: remainingCreditsAmount,\n                    expiry: userWarmInfo.expiry\n                });\n            }\n        }\n\n        if (amountLeft != 0) {\n            // transfer the rest from the users address\n            IERC20Upgradeable(YIELDY_TOKEN).safeTransferFrom(\n                _user,\n                address(this),\n                amountLeft\n            );\n        }\n    }\n\n    /**\n        @notice instant unstakes from liquidity reserve\n        @param _amount uint - amount to instant unstake\n     */\n    function instantUnstakeReserve(uint256 _amount) external {\n        require(_amount > 0, \"Invalid amount\");\n        // prevent unstaking if override due to vulnerabilities\n        require(\n            !isUnstakingPaused && !isInstantUnstakingPaused,\n            \"Unstaking is paused\"\n        );\n\n        rebase();\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        uint256 reserveBalance = IERC20Upgradeable(STAKING_TOKEN).balanceOf(\n            LIQUIDITY_RESERVE\n        );\n\n        require(reserveBalance >= _amount, \"Not enough funds in reserve\");\n\n        ILiquidityReserve(LIQUIDITY_RESERVE).instantUnstake(\n            _amount,\n            msg.sender\n        );\n    }\n\n    /**\n        @notice instant unstake from curve\n        @param _amount uint - amount to instant unstake\n        @param _minAmount uint - minimum amount with slippage to instant unstake\n        @return uint - amount received\n     */\n    function instantUnstakeCurve(uint256 _amount, uint256 _minAmount)\n        external\n        returns (uint256)\n    {\n        require(_amount > 0, \"Invalid amount\");\n        require(\n            CURVE_POOL != address(0) &&\n                (curvePoolFrom == 1 || curvePoolTo == 1),\n            \"Invalid Curve Pool\"\n        );\n        // prevent unstaking if override due to vulnerabilities\n        require(\n            !isUnstakingPaused && !isInstantUnstakingPaused,\n            \"Unstaking is paused\"\n        );\n\n        rebase();\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        return\n            ICurvePool(CURVE_POOL).exchange(\n                curvePoolFrom,\n                curvePoolTo,\n                _amount,\n                _minAmount,\n                msg.sender\n            );\n    }\n\n    /**\n        @notice sets to and from coin indexes for curve exchange\n     */\n    function setToAndFromCurve() internal {\n        if (CURVE_POOL != address(0)) {\n            address address0 = ICurvePool(CURVE_POOL).coins(0);\n            address address1 = ICurvePool(CURVE_POOL).coins(1);\n            int128 from = 0;\n            int128 to = 0;\n\n            if (TOKE_POOL == address0 && STAKING_TOKEN == address1) {\n                to = 1;\n            } else if (TOKE_POOL == address1 && STAKING_TOKEN == address0) {\n                from = 1;\n            }\n            require(from == 1 || to == 1, \"Invalid Curve Pool\");\n\n            curvePoolFrom = from;\n            curvePoolTo = to;\n\n            emit LogSetCurvePool(CURVE_POOL, curvePoolTo, curvePoolFrom);\n        }\n    }\n\n    /**\n        @notice estimate received using instant unstake from curve\n        @param _amount uint - amount to instant unstake\n        @return uint - estimated amount received\n     */\n    function estimateInstantCurve(uint256 _amount)\n        external\n        view\n        returns (uint256)\n    {\n        return\n            ICurvePool(CURVE_POOL).get_dy(curvePoolFrom, curvePoolTo, _amount);\n    }\n\n    /**\n        @notice redeem Yieldy tokens for staking tokens with a vesting period based on coolDownPeriod\n        @dev this function will retrieve the _amount of Yieldy tokens from the user and transfer them to the cooldown contract.\n        @dev once the period has expired the user will be able to withdraw their staking tokens\n        @param _amount uint - amount of tokens to unstake\n        @param _trigger bool - should trigger a rebase\n     */\n    function unstake(uint256 _amount, bool _trigger) external {\n        // prevent unstaking if override due to vulnerabilities asdf\n        require(!isUnstakingPaused, \"Unstaking is paused\");\n        if (_trigger) {\n            rebase();\n        }\n        _retrieveBalanceFromUser(_amount, msg.sender);\n\n        Claim storage userCoolInfo = coolDownInfo[msg.sender];\n\n        // try to claim withdraw if user has withdraws to claim function will check if withdraw is valid\n        claimWithdraw(msg.sender);\n\n        coolDownInfo[msg.sender] = Claim({\n            amount: userCoolInfo.amount + _amount,\n            credits: userCoolInfo.credits +\n                IYieldy(YIELDY_TOKEN).creditsForTokenBalance(_amount),\n            expiry: epoch.number + coolDownPeriod\n        });\n\n        requestWithdrawalAmount += _amount;\n        sendWithdrawalRequests();\n    }\n\n    /**\n        @notice trigger rebase if epoch has ended\n     */\n    function rebase() public {\n        // we know about the issues surrounding block.timestamp, using it here will not cause any problems\n        if (epoch.endTime <= block.timestamp) {\n            IYieldy(YIELDY_TOKEN).rebase(epoch.distribute, epoch.number);\n\n            epoch.endTime = epoch.endTime + epoch.duration;\n            epoch.timestamp = block.timestamp;\n            epoch.number++;\n\n            uint256 balance = contractBalance();\n            uint256 staked = IYieldy(YIELDY_TOKEN).totalSupply();\n\n            if (balance <= staked) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance - staked;\n            }\n        }\n    }\n\n    /**\n        @notice returns contract staking tokens holdings \n        @dev gets amount of staking tokens that are a part of this system to calculate rewards\n        @dev the staking tokens will be included in this contract plus inside tokemak\n        @return uint - amount of staking tokens\n     */\n    function contractBalance() internal view returns (uint256) {\n        uint256 tokeBalance = _getTokemakBalance();\n        return\n            IERC20Upgradeable(STAKING_TOKEN).balanceOf(address(this)) +\n            tokeBalance;\n    }\n\n    /**\n     * @notice adds staking tokens for rebase rewards\n     * @dev this is the function that gives rewards so the rebase function can distribute profits to reward token holders\n     * @param _amount uint - amount of tokens to add to rewards\n     * @param _shouldTransfer bool - should transfer tokens before adding rewards\n     * @param _trigger bool - should trigger rebase\n     */\n    function addRewardsForStakers(\n        uint256 _amount,\n        bool _shouldTransfer,\n        bool _trigger\n    ) external {\n        if (_shouldTransfer) {\n            IERC20Upgradeable(STAKING_TOKEN).safeTransferFrom(\n                msg.sender,\n                address(this),\n                _amount\n            );\n        }\n\n        // deposit all staking tokens held in contract to Tokemak minus tokens waiting for claimWithdraw\n        uint256 stakingTokenBalance = IERC20Upgradeable(STAKING_TOKEN)\n            .balanceOf(address(this));\n        uint256 amountToDeposit = stakingTokenBalance - withdrawalAmount;\n        _depositToTokemak(amountToDeposit);\n\n        if (_trigger) {\n            rebase();\n        }\n    }\n\n    /**\n     * @notice trades rewards generated from claimFromTokemak for staking token\n     * @dev this is function is called from claimFromTokemak if the autoRebase bool is set to true\n     */\n    function preSign(bytes calldata orderUid) external onlyOwner {\n        ICowSettlement(COW_SETTLEMENT).setPreSignature(orderUid, true);\n    }\n}\n\n\n",
        "CodeNames": [
            "LiquidityReserve.sol",
            "Staking.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-04",
                "Location": [
                    "stakingToken",
                    "removeLiquidity",
                    "instantUnstake",
                    "addLiquidity",
                    "totalLockedValue",
                    "instantUnstakeReserve()"
                ],
                "Type": " Yield of  LiquidityReserve  can be stolen",
                "Description": "\n<https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L126\n\n<https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L176\n\n<https://github.com/code-423n4/2022-06-yieldy/blob/524f3b83522125fb7d4677fa7a7e5ba5a2c0fe67/src/contracts/LiquidityReserve.sol#L206\n\n\nUsing sandwich attacks and JIT (Just-in-time liquidity), the yield of LiquidityReserve could be extracted for liquidity providers.\n\n\nThe yield of LiquidityReserve is distributed when a user calls instantUnstakeReserve() in Staking. Then, in instantUnstake, totalLockedValue increases with the fee paid by the user withdrawing. The fee is shared between all liquidity providers as they all see the value of their shares increase.\n\nTherefore, an attacker could do the following sandwich attack when spotting a call to instantUnstakeReserve().\n\n*   In a first tx before the user call, borrow a lot of stakingToken and addLiquidity\n*   The user call to instantUnstakeReserve() leading to a fee of sayx\n*   In a second tx after the user call, removeLiquidity and repay the loan, taking a large proportion of the user fee\n\nThe problem here is that you can instantly add and remove liquidity without penalty, and that the yield is instantly distributed.\n\n",
                "Repair": "\nTo mitigate this, you can\n\n*   store the earned fees and distribute them across multiple blocks to make sure the attack wouldn\u2019t be worth it\n*   add a small fee when removing liquidity, which would make the attack unprofitable\n*   prevent users from withdrawing before X blocks or add a locking mechanism\n\n0xean (Yieldy) disagreed with severity and commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/164#issuecomment-1167971720):\n  This is not unique to the protocol and is a vulnerability in almost all of the LP designs that are prevalent today. There is no loss of user funds here either.\n \n Would downgrade to Low or QA.\n\nPicodes (warden) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/164#issuecomment-1169363435):\n  In standard cases of JIT, for example in a DEX, the attacker takes a risk as the liquidity he adds is used during the swap, and this liquidity is useful for the protocol as leads to a better price for the user, which is not the case here\n\n0xean (Yieldy) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/164#issuecomment-1169371024):\n  @Picodes that is fair but the liquidity is still useful and I still don't see how this qualifies as high severity.  Eventually it would mean that the liquidity reserve would need less liquidity parked in it if JITers always where hitting it. \n\nPicodes (warden) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/164#issuecomment-1169551914):\n  To me it's high because: (correct me if I am missing things)\n \n  JIT is not useful here at all for the protocol, the liquidity they bring is not useful as does not get locked. It's totally risk free, and as you said it\u2019s a commun attack so it\u2019s likely that someone uses it\n  It leads to a loss of LP funds: \n \tAssume there is 100k unlocked in the pool, and someone instantUnstake 100k, it\u2019ll lock all the LP liquidity. But if someone JITs this, the fees will go to the attacker and not the LP which provided the service by accepting to have its liquidity locked. \n  From a protocol point of view, LPing becomes unattractive as all the fees are stolen, breaking the product design\n\nmoose-code (judge) commented(https://github.com/code-423n4/2022-06-yieldy-findings/issues/164#issuecomment-1201261638):\n  Agree going to leave this as high. Any whale that does a large unstake will be susceptible to having more of the fee's eroded to a predatory sandwich attack which provides no value to the system. \n\n*\n\n \n\n"
            }
        ]
    }
]