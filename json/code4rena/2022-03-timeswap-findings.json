[
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IConvenience} from '../interfaces/IConvenience.sol';\nimport {IFactory} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IFactory.sol';\nimport {IWETH} from '../interfaces/IWETH.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {IPay} from '../interfaces/IPay.sol';\nimport {IDue} from '../interfaces/IDue.sol';\nimport {PayMath} from './PayMath.sol';\nimport {MsgValue} from './MsgValue.sol';\nimport {ETH} from './ETH.sol';\n\nlibrary Pay {\n    using PayMath for IPair;\n\n    function pay(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IFactory factory,\n        IPay.Repay memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut) {\n        (assetIn, collateralOut) = _pay(\n            natives,\n            IPay._Repay(\n                factory,\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                params.collateralTo,\n                params.ids,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n    }\n\n    function payETHAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IFactory factory,\n        IWETH weth,\n        IPay.RepayETHAsset memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut) {\n        uint128 maxAssetIn = MsgValue.getUint112();\n\n        (assetIn, collateralOut) = _pay(\n            natives,\n            IPay._Repay(\n                factory,\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                params.collateralTo,\n                params.ids,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n\n        if (maxAssetIn > assetIn) {\n            uint256 excess = maxAssetIn;\n            unchecked {\n                excess -= assetIn;\n            }\n            ETH.transfer(payable(msg.sender), excess);\n        }\n    }\n\n    function payETHCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IFactory factory,\n        IWETH weth,\n        IPay.RepayETHCollateral memory params\n    ) external returns (uint128 assetIn, uint128 collateralOut) {\n        (assetIn, collateralOut) = _pay(\n            natives,\n            IPay._Repay(\n                factory,\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.ids,\n                params.maxAssetsIn,\n                params.deadline\n            )\n        );\n\n        if (collateralOut != 0) {\n            weth.withdraw(collateralOut);\n            ETH.transfer(params.collateralTo, collateralOut);\n        }\n    }\n\n    function _pay(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IPay._Repay memory params\n    ) private returns (uint128 assetIn, uint128 collateralOut) {\n        require(params.deadline >= block.timestamp, 'E504');\n        require(params.maturity > block.timestamp, 'E508');\n        require(params.ids.length == params.maxAssetsIn.length, '520');\n\n        IPair pair = params.factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), 'E501');\n\n        IDue collateralizedDebt = natives[params.asset][params.collateral][params.maturity].collateralizedDebt;\n        require(address(collateralizedDebt) != address(0), 'E502');\n\n        (uint112[] memory assetsIn, uint112[] memory collateralsOut) = pair.givenMaxAssetsIn(\n            params.maturity,\n            collateralizedDebt,\n            params.ids,\n            params.maxAssetsIn\n        );\n\n        (assetIn, collateralOut) = pair.pay(\n            IPair.PayParam(\n                params.maturity,\n                params.collateralTo,\n                address(this),\n                params.ids,\n                assetsIn,\n                collateralsOut,\n                bytes(abi.encode(params.asset, params.collateral, params.from, params.maturity))\n            )\n        );\n    }\n}\n\n\n// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IClaim} from './interfaces/IClaim.sol';\nimport {IConvenience} from './interfaces/IConvenience.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {ERC20Permit} from './base/ERC20Permit.sol';\nimport {SafeMetadata} from './libraries/SafeMetadata.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\n\ncontract BondInterest is IClaim, ERC20Permit {\n    using SafeMetadata for IERC20;\n    using Strings for uint256;\n\n    IConvenience public immutable override convenience;\n    IPair public immutable override pair;\n    uint256 public immutable override maturity;\n\n    function name() external view override returns (string memory) {\n        string memory assetName = pair.asset().safeName();\n        string memory collateralName = pair.collateral().safeName();\n        return\n            string(\n                abi.encodePacked(\n                    'Timeswap Bond Interest - ',\n                    assetName,\n                    ' - ',\n                    collateralName,\n                    ' - ',\n                    maturity.toString()\n                )\n            );\n    }\n\n    function symbol() external view override returns (string memory) {\n        string memory assetSymbol = pair.asset().safeSymbol();\n        string memory collateralSymbol = pair.collateral().safeSymbol();\n        return string(abi.encodePacked('TS-BND-INT-', assetSymbol, '-', collateralSymbol, '-', maturity.toString()));\n    }\n\n    function decimals() external view override returns (uint8) {\n        return pair.asset().safeDecimals();\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return pair.claimsOf(maturity, address(convenience)).bondInterest;\n    }\n\n    constructor(\n        IConvenience _convenience,\n        IPair _pair,\n        uint256 _maturity\n    ) ERC20Permit('Timeswap Bond Interest') {\n        convenience = _convenience;\n        pair = _pair;\n        maturity = _maturity;\n    }\n\n    modifier onlyConvenience() {\n        require(msg.sender == address(convenience), 'E403');\n        _;\n    }\n\n    function mint(address to, uint128 amount) external override onlyConvenience {\n        _mint(to, amount);\n    }\n\n    function burn(address from, uint128 amount) external override onlyConvenience {\n        _burn(from, amount);\n    }\n}\n\n\n// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IConvenience} from './interfaces/IConvenience.sol';\nimport {IFactory} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IFactory.sol';\nimport {IWETH} from './interfaces/IWETH.sol';\nimport {IDue} from './interfaces/IDue.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {ITimeswapMintCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapMintCallback.sol';\nimport {ITimeswapLendCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapLendCallback.sol';\nimport {ITimeswapBorrowCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapBorrowCallback.sol';\nimport {ITimeswapPayCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapPayCallback.sol';\nimport {Mint} from './libraries/Mint.sol';\nimport {Burn} from './libraries/Burn.sol';\nimport {Lend} from './libraries/Lend.sol';\nimport {Withdraw} from './libraries/Withdraw.sol';\nimport {Borrow} from './libraries/Borrow.sol';\nimport {Pay} from './libraries/Pay.sol';\nimport {DeployNative} from './libraries/DeployNative.sol';\nimport {SafeTransfer} from './libraries/SafeTransfer.sol';\n\n/// @title Timeswap Convenience\n/// @author Timeswap Labs\n/// @notice It is recommnded to use this contract to interact with Timeswap Core contract.\n/// @notice All error messages are abbreviated and can be found in the documentation.\ncontract TimeswapConvenience is IConvenience {\n    using SafeTransfer for IERC20;\n    using Mint for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Burn for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Lend for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Withdraw for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Borrow for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Pay for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using DeployNative for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IConvenience\n    IFactory public immutable override factory;\n    /// @inheritdoc IConvenience\n    IWETH public immutable override weth;\n\n    /// @dev Stores the addresses of the Liquidty, Bond, Insurance, Collateralized Debt token contracts.\n    mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native))) private natives;\n\n    /* ===== VIEW ===== */\n\n    /// @inheritdoc IConvenience\n    function getNative(\n        IERC20 asset,\n        IERC20 collateral,\n        uint256 maturity\n    ) external view override returns (Native memory) {\n        return natives[asset][collateral][maturity];\n    }\n\n    /* ===== INIT ===== */\n\n    /// @dev Initializes the Convenience contract.\n    /// @param _factory The address of factory contract used by this contract.\n    /// @param _weth The address of the Wrapped ETH contract.\n    constructor(IFactory _factory, IWETH _weth) {\n        require(address(_factory) != address(0), 'E601');\n        require(address(_weth) != address(0), 'E601');\n        require(address(_factory) != address(_weth), 'E612');\n\n        factory = _factory;\n        weth = _weth;\n    }\n\n    /* ===== UPDATE ===== */\n\n    receive() external payable {\n        require(msg.sender == address(weth));\n    }\n\n    /// @inheritdoc IConvenience\n    function deployPair(DeployPair calldata params) external override {\n        factory.createPair(params.asset, params.collateral);\n    }\n\n    /// @inheritdoc IConvenience\n    function deployNatives(DeployNatives calldata params) external override {\n        natives.deploy(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function newLiquidity(NewLiquidity calldata params)\n        external\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.newLiquidity(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function newLiquidityETHAsset(NewLiquidityETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.newLiquidityETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function newLiquidityETHCollateral(NewLiquidityETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.newLiquidityETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAsset(LiquidityGivenAsset calldata params)\n        external\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenAsset(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAssetETHAsset(LiquidityGivenAssetETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenAssetETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAssetETHCollateral(LiquidityGivenAssetETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenAssetETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebt(LiquidityGivenDebt calldata params)\n        external\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenDebt(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebtETHAsset(LiquidityGivenDebtETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenDebtETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebtETHCollateral(LiquidityGivenDebtETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenDebtETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateral(LiquidityGivenCollateral calldata params)\n        external\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenCollateral(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateralETHAsset(LiquidityGivenCollateralETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenCollateralETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateralETHCollateral(LiquidityGivenCollateralETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetIn,\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetIn, liquidityOut, id, dueOut) = natives.liquidityGivenCollateralETHCollateral(\n            this,\n            factory,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidity(RemoveLiquidity calldata params)\n        external\n        override\n        returns (uint256 assetOut, uint128 collateralOut)\n    {\n        (assetOut, collateralOut) = natives.removeLiquidity(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidityETHAsset(RemoveLiquidityETHAsset calldata params)\n        external\n        override\n        returns (uint256 assetOut, uint128 collateralOut)\n    {\n        (assetOut, collateralOut) = natives.removeLiquidityETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidityETHCollateral(RemoveLiquidityETHCollateral calldata params)\n        external\n        override\n        returns (uint256 assetOut, uint128 collateralOut)\n    {\n        (assetOut, collateralOut) = natives.removeLiquidityETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBond(LendGivenBond calldata params)\n        external\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenBond(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBondETHAsset(LendGivenBondETHAsset calldata params)\n        external\n        payable\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenBondETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBondETHCollateral(LendGivenBondETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenBondETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsurance(LendGivenInsurance calldata params)\n        external\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenInsurance(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsuranceETHAsset(LendGivenInsuranceETHAsset calldata params)\n        external\n        payable\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenInsuranceETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsuranceETHCollateral(LendGivenInsuranceETHCollateral calldata params)\n        external\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenInsuranceETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercent(LendGivenPercent calldata params)\n        external\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenPercent(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercentETHAsset(LendGivenPercentETHAsset calldata params)\n        external\n        payable\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenPercentETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercentETHCollateral(LendGivenPercentETHCollateral calldata params)\n        external\n        override\n        returns (uint256 assetIn, IPair.Claims memory claimsOut)\n    {\n        (assetIn, claimsOut) = natives.lendGivenPercentETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collect(Collect calldata params) external override returns (IPair.Tokens memory tokensOut) {\n        tokensOut = natives.collect(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collectETHAsset(CollectETHAsset calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.collectETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collectETHCollateral(CollectETHCollateral calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.collectETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebt(BorrowGivenDebt calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenDebt(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebtETHAsset(BorrowGivenDebtETHAsset calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenDebtETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebtETHCollateral(BorrowGivenDebtETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenDebtETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateral(BorrowGivenCollateral calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenCollateral(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateralETHAsset(BorrowGivenCollateralETHAsset calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenCollateralETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateralETHCollateral(BorrowGivenCollateralETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenCollateralETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercent(BorrowGivenPercent calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenPercent(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercentETHAsset(BorrowGivenPercentETHAsset calldata params)\n        external\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenPercentETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercentETHCollateral(BorrowGivenPercentETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 assetOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (assetOut, id, dueOut) = natives.borrowGivenPercentETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repay(Repay memory params) external override returns (uint128 assetIn, uint128 collateralOut) {\n        (assetIn, collateralOut) = natives.pay(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repayETHAsset(RepayETHAsset memory params)\n        external\n        payable\n        override\n        returns (uint128 assetIn, uint128 collateralOut)\n    {\n        (assetIn, collateralOut) = natives.payETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repayETHCollateral(RepayETHCollateral memory params)\n        external\n        override\n        returns (uint128 assetIn, uint128 collateralOut)\n    {\n        (assetIn, collateralOut) = natives.payETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc ITimeswapMintCallback\n    function timeswapMintCallback(\n        uint256 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) external override {\n        (IERC20 asset, IERC20 collateral, address assetFrom, address collateralFrom) = abi.decode(\n            data,\n            (IERC20, IERC20, address, address)\n        );\n        IPair pair = factory.getPair(asset, collateral);\n\n        require(msg.sender == address(pair), 'E701');\n\n        IWETH _weth = weth;\n\n        if (assetFrom == address(this)) {\n            _weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(assetFrom, pair, assetIn);\n        }\n\n        if (collateralFrom == address(this)) {\n            _weth.deposit{value: collateralIn}();\n            collateral.safeTransfer(pair, collateralIn);\n        } else {\n            collateral.safeTransferFrom(collateralFrom, pair, collateralIn);\n        }\n    }\n\n    /// @inheritdoc ITimeswapLendCallback\n    function timeswapLendCallback(uint256 assetIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = factory.getPair(asset, collateral);\n\n        require(msg.sender == address(pair), 'E701');\n\n        if (from == address(this)) {\n            weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(from, pair, assetIn);\n        }\n    }\n\n    /// @inheritdoc ITimeswapBorrowCallback\n    function timeswapBorrowCallback(uint112 collateralIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = factory.getPair(asset, collateral);\n        require(msg.sender == address(pair), 'E701');\n        if (from == address(this)) {\n            weth.deposit{value: collateralIn}();\n            collateral.safeTransfer(pair, collateralIn);\n        } else {\n            collateral.safeTransferFrom(from, pair, collateralIn);\n        }\n    }\n\n    /// @inheritdoc ITimeswapPayCallback\n    function timeswapPayCallback(uint128 assetIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n\n        IPair pair = factory.getPair(asset, collateral);\n        require(msg.sender == address(pair), 'E701');\n\n        if (from == address(this)) {\n            weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(from, pair, assetIn);\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "Pay.sol",
            "BondInterest.sol",
            "TimeswapConvenience.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "//solidity\nfunction pay(PayParam calldata param)\n    external \n    override \n    lock \n    returns (\n        uint128 assetIn, \n        uint128 collateralOut\n    ) \n{\n    require(block.timestamp < param.maturity, 'E202');\n    require(param.owner != address(0), 'E201');\n    require(param.to != address(0), 'E201');\n    require(param.to != address(this), 'E204');\n    require(param.ids.length == param.assetsIn.length, 'E205');\n    require(param.ids.length == param.collateralsOut.length, 'E205');\n\n    Pool storage pool = pools[param.maturity];\n\n    Due[] storage dues = pool.dues[param.owner];\n    require(dues.length = param.ids.length, 'E205');\n\n    for (uint256 i; i < param.ids.length;) {\n        Due storage due = dues[param.ids[i]];\n        require(due.startBlock != BlockNumber.get(), 'E207');\n        if (param.owner != msg.sender) require(param.collateralsOut[i] == 0, 'E213');\n        require(uint256(assetIn) * due.collateral = uint256(collateralOut) * due.debt, 'E303');\n        due.debt -= param.assetsIn[i];\n        due.collateral -= param.collateralsOut[i];\n        assetIn += param.assetsIn[i];\n        collateralOut += param.collateralsOut[i];\n        unchecked { ++i; }\n    }\n    ...\n"
                ],
                "Type": " Wrong timing of check allows users to withdraw collateral without paying for the debt",
                "Description": "\nTimeswapPair.sol#L459-L490(https://github.com/code-423n4/2022-03-timeswap/blob/00317d9a8319715a8e28361901ab14fe50d06172/Timeswap/Core/contracts/TimeswapPair.sol#L459-L490)<br\n\nsolidity\nfunction pay(PayParam calldata param)\n    external \n    override \n    lock \n    returns (\n        uint128 assetIn, \n        uint128 collateralOut\n    ) \n{\n    require(block.timestamp < param.maturity, 'E202');\n    require(param.owner != address(0), 'E201');\n    require(param.to != address(0), 'E201');\n    require(param.to != address(this), 'E204');\n    require(param.ids.length == param.assetsIn.length, 'E205');\n    require(param.ids.length == param.collateralsOut.length, 'E205');\n\n    Pool storage pool = pools[param.maturity];\n\n    Due[] storage dues = pool.dues[param.owner];\n    require(dues.length = param.ids.length, 'E205');\n\n    for (uint256 i; i < param.ids.length;) {\n        Due storage due = dues[param.ids[i]];\n        require(due.startBlock != BlockNumber.get(), 'E207');\n        if (param.owner != msg.sender) require(param.collateralsOut[i] == 0, 'E213');\n        require(uint256(assetIn) * due.collateral = uint256(collateralOut) * due.debt, 'E303');\n        due.debt -= param.assetsIn[i];\n        due.collateral -= param.collateralsOut[i];\n        assetIn += param.assetsIn[i];\n        collateralOut += param.collateralsOut[i];\n        unchecked { ++i; }\n    }\n    ...\n\n\nAt L484, if there is only one id, and for the first and only time of the for loop, assetIn and collateralOut will be 0, therefore require(uint256(assetIn) * due.collateral = uint256(collateralOut) * due.debt, 'E303'); will pass.\n\nA attacker can call pay() with param.assetsIn[0] == 0 and param.collateralsOut[i] == due.collateral.\n\n\nThe attacker can:\n\n1.  borrow() 10,000 USDC with 1 BTC as collateral;\n2.  pay() with 0 USDC as assetsIn and 1 BTC as collateralsOut.\n\nAs a result, the attacker effectively stole 10,000 USDC.\n\n",
                "Repair": "\nChange to:\n\nsolidity\nfor (uint256 i; i < param.ids.length;) {\n    Due storage due = dues[param.ids[i]];\n    require(due.startBlock != BlockNumber.get(), 'E207');\n    if (param.owner != msg.sender) require(param.collateralsOut[i] == 0, 'E213');\n    due.debt -= param.assetsIn[i];\n    due.collateral -= param.collateralsOut[i];\n    assetIn += param.assetsIn[i];\n    collateralOut += param.collateralsOut[i];\n    unchecked { ++i; }\n}\n\nrequire(uint256(assetIn) * due.collateral = uint256(collateralOut) * due.debt, 'E303');\n...\n\n\nMathepreneur (Timeswap) resolved and commented(https://github.com/code-423n4/2022-03-timeswap-findings/issues/16#issuecomment-1063973580):\n  Timeswap-Labs/Timeswap-V1-Core@b23b44a(https://github.com/Timeswap-Labs/Timeswap-V1-Core/commit/b23b44a01d577a5bee77fb5f19d9f4ad1e8d13af)\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2022-03-timeswap-findings/issues/16#issuecomment-1086569306):\n  This is an interesting find. It appears that assetIn and collateralOut are not checked properly during the first iteration of the for loop. As a result, this functionality of this function is inherently broken as the require statement will always be satisfied. Nice job!\n\n\n\n*\n \n\n"
            }
        ]
    }
]