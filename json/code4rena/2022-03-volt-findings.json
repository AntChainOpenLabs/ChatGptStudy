[
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport {Decimal} from \"../external/Decimal.sol\";\nimport {IScalingPriceOracle} from \"./IScalingPriceOracle.sol\";\n\n/// @notice interface to get data from the Scaling Price Oracle\ninterface IOraclePassThrough {\n    // ----------- Getters -----------\n\n    /// @notice reference to the scaling price oracle\n    function scalingPriceOracle() external view returns (IScalingPriceOracle);\n\n    /// @notice function to get the current oracle price for the OracleRef contract\n    function read()\n        external\n        view\n        returns (Decimal.D256 memory price, bool valid);\n\n    /// @notice function to get the current oracle price for the entire system\n    function getCurrentOraclePrice() external view returns (uint256);\n\n    // ----------- Governor only state changing api -----------\n\n    /// @notice function to update the pointer to the scaling price oracle\n    /// requires approval from both VOLT and FRAX governance to sign off on the change\n    function updateScalingPriceOracle(IScalingPriceOracle newScalingPriceOracle)\n        external;\n\n    /// @notice event emitted when the scaling price oracle is updated\n    event ScalingPriceOracleUpdate(\n        IScalingPriceOracle oldScalingPriceOracle,\n        IScalingPriceOracle newScalingPriceOracle\n    );\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport {Timed} from \"./../utils/Timed.sol\";\nimport {CoreRef} from \"./../refs/CoreRef.sol\";\nimport {Decimal} from \"../external/Decimal.sol\";\nimport {Constants} from \"./../Constants.sol\";\nimport {Deviation} from \"./../utils/Deviation.sol\";\nimport {IScalingPriceOracle} from \"./IScalingPriceOracle.sol\";\nimport {BokkyPooBahsDateTimeContract} from \"./../external/calendar/BokkyPooBahsDateTimeContract.sol\";\nimport {Math} from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {SafeCast} from \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport {ERC20, IERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {ChainlinkClient, Chainlink} from \"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\";\n\n/// @notice contract that receives a chainlink price feed and then linearly interpolates that rate over\n/// a 28 day period into the VOLT price. Interest is compounded monthly when the rate is updated\n/// @author Elliot Friedman\ncontract ScalingPriceOracle is\n    Timed,\n    ChainlinkClient,\n    IScalingPriceOracle,\n    BokkyPooBahsDateTimeContract\n{\n    using SafeCast for *;\n    using Deviation for *;\n    using Decimal for Decimal.D256;\n    using Chainlink for Chainlink.Request;\n\n    /// ---------- Mutable Price Variables ----------\n\n    /// @notice current amount that oracle price is inflating/deflating by monthly in basis points\n    int256 public override monthlyChangeRateBasisPoints;\n\n    /// @notice oracle price. starts off at 1e18 and compounds monthly\n    uint256 public override oraclePrice = 1e18;\n\n    /// ---------- Mutable CPI Variables Packed Into Single Storage Slot to Save an SSTORE & SLOAD ----------\n\n    /// @notice the current month's CPI data\n    uint128 public currentMonth;\n\n    /// @notice the previous month's CPI data\n    uint128 public previousMonth;\n\n    /// ---------- Immutable Variables ----------\n\n    /// @notice the time frame over which all changes in CPI data are applied\n    /// 28 days was chosen as that is the shortest length of a month\n    uint256 public constant override TIMEFRAME = 28 days;\n\n    /// @notice the maximum allowable deviation in basis points for a new chainlink oracle update\n    /// only allow price changes by 20% in a month.\n    /// Any change over this threshold in either direction will be rejected\n    uint256 public constant override MAXORACLEDEVIATION = 2_000;\n\n    /// @notice address of chainlink oracle to send request\n    address public immutable oracle;\n\n    /// @notice job id that retrieves the latest CPI data\n    bytes32 public immutable jobId;\n\n    /// @notice amount in LINK paid to node operator for each request\n    uint256 public immutable fee;\n\n    /// @param _oracle address of chainlink data provider\n    /// @param _jobid job id\n    /// @param _fee maximum fee paid to chainlink data provider\n    /// @param _currentMonth current month's inflation data\n    /// @param _previousMonth previous month's inflation data\n    constructor(\n        address _oracle,\n        bytes32 _jobid,\n        uint256 _fee,\n        uint128 _currentMonth,\n        uint128 _previousMonth\n    ) Timed(TIMEFRAME) {\n        uint256 chainId;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            chainId := chainid()\n        }\n\n        if (chainId == 1 || chainId == 42) {\n            setPublicChainlinkToken();\n        }\n\n        oracle = _oracle;\n        jobId = _jobid;\n        fee = _fee;\n\n        currentMonth = _currentMonth;\n        previousMonth = _previousMonth;\n\n        _initTimed();\n\n        /// calculate new monthly CPI-U rate in basis points based on current and previous month\n        int256 aprBasisPoints = getMonthlyAPR();\n\n        /// store data and apply the change rate over the next month to the VOLT price\n        _oracleUpdateChangeRate(aprBasisPoints);\n    }\n\n    // ----------- Getters -----------\n\n    /// @notice get the current scaled oracle price\n    /// applies the change smoothly over a 28 day period\n    /// scaled by 18 decimals\n    // prettier-ignore\n    function getCurrentOraclePrice() public view override returns (uint256) {\n        int256 oraclePriceInt = oraclePrice.toInt256();\n\n        int256 timeDelta = Math.min(block.timestamp - startTime, TIMEFRAME).toInt256();\n        int256 pricePercentageChange = oraclePriceInt * monthlyChangeRateBasisPoints / Constants.BP_INT;\n        int256 priceDelta = pricePercentageChange * timeDelta / TIMEFRAME.toInt256();\n\n        return (oraclePriceInt + priceDelta).toUint256();\n    }\n\n    /// @notice get APR from chainlink data by measuring (current month - previous month) / previous month\n    /// @return percentageChange percentage change in basis points over past month\n    function getMonthlyAPR() public view returns (int256 percentageChange) {\n        int256 delta = int128(currentMonth) - int128(previousMonth);\n        percentageChange = (delta * Constants.BP_INT) / int128(previousMonth);\n    }\n\n    /// ------------- Public API To Request Chainlink Data -------------\n\n    /// @notice Create a Chainlink request to retrieve API response, find the target\n    /// data, then multiply by 1000 (to remove decimal places from data).\n    /// @return requestId for this request\n    /// only allows 1 request per month after the 14th day\n    /// callable by anyone after time period and 14th day of the month\n    function requestCPIData()\n        external\n        afterTimeInit\n        returns (bytes32 requestId)\n    {\n        require(\n            getDay(block.timestamp) > 14,\n            \"ScalingPriceOracle: cannot request data before the 15th\"\n        );\n\n        Chainlink.Request memory request = buildChainlinkRequest(\n            jobId,\n            address(this),\n            this.fulfill.selector\n        );\n\n        return sendChainlinkRequestTo(oracle, request, fee);\n    }\n\n    /// ------------- Chainlink Node Operator API -------------\n\n    /// @notice Receive the response in the form of uint256\n    /// @param _requestId of the chainlink request\n    /// @param _cpiData latest CPI data from BLS\n    /// called by the chainlink oracle\n    function fulfill(bytes32 _requestId, uint256 _cpiData)\n        external\n        recordChainlinkFulfillment(_requestId)\n    {\n        _updateCPIData(_cpiData);\n    }\n\n    // ----------- Internal state changing api -----------\n\n    /// @notice helper function to store and validate new chainlink data\n    /// @param _cpiData latest CPI data from BLS\n    /// update will fail if new values exceed deviation threshold of 20% monthly\n    function _updateCPIData(uint256 _cpiData) internal {\n        require(\n            MAXORACLEDEVIATION.isWithinDeviationThreshold(\n                currentMonth.toInt256(),\n                _cpiData.toInt256()\n            ),\n            \"ScalingPriceOracle: Chainlink data outside of deviation threshold\"\n        );\n\n        /// store CPI data, removes stale data\n        _addNewMonth(uint128(_cpiData));\n\n        /// calculate new monthly CPI-U rate in basis points\n        int256 aprBasisPoints = getMonthlyAPR();\n\n        /// pass data to VOLT Price Oracle\n        _oracleUpdateChangeRate(aprBasisPoints);\n    }\n\n    /// @notice function for chainlink oracle to be able to call in and change the rate\n    /// @param newChangeRateBasisPoints the new monthly interest rate applied to the chainlink oracle price\n    ///\n    /// function effects:\n    ///   compounds interest accumulated over period\n    ///   set new change rate in basis points for next period\n    function _oracleUpdateChangeRate(int256 newChangeRateBasisPoints) internal {\n        /// compound the interest with the current rate\n        oraclePrice = getCurrentOraclePrice();\n\n        int256 currentChangeRateBasisPoints = monthlyChangeRateBasisPoints; /// save 1 SSLOAD\n\n        /// emit even if there isn't an update\n        emit CPIMonthlyChangeRateUpdate(\n            currentChangeRateBasisPoints,\n            newChangeRateBasisPoints\n        );\n\n        /// if the oracle change rate is the same as last time, save an SSTORE\n        if (newChangeRateBasisPoints == currentChangeRateBasisPoints) {\n            return;\n        }\n\n        monthlyChangeRateBasisPoints = newChangeRateBasisPoints;\n    }\n\n    /// @notice this is the only method needed as we will be storing the most recent 2 months of data\n    /// @param newMonth the new month to store\n    function _addNewMonth(uint128 newMonth) internal {\n        previousMonth = currentMonth;\n\n        currentMonth = newMonth;\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport {CoreRef} from \"./../refs/CoreRef.sol\";\nimport {ScalingPriceOracle} from \"./../oracle/ScalingPriceOracle.sol\";\n\n/// @notice Testing contract that allows for updates without mocking chainlink calls\ncontract MockScalingPriceOracle is ScalingPriceOracle {\n    constructor(\n        address _oracle,\n        bytes32 _jobid,\n        uint256 _fee,\n        uint128 _currentMonth,\n        uint128 _previousMonth\n    )\n        ScalingPriceOracle(_oracle, _jobid, _fee, _currentMonth, _previousMonth)\n    {}\n\n    function fulfill(uint256 _cpiData) external {\n        _updateCPIData(_cpiData);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity ^0.8.4;\n\nimport {Decimal} from \"../external/Decimal.sol\";\n\n/// @notice contract that receives a chainlink price feed and then linearly interpolates that rate over\n/// a 1 month period into the VOLT price. Interest is compounded monthly when the rate is updated\n/// @author Elliot Friedman\ninterface IScalingPriceOracle {\n    /// @notice the time frame over which all changes in CPI data are applied\n    /// 28 days was chosen as that is the shortest length of a month\n    function TIMEFRAME() external view returns (uint256);\n\n    /// @notice the maximum allowable deviation in basis points for a new chainlink oracle update\n    /// only allow price changes by 20% in a month.\n    /// Any change over this threshold in either direction will be rejected\n    function MAXORACLEDEVIATION() external view returns (uint256);\n\n    /// @notice get the current scaled oracle price\n    /// applies the change smoothly over a 28 day period\n    /// scaled by 18 decimals\n    function getCurrentOraclePrice() external view returns (uint256);\n\n    /// @notice current amount that oracle price is inflating/deflating by monthly in basis points\n    function monthlyChangeRateBasisPoints() external view returns (int256);\n\n    /// @notice oracle price. starts off at 1 scaled up by 18 decimals\n    function oraclePrice() external view returns (uint256);\n\n    /// @notice event when the monthly change rate is updated\n    event CPIMonthlyChangeRateUpdate(\n        int256 oldChangeRateBasisPoints,\n        int256 newChangeRateBasisPoints\n    );\n}\n\n\n",
        "CodeNames": [
            "IOraclePassThrough.sol",
            "ScalingPriceOracle.sol",
            "MockScalingPriceOracle.sol",
            "IScalingPriceOracle.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "_updateCPIData",
                    "oraclePrice",
                    "oraclePrice = getCurrentOraclePrice()",
                    "getCurrentOraclePrice()",
                    "afterTimeInit",
                    "timeDelta",
                    "priceDelta",
                    "fulfill",
                    "startTime",
                    "requestCPIData",
                    "oraclePrice ="
                ],
                "Type": " Oracle price does not compound",
                "Description": "\nScalingPriceOracle.sol#L136(https://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L136)<br\nScalingPriceOracle.sol#L113(https://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L113)<br\n\nThe oracle does not correctly compound the monthly APRs it resets on fulfill.<br\nNote that the oraclePrice storage variable(https://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L198) is only set in _updateCPIData as part of the oracle fulfill callback.<br\nIt's set to the old price (price from 1 month ago) plus the interpolation from startTime to now.<br\nHowever, startTime is reset in requestCPIData due to the afterTimeInit modifier, and therefore when Chainlink calls fulfill in response to the CPI request, the timeDelta = block.timestamp startTime is close to zero again and oraclePrice is updated to itself again.\n\nThis breaks the core functionality of the protocol as the oracle does not track the CPI, it always resets to 1.0 after every fulfill instead of compounding it.<br\nIn addition, there should also be a way for an attacker to profit from the sudden drop of the oracle price to 1.0 again.\n\n\nAs an example, assume oraclePrice = 1.0 (1e18), monthlyAPR = 10%. The time elapsed is 14 days. Calling getCurrentOraclePrice() now would return 1.0 + 14/28 * 10% = 1.05.\n\n*   It's now the 15th of the month and one can trigger requestCPIData. This resets startTime = now.\n*   Calling getCurrentOraclePrice() now would return 1.0 again as timeDelta (and priceDelta) is zero: oraclePriceInt + priceDelta = oraclePriceInt = 1.0.\n*   When fulfill is called it sets oraclePrice = getCurrentOraclePrice() which will be close to 1.0 as the timeDelta is tiny.\n\n",
                "Repair": "\nThe oraclePrice should be updated in requestCPIData() not in fulfill.<br\nCover this scenario of multi-month accumulation in tests.\n\nElliotFriedman (Volt) commented(https://github.com/code-423n4/2022-03-volt-findings/issues/22#issuecomment-1092068671):\n  Oracle price does compound per this line of code: https://github.com/code-423n4/2022-03-volt/blob/f1210bf3151095e4d371c9e9d7682d9031860bbd/contracts/oracle/ScalingPriceOracle.sol#L197-L198\n\nElliotFriedman (Volt) confirmed and commented(https://github.com/code-423n4/2022-03-volt-findings/issues/22#issuecomment-1098397591):\n  This is the only valid critical finding we have seen so far! Great work cmichel!\n\n\n\n*\n \n\n"
            }
        ]
    }
]