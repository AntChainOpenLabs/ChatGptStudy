[
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/IBkdToken.sol\";\nimport \"../../interfaces/tokenomics/IMinter.sol\";\n\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"./BkdToken.sol\";\nimport \"../access/Authorization.sol\";\n\ncontract Minter is IMinter, Authorization, ReentrancyGuard {\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    uint256 private constant _INFLATION_DECAY_PERIOD = 365 days;\n\n    // Lp Rates\n    uint256 public immutable initialAnnualInflationRateLp;\n    uint256 public immutable annualInflationDecayLp;\n    uint256 public currentInflationAmountLp;\n\n    // Keeper Rates\n    uint256 public immutable initialPeriodKeeperInflation;\n    uint256 public immutable initialAnnualInflationRateKeeper;\n    uint256 public immutable annualInflationDecayKeeper;\n    uint256 public currentInflationAmountKeeper;\n\n    // AMM Rates\n    uint256 public immutable initialPeriodAmmInflation;\n    uint256 public immutable initialAnnualInflationRateAmm;\n    uint256 public immutable annualInflationDecayAmm;\n    uint256 public currentInflationAmountAmm;\n\n    bool public initialPeriodEnded;\n\n    // Non-inflation rates\n    uint256 public immutable nonInflationDistribution;\n    uint256 public issuedNonInflationSupply;\n\n    uint256 public lastInflationDecay;\n    uint256 public currentTotalInflation;\n\n    // Used for final safety check to ensure inflation is not exceeded\n    uint256 public totalAvailableToNow;\n    uint256 public totalMintedToNow;\n    uint256 public lastEvent;\n\n    IController public immutable controller;\n    BkdToken public token;\n\n    event TokensMinted(address beneficiary, uint256 amount);\n\n    constructor(\n        uint256 _annualInflationRateLp,\n        uint256 _annualInflationRateKeeper,\n        uint256 _annualInflationRateAmm,\n        uint256 _annualInflationDecayLp,\n        uint256 _annualInflationDecayKeeper,\n        uint256 _annualInflationDecayAmm,\n        uint256 _initialPeriodKeeperInflation,\n        uint256 _initialPeriodAmmInflation,\n        uint256 _nonInflationDistribution,\n        IController _controller\n    ) Authorization(_controller.addressProvider().getRoleManager()) {\n        require(_annualInflationDecayLp < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayKeeper < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayAmm < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        initialAnnualInflationRateLp = _annualInflationRateLp;\n        initialAnnualInflationRateKeeper = _annualInflationRateKeeper;\n        initialAnnualInflationRateAmm = _annualInflationRateAmm;\n\n        annualInflationDecayLp = _annualInflationDecayLp;\n        annualInflationDecayKeeper = _annualInflationDecayKeeper;\n        annualInflationDecayAmm = _annualInflationDecayAmm;\n\n        initialPeriodKeeperInflation = _initialPeriodKeeperInflation;\n        initialPeriodAmmInflation = _initialPeriodAmmInflation;\n\n        currentInflationAmountLp = _annualInflationRateLp / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountKeeper = _initialPeriodKeeperInflation / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountAmm = _initialPeriodAmmInflation / _INFLATION_DECAY_PERIOD;\n\n        currentTotalInflation =\n            currentInflationAmountLp +\n            currentInflationAmountKeeper +\n            currentInflationAmountAmm;\n\n        nonInflationDistribution = _nonInflationDistribution;\n        controller = _controller;\n    }\n\n    function setToken(address _token) external override onlyGovernance {\n        require(address(token) == address(0), \"Token already set!\");\n        token = BkdToken(_token);\n    }\n\n    function startInflation() external override onlyGovernance {\n        require(lastEvent == 0, \"Inflation has already started.\");\n        lastEvent = block.timestamp;\n        lastInflationDecay = block.timestamp;\n    }\n\n    /**\n     * @notice Update the inflation rate according to the piecewise linear schedule.\n     * @dev This updates the inflation rate to the next linear segment in the inflations schedule.\n     * @return `true` if successful.\n     */\n    function executeInflationRateUpdate() external override returns (bool) {\n        return _executeInflationRateUpdate();\n    }\n\n    /**\n     * @notice Mints BKD tokens to a specified address.\n     * @dev Can only be called by the controller.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mint(address beneficiary, uint256 amount)\n        external\n        override\n        nonReentrant\n        returns (bool)\n    {\n        require(msg.sender == address(controller.inflationManager()), Error.UNAUTHORIZED_ACCESS);\n        if (lastEvent == 0) return false;\n        return _mint(beneficiary, amount);\n    }\n\n    /**\n     * @notice Mint tokens that are not part of the inflation schedule.\n     * @dev The amount of tokens that can be minted in total is subject to a pre-set upper limit.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mintNonInflationTokens(address beneficiary, uint256 amount)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(\n            issuedNonInflationSupply + amount <= nonInflationDistribution,\n            \"Maximum non-inflation amount exceeded.\"\n        );\n        issuedNonInflationSupply += amount;\n        token.mint(beneficiary, amount);\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs per unit of time (seconds).\n     * @return LP inflation rate.\n     */\n    function getLpInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountLp;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for keepers per unit of time (seconds).\n     * @return keeper inflation rate.\n     */\n    function getKeeperInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountKeeper;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs on AMMs per unit of time (seconds).\n     * @return AMM inflation rate.\n     */\n    function getAmmInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountAmm;\n    }\n\n    function _executeInflationRateUpdate() internal returns (bool) {\n        totalAvailableToNow += (currentTotalInflation * (block.timestamp - lastEvent));\n        lastEvent = block.timestamp;\n        if (block.timestamp >= lastInflationDecay + _INFLATION_DECAY_PERIOD) {\n            currentInflationAmountLp = currentInflationAmountLp.scaledMul(annualInflationDecayLp);\n            if (initialPeriodEnded) {\n                currentInflationAmountKeeper = currentInflationAmountKeeper.scaledMul(\n                    annualInflationDecayKeeper\n                );\n                currentInflationAmountAmm = currentInflationAmountAmm.scaledMul(\n                    annualInflationDecayAmm\n                );\n            } else {\n                currentInflationAmountKeeper =\n                    initialAnnualInflationRateKeeper /\n                    _INFLATION_DECAY_PERIOD;\n\n                currentInflationAmountAmm = initialAnnualInflationRateAmm / _INFLATION_DECAY_PERIOD;\n                initialPeriodEnded = true;\n            }\n            currentTotalInflation =\n                currentInflationAmountLp +\n                currentInflationAmountKeeper +\n                currentInflationAmountAmm;\n            controller.inflationManager().checkpointAllGauges();\n            lastInflationDecay = block.timestamp;\n        }\n        return true;\n    }\n\n    function _mint(address beneficiary, uint256 amount) internal returns (bool) {\n        totalAvailableToNow += ((block.timestamp - lastEvent) * currentTotalInflation);\n        uint256 newTotalMintedToNow = totalMintedToNow + amount;\n        require(newTotalMintedToNow <= totalAvailableToNow, \"Mintable amount exceeded\");\n        totalMintedToNow = newTotalMintedToNow;\n        lastEvent = block.timestamp;\n        token.mint(beneficiary, amount);\n        _executeInflationRateUpdate();\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../interfaces/IGasBank.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IStakerVault.sol\";\nimport \"../interfaces/oracles/IOracleProvider.sol\";\n\nimport \"../libraries/EnumerableExtensions.sol\";\nimport \"../libraries/EnumerableMapping.sol\";\nimport \"../libraries/AddressProviderKeys.sol\";\nimport \"../libraries/AddressProviderMeta.sol\";\nimport \"../libraries/Roles.sol\";\n\nimport \"./access/AuthorizationBase.sol\";\nimport \"./utils/Preparable.sol\";\n\n// solhint-disable ordering\n\ncontract AddressProvider is IAddressProvider, AuthorizationBase, Initializable, Preparable {\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\n    using EnumerableMapping for EnumerableMapping.Bytes32ToUIntMap;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableExtensions for EnumerableSet.AddressSet;\n    using EnumerableExtensions for EnumerableSet.Bytes32Set;\n    using EnumerableExtensions for EnumerableMapping.AddressToAddressMap;\n    using EnumerableExtensions for EnumerableMapping.Bytes32ToUIntMap;\n    using AddressProviderMeta for AddressProviderMeta.Meta;\n\n    // LpToken -> stakerVault\n    EnumerableMapping.AddressToAddressMap internal _stakerVaults;\n\n    EnumerableSet.AddressSet internal _whiteListedFeeHandlers;\n\n    // value is encoded as (bool freezable, bool frozen)\n    EnumerableMapping.Bytes32ToUIntMap internal _addressKeyMetas;\n\n    EnumerableSet.AddressSet internal _actions; // list of all actions ever registered\n\n    EnumerableSet.AddressSet internal _vaults; // list of all active vaults\n\n    EnumerableMapping.AddressToAddressMap internal _tokenToPools;\n\n    constructor(address treasury) {\n        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, false);\n        _addressKeyMetas.set(AddressProviderKeys._TREASURY_KEY, meta.toUInt());\n        _setConfig(AddressProviderKeys._TREASURY_KEY, treasury);\n    }\n\n    function initialize(address roleManager) external initializer {\n        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\n        _addressKeyMetas.set(AddressProviderKeys._ROLE_MANAGER_KEY, meta.toUInt());\n        _setConfig(AddressProviderKeys._ROLE_MANAGER_KEY, roleManager);\n    }\n\n    function getKnownAddressKeys() external view override returns (bytes32[] memory) {\n        return _addressKeyMetas.keysArray();\n    }\n\n    function addFeeHandler(address feeHandler) external override onlyGovernance returns (bool) {\n        require(!_whiteListedFeeHandlers.contains(feeHandler), Error.ADDRESS_WHITELISTED);\n        _whiteListedFeeHandlers.add(feeHandler);\n        emit FeeHandlerAdded(feeHandler);\n        return true;\n    }\n\n    function removeFeeHandler(address feeHandler) external override onlyGovernance returns (bool) {\n        require(_whiteListedFeeHandlers.contains(feeHandler), Error.ADDRESS_NOT_WHITELISTED);\n        _whiteListedFeeHandlers.remove(feeHandler);\n        emit FeeHandlerRemoved(feeHandler);\n        return true;\n    }\n\n    /**\n     * @notice Adds action.\n     * @param action Address of action to add.\n     */\n    function addAction(address action) external override onlyGovernance returns (bool) {\n        bool result = _actions.add(action);\n        if (result) {\n            emit ActionListed(action);\n        }\n        return result;\n    }\n\n    /**\n     * @notice Adds pool.\n     * @param pool Address of pool to add.\n     */\n    function addPool(address pool)\n        external\n        override\n        onlyRoles2(Roles.POOL_FACTORY, Roles.GOVERNANCE)\n    {\n        require(pool != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n\n        ILiquidityPool ipool = ILiquidityPool(pool);\n        address poolToken = ipool.getLpToken();\n        require(poolToken != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        if (_tokenToPools.set(poolToken, pool)) {\n            address vault = address(ipool.getVault());\n            if (vault != address(0)) {\n                _vaults.add(vault);\n            }\n            emit PoolListed(pool);\n        }\n    }\n\n    /**\n     * @notice Delists pool.\n     * @param pool Address of pool to delist.\n     * @return `true` if successful.\n     */\n    function removePool(address pool) external override onlyRole(Roles.CONTROLLER) returns (bool) {\n        address lpToken = ILiquidityPool(pool).getLpToken();\n        bool removed = _tokenToPools.remove(lpToken);\n        if (removed) {\n            address vault = address(ILiquidityPool(pool).getVault());\n            if (vault != address(0)) {\n                _vaults.remove(vault);\n            }\n            emit PoolDelisted(pool);\n        }\n\n        return removed;\n    }\n\n    /** Vault functions  */\n\n    /**\n     * @notice returns all the registered vaults\n     */\n    function allVaults() external view override returns (address[] memory) {\n        return _vaults.toArray();\n    }\n\n    /**\n     * @notice returns the vault at the given index\n     */\n    function getVaultAtIndex(uint256 index) external view override returns (address) {\n        return _vaults.at(index);\n    }\n\n    /**\n     * @notice returns the number of vaults\n     */\n    function vaultsCount() external view override returns (uint256) {\n        return _vaults.length();\n    }\n\n    function isVault(address vault) external view override returns (bool) {\n        return _vaults.contains(vault);\n    }\n\n    function updateVault(address previousVault, address newVault)\n        external\n        override\n        onlyRole(Roles.POOL)\n    {\n        if (previousVault != address(0)) {\n            _vaults.remove(previousVault);\n        }\n        if (newVault != address(0)) {\n            _vaults.add(newVault);\n        }\n        emit VaultUpdated(previousVault, newVault);\n    }\n\n    /**\n     * @notice Returns the address for the given key\n     */\n    function getAddress(bytes32 key) public view override returns (address) {\n        require(_addressKeyMetas.contains(key), Error.ADDRESS_DOES_NOT_EXIST);\n        return currentAddresses[key];\n    }\n\n    /**\n     * @notice Returns the address for the given key\n     * @dev if `checkExists` is true, it will fail if the key does not exist\n     */\n    function getAddress(bytes32 key, bool checkExists) public view override returns (address) {\n        require(!checkExists || _addressKeyMetas.contains(key), Error.ADDRESS_DOES_NOT_EXIST);\n        return currentAddresses[key];\n    }\n\n    /**\n     * @notice returns the address metadata for the given key\n     */\n    function getAddressMeta(bytes32 key)\n        public\n        view\n        override\n        returns (AddressProviderMeta.Meta memory)\n    {\n        (bool exists, uint256 metadata) = _addressKeyMetas.tryGet(key);\n        require(exists, Error.ADDRESS_DOES_NOT_EXIST);\n        return AddressProviderMeta.fromUInt(metadata);\n    }\n\n    function initializeAddress(bytes32 key, address initialAddress) external override {\n        initializeAddress(key, initialAddress, false);\n    }\n\n    /**\n     * @notice Initializes an address\n     * @param key Key to initialize\n     * @param initialAddress Address for `key`\n     */\n    function initializeAddress(\n        bytes32 key,\n        address initialAddress,\n        bool freezable\n    ) public override onlyGovernance {\n        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(freezable, false);\n        _initializeAddress(key, initialAddress, meta);\n    }\n\n    /**\n     * @notice Initializes and freezes address\n     * @param key Key to initialize\n     * @param initialAddress Address for `key`\n     */\n    function initializeAndFreezeAddress(bytes32 key, address initialAddress)\n        external\n        override\n        onlyGovernance\n    {\n        AddressProviderMeta.Meta memory meta = AddressProviderMeta.Meta(true, true);\n        _initializeAddress(key, initialAddress, meta);\n    }\n\n    /**\n     * @notice Freezes a configuration key, making it immutable\n     * @param key Key to feeze\n     */\n    function freezeAddress(bytes32 key) external override onlyGovernance {\n        AddressProviderMeta.Meta memory meta = getAddressMeta(key);\n        require(!meta.frozen, Error.ADDRESS_FROZEN);\n        require(meta.freezable, Error.INVALID_ARGUMENT);\n        meta.frozen = true;\n        _addressKeyMetas.set(key, meta.toUInt());\n    }\n\n    /**\n     * @notice Prepare update of an address\n     * @param key Key to update\n     * @param newAddress New address for `key`\n     * @return `true` if successful.\n     */\n    function prepareAddress(bytes32 key, address newAddress)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        AddressProviderMeta.Meta memory meta = getAddressMeta(key);\n        require(!meta.frozen, Error.ADDRESS_FROZEN);\n        return _prepare(key, newAddress);\n    }\n\n    /**\n     * @notice Execute update of `key`\n     * @return New address.\n     */\n    function executeAddress(bytes32 key) external override returns (address) {\n        AddressProviderMeta.Meta memory meta = getAddressMeta(key);\n        require(!meta.frozen, Error.ADDRESS_FROZEN);\n        return _executeAddress(key);\n    }\n\n    /**\n     * @notice Reset `key`\n     * @return true if it was reset\n     */\n    function resetAddress(bytes32 key) external override onlyGovernance returns (bool) {\n        return _resetAddressConfig(key);\n    }\n\n    /**\n     * @notice Add a new staker vault.\n     * @dev This fails if the token of the staker vault is the token of an existing staker vault.\n     * @param stakerVault Vault to add.\n     * @return `true` if successful.\n     */\n    function addStakerVault(address stakerVault)\n        external\n        override\n        onlyRole(Roles.CONTROLLER)\n        returns (bool)\n    {\n        address token = IStakerVault(stakerVault).getToken();\n        require(token != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        require(!_stakerVaults.contains(token), Error.STAKER_VAULT_EXISTS);\n        _stakerVaults.set(token, stakerVault);\n        emit StakerVaultListed(stakerVault);\n        return true;\n    }\n\n    function isWhiteListedFeeHandler(address feeHandler) external view override returns (bool) {\n        return _whiteListedFeeHandlers.contains(feeHandler);\n    }\n\n    /**\n     * @notice Get the liquidity pool for a given token\n     * @dev Does not revert if the pool does not exist\n     * @param token Token for which to get the pool.\n     * @return Pool address.\n     */\n    function safeGetPoolForToken(address token) external view override returns (address) {\n        (, address poolAddress) = _tokenToPools.tryGet(token);\n        return poolAddress;\n    }\n\n    /**\n     * @notice Get the liquidity pool for a given token\n     * @dev Reverts if the pool does not exist\n     * @param token Token for which to get the pool.\n     * @return Pool address.\n     */\n    function getPoolForToken(address token) external view override returns (ILiquidityPool) {\n        (bool exists, address poolAddress) = _tokenToPools.tryGet(token);\n        require(exists, Error.ADDRESS_NOT_FOUND);\n        return ILiquidityPool(poolAddress);\n    }\n\n    /**\n     * @notice Get list of all action addresses.\n     * @return Array with action addresses.\n     */\n    function allActions() external view override returns (address[] memory) {\n        return _actions.toArray();\n    }\n\n    /**\n     * @notice Check whether an address is an action.\n     * @param action Address to check whether it is action.\n     * @return True if address is an action.\n     */\n    function isAction(address action) external view override returns (bool) {\n        return _actions.contains(action);\n    }\n\n    /**\n     * @notice Check whether an address is a pool.\n     * @param pool Address to check whether it is a pool.\n     * @return True if address is a pool.\n     */\n    function isPool(address pool) external view override returns (bool) {\n        address lpToken = ILiquidityPool(pool).getLpToken();\n        (bool exists, address poolAddress) = _tokenToPools.tryGet(lpToken);\n        return exists && pool == poolAddress;\n    }\n\n    /**\n     * @notice Get list of all pool addresses.\n     * @return Array with pool addresses.\n     */\n    function allPools() external view override returns (address[] memory) {\n        return _tokenToPools.valuesArray();\n    }\n\n    /**\n     * @notice returns the pool at the given index\n     */\n    function getPoolAtIndex(uint256 index) external view override returns (address) {\n        return _tokenToPools.valueAt(index);\n    }\n\n    /**\n     * @notice returns the number of pools\n     */\n    function poolsCount() external view override returns (uint256) {\n        return _tokenToPools.length();\n    }\n\n    /**\n     * @notice Returns all the staker vaults.\n     */\n    function allStakerVaults() external view override returns (address[] memory) {\n        return _stakerVaults.valuesArray();\n    }\n\n    /**\n     * @notice Get the staker vault for a given token\n     * @dev There can only exist one staker vault per unique token.\n     * @param token Token for which to get the vault.\n     * @return Vault address.\n     */\n    function getStakerVault(address token) external view override returns (address) {\n        return _stakerVaults.get(token);\n    }\n\n    /**\n     * @notice Tries to get the staker vault for a given token but does not throw if it does not exist\n     * @return A boolean set to true if the vault exists and the vault address.\n     */\n    function tryGetStakerVault(address token) external view override returns (bool, address) {\n        return _stakerVaults.tryGet(token);\n    }\n\n    /**\n     * @notice Check if a vault is registered (exists).\n     * @param stakerVault Address of staker vault to check.\n     * @return `true` if registered, `false` if not.\n     */\n    function isStakerVaultRegistered(address stakerVault) external view override returns (bool) {\n        address token = IStakerVault(stakerVault).getToken();\n        return isStakerVault(stakerVault, token);\n    }\n\n    function isStakerVault(address stakerVault, address token) public view override returns (bool) {\n        (bool exists, address vault) = _stakerVaults.tryGet(token);\n        return exists && vault == stakerVault;\n    }\n\n    function _roleManager() internal view override returns (IRoleManager) {\n        return IRoleManager(getAddress(AddressProviderKeys._ROLE_MANAGER_KEY));\n    }\n\n    function _initializeAddress(\n        bytes32 key,\n        address initialAddress,\n        AddressProviderMeta.Meta memory meta\n    ) internal {\n        require(!_addressKeyMetas.contains(key), Error.INVALID_ARGUMENT);\n        _addKnownAddressKey(key, meta);\n        _setConfig(key, initialAddress);\n    }\n\n    function _addKnownAddressKey(bytes32 key, AddressProviderMeta.Meta memory meta) internal {\n        require(_addressKeyMetas.set(key, meta.toUInt()), Error.INVALID_ARGUMENT);\n        emit KnownAddressKeyAdded(key);\n    }\n}\n\n\n",
        "CodeNames": [
            "Minter.sol",
            "AddressProvider.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "//solidity\n    function startInflation() external override onlyGovernance {\n        require(lastEvent == 0, \"Inflation has already started.\");\n        lastEvent = block.timestamp;\n        lastInflationDecay = block.timestamp;\n    }\n",
                    "//solidity\n    function executeInflationRateUpdate() external override returns (bool) {\n        return _executeInflationRateUpdate();\n    }\n",
                    "//solidity\n    function _executeInflationRateUpdate() internal returns (bool) {\n        totalAvailableToNow += (currentTotalInflation * (block.timestamp lastEvent));\n        lastEvent = block.timestamp;\n        if (block.timestamp = lastInflationDecay + _INFLATION_DECAY_PERIOD) {\n            currentInflationAmountLp = currentInflationAmountLp.scaledMul(annualInflationDecayLp);\n            if (initialPeriodEnded) {\n                currentInflationAmountKeeper = currentInflationAmountKeeper.scaledMul(\n                    annualInflationDecayKeeper\n                );\n                currentInflationAmountAmm = currentInflationAmountAmm.scaledMul(\n                    annualInflationDecayAmm\n                );\n            } else {\n                currentInflationAmountKeeper =\n                    initialAnnualInflationRateKeeper /\n                    _INFLATION_DECAY_PERIOD;\n\n                currentInflationAmountAmm = initialAnnualInflationRateAmm / _INFLATION_DECAY_PERIOD;\n                initialPeriodEnded = true;\n            }\n            currentTotalInflation =\n                currentInflationAmountLp +\n                currentInflationAmountKeeper +\n                currentInflationAmountAmm;\n            controller.inflationManager().checkpointAllGauges();\n            lastInflationDecay = block.timestamp;\n        }\n        return true;\n    }\n",
                    "//solidity\n    // Used for final safety check to ensure inflation is not exceeded\n    uint256 public totalAvailableToNow;\n",
                    "//solidity\n    function _mint(address beneficiary, uint256 amount) internal returns (bool) {\n        totalAvailableToNow += ((block.timestamp lastEvent) * currentTotalInflation);\n        uint256 newTotalMintedToNow = totalMintedToNow + amount;\n        require(newTotalMintedToNow <= totalAvailableToNow, \"Mintable amount exceeded\");\n        totalMintedToNow = newTotalMintedToNow;\n        lastEvent = block.timestamp;\n        token.mint(beneficiary, amount);\n        _executeInflationRateUpdate();\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n"
                ],
                "Type": "  Minter.sol#startInflation()  can be bypassed.",
                "Description": "\n<https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L104-L108\n\nsolidity\n    function startInflation() external override onlyGovernance {\n        require(lastEvent == 0, \"Inflation has already started.\");\n        lastEvent = block.timestamp;\n        lastInflationDecay = block.timestamp;\n    }\n\n\nAs lastEvent and lastInflationDecay are not initialized in the constructor(), they will remain to the default value of 0.\n\nHowever, the permissionless executeInflationRateUpdate() method does not check the value of lastEvent and lastInflationDecay and used them directly.\n\nAs a result, if executeInflationRateUpdate() is called before startInflation():\n\n1.  L190, the check of if _INFLATION_DECAY_PERIOD has passed since lastInflationDecay will be true, and initialPeriodEnded will be set to true right away;\n2.  L188, since the lastEvent in totalAvailableToNow += (currentTotalInflation * (block.timestamp lastEvent)); is 0, the totalAvailableToNow will be set to totalAvailableToNow \u2248 currentTotalInflation * 52 years, which renders the constrains of totalAvailableToNow incorrect and useless.\n\n<https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L115-L117\n\nsolidity\n    function executeInflationRateUpdate() external override returns (bool) {\n        return _executeInflationRateUpdate();\n    }\n\n\n<https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L187-L215\n\nsolidity\n    function _executeInflationRateUpdate() internal returns (bool) {\n        totalAvailableToNow += (currentTotalInflation * (block.timestamp lastEvent));\n        lastEvent = block.timestamp;\n        if (block.timestamp = lastInflationDecay + _INFLATION_DECAY_PERIOD) {\n            currentInflationAmountLp = currentInflationAmountLp.scaledMul(annualInflationDecayLp);\n            if (initialPeriodEnded) {\n                currentInflationAmountKeeper = currentInflationAmountKeeper.scaledMul(\n                    annualInflationDecayKeeper\n                );\n                currentInflationAmountAmm = currentInflationAmountAmm.scaledMul(\n                    annualInflationDecayAmm\n                );\n            } else {\n                currentInflationAmountKeeper =\n                    initialAnnualInflationRateKeeper /\n                    _INFLATION_DECAY_PERIOD;\n\n                currentInflationAmountAmm = initialAnnualInflationRateAmm / _INFLATION_DECAY_PERIOD;\n                initialPeriodEnded = true;\n            }\n            currentTotalInflation =\n                currentInflationAmountLp +\n                currentInflationAmountKeeper +\n                currentInflationAmountAmm;\n            controller.inflationManager().checkpointAllGauges();\n            lastInflationDecay = block.timestamp;\n        }\n        return true;\n    }\n\n\n<https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L50-L51\n\nsolidity\n    // Used for final safety check to ensure inflation is not exceeded\n    uint256 public totalAvailableToNow;\n\n\n<https://github.com/code-423n4/2022-05-backd/blob/2a5664d35cde5b036074edef3c1369b984d10010/protocol/contracts/tokenomics/Minter.sol#L217-L227\n\nsolidity\n    function _mint(address beneficiary, uint256 amount) internal returns (bool) {\n        totalAvailableToNow += ((block.timestamp lastEvent) * currentTotalInflation);\n        uint256 newTotalMintedToNow = totalMintedToNow + amount;\n        require(newTotalMintedToNow <= totalAvailableToNow, \"Mintable amount exceeded\");\n        totalMintedToNow = newTotalMintedToNow;\n        lastEvent = block.timestamp;\n        token.mint(beneficiary, amount);\n        _executeInflationRateUpdate();\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n\n\n",
                "Repair": "\nConsider initializing lastEvent, lastInflationDecay in constructor().\n\nor\n\nConsider adding require(lastEvent != 0 && lastInflationDecay != 0, \"...\") to executeInflationRateUpdate().\n\ndanhper (Backd) confirmed(https://github.com/code-423n4/2022-05-backd-findings/issues/99) \n\nAlex the Entreprenerd (judge) commented(https://github.com/code-423n4/2022-05-backd-findings/issues/99#issuecomment-1159582144):\n  The warden has shown how startInflation can be bypassed, breaking the Access Control as well as the Sponsor Goal for Emissions.\n \n Because of this I believe High Severity to be appropriate.\n \n The sponsor has mitigated in a subsequent PR\n\n\n\n*\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/IBkdToken.sol\";\nimport \"../../interfaces/tokenomics/IMinter.sol\";\n\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"./BkdToken.sol\";\nimport \"../access/Authorization.sol\";\n\ncontract Minter is IMinter, Authorization, ReentrancyGuard {\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    uint256 private constant _INFLATION_DECAY_PERIOD = 365 days;\n\n    // Lp Rates\n    uint256 public immutable initialAnnualInflationRateLp;\n    uint256 public immutable annualInflationDecayLp;\n    uint256 public currentInflationAmountLp;\n\n    // Keeper Rates\n    uint256 public immutable initialPeriodKeeperInflation;\n    uint256 public immutable initialAnnualInflationRateKeeper;\n    uint256 public immutable annualInflationDecayKeeper;\n    uint256 public currentInflationAmountKeeper;\n\n    // AMM Rates\n    uint256 public immutable initialPeriodAmmInflation;\n    uint256 public immutable initialAnnualInflationRateAmm;\n    uint256 public immutable annualInflationDecayAmm;\n    uint256 public currentInflationAmountAmm;\n\n    bool public initialPeriodEnded;\n\n    // Non-inflation rates\n    uint256 public immutable nonInflationDistribution;\n    uint256 public issuedNonInflationSupply;\n\n    uint256 public lastInflationDecay;\n    uint256 public currentTotalInflation;\n\n    // Used for final safety check to ensure inflation is not exceeded\n    uint256 public totalAvailableToNow;\n    uint256 public totalMintedToNow;\n    uint256 public lastEvent;\n\n    IController public immutable controller;\n    BkdToken public token;\n\n    event TokensMinted(address beneficiary, uint256 amount);\n\n    constructor(\n        uint256 _annualInflationRateLp,\n        uint256 _annualInflationRateKeeper,\n        uint256 _annualInflationRateAmm,\n        uint256 _annualInflationDecayLp,\n        uint256 _annualInflationDecayKeeper,\n        uint256 _annualInflationDecayAmm,\n        uint256 _initialPeriodKeeperInflation,\n        uint256 _initialPeriodAmmInflation,\n        uint256 _nonInflationDistribution,\n        IController _controller\n    ) Authorization(_controller.addressProvider().getRoleManager()) {\n        require(_annualInflationDecayLp < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayKeeper < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayAmm < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        initialAnnualInflationRateLp = _annualInflationRateLp;\n        initialAnnualInflationRateKeeper = _annualInflationRateKeeper;\n        initialAnnualInflationRateAmm = _annualInflationRateAmm;\n\n        annualInflationDecayLp = _annualInflationDecayLp;\n        annualInflationDecayKeeper = _annualInflationDecayKeeper;\n        annualInflationDecayAmm = _annualInflationDecayAmm;\n\n        initialPeriodKeeperInflation = _initialPeriodKeeperInflation;\n        initialPeriodAmmInflation = _initialPeriodAmmInflation;\n\n        currentInflationAmountLp = _annualInflationRateLp / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountKeeper = _initialPeriodKeeperInflation / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountAmm = _initialPeriodAmmInflation / _INFLATION_DECAY_PERIOD;\n\n        currentTotalInflation =\n            currentInflationAmountLp +\n            currentInflationAmountKeeper +\n            currentInflationAmountAmm;\n\n        nonInflationDistribution = _nonInflationDistribution;\n        controller = _controller;\n    }\n\n    function setToken(address _token) external override onlyGovernance {\n        require(address(token) == address(0), \"Token already set!\");\n        token = BkdToken(_token);\n    }\n\n    function startInflation() external override onlyGovernance {\n        require(lastEvent == 0, \"Inflation has already started.\");\n        lastEvent = block.timestamp;\n        lastInflationDecay = block.timestamp;\n    }\n\n    /**\n     * @notice Update the inflation rate according to the piecewise linear schedule.\n     * @dev This updates the inflation rate to the next linear segment in the inflations schedule.\n     * @return `true` if successful.\n     */\n    function executeInflationRateUpdate() external override returns (bool) {\n        return _executeInflationRateUpdate();\n    }\n\n    /**\n     * @notice Mints BKD tokens to a specified address.\n     * @dev Can only be called by the controller.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mint(address beneficiary, uint256 amount)\n        external\n        override\n        nonReentrant\n        returns (bool)\n    {\n        require(msg.sender == address(controller.inflationManager()), Error.UNAUTHORIZED_ACCESS);\n        if (lastEvent == 0) return false;\n        return _mint(beneficiary, amount);\n    }\n\n    /**\n     * @notice Mint tokens that are not part of the inflation schedule.\n     * @dev The amount of tokens that can be minted in total is subject to a pre-set upper limit.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mintNonInflationTokens(address beneficiary, uint256 amount)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(\n            issuedNonInflationSupply + amount <= nonInflationDistribution,\n            \"Maximum non-inflation amount exceeded.\"\n        );\n        issuedNonInflationSupply += amount;\n        token.mint(beneficiary, amount);\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs per unit of time (seconds).\n     * @return LP inflation rate.\n     */\n    function getLpInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountLp;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for keepers per unit of time (seconds).\n     * @return keeper inflation rate.\n     */\n    function getKeeperInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountKeeper;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs on AMMs per unit of time (seconds).\n     * @return AMM inflation rate.\n     */\n    function getAmmInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountAmm;\n    }\n\n    function _executeInflationRateUpdate() internal returns (bool) {\n        totalAvailableToNow += (currentTotalInflation * (block.timestamp - lastEvent));\n        lastEvent = block.timestamp;\n        if (block.timestamp >= lastInflationDecay + _INFLATION_DECAY_PERIOD) {\n            currentInflationAmountLp = currentInflationAmountLp.scaledMul(annualInflationDecayLp);\n            if (initialPeriodEnded) {\n                currentInflationAmountKeeper = currentInflationAmountKeeper.scaledMul(\n                    annualInflationDecayKeeper\n                );\n                currentInflationAmountAmm = currentInflationAmountAmm.scaledMul(\n                    annualInflationDecayAmm\n                );\n            } else {\n                currentInflationAmountKeeper =\n                    initialAnnualInflationRateKeeper /\n                    _INFLATION_DECAY_PERIOD;\n\n                currentInflationAmountAmm = initialAnnualInflationRateAmm / _INFLATION_DECAY_PERIOD;\n                initialPeriodEnded = true;\n            }\n            currentTotalInflation =\n                currentInflationAmountLp +\n                currentInflationAmountKeeper +\n                currentInflationAmountAmm;\n            controller.inflationManager().checkpointAllGauges();\n            lastInflationDecay = block.timestamp;\n        }\n        return true;\n    }\n\n    function _mint(address beneficiary, uint256 amount) internal returns (bool) {\n        totalAvailableToNow += ((block.timestamp - lastEvent) * currentTotalInflation);\n        uint256 newTotalMintedToNow = totalMintedToNow + amount;\n        require(newTotalMintedToNow <= totalAvailableToNow, \"Mintable amount exceeded\");\n        totalMintedToNow = newTotalMintedToNow;\n        lastEvent = block.timestamp;\n        token.mint(beneficiary, amount);\n        _executeInflationRateUpdate();\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "Minter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "js\ntotalAvailableToNow += (currentTotalInflation * (block.timestamp lastEvent));\n",
                    "js\ntotalAvailableToNow += (currentTotalInflation * (lastInflationDecay + _INFLATION_DECAY_PERIOD lastEvent));\n",
                    "js\ntotalAvailableToNow += (currentTotalInflation * (block.timestamp lastInflationDecay + _INFLATION_DECAY_PERIOD));\n"
                ],
                "Type": " Total Supply is not guaranteed and is not deterministic.",
                "Description": "\nThe actual total supply of the token is random and depends on when _executeInflationRateUpdate is executed.\n\n\nThe README and tokenomic documentation clearly states that \u201cThe token supply is limited to a total of 268435456 tokens.\u201d However when executing _executeInflationRateUpdate(https://github.com/code-423n4/2022-04-backd/blob/c856714a50437cb33240a5964b63687c9876275b/backd/contracts/tokenomics/Minter.sol#L181), it first uses the current inflation rate to update the total available before checking if it needs to be reduced.\n\nTherefore if no one mints or calls executeInflationRateUpdate for some time around the decay point, the inflation will be updated using the previous rate so the  totalAvailableToNow will grow too much.\n\n\nYou should do\n\njs\ntotalAvailableToNow += (currentTotalInflation * (block.timestamp lastEvent));\n\n\nOnly if the condition block.timestamp = lastInflationDecay + _INFLATION_DECAY_PERIOD is false.\n\nOtherwise you should do\n\njs\ntotalAvailableToNow += (currentTotalInflation * (lastInflationDecay + _INFLATION_DECAY_PERIOD lastEvent));\n\n\nThen update the rates, then complete with\n\njs\ntotalAvailableToNow += (currentTotalInflation * (block.timestamp lastInflationDecay + _INFLATION_DECAY_PERIOD));\n\n\nNote that as all these variables are either constants either already loaded in memory this is super cheap to do.\n\ndanhper (Backd) confirmed, but disagreed with severity and commented(https://github.com/code-423n4/2022-05-backd-findings/issues/46#issuecomment-1147565918):\n  I believe this should actually be high severity\n\nAlex the Entreprenerd (judge) increased severity to High and commented(https://github.com/code-423n4/2022-05-backd-findings/issues/46#issuecomment-1159775172):\n  The warden has identified the lack of an upper bound on the inflation math which would make it so that more than the expected supply cap of the token could be minted.\n \n The sponsor agrees that this should be of High Severity.\n \n Because this breaks the protocol stated invariant of a specific cap of 268435456 tokens, I agree with High Severity.\n\n\n\n*\n\n \n\n",
                "Repair": ""
            }
        ]
    }
]