[
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport 'hardhat/console.sol';\n\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport {FixedPointMath} from '../libraries/FixedPointMath.sol';\nimport {IDetailedERC20} from '../interfaces/IDetailedERC20.sol';\nimport {IVaultAdapter} from '../interfaces/IVaultAdapter.sol';\nimport {IVault} from '../../interfaces/IVault.sol';\n\n/// @title YaxisVaultAdapter\n///\n/// @dev A vault adapter implementation which wraps a yAxis vault.\ncontract YaxisVaultAdapter is IVaultAdapter {\n    using FixedPointMath for FixedPointMath.FixedDecimal;\n    using SafeERC20 for IDetailedERC20;\n    using SafeMath for uint256;\n\n    /// @dev The vault that the adapter is wrapping.\n    IVault public vault;\n\n    /// @dev The address which has admin control over this contract.\n    address public admin;\n\n    constructor(IVault _vault, address _admin) public {\n        vault = _vault;\n        admin = _admin;\n        updateApproval();\n    }\n\n    /// @dev A modifier which reverts if the caller is not the admin.\n    modifier onlyAdmin() {\n        require(admin == msg.sender, 'YaxisVaultAdapter: only admin');\n        _;\n    }\n\n    /// @dev Gets the token that the vault accepts.\n    ///\n    /// @return the accepted token.\n    function token() external view override returns (IDetailedERC20) {\n        return IDetailedERC20(vault.getToken());\n    }\n\n    /// @dev Gets the total value of the assets that the adapter holds in the vault.\n    ///\n    /// @return the total assets.\n    function totalValue() external view override returns (uint256) {\n        return _sharesToTokens(IDetailedERC20(vault.getLPToken()).balanceOf(address(this)));\n    }\n\n    /// @dev Deposits tokens into the vault.\n    ///\n    /// @param _amount the amount of tokens to deposit into the vault.\n    function deposit(uint256 _amount) external override {\n        vault.deposit(_amount);\n    }\n\n    /// @dev Withdraws tokens from the vault to the recipient.\n    ///\n    /// This function reverts if the caller is not the admin.\n    ///\n    /// @param _recipient the account to withdraw the tokes to.\n    /// @param _amount    the amount of tokens to withdraw.\n    function withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\n        vault.withdraw(_tokensToShares(_amount));\n        address _token = vault.getToken();\n        IDetailedERC20(_token).safeTransfer(_recipient, _amount);\n    }\n\n    /// @dev Updates the vaults approval of the token to be the maximum value.\n    function updateApproval() public {\n        address _token = vault.getToken();\n        IDetailedERC20(_token).safeApprove(address(vault), uint256(-1));\n    }\n\n    /// @dev Computes the number of tokens an amount of shares is worth.\n    ///\n    /// @param _sharesAmount the amount of shares.\n    ///\n    /// @return the number of tokens the shares are worth.\n\n    function _sharesToTokens(uint256 _sharesAmount) internal view returns (uint256) {\n        return _sharesAmount.mul(vault.getPricePerFullShare()).div(1e18);\n    }\n\n    /// @dev Computes the number of shares an amount of tokens is worth.\n    ///\n    /// @param _tokensAmount the amount of shares.\n    ///\n    /// @return the number of shares the tokens are worth.\n    function _tokensToShares(uint256 _tokensAmount) internal view returns (uint256) {\n        return _tokensAmount.mul(1e18).div(vault.getPricePerFullShare());\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\nimport {ERC20} from '@openzeppelin/contracts/token/ERC20/ERC20.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\n\nimport {IDetailedERC20} from './interfaces/IDetailedERC20.sol';\n\n/// @title AlToken\n///\n/// @dev This is the contract for the Yaxis utillity token usd.\n///\n/// Initially, the contract deployer is given both the admin and minter role. This allows them to pre-mine tokens,\n/// transfer admin to a timelock contract, and lastly, grant the staking pools the minter role. After this is done,\n/// the deployer must revoke their admin role and minter role.\ncontract AlToken is AccessControl, ERC20('Yaxis USD', 'yalUSD') {\n    using SafeERC20 for ERC20;\n\n    /// @dev The identifier of the role which maintains other roles.\n    bytes32 public constant ADMIN_ROLE = keccak256('ADMIN');\n\n    /// @dev The identifier of the role which allows accounts to mint tokens.\n    bytes32 public constant SENTINEL_ROLE = keccak256('SENTINEL');\n\n    /// @dev addresses whitelisted for minting new tokens\n    mapping(address => bool) public whiteList;\n\n    /// @dev addresses blacklisted for minting new tokens\n    mapping(address => bool) public blacklist;\n\n    /// @dev addresses paused for minting new tokens\n    mapping(address => bool) public paused;\n\n    /// @dev ceiling per address for minting new tokens\n    mapping(address => uint256) public ceiling;\n\n    /// @dev already minted amount per address to track the ceiling\n    mapping(address => uint256) public hasMinted;\n\n    event Paused(address alchemistAddress, bool isPaused);\n\n    constructor() public {\n        _setupRole(ADMIN_ROLE, msg.sender);\n        _setupRole(SENTINEL_ROLE, msg.sender);\n        _setRoleAdmin(SENTINEL_ROLE, ADMIN_ROLE);\n        _setRoleAdmin(ADMIN_ROLE, ADMIN_ROLE);\n    }\n\n    /// @dev A modifier which checks if whitelisted for minting.\n    modifier onlyWhitelisted() {\n        require(whiteList[msg.sender], 'AlUSD: Alchemist is not whitelisted');\n        _;\n    }\n\n    /// @dev Mints tokens to a recipient.\n    ///\n    /// This function reverts if the caller does not have the minter role.\n    ///\n    /// @param _recipient the account to mint tokens to.\n    /// @param _amount    the amount of tokens to mint.\n    function mint(address _recipient, uint256 _amount) external onlyWhitelisted {\n        require(!blacklist[msg.sender], 'AlUSD: Alchemist is blacklisted.');\n        uint256 _total = _amount.add(hasMinted[msg.sender]);\n        require(_total <= ceiling[msg.sender], \"AlUSD: Alchemist's ceiling was breached.\");\n        require(!paused[msg.sender], 'AlUSD: user is currently paused.');\n        hasMinted[msg.sender] = hasMinted[msg.sender].add(_amount);\n        _mint(_recipient, _amount);\n    }\n\n    /// This function reverts if the caller does not have the admin role.\n    ///\n    /// @param _toWhitelist the account to mint tokens to.\n    /// @param _state the whitelist state.\n\n    function setWhitelist(address _toWhitelist, bool _state) external onlyAdmin {\n        whiteList[_toWhitelist] = _state;\n    }\n\n    /// This function reverts if the caller does not have the admin role.\n    ///\n    /// @param _newSentinel the account to set as sentinel.\n\n    function setSentinel(address _newSentinel) external onlyAdmin {\n        _setupRole(SENTINEL_ROLE, _newSentinel);\n    }\n\n    /// This function reverts if the caller does not have the admin role.\n    ///\n    /// @param _toBlacklist the account to mint tokens to.\n    function setBlacklist(address _toBlacklist) external onlySentinel {\n        blacklist[_toBlacklist] = true;\n    }\n\n    /// This function reverts if the caller does not have the admin role.\n    function pauseAlchemist(address _toPause, bool _state) external onlySentinel {\n        paused[_toPause] = _state;\n        Paused(_toPause, _state);\n    }\n\n    /// This function reverts if the caller does not have the admin role.\n    ///\n    /// @param _toSetCeiling the account set the ceiling off.\n    /// @param _ceiling the max amount of tokens the account is allowed to mint.\n    function setCeiling(address _toSetCeiling, uint256 _ceiling) external onlyAdmin {\n        ceiling[_toSetCeiling] = _ceiling;\n    }\n\n    /// @dev A modifier which checks that the caller has the admin role.\n    modifier onlyAdmin() {\n        require(hasRole(ADMIN_ROLE, msg.sender), 'only admin');\n        _;\n    }\n    /// @dev A modifier which checks that the caller has the sentinel role.\n    modifier onlySentinel() {\n        require(hasRole(SENTINEL_ROLE, msg.sender), 'only sentinel');\n        _;\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\n            amount,\n            'ERC20: burn amount exceeds allowance'\n        );\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n\n    /**\n     * @dev lowers hasminted from the caller's allocation\n     *\n     */\n    function lowerHasMinted(uint256 amount) public onlyWhitelisted {\n        hasMinted[msg.sender] = hasMinted[msg.sender].sub(amount);\n    }\n}\n\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.6.2;\n\ninterface Aave {\n    function borrow(address _reserve, uint _amount, uint _interestRateModel, uint16 _referralCode) external;\n    function setUserUseReserveAsCollateral(address _reserve, bool _useAsCollateral) external;\n    function repay(address _reserve, uint _amount, address payable _onBehalfOf) external payable;\n    function getUserAccountData(address _user)\n        external\n        view\n        returns (\n            uint totalLiquidityETH,\n            uint totalCollateralETH,\n            uint totalBorrowsETH,\n            uint totalFeesETH,\n            uint availableBorrowsETH,\n            uint currentLiquidationThreshold,\n            uint ltv,\n            uint healthFactor\n        );\n    function getUserReserveData(address _reserve, address _user)\n        external\n        view\n        returns (\n            uint currentATokenBalance,\n            uint currentBorrowBalance,\n            uint principalBorrowBalance,\n            uint borrowRateMode,\n            uint borrowRate,\n            uint liquidityRate,\n            uint originationFee,\n            uint variableBorrowIndex,\n            uint lastUpdateTimestamp,\n            bool usageAsCollateralEnabled\n        );\n}\n\ninterface LendingPoolAddressesProvider {\n    function getLendingPool() external view returns (address);\n    function getLendingPoolCore() external view returns (address);\n    function getPriceOracle() external view returns (address);\n}\n\ninterface AaveToken {\n    function underlyingAssetAddress() external view returns (address);\n}\n\ninterface Oracle {\n    function getAssetPrice(address reserve) external view returns (uint);\n    function latestAnswer() external view returns (uint);\n}\n\n\n",
        "CodeNames": [
            "YaxisVaultAdapter.sol",
            "AlToken.sol",
            "Aave.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "//solidity\nfunction withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\n    vault.withdraw(_tokensToShares(_amount));\n    address _token = vault.getToken();\n    IDetailedERC20(_token).safeTransfer(_recipient, _amount);\n}\n",
                    "//solidity\nfunction withdraw(\n    uint256 _shares\n)\n    public\n    override\n{\n    uint256 _amount = (balance().mul(_shares)).div(IERC20(address(vaultToken)).totalSupply());\n"
                ],
                "Type": "  YaxisVaultAdapter.sol#withdraw()  will most certainly fail",
                "Description": "\nThe actual token withdrawn from vault.withdraw() will most certainly less than the _amount, due to precision loss in _tokensToShares() and vault.withdraw().\n\nAs a result, IDetailedERC20(_token).safeTransfer(_recipient, _amount) will revert due to insufficant balance.\n\nBased on the simulation we ran, it will fail 99.99% of the time unless the pps == 1e18.\n\n<https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/alchemix/adapters/YaxisVaultAdapter.sol#L68-L72\n\nsolidity\nfunction withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\n    vault.withdraw(_tokensToShares(_amount));\n    address _token = vault.getToken();\n    IDetailedERC20(_token).safeTransfer(_recipient, _amount);\n}\n\n\n<https://github.com/code-423n4/2021-11-yaxis/blob/146febcb61ae7fe20b0920849c4f4bbe111c6ba7/contracts/v3/Vault.sol#L181-L187\n\nsolidity\nfunction withdraw(\n    uint256 _shares\n)\n    public\n    override\n{\n    uint256 _amount = (balance().mul(_shares)).div(IERC20(address(vaultToken)).totalSupply());\n\n\n",
                "Repair": "\nChange to:\n\nsolidity\nfunction withdraw(address _recipient, uint256 _amount) external override onlyAdmin {\n    address _token = vault.getToken();\n    uint256 beforeBalance = IDetailedERC20(_token).balanceOf(address(this));\n    \n    vault.withdraw(_tokensToShares(_amount));\n\n    IDetailedERC20(_token).safeTransfer(\n        _recipient,\n        IDetailedERC20(_token).balanceOf(address(this)) beforeBalance\n    );\n}\n\n\nXuefeng-Zhu (yAxis) confirmed(https://github.com/code-423n4/2021-11-yaxis-findings/issues/46) \n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\n\nimport {Math} from \"@openzeppelin/contracts/math/Math.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport {SafeMath} from \"@openzeppelin/contracts/math/SafeMath.sol\";\n\nimport {FixedPointMath} from \"../FixedPointMath.sol\";\nimport {IDetailedERC20} from \"../../interfaces/IDetailedERC20.sol\";\nimport \"hardhat/console.sol\";\n\n/// @title CDP\n///\n/// @dev A library which provides the CDP data struct and associated functions.\nlibrary CDP {\n  using CDP for Data;\n  using FixedPointMath for FixedPointMath.FixedDecimal;\n  using SafeERC20 for IDetailedERC20;\n  using SafeMath for uint256;\n\n  struct Context {\n    FixedPointMath.FixedDecimal collateralizationLimit;\n    FixedPointMath.FixedDecimal accumulatedYieldWeight;\n  }\n\n  struct Data {\n    uint256 totalDeposited;\n    uint256 totalDebt;\n    uint256 totalCredit;\n    uint256 lastDeposit;\n    FixedPointMath.FixedDecimal lastAccumulatedYieldWeight;\n  }\n\n  function update(Data storage _self, Context storage _ctx) internal {\n    uint256 _earnedYield = _self.getEarnedYield(_ctx);\n    if (_earnedYield > _self.totalDebt) {\n      uint256 _currentTotalDebt = _self.totalDebt;\n      _self.totalDebt = 0;\n      _self.totalCredit = _earnedYield.sub(_currentTotalDebt);\n    } else {\n      _self.totalDebt = _self.totalDebt.sub(_earnedYield);\n    }\n    _self.lastAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\n  }\n\n  /// @dev Assures that the CDP is healthy.\n  ///\n  /// This function will revert if the CDP is unhealthy.\n  function checkHealth(Data storage _self, Context storage _ctx, string memory _msg) internal view {\n    require(_self.isHealthy(_ctx), _msg);\n  }\n\n  /// @dev Gets if the CDP is considered healthy.\n  ///\n  /// A CDP is healthy if its collateralization ratio is greater than the global collateralization limit.\n  ///\n  /// @return if the CDP is healthy.\n  function isHealthy(Data storage _self, Context storage _ctx) internal view returns (bool) {\n    return _ctx.collateralizationLimit.cmp(_self.getCollateralizationRatio(_ctx)) <= 0;\n  }\n\n  function getUpdatedTotalDebt(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n    uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\n    if (_unclaimedYield == 0) {\n      return _self.totalDebt;\n    }\n\n    uint256 _currentTotalDebt = _self.totalDebt;\n    if (_unclaimedYield >= _currentTotalDebt) {\n      return 0;\n    }\n\n    return _currentTotalDebt - _unclaimedYield;\n  }\n\n  function getUpdatedTotalCredit(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n    uint256 _unclaimedYield = _self.getEarnedYield(_ctx);\n    if (_unclaimedYield == 0) {\n      return _self.totalCredit;\n    }\n\n    uint256 _currentTotalDebt = _self.totalDebt;\n    if (_unclaimedYield <= _currentTotalDebt) {\n      return 0;\n    }\n\n    return _self.totalCredit + (_unclaimedYield - _currentTotalDebt);\n  }\n\n  /// @dev Gets the amount of yield that a CDP has earned since the last time it was updated.\n  ///\n  /// @param _self the CDP to query.\n  /// @param _ctx  the CDP context.\n  ///\n  /// @return the amount of earned yield.\n  function getEarnedYield(Data storage _self, Context storage _ctx) internal view returns (uint256) {\n    FixedPointMath.FixedDecimal memory _currentAccumulatedYieldWeight = _ctx.accumulatedYieldWeight;\n    FixedPointMath.FixedDecimal memory _lastAccumulatedYieldWeight = _self.lastAccumulatedYieldWeight;\n\n    if (_currentAccumulatedYieldWeight.cmp(_lastAccumulatedYieldWeight) == 0) {\n      return 0;\n    }\n\n    return _currentAccumulatedYieldWeight\n      .sub(_lastAccumulatedYieldWeight)\n      .mul(_self.totalDeposited)\n      .decode();\n  }\n\n  /// @dev Gets a CDPs collateralization ratio.\n  ///\n  /// The collateralization ratio is defined as the ratio of collateral to debt. If the CDP has zero debt then this\n  /// will return the maximum value of a fixed point integer.\n  ///\n  /// This function will use the updated total debt so an update before calling this function is not required.\n  ///\n  /// @param _self the CDP to query.\n  ///\n  /// @return a fixed point integer representing the collateralization ratio.\n  function getCollateralizationRatio(Data storage _self, Context storage _ctx)\n    internal view\n    returns (FixedPointMath.FixedDecimal memory)\n  {\n    uint256 _totalDebt = _self.getUpdatedTotalDebt(_ctx);\n    if (_totalDebt == 0) {\n      return FixedPointMath.maximumValue();\n    }\n    return FixedPointMath.fromU256(_self.totalDeposited).div(_totalDebt);\n  }\n}\n\n// SPDX-License-Identifier: GPL-3.0\npragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\n//import {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport {Math} from '@openzeppelin/contracts/math/Math.sol';\nimport {ReentrancyGuard} from '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport {Address} from '@openzeppelin/contracts/utils/Address.sol';\nimport {SafeERC20} from '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport {SafeMath} from '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport {CDP} from './libraries/alchemist/CDP.sol';\nimport {FixedPointMath} from './libraries/FixedPointMath.sol';\nimport {AlchemistVault} from './libraries/alchemist/AlchemistVault.sol';\nimport {ITransmuter} from './interfaces/ITransmuter.sol';\nimport {IMintableERC20} from './interfaces/IMintableERC20.sol';\nimport {ICurveToken} from './interfaces/ICurveToken.sol';\nimport {IVaultAdapter} from './interfaces/IVaultAdapter.sol';\n\nimport 'hardhat/console.sol';\n\n// ERC20,removing ERC20 from the alchemist\n//    ___    __        __                _               ___                              __         _\n//   / _ |  / / ____  / /  ___   __ _   (_) __ __       / _ \\  ____ ___   ___ ___   ___  / /_  ___  (_)\n//  / __ | / / / __/ / _ \\/ -_) /  ' \\ / /  \\ \\ /      / ___/ / __// -_) (_-</ -_) / _ \\/ __/ (_-< _\n// /_/ |_|/_/  \\__/ /_//_/\\__/ /_/_/_//_/  /_\\_\\      /_/    /_/   \\__/ /___/\\__/ /_//_/\\__/ /___/(_)\n//\n//      ___       __        ______  __    __   _______ .___  ___.  __       _______..___________.\n//     /   \\     |  |      /      ||  |  |  | |   ____||   \\/   | |  |     /       ||           |\n//    /  ^  \\    |  |     |  ,----'|  |__|  | |  |__   |  \\  /  | |  |    |   (----``---|  |----`\n//   /  /_\\  \\   |  |     |  |     |   __   | |   __|  |  |\\/|  | |  |     \\   \\        |  |\n//  /  _____  \\  |  `----.|  `----.|  |  |  | |  |____ |  |  |  | |  | .----)   |       |  |\n// /__/     \\__\\ |_______| \\______||__|  |__| |_______||__|  |__| |__| |_______/        |__|\n\ncontract Alchemist is ReentrancyGuard {\n    using CDP for CDP.Data;\n    using FixedPointMath for FixedPointMath.FixedDecimal;\n    using AlchemistVault for AlchemistVault.Data;\n    using AlchemistVault for AlchemistVault.List;\n    using SafeERC20 for IMintableERC20;\n    using SafeMath for uint256;\n    using Address for address;\n\n    address public constant ZERO_ADDRESS = address(0);\n\n    /// @dev Resolution for all fixed point numeric parameters which represent percents. The resolution allows for a\n    /// granularity of 0.01% increments.\n    uint256 public constant PERCENT_RESOLUTION = 10000;\n\n    /// @dev The minimum value that the collateralization limit can be set to by the governance. This is a safety rail\n    /// to prevent the collateralization from being set to a value which breaks the system.\n    ///\n    /// This value is equal to 100%.\n    ///\n    /// IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\n    uint256 public constant MINIMUM_COLLATERALIZATION_LIMIT = 1000000000000000000;\n\n    /// @dev The maximum value that the collateralization limit can be set to by the governance. This is a safety rail\n    /// to prevent the collateralization from being set to a value which breaks the system.\n    ///\n    /// This value is equal to 400%.\n    ///\n    /// IMPORTANT: This constant is a raw FixedPointMath.FixedDecimal value and assumes a resolution of 64 bits. If the\n    ///            resolution for the FixedPointMath library changes this constant must change as well.\n    uint256 public constant MAXIMUM_COLLATERALIZATION_LIMIT = 4000000000000000000;\n\n    event GovernanceUpdated(address governance);\n\n    event PendingGovernanceUpdated(address pendingGovernance);\n\n    event SentinelUpdated(address sentinel);\n\n    event TransmuterUpdated(address transmuter);\n\n    event RewardsUpdated(address treasury);\n\n    event HarvestFeeUpdated(uint256 fee);\n\n    event CollateralizationLimitUpdated(uint256 limit);\n\n    event EmergencyExitUpdated(bool status);\n\n    event ActiveVaultUpdated(IVaultAdapter indexed adapter);\n\n    event FundsHarvested(uint256 withdrawnAmount, uint256 decreasedValue);\n\n    event FundsRecalled(\n        uint256 indexed vaultId,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n\n    event FundsFlushed(uint256 amount);\n\n    event TokensDeposited(address indexed account, uint256 amount);\n\n    event TokensWithdrawn(\n        address indexed account,\n        uint256 requestedAmount,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n\n    event TokensRepaid(address indexed account, uint256 parentAmount, uint256 childAmount);\n\n    event TokensLiquidated(\n        address indexed account,\n        uint256 requestedAmount,\n        uint256 withdrawnAmount,\n        uint256 decreasedValue\n    );\n\n    /// @dev The token that this contract is using as the parent asset.\n    IMintableERC20 public token;\n\n    /// @dev The token that this contract is using as the child asset.\n    IMintableERC20 public xtoken;\n\n    /// @dev The address of the account which currently has administrative capabilities over this contract.\n    address public governance;\n\n    /// @dev The address of the pending governance.\n    address public pendingGovernance;\n\n    /// @dev The address of the account which can initiate an emergency withdraw of funds in a vault.\n    address public sentinel;\n\n    /// @dev The address of the contract which will transmute synthetic tokens back into native tokens.\n    address public transmuter;\n\n    /// @dev The address of the contract which will receive fees.\n    address public rewards;\n\n    /// @dev The percent of each profitable harvest that will go to the rewards contract.\n    uint256 public harvestFee;\n\n    /// @dev The percent of each profitable harvest that will go to the rewards contract.\n    uint256 public borrowFee;\n\n    /// @dev The total amount the native token deposited into the system that is owned by external users.\n    uint256 public totalDeposited;\n\n    /// @dev when movemetns are bigger than this number flush is activated.\n    uint256 public flushActivator;\n\n    /// @dev A flag indicating if the contract has been initialized yet.\n    bool public initialized;\n\n    /// @dev A flag indicating if deposits and flushes should be halted and if all parties should be able to recall\n    /// from the active vault.\n    bool public emergencyExit;\n\n    /// @dev The context shared between the CDPs.\n    CDP.Context private _ctx;\n\n    /// @dev A mapping of all of the user CDPs. If a user wishes to have multiple CDPs they will have to either\n    /// create a new address or set up a proxy contract that interfaces with this contract.\n    mapping(address => CDP.Data) private _cdps;\n\n    /// @dev A list of all of the vaults. The last element of the list is the vault that is currently being used for\n    /// deposits and withdraws. Vaults before the last element are considered inactive and are expected to be cleared.\n    AlchemistVault.List private _vaults;\n\n    /// @dev The address of the link oracle.\n    address public _linkGasOracle;\n\n    /// @dev The minimum returned amount needed to be on peg according to the oracle.\n    uint256 public pegMinimum;\n\n    constructor(\n        IMintableERC20 _token,\n        IMintableERC20 _xtoken,\n        address _governance,\n        address _sentinel\n    )\n        public\n    /*ERC20(\n      string(abi.encodePacked(\"Alchemic \", _token.name())),\n      string(abi.encodePacked(\"al\", _token.symbol()))\n    )*/\n    {\n        require(_governance != ZERO_ADDRESS, 'Alchemist: governance address cannot be 0x0.');\n        require(_sentinel != ZERO_ADDRESS, 'Alchemist: sentinel address cannot be 0x0.');\n\n        token = _token;\n        xtoken = _xtoken;\n        governance = _governance;\n        sentinel = _sentinel;\n        flushActivator = 100000 ether; // change for non 18 digit tokens\n\n        //_setupDecimals(_token.decimals());\n        uint256 COLL_LIMIT = MINIMUM_COLLATERALIZATION_LIMIT.mul(2);\n        _ctx.collateralizationLimit = FixedPointMath.FixedDecimal(COLL_LIMIT);\n        _ctx.accumulatedYieldWeight = FixedPointMath.FixedDecimal(0);\n    }\n\n    /// @dev Sets the pending governance.\n    ///\n    /// This function reverts if the new pending governance is the zero address or the caller is not the current\n    /// governance. This is to prevent the contract governance being set to the zero address which would deadlock\n    /// privileged contract functionality.\n    ///\n    /// @param _pendingGovernance the new pending governance.\n    function setPendingGovernance(address _pendingGovernance) external onlyGov {\n        require(\n            _pendingGovernance != ZERO_ADDRESS,\n            'Alchemist: governance address cannot be 0x0.'\n        );\n\n        pendingGovernance = _pendingGovernance;\n\n        emit PendingGovernanceUpdated(_pendingGovernance);\n    }\n\n    /// @dev Accepts the role as governance.\n    ///\n    /// This function reverts if the caller is not the new pending governance.\n    function acceptGovernance() external {\n        require(msg.sender == pendingGovernance, 'sender is not pendingGovernance');\n        address _pendingGovernance = pendingGovernance;\n        governance = _pendingGovernance;\n\n        emit GovernanceUpdated(_pendingGovernance);\n    }\n\n    function setSentinel(address _sentinel) external onlyGov {\n        require(_sentinel != ZERO_ADDRESS, 'Alchemist: sentinel address cannot be 0x0.');\n\n        sentinel = _sentinel;\n\n        emit SentinelUpdated(_sentinel);\n    }\n\n    /// @dev Sets the transmuter.\n    ///\n    /// This function reverts if the new transmuter is the zero address or the caller is not the current governance.\n    ///\n    /// @param _transmuter the new transmuter.\n    function setTransmuter(address _transmuter) external onlyGov {\n        // Check that the transmuter address is not the zero address. Setting the transmuter to the zero address would break\n        // transfers to the address because of `safeTransfer` checks.\n        require(_transmuter != ZERO_ADDRESS, 'Alchemist: transmuter address cannot be 0x0.');\n\n        transmuter = _transmuter;\n\n        emit TransmuterUpdated(_transmuter);\n    }\n\n    /// @dev Sets the flushActivator.\n    ///\n    /// @param _flushActivator the new flushActivator.\n    function setFlushActivator(uint256 _flushActivator) external onlyGov {\n        flushActivator = _flushActivator;\n    }\n\n    /// @dev Sets the rewards contract.\n    ///\n    /// This function reverts if the new rewards contract is the zero address or the caller is not the current governance.\n    ///\n    /// @param _rewards the new rewards contract.\n    function setRewards(address _rewards) external onlyGov {\n        // Check that the rewards address is not the zero address. Setting the rewards to the zero address would break\n        // transfers to the address because of `safeTransfer` checks.\n        require(_rewards != ZERO_ADDRESS, 'Alchemist: rewards address cannot be 0x0.');\n\n        rewards = _rewards;\n\n        emit RewardsUpdated(_rewards);\n    }\n\n    /// @dev Sets the harvest fee.\n    ///\n    /// This function reverts if the caller is not the current governance.\n    ///\n    /// @param _harvestFee the new harvest fee.\n    function setHarvestFee(uint256 _harvestFee) external onlyGov {\n        // Check that the harvest fee is within the acceptable range. Setting the harvest fee greater than 100% could\n        // potentially break internal logic when calculating the harvest fee.\n        require(_harvestFee <= PERCENT_RESOLUTION, 'Alchemist: harvest fee above maximum.');\n\n        harvestFee = _harvestFee;\n\n        emit HarvestFeeUpdated(_harvestFee);\n    }\n\n    /// @dev Sets the borrow fee.\n    ///\n    /// This function reverts if the caller is not the current governance.\n    ///\n    /// @param _borrowFee the new borrow fee.\n    function setBorrowFee(uint256 _borrowFee) external onlyGov {\n        // Check that the borrow fee is within the acceptable range. Setting the borrow fee greater than 100% could\n        // potentially break internal logic when calculating the borrow fee.\n        require(_borrowFee <= PERCENT_RESOLUTION, 'Alchemist: borrow fee above maximum.');\n\n        borrowFee = _borrowFee;\n\n        emit HarvestFeeUpdated(_borrowFee);\n    }\n\n    /// @dev Sets the collateralization limit.\n    ///\n    /// This function reverts if the caller is not the current governance or if the collateralization limit is outside\n    /// of the accepted bounds.\n    ///\n    /// @param _limit the new collateralization limit.\n    function setCollateralizationLimit(uint256 _limit) external onlyGov {\n        require(\n            _limit >= MINIMUM_COLLATERALIZATION_LIMIT,\n            'Alchemist: collateralization limit below minimum.'\n        );\n        require(\n            _limit <= MAXIMUM_COLLATERALIZATION_LIMIT,\n            'Alchemist: collateralization limit above maximum.'\n        );\n\n        _ctx.collateralizationLimit = FixedPointMath.FixedDecimal(_limit);\n\n        emit CollateralizationLimitUpdated(_limit);\n    }\n\n    /// @dev Set pegMinimum.\n    function setPegMinimum(uint256 peg) external onlyGov {\n        pegMinimum = peg;\n    }\n\n    /// @dev Sets if the contract should enter emergency exit mode.\n    ///\n    /// @param _emergencyExit if the contract should enter emergency exit mode.\n    function setEmergencyExit(bool _emergencyExit) external {\n        require(msg.sender == governance || msg.sender == sentinel, '');\n\n        emergencyExit = _emergencyExit;\n\n        emit EmergencyExitUpdated(_emergencyExit);\n    }\n\n    /// @dev Gets the collateralization limit.\n    ///\n    /// The collateralization limit is the minimum ratio of collateral to debt that is allowed by the system.\n    ///\n    /// @return the collateralization limit.\n    function collateralizationLimit()\n        external\n        view\n        returns (FixedPointMath.FixedDecimal memory)\n    {\n        return _ctx.collateralizationLimit;\n    }\n\n    /// @dev Initializes the contract.\n    ///\n    /// This function checks that the transmuter and rewards have been set and sets up the active vault.\n    ///\n    /// @param _adapter the vault adapter of the active vault.\n    function initialize(IVaultAdapter _adapter) external onlyGov {\n        require(!initialized, 'Alchemist: already initialized');\n\n        require(\n            transmuter != ZERO_ADDRESS,\n            'Alchemist: cannot initialize transmuter address to 0x0'\n        );\n        require(\n            rewards != ZERO_ADDRESS,\n            'Alchemist: cannot initialize rewards address to 0x0'\n        );\n\n        _updateActiveVault(_adapter);\n\n        initialized = true;\n    }\n\n    /// @dev Migrates the system to a new vault.\n    ///\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\n    ///\n    /// @param _adapter the adapter for the vault the system will migrate to.\n    function migrate(IVaultAdapter _adapter) external expectInitialized onlyGov {\n        _updateActiveVault(_adapter);\n    }\n\n    /// @dev Harvests yield from a vault.\n    ///\n    /// @param _vaultId the identifier of the vault to harvest from.\n    ///\n    /// @return the amount of funds that were harvested from the vault.\n    function harvest(uint256 _vaultId) external expectInitialized returns (uint256, uint256) {\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\n\n        (uint256 _harvestedAmount, uint256 _decreasedValue) = _vault.harvest(address(this));\n\n        if (_harvestedAmount > 0) {\n            uint256 _feeAmount = _harvestedAmount.mul(harvestFee).div(PERCENT_RESOLUTION);\n            uint256 _distributeAmount = _harvestedAmount.sub(_feeAmount);\n\n            FixedPointMath.FixedDecimal memory _weight = FixedPointMath\n                .fromU256(_distributeAmount)\n                .div(totalDeposited);\n            _ctx.accumulatedYieldWeight = _ctx.accumulatedYieldWeight.add(_weight);\n\n            if (_feeAmount > 0) {\n                token.safeTransfer(rewards, _feeAmount);\n            }\n\n            if (_distributeAmount > 0) {\n                _distributeToTransmuter(_distributeAmount);\n\n                // token.safeTransfer(transmuter, _distributeAmount); previous version call\n            }\n        }\n\n        emit FundsHarvested(_harvestedAmount, _decreasedValue);\n\n        return (_harvestedAmount, _decreasedValue);\n    }\n\n    /// @dev Recalls an amount of deposited funds from a vault to this contract.\n    ///\n    /// @param _vaultId the identifier of the recall funds from.\n    ///\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\n    function recall(uint256 _vaultId, uint256 _amount)\n        external\n        nonReentrant\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        return _recallFunds(_vaultId, _amount);\n    }\n\n    /// @dev Recalls all the deposited funds from a vault to this contract.\n    ///\n    /// @param _vaultId the identifier of the recall funds from.\n    ///\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\n    function recallAll(uint256 _vaultId)\n        external\n        nonReentrant\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\n        return _recallFunds(_vaultId, _vault.totalDeposited);\n    }\n\n    /// @dev Flushes buffered tokens to the active vault.\n    ///\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\n    /// additional funds.\n    ///\n    /// @return the amount of tokens flushed to the active vault.\n    function flush() external nonReentrant expectInitialized returns (uint256) {\n        // Prevent flushing to the active vault when an emergency exit is enabled to prevent potential loss of funds if\n        // the active vault is poisoned for any reason.\n        require(!emergencyExit, 'emergency pause enabled');\n\n        return flushActiveVault();\n    }\n\n    /// @dev Internal function to flush buffered tokens to the active vault.\n    ///\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\n    /// additional funds.\n    ///\n    /// @return the amount of tokens flushed to the active vault.\n    function flushActiveVault() internal returns (uint256) {\n        AlchemistVault.Data storage _activeVault = _vaults.last();\n        uint256 _depositedAmount = _activeVault.depositAll();\n\n        emit FundsFlushed(_depositedAmount);\n\n        return _depositedAmount;\n    }\n\n    /// @dev Deposits collateral into a CDP.\n    ///\n    /// This function reverts if an emergency exit is active. This is in place to prevent the potential loss of\n    /// additional funds.\n    ///\n    /// @param _amount the amount of collateral to deposit.\n    function deposit(uint256 _amount)\n        external\n        nonReentrant\n        noContractAllowed\n        expectInitialized\n    {\n        require(!emergencyExit, 'emergency pause enabled');\n\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        token.safeTransferFrom(msg.sender, address(this), _amount);\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n        totalDeposited = totalDeposited.add(_amount);\n\n        _cdp.totalDeposited = _cdp.totalDeposited.add(_amount);\n        _cdp.lastDeposit = block.number;\n\n        emit TokensDeposited(msg.sender, _amount);\n    }\n\n    /// @dev Attempts to withdraw part of a CDP's collateral.\n    ///\n    /// This function reverts if a deposit into the CDP was made in the same block. This is to prevent flash loan attacks\n    /// on other internal or external systems.\n    ///\n    /// @param _amount the amount of collateral to withdraw.\n    function withdraw(uint256 _amount)\n        external\n        nonReentrant\n        noContractAllowed\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        require(block.number > _cdp.lastDeposit, '');\n\n        _cdp.update(_ctx);\n\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(\n            msg.sender,\n            _amount\n        );\n\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(\n            _decreasedValue,\n            'Exceeds withdrawable amount'\n        );\n        _cdp.checkHealth(_ctx, 'Action blocked: unhealthy collateralization ratio');\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n        emit TokensWithdrawn(msg.sender, _amount, _withdrawnAmount, _decreasedValue);\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    /// @dev Repays debt with the native and or synthetic token.\n    ///\n    /// An approval is required to transfer native tokens to the transmuter.\n    function repay(uint256 _parentAmount, uint256 _childAmount)\n        external\n        nonReentrant\n        noContractAllowed\n        onPriceCheck\n        expectInitialized\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        if (_parentAmount > 0) {\n            token.safeTransferFrom(msg.sender, address(this), _parentAmount);\n            _distributeToTransmuter(_parentAmount);\n        }\n\n        if (_childAmount > 0) {\n            xtoken.burnFrom(msg.sender, _childAmount);\n            //lower debt cause burn\n            xtoken.lowerHasMinted(_childAmount);\n        }\n\n        uint256 _totalAmount = _parentAmount.add(_childAmount);\n        _cdp.totalDebt = _cdp.totalDebt.sub(_totalAmount, '');\n\n        emit TokensRepaid(msg.sender, _parentAmount, _childAmount);\n    }\n\n    /// @dev Attempts to liquidate part of a CDP's collateral to pay back its debt.\n    ///\n    /// @param _amount the amount of collateral to attempt to liquidate.\n    function liquidate(uint256 _amount)\n        external\n        nonReentrant\n        noContractAllowed\n        onPriceCheck\n        expectInitialized\n        returns (uint256, uint256)\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        // don't attempt to liquidate more than is possible\n        if (_amount > _cdp.totalDebt) {\n            _amount = _cdp.totalDebt;\n        }\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _withdrawFundsTo(\n            address(this),\n            _amount\n        );\n        //changed to new transmuter compatibillity\n        _distributeToTransmuter(_withdrawnAmount);\n\n        _cdp.totalDeposited = _cdp.totalDeposited.sub(_decreasedValue, '');\n        _cdp.totalDebt = _cdp.totalDebt.sub(_withdrawnAmount, '');\n        emit TokensLiquidated(msg.sender, _amount, _withdrawnAmount, _decreasedValue);\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    /// @dev Mints synthetic tokens by either claiming credit or increasing the debt.\n    ///\n    /// Claiming credit will take priority over increasing the debt.\n    ///\n    /// This function reverts if the debt is increased and the CDP health check fails.\n    ///\n    /// @param _amount the amount of alchemic tokens to borrow.\n    function mint(uint256 _amount)\n        external\n        nonReentrant\n        noContractAllowed\n        onPriceCheck\n        expectInitialized\n    {\n        CDP.Data storage _cdp = _cdps[msg.sender];\n        _cdp.update(_ctx);\n\n        uint256 _totalCredit = _cdp.totalCredit;\n\n        if (_totalCredit < _amount) {\n            uint256 _remainingAmount = _amount.sub(_totalCredit);\n\n            if (borrowFee > 0) {\n                uint256 _borrowFeeAmount = _remainingAmount.mul(borrowFee).div(\n                    PERCENT_RESOLUTION\n                );\n                _cdp.totalDebt = _cdp.totalDebt.add(_borrowFeeAmount);\n                xtoken.mint(rewards, _borrowFeeAmount);\n            }\n            _cdp.totalDebt = _cdp.totalDebt.add(_remainingAmount);\n            _cdp.totalCredit = 0;\n\n            _cdp.checkHealth(_ctx, 'Alchemist: Loan-to-value ratio breached');\n        } else {\n            _cdp.totalCredit = _totalCredit.sub(_amount);\n        }\n\n        xtoken.mint(msg.sender, _amount);\n        if (_amount >= flushActivator) {\n            flushActiveVault();\n        }\n    }\n\n    /// @dev Gets the number of vaults in the vault list.\n    ///\n    /// @return the vault count.\n    function vaultCount() external view returns (uint256) {\n        return _vaults.length();\n    }\n\n    /// @dev Get the adapter of a vault.\n    ///\n    /// @param _vaultId the identifier of the vault.\n    ///\n    /// @return the vault adapter.\n    function getVaultAdapter(uint256 _vaultId) external view returns (IVaultAdapter) {\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\n        return _vault.adapter;\n    }\n\n    /// @dev Get the total amount of the parent asset that has been deposited into a vault.\n    ///\n    /// @param _vaultId the identifier of the vault.\n    ///\n    /// @return the total amount of deposited tokens.\n    function getVaultTotalDeposited(uint256 _vaultId) external view returns (uint256) {\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\n        return _vault.totalDeposited;\n    }\n\n    /// @dev Get the total amount of collateral deposited into a CDP.\n    ///\n    /// @param _account the user account of the CDP to query.\n    ///\n    /// @return the deposited amount of tokens.\n    function getCdpTotalDeposited(address _account) external view returns (uint256) {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.totalDeposited;\n    }\n\n    /// @dev Get the total amount of alchemic tokens borrowed from a CDP.\n    ///\n    /// @param _account the user account of the CDP to query.\n    ///\n    /// @return the borrowed amount of tokens.\n    function getCdpTotalDebt(address _account) external view returns (uint256) {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.getUpdatedTotalDebt(_ctx);\n    }\n\n    /// @dev Get the total amount of credit that a CDP has.\n    ///\n    /// @param _account the user account of the CDP to query.\n    ///\n    /// @return the amount of credit.\n    function getCdpTotalCredit(address _account) external view returns (uint256) {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.getUpdatedTotalCredit(_ctx);\n    }\n\n    /// @dev Gets the last recorded block of when a user made a deposit into their CDP.\n    ///\n    /// @param _account the user account of the CDP to query.\n    ///\n    /// @return the block number of the last deposit.\n    function getCdpLastDeposit(address _account) external view returns (uint256) {\n        CDP.Data storage _cdp = _cdps[_account];\n        return _cdp.lastDeposit;\n    }\n\n    /// @dev sends tokens to the transmuter\n    ///\n    /// benefit of great nation of transmuter\n    function _distributeToTransmuter(uint256 amount) internal {\n        token.approve(transmuter, amount);\n        ITransmuter(transmuter).distribute(address(this), amount);\n        // lower debt cause of 'burn'\n        xtoken.lowerHasMinted(amount);\n    }\n\n    /// @dev Checks that parent token is on peg.\n    ///\n    /// This is used over a modifier limit of pegged interactions.\n    modifier onPriceCheck() {\n        if (pegMinimum > 0) {\n            require(\n                ICurveToken(address(token)).get_virtual_price() > pegMinimum,\n                'off peg limitation'\n            );\n        }\n        _;\n    }\n    /// @dev Checks that caller is not a eoa.\n    ///\n    /// This is used to prevent contracts from interacting.\n    modifier noContractAllowed() {\n        require(\n            !address(msg.sender).isContract() && msg.sender == tx.origin,\n            'Sorry we do not accept contract!'\n        );\n        _;\n    }\n    /// @dev Checks that the contract is in an initialized state.\n    ///\n    /// This is used over a modifier to reduce the size of the contract\n    modifier expectInitialized() {\n        require(initialized, 'Alchemist: not initialized.');\n        _;\n    }\n\n    /// @dev Checks that the current message sender or caller is a specific address.\n    ///\n    /// @param _expectedCaller the expected caller.\n    function _expectCaller(address _expectedCaller) internal {\n        require(msg.sender == _expectedCaller, '');\n    }\n\n    /// @dev Checks that the current message sender or caller is the governance address.\n    ///\n    ///\n    modifier onlyGov() {\n        require(msg.sender == governance, 'Alchemist: only governance.');\n        _;\n    }\n\n    /// @dev Updates the active vault.\n    ///\n    /// This function reverts if the vault adapter is the zero address, if the token that the vault adapter accepts\n    /// is not the token that this contract defines as the parent asset, or if the contract has not yet been initialized.\n    ///\n    /// @param _adapter the adapter for the new active vault.\n    function _updateActiveVault(IVaultAdapter _adapter) internal {\n        require(\n            _adapter != IVaultAdapter(ZERO_ADDRESS),\n            'Alchemist: active vault address cannot be 0x0.'\n        );\n        require(_adapter.token() == token, 'Alchemist: token mismatch.');\n\n        _vaults.push(AlchemistVault.Data({adapter: _adapter, totalDeposited: 0}));\n\n        emit ActiveVaultUpdated(_adapter);\n    }\n\n    /// @dev Recalls an amount of funds from a vault to this contract.\n    ///\n    /// @param _vaultId the identifier of the recall funds from.\n    /// @param _amount  the amount of funds to recall from the vault.\n    ///\n    /// @return the amount of funds that were recalled from the vault to this contract and the decreased vault value.\n    function _recallFunds(uint256 _vaultId, uint256 _amount)\n        internal\n        returns (uint256, uint256)\n    {\n        require(\n            emergencyExit || msg.sender == governance || _vaultId != _vaults.lastIndex(),\n            'Alchemist: not an emergency, not governance, and user does not have permission to recall funds from active vault'\n        );\n\n        AlchemistVault.Data storage _vault = _vaults.get(_vaultId);\n        (uint256 _withdrawnAmount, uint256 _decreasedValue) = _vault.withdraw(\n            address(this),\n            _amount\n        );\n\n        emit FundsRecalled(_vaultId, _withdrawnAmount, _decreasedValue);\n\n        return (_withdrawnAmount, _decreasedValue);\n    }\n\n    /// @dev Attempts to withdraw funds from the active vault to the recipient.\n    ///\n    /// Funds will be first withdrawn from this contracts balance and then from the active vault. This function\n    /// is different from `recallFunds` in that it reduces the total amount of deposited tokens by the decreased\n    /// value of the vault.\n    ///\n    /// @param _recipient the account to withdraw the funds to.\n    /// @param _amount    the amount of funds to withdraw.\n    function _withdrawFundsTo(address _recipient, uint256 _amount)\n        internal\n        returns (uint256, uint256)\n    {\n        // Pull the funds from the buffer.\n        uint256 _bufferedAmount = Math.min(_amount, token.balanceOf(address(this)));\n\n        if (_recipient != address(this)) {\n            token.safeTransfer(_recipient, _bufferedAmount);\n        }\n\n        uint256 _totalWithdrawn = _bufferedAmount;\n        uint256 _totalDecreasedValue = _bufferedAmount;\n\n        uint256 _remainingAmount = _amount.sub(_bufferedAmount);\n\n        // Pull the remaining funds from the active vault.\n        if (_remainingAmount > 0) {\n            AlchemistVault.Data storage _activeVault = _vaults.last();\n            (uint256 _withdrawAmount, uint256 _decreasedValue) = _activeVault.withdraw(\n                _recipient,\n                _remainingAmount\n            );\n\n            _totalWithdrawn = _totalWithdrawn.add(_withdrawAmount);\n            _totalDecreasedValue = _totalDecreasedValue.add(_decreasedValue);\n        }\n\n        totalDeposited = totalDeposited.sub(_totalDecreasedValue);\n\n        return (_totalWithdrawn, _totalDecreasedValue);\n    }\n}\n\n\n",
        "CodeNames": [
            "CDP.sol",
            "Alchemist.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "_self.totalCredit + (_unclaimedYield _currentTotalDebt);",
                    "totalCredit",
                    "getUpdatedTotalCredit",
                    "_self.totalCredit = _earnedYield.sub(_currentTotalDebt);"
                ],
                "Type": " CDP.sol update overwrites user's credit on every positive increment",
                "Description": "\n\nWithin CDP.sol (<https://github.com/code-423n4/2021-11-yaxis/blob/main/contracts/v3/alchemix/libraries/alchemist/CDP.sol) there is a function called update. This function slowly decreases the debt of a position as yield is earned, until the debt is fully paid off, and the idea is then that the credit should begin incrementing as more yield is accumulated. However, the current logic to increment the totalCredit is this line of code (line 39 of CDP.sol):\n\n_self.totalCredit = _earnedYield.sub(_currentTotalDebt);\n\nNotice that that each time update is called, this overwrites the previous totalCredit with the incremental credit accumulated. The line should instead be:\n\n_self.totalCredit = _self.totalCredit.add(_earnedYield.sub(_currentTotalDebt));\n\nIndeed, look at the function getUpdatedTotalCredit, it returns the value:\n\n_self.totalCredit + (_unclaimedYield _currentTotalDebt);\n\nSo it is obviously intended that the totalCredit should keep increasing over time instead of being overwritten on each update with a small value. The impact of this issue is large the credit of every position will always be overwritten and the correct information will be lost forever. User's credit should grow over time, but instead it is overwritten with a small value every time update is called.\n\n\nSee line 39 in CDP.sol here: <https://github.com/code-423n4/2021-11-yaxis/blob/main/contracts/v3/alchemix/libraries/alchemist/CDP.sol#:~:text=_self.totalCredit%20%3D%20_earnedYield.sub(_currentTotalDebt)%3B\n\n\nManual inspection.\n\n",
                "Repair": "\nChange code as described above to increment totalCredit instead of overwrite it.\n\nXuefeng-Zhu (yAxis) disputed(https://github.com/code-423n4/2021-11-yaxis-findings/issues/31#issuecomment-985278604):\n  If there is debt, the credit should be zero \n\n0xleastwood (judge) commented(https://github.com/code-423n4/2021-11-yaxis-findings/issues/31#issuecomment-998542307):\n  It seems like if _self.totalDebt is already zero and yield has been earned by the protocol, _self.totalCredit will be overwritten. This doesn't seem ideal, could you clarify why the issue is incorrect?\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2021-11-yaxis-findings/issues/31#issuecomment-998543262):\n  If I'm not mistaken, yield can be earned from a positive credit (net 0 debt) position.\n\nXuefeng-Zhu (yAxis) commented(https://github.com/code-423n4/2021-11-yaxis-findings/issues/31#issuecomment-999386020):\n  @0xleastwood totalCredit  is 0 if there is debt\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2021-11-yaxis-findings/issues/31#issuecomment-999923125):\n  After chatting to @Xuefeng-Zhu in Discord, he was able to confirm the issue as valid. So keeping it as is.\n\n\n\n \n\n"
            }
        ]
    }
]