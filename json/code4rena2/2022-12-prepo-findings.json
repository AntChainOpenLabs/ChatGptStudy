[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "DepositHook.sol, PrePOMarket.sol",
                "Type": "Access Control",
                "Description": "PrePO NFT holders will not be able to redeem collateral.",
                "Repair": "Add an additional check in DepositHook to NFT holders through NFTScoreRequirement. Set the RedeemHook AccountList to allow all users to redeem positions via the PrePOMarket contract once trading on the UniswapV3Pool is closed."
            },
            {
                "Location": "PrePOMarket.sol",
                "Type": "Front-running",
                "Description": "Frontrunning for unallowed minting of Short and Long tokens.",
                "Repair": "Set the _mintHook in the deployment in the PrePOMarketFactory or add a default MintHook-Contract address that will always revert until it's changed to a valid one."
            },
            {
                "Location": "Collateral.sol, DepositHook.sol, WithdrawHook.sol",
                "Type": "Free collateral token",
                "Description": "If an ERC20 token that deducts a fee on every transfer call is used as baseToken, the recipient receives free collateral token.",
                "Repair": "Calculate actual amount by recording balance before and after transfer"
            },
            {
                "Location": "TokenSender.sol, DepositHook.sol, RedeemHook.sol, WithdrawHook.sol",
                "Type": "Users not receiving owed tokens",
                "Description": "Users do not receive owed tokens if TokenSender contract cannot cover their owed amount.",
                "Repair": "Track users whose balance wasn't covered in a mapping and provide a function for them to manually claim tokens later on if the contract's balance is topped up"
            },
            {
                "Location": "WithdrawHook contract",
                "Type": "griefing / blocking / delaying users to withdraw",
                "Description": "The check for the user withdraw is wrongly implemented and can lead to an unexpected delay for a user with a position userWithdrawLimitPerPeriod.",
                "Repair": "Change the implementation to reset the amount for every user separately using a mapping"
            },
            {
                "Location": "withdraw() and managerWithdraw() functions in Collateral.sol",
                "Type": "Manager can get around min reserves check, draining all funds from Collateral.sol",
                "Description": "The manager can use this flaw to get around the reserve balance by making a large deposit, taking a manager withdrawal, and then withdrawing their deposit.",
                "Repair": "Include a check on the reserves in the withdraw() function as well as managerWithdraw()"
            },
            {
                "Location": "WithdrawHook.sol",
                "Type": "Bypassing Withdraw Limit Check",
                "Description": "A whale user is able to cause freeze of funds of other users by bypassing withdraw limit.",
                "Repair": "Add limit checks in the if blocks as well, to make sure the first request does not overflow the limit."
            },
            {
                "Location": "PrePOMarket.sol",
                "Type": "Calling setFinalLongPayout() Twice",
                "Description": "If finalLongPayout is changed twice by admin fault, the market would be insolvent as it should pay more collateral than it has.",
                "Repair": "Modify setFinalLongPayout() to prevent it from being finalized twice."
            },
            {
                "Location": "WithdrawHook.sol",
                "Type": "Bypassing userWithdrawLimitPerPeriod Check",
                "Description": "User can bypass the userWithdrawLimitPerPeriod check by transferring the balance to another account.",
                "Repair": "User should only be allowed to transfer leftover limit."
            }
        ]
    }
]