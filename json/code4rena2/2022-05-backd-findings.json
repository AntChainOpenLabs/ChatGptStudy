[
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/Errors.sol\";\n\nimport \"../../interfaces/vendor/IBooster.sol\";\nimport \"../../interfaces/vendor/IRewardStaking.sol\";\nimport \"../../interfaces/tokenomics/IAmmConvexGauge.sol\";\nimport \"./AmmGauge.sol\";\nimport \"../utils/CvxMintAmount.sol\";\n\ncontract AmmConvexGauge is IAmmConvexGauge, AmmGauge, CvxMintAmount {\n    using ScaledMath for uint256;\n    using SafeERC20 for IERC20;\n    address public immutable cvx;\n    address public immutable crv;\n    address public immutable booster;\n    address public inflationRecipient;\n\n    uint256 public immutable bkdPoolPID; // bkd pool id on Convex\n    IRewardStaking public immutable crvRewardsContract; // Staking contract for bkd convex deposit token\n\n    // Additional integrals etc. for crv and cvx rewards\n    uint256 public crvStakedIntegral;\n    uint256 public cvxStakedIntegral;\n    mapping(address => uint256) public perUserCrvStakedIntegral;\n    mapping(address => uint256) public perUserCvxStakedIntegral;\n    mapping(address => uint256) public perUserShareCrv;\n    mapping(address => uint256) public perUserShareCvx;\n\n    uint256 private _crvLastEarned;\n    uint256 private _cvxLastEarned;\n\n    event RewardClaimed(\n        address indexed beneficiary,\n        uint256 bkdAmount,\n        uint256 crvAmount,\n        uint256 cvxAmount\n    );\n\n    constructor(\n        IController _controller,\n        address _ammToken,\n        uint256 _bkdPoolPID,\n        address _crv,\n        address _cvx,\n        address _booster\n    ) AmmGauge(_controller, _ammToken) {\n        cvx = _cvx;\n        crv = _crv;\n        booster = _booster;\n        bkdPoolPID = _bkdPoolPID;\n        (, , , address _crvRewards, , ) = IBooster(booster).poolInfo(_bkdPoolPID);\n        crvRewardsContract = IRewardStaking(_crvRewards);\n\n        // approve for Convex deposit\n        IERC20(ammToken).safeApprove(booster, type(uint256).max);\n    }\n\n    function claimRewards(address beneficiary) external virtual override returns (uint256) {\n        require(\n            msg.sender == beneficiary || _roleManager().hasRole(Roles.GAUGE_ZAP, msg.sender),\n            Error.UNAUTHORIZED_ACCESS\n        );\n        _userCheckpoint(beneficiary);\n        uint256 amount = perUserShare[beneficiary];\n        uint256 crvAmount = perUserShareCrv[beneficiary];\n        uint256 cvxAmount = perUserShareCvx[beneficiary];\n        if (amount <= 0 && crvAmount <= 0 && cvxAmount <= 0) return 0;\n        perUserShare[beneficiary] = 0;\n        perUserShareCrv[beneficiary] = 0;\n        perUserShareCvx[beneficiary] = 0;\n        _crvLastEarned -= crvAmount;\n        _cvxLastEarned -= cvxAmount;\n        IController(controller).inflationManager().mintRewards(beneficiary, amount);\n        IERC20(crv).safeTransfer(beneficiary, crvAmount);\n        IERC20(cvx).safeTransfer(beneficiary, cvxAmount);\n        emit RewardClaimed(beneficiary, amount, crvAmount, cvxAmount);\n        return amount;\n    }\n\n    function setInflationRecipient(address recipient) external override onlyGovernance {\n        require(inflationRecipient == address(0), Error.ADDRESS_ALREADY_SET);\n        poolCheckpoint();\n        inflationRecipient = recipient;\n    }\n\n    function deactivateInflationRecipient() external override onlyGovernance {\n        require(inflationRecipient != address(0), Error.ADDRESS_NOT_FOUND);\n        poolCheckpoint();\n        inflationRecipient = address(0);\n    }\n\n    function claimableRewards(address user) external view virtual override returns (uint256) {\n        uint256 ammStakedIntegral_ = ammStakedIntegral;\n        uint256 timeElapsed = block.timestamp - uint256(ammLastUpdated);\n        if (user == inflationRecipient) {\n            return\n                perUserShare[inflationRecipient] +\n                IController(controller).inflationManager().getAmmRateForToken(ammToken) *\n                timeElapsed;\n        }\n        if (!killed && totalStaked > 0) {\n            ammStakedIntegral_ +=\n                IController(controller).inflationManager().getAmmRateForToken(ammToken) *\n                timeElapsed.scaledDiv(totalStaked);\n        }\n        return\n            perUserShare[user] +\n            balances[user].scaledMul(ammStakedIntegral_ - perUserStakedIntegral[user]);\n    }\n\n    function allClaimableRewards(address user) external view override returns (uint256[3] memory) {\n        uint256 ammStakedIntegral_ = ammStakedIntegral;\n        uint256 crvStakedIntegral_ = crvStakedIntegral;\n        uint256 cvxStakedIntegral_ = cvxStakedIntegral;\n        uint256 timeElapsed = block.timestamp - uint256(ammLastUpdated);\n\n        // This might lead to some inaccuracies in between poolCheckpoints if someone sends CRV\n        uint256 crvEarned = IERC20(crv).balanceOf(address(this)) +\n            crvRewardsContract.earned(address(this)) -\n            _crvLastEarned;\n        uint256 cvxEarned = getCvxMintAmount(crvEarned);\n\n        if (!killed && totalStaked > 0) {\n            if (inflationRecipient == address(0)) {\n                ammStakedIntegral_ +=\n                    (IController(controller).inflationManager().getAmmRateForToken(ammToken)) *\n                    (timeElapsed).scaledDiv(totalStaked);\n            }\n            crvStakedIntegral_ += (crvEarned).scaledDiv(totalStaked);\n            cvxStakedIntegral_ += (cvxEarned).scaledDiv(totalStaked);\n        }\n        uint256 bkdRewards;\n        if (user == inflationRecipient) {\n            bkdRewards =\n                perUserShare[user] +\n                IController(controller).inflationManager().getAmmRateForToken(ammToken) *\n                timeElapsed;\n        } else {\n            bkdRewards =\n                perUserShare[user] +\n                balances[user].scaledMul(ammStakedIntegral_ - perUserStakedIntegral[user]);\n        }\n        uint256 crvRewards = perUserShareCrv[user] +\n            balances[user].scaledMul(crvStakedIntegral_ - perUserCrvStakedIntegral[user]);\n        uint256 cvxRewards = perUserShareCvx[user] +\n            balances[user].scaledMul(cvxStakedIntegral_ - perUserCvxStakedIntegral[user]);\n        uint256[3] memory allRewards = [bkdRewards, crvRewards, cvxRewards];\n        return allRewards;\n    }\n\n    function stakeFor(address account, uint256 amount) public virtual override returns (bool) {\n        require(amount > 0, Error.INVALID_AMOUNT);\n\n        _userCheckpoint(account);\n\n        IERC20(ammToken).safeTransferFrom(msg.sender, address(this), amount);\n        IBooster(booster).deposit(bkdPoolPID, amount, true);\n        balances[account] += amount;\n        totalStaked += amount;\n        emit AmmStaked(account, ammToken, amount);\n        return true;\n    }\n\n    function unstakeFor(address dst, uint256 amount) public virtual override returns (bool) {\n        require(amount > 0, Error.INVALID_AMOUNT);\n        require(balances[msg.sender] >= amount, Error.INSUFFICIENT_BALANCE);\n\n        _userCheckpoint(msg.sender);\n\n        crvRewardsContract.withdrawAndUnwrap(amount, false);\n        IERC20(ammToken).safeTransfer(dst, amount);\n        balances[msg.sender] -= amount;\n        totalStaked -= amount;\n        emit AmmUnstaked(msg.sender, ammToken, amount);\n        return true;\n    }\n\n    function poolCheckpoint() public virtual override returns (bool) {\n        if (killed) {\n            return false;\n        }\n        uint256 timeElapsed = block.timestamp - uint256(ammLastUpdated);\n        uint256 currentRate = IController(controller).inflationManager().getAmmRateForToken(\n            ammToken\n        );\n        crvRewardsContract.getReward();\n        uint256 crvEarned = IERC20(crv).balanceOf(address(this));\n        uint256 cvxEarned = IERC20(cvx).balanceOf(address(this));\n\n        // Update the integral of total token supply for the pool\n        if (totalStaked > 0) {\n            if (inflationRecipient == address(0)) {\n                ammStakedIntegral += (currentRate * timeElapsed).scaledDiv(totalStaked);\n            } else {\n                perUserShare[inflationRecipient] += currentRate * timeElapsed;\n            }\n            crvStakedIntegral += (crvEarned - _crvLastEarned).scaledDiv(totalStaked);\n            cvxStakedIntegral += (cvxEarned - _cvxLastEarned).scaledDiv(totalStaked);\n        }\n        _crvLastEarned = crvEarned;\n        _cvxLastEarned = cvxEarned;\n        ammLastUpdated = uint48(block.timestamp);\n        return true;\n    }\n\n    function _userCheckpoint(address user) internal virtual override returns (bool) {\n        poolCheckpoint();\n        perUserShare[user] += balances[user].scaledMul(\n            ammStakedIntegral - perUserStakedIntegral[user]\n        );\n        perUserShareCrv[user] += balances[user].scaledMul(\n            crvStakedIntegral - perUserCrvStakedIntegral[user]\n        );\n        perUserShareCvx[user] += balances[user].scaledMul(\n            cvxStakedIntegral - perUserCvxStakedIntegral[user]\n        );\n        perUserStakedIntegral[user] = ammStakedIntegral;\n        perUserCrvStakedIntegral[user] = crvStakedIntegral;\n        perUserCvxStakedIntegral[user] = cvxStakedIntegral;\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "AmmConvexGauge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "AmmConvexGauge.sol",
                "Type": "Incorrect implementation",
                "Description": "Inconsistency in view functions can lead to users believing they\u2019re due for more BKD rewards.",
                "Repair": "Add if statement to claimableRewards() function"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/IAmmGauge.sol\";\n\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"../access/Authorization.sol\";\n\ncontract AmmGauge is Authorization, IAmmGauge {\n    using AddressProviderHelpers for IAddressProvider;\n    using ScaledMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IController public immutable controller;\n\n    mapping(address => uint256) public balances;\n\n    // All the data fields required for the staking tracking\n    uint256 public ammStakedIntegral;\n    uint256 public totalStaked;\n    mapping(address => uint256) public perUserStakedIntegral;\n    mapping(address => uint256) public perUserShare;\n\n    address public immutable ammToken;\n    bool public killed;\n    uint48 public ammLastUpdated;\n\n    event RewardClaimed(address indexed account, uint256 amount);\n\n    constructor(IController _controller, address _ammToken)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        ammToken = _ammToken;\n        controller = _controller;\n        ammLastUpdated = uint48(block.timestamp);\n    }\n\n    /**\n     * @notice Shut down the gauge.\n     * @dev Accrued inflation can still be claimed from the gauge after shutdown.\n     * @return `true` if successful.\n     */\n    function kill() external override returns (bool) {\n        require(msg.sender == address(controller.inflationManager()), Error.UNAUTHORIZED_ACCESS);\n        poolCheckpoint();\n        killed = true;\n        return true;\n    }\n\n    function claimRewards(address beneficiary) external virtual override returns (uint256) {\n        require(\n            msg.sender == beneficiary || _roleManager().hasRole(Roles.GAUGE_ZAP, msg.sender),\n            Error.UNAUTHORIZED_ACCESS\n        );\n        _userCheckpoint(beneficiary);\n        uint256 amount = perUserShare[beneficiary];\n        if (amount <= 0) return 0;\n        perUserShare[beneficiary] = 0;\n        controller.inflationManager().mintRewards(beneficiary, amount);\n        emit RewardClaimed(beneficiary, amount);\n        return amount;\n    }\n\n    function stake(uint256 amount) external virtual override returns (bool) {\n        return stakeFor(msg.sender, amount);\n    }\n\n    function unstake(uint256 amount) external virtual override returns (bool) {\n        return unstakeFor(msg.sender, amount);\n    }\n\n    function getAmmToken() external view override returns (address) {\n        return ammToken;\n    }\n\n    function isAmmToken(address token) external view override returns (bool) {\n        return token == ammToken;\n    }\n\n    function claimableRewards(address user) external view virtual override returns (uint256) {\n        uint256 ammStakedIntegral_ = ammStakedIntegral;\n        if (!killed && totalStaked > 0) {\n            ammStakedIntegral_ += (controller.inflationManager().getAmmRateForToken(ammToken) *\n                (block.timestamp - uint256(ammLastUpdated))).scaledDiv(totalStaked);\n        }\n        return\n            perUserShare[user] +\n            balances[user].scaledMul(ammStakedIntegral_ - perUserStakedIntegral[user]);\n    }\n\n    /**\n     * @notice Stake amount of AMM token on behalf of another account.\n     * @param account Account for which tokens will be staked.\n     * @param amount Amount of token to stake.\n     * @return `true` if success.\n     */\n    function stakeFor(address account, uint256 amount) public virtual override returns (bool) {\n        require(amount > 0, Error.INVALID_AMOUNT);\n\n        _userCheckpoint(account);\n\n        uint256 oldBal = IERC20(ammToken).balanceOf(address(this));\n        IERC20(ammToken).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 newBal = IERC20(ammToken).balanceOf(address(this));\n        uint256 staked = newBal - oldBal;\n        balances[account] += staked;\n        totalStaked += staked;\n        emit AmmStaked(account, ammToken, amount);\n        return true;\n    }\n\n    /**\n     * @notice Unstake amount of AMM token and send to another account.\n     * @param dst Account to which unstaked AMM tokens will be sent.\n     * @param amount Amount of token to unstake.\n     * @return `true` if success.\n     */\n    function unstakeFor(address dst, uint256 amount) public virtual override returns (bool) {\n        require(amount > 0, Error.INVALID_AMOUNT);\n        require(balances[msg.sender] >= amount, Error.INSUFFICIENT_BALANCE);\n\n        _userCheckpoint(msg.sender);\n\n        uint256 oldBal = IERC20(ammToken).balanceOf(address(this));\n        IERC20(ammToken).safeTransfer(dst, amount);\n        uint256 newBal = IERC20(ammToken).balanceOf(address(this));\n        uint256 unstaked = oldBal - newBal;\n        balances[msg.sender] -= unstaked;\n        totalStaked -= unstaked;\n        emit AmmUnstaked(msg.sender, ammToken, amount);\n        return true;\n    }\n\n    function poolCheckpoint() public virtual override returns (bool) {\n        if (killed) {\n            return false;\n        }\n        uint256 currentRate = controller.inflationManager().getAmmRateForToken(ammToken);\n        // Update the integral of total token supply for the pool\n        uint256 timeElapsed = block.timestamp - uint256(ammLastUpdated);\n        if (totalStaked > 0) {\n            ammStakedIntegral += (currentRate * timeElapsed).scaledDiv(totalStaked);\n        }\n        ammLastUpdated = uint48(block.timestamp);\n        return true;\n    }\n\n    function _userCheckpoint(address user) internal virtual returns (bool) {\n        poolCheckpoint();\n        perUserShare[user] += balances[user].scaledMul(\n            ammStakedIntegral - perUserStakedIntegral[user]\n        );\n        perUserStakedIntegral[user] = ammStakedIntegral;\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "AmmGauge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "AmmGauge.sol",
                "Type": "Control flow attack",
                "Description": "The first AMM Staker will have control over how the shares are calculated.",
                "Repair": "Require non-zero totalStaked before updating shares"
            },
            {
                "Location": "AmmGauge.sol",
                "Type": "Reward calculation",
                "Description": "The first staker within the AmmGauge may not get the rewards if the pool is not checkpointed right after he stakes and before he wants to claim the rewards.",
                "Repair": "Call externally _poolCheckpoint() between the first staker's stake call and the next staker's stake call"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/ScaledMath.sol\";\nimport \"../libraries/Errors.sol\";\nimport \"../libraries/EnumerableExtensions.sol\";\nimport \"../libraries/UncheckedMath.sol\";\nimport \"../interfaces/IBkdLocker.sol\";\nimport \"../interfaces/tokenomics/IMigrationContract.sol\";\nimport \"./utils/Preparable.sol\";\nimport \"./access/Authorization.sol\";\n\ncontract BkdLocker is IBkdLocker, Authorization, Preparable {\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n    using SafeERC20 for IERC20;\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\n    using EnumerableExtensions for EnumerableMapping.AddressToUintMap;\n\n    bytes32 internal constant _START_BOOST = \"startBoost\";\n    bytes32 internal constant _MAX_BOOST = \"maxBoost\";\n    bytes32 internal constant _INCREASE_PERIOD = \"increasePeriod\";\n    bytes32 internal constant _WITHDRAW_DELAY = \"withdrawDelay\";\n\n    // User-specific data\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public boostFactors;\n    mapping(address => uint256) public lastUpdated;\n    mapping(address => WithdrawStash[]) public stashedGovTokens;\n    mapping(address => uint256) public totalStashed;\n\n    // Global data\n    uint256 public totalLocked;\n    uint256 public totalLockedBoosted;\n    uint256 public lastMigrationEvent;\n    EnumerableMapping.AddressToUintMap private _replacedRewardTokens;\n\n    // Reward token data\n    mapping(address => RewardTokenData) public rewardTokenData;\n    address public override rewardToken;\n    IERC20 public immutable govToken;\n\n    constructor(\n        address _rewardToken,\n        address _govToken,\n        IRoleManager roleManager\n    ) Authorization(roleManager) {\n        rewardToken = _rewardToken;\n        govToken = IERC20(_govToken);\n    }\n\n    function initialize(\n        uint256 startBoost,\n        uint256 maxBoost,\n        uint256 increasePeriod,\n        uint256 withdrawDelay\n    ) external override onlyGovernance {\n        require(currentUInts256[_START_BOOST] == 0, Error.CONTRACT_INITIALIZED);\n        _setConfig(_START_BOOST, startBoost);\n        _setConfig(_MAX_BOOST, maxBoost);\n        _setConfig(_INCREASE_PERIOD, increasePeriod);\n        _setConfig(_WITHDRAW_DELAY, withdrawDelay);\n    }\n\n    /**\n     * @notice Sets a new token to be the rewardToken. Fees are then accumulated in this token.\n     * @dev Previously used rewardTokens can be set again here.\n     */\n    function migrate(address newRewardToken) external override onlyGovernance {\n        _replacedRewardTokens.remove(newRewardToken);\n        _replacedRewardTokens.set(rewardToken, block.timestamp);\n        lastMigrationEvent = block.timestamp;\n        rewardToken = newRewardToken;\n    }\n\n    /**\n     * @notice Lock gov. tokens.\n     * @dev The amount needs to be approved in advance.\n     */\n    function lock(uint256 amount) external override {\n        return lockFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Deposit fees (in the rewardToken) to be distributed to lockers of gov. tokens.\n     * @dev `deposit` or `depositFor` needs to be called at least once before this function can be called\n     * @param amount Amount of rewardToken to deposit.\n     */\n    function depositFees(uint256 amount) external override {\n        require(amount > 0, Error.INVALID_AMOUNT);\n        require(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS);\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n\n        RewardTokenData storage curRewardTokenData = rewardTokenData[rewardToken];\n\n        curRewardTokenData.feeIntegral += amount.scaledDiv(totalLockedBoosted);\n        curRewardTokenData.feeBalance += amount;\n        emit FeesDeposited(amount);\n    }\n\n    function claimFees() external override {\n        claimFees(rewardToken);\n    }\n\n    /**\n     * @notice Checkpoint function to update user data, in particular the boost factor.\n     */\n    function userCheckpoint(address user) external override {\n        _userCheckpoint(user, 0, balances[user]);\n    }\n\n    /**\n     * @notice Prepare unlocking of locked gov. tokens.\n     * @dev A delay is enforced and unlocking can only be executed after that.\n     * @param amount Amount of gov. tokens to prepare for unlocking.\n     */\n    function prepareUnlock(uint256 amount) external override {\n        require(\n            totalStashed[msg.sender] + amount <= balances[msg.sender],\n            \"Amount exceeds locked balance\"\n        );\n        totalStashed[msg.sender] += amount;\n        stashedGovTokens[msg.sender].push(\n            WithdrawStash(block.timestamp + currentUInts256[_WITHDRAW_DELAY], amount)\n        );\n        emit WithdrawPrepared(msg.sender, amount);\n    }\n\n    /**\n     * @notice Execute all prepared gov. token withdrawals.\n     */\n    function executeUnlocks() external override {\n        uint256 totalAvailableToWithdraw;\n        WithdrawStash[] storage stashedWithdraws = stashedGovTokens[msg.sender];\n        uint256 length = stashedWithdraws.length;\n        require(length > 0, \"No entries\");\n        uint256 i = length;\n        while (i > 0) {\n            i = i - 1;\n            if (stashedWithdraws[i].releaseTime <= block.timestamp) {\n                totalAvailableToWithdraw += stashedWithdraws[i].amount;\n\n                stashedWithdraws[i] = stashedWithdraws[stashedWithdraws.length - 1];\n\n                stashedWithdraws.pop();\n            }\n        }\n        totalStashed[msg.sender] -= totalAvailableToWithdraw;\n        uint256 newTotal = balances[msg.sender] - totalAvailableToWithdraw;\n        _userCheckpoint(msg.sender, 0, newTotal);\n        totalLocked -= totalAvailableToWithdraw;\n        govToken.safeTransfer(msg.sender, totalAvailableToWithdraw);\n        emit WithdrawExecuted(msg.sender, totalAvailableToWithdraw);\n    }\n\n    function getUserShare(address user) external view override returns (uint256) {\n        return getUserShare(user, rewardToken);\n    }\n\n    /**\n     * @notice Get the boosted locked balance for a user.\n     * @dev This includes the gov. tokens queued for withdrawal.\n     * @param user Address to get the boosted balance for.\n     * @return boosted balance for user.\n     */\n    function boostedBalance(address user) external view override returns (uint256) {\n        return balances[user].scaledMul(boostFactors[user]);\n    }\n\n    /**\n     * @notice Get the vote weight for a user.\n     * @dev This does not invlude the gov. tokens queued for withdrawal.\n     * @param user Address to get the vote weight for.\n     * @return vote weight for user.\n     */\n    function balanceOf(address user) external view override returns (uint256) {\n        return (balances[user] - totalStashed[user]).scaledMul(boostFactors[user]);\n    }\n\n    /**\n     * @notice Get the share of the total boosted locked balance for a user.\n     * @dev This includes the gov. tokens queued for withdrawal.\n     * @param user Address to get the share of the total boosted balance for.\n     * @return share of the total boosted balance for user.\n     */\n    function getShareOfTotalBoostedBalance(address user) external view override returns (uint256) {\n        return balances[user].scaledMul(boostFactors[user]).scaledDiv(totalLockedBoosted);\n    }\n\n    function getStashedGovTokens(address user)\n        external\n        view\n        override\n        returns (WithdrawStash[] memory)\n    {\n        return stashedGovTokens[user];\n    }\n\n    function claimableFees(address user) external view override returns (uint256) {\n        return claimableFees(user, rewardToken);\n    }\n\n    /**\n     * @notice Claim fees accumulated in the Locker.\n     */\n    function claimFees(address _rewardToken) public override {\n        require(\n            _rewardToken == rewardToken || _replacedRewardTokens.contains(_rewardToken),\n            Error.INVALID_ARGUMENT\n        );\n        _userCheckpoint(msg.sender, 0, balances[msg.sender]);\n        RewardTokenData storage curRewardTokenData = rewardTokenData[_rewardToken];\n        uint256 claimable = curRewardTokenData.userShares[msg.sender];\n        curRewardTokenData.userShares[msg.sender] = 0;\n        curRewardTokenData.feeBalance -= claimable;\n        IERC20(_rewardToken).safeTransfer(msg.sender, claimable);\n        emit RewardsClaimed(msg.sender, _rewardToken, claimable);\n    }\n\n    /**\n     * @notice Lock gov. tokens on behalf of another user.\n     * @dev The amount needs to be approved in advance.\n     * @param user Address of user to lock on behalf of.\n     * @param amount Amount of gov. tokens to lock.\n     */\n    function lockFor(address user, uint256 amount) public override {\n        govToken.safeTransferFrom(msg.sender, address(this), amount);\n        _userCheckpoint(user, amount, balances[user] + amount);\n        totalLocked += amount;\n        emit Locked(user, amount);\n    }\n\n    function getUserShare(address user, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return rewardTokenData[_rewardToken].userShares[user];\n    }\n\n    function claimableFees(address user, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 currentShare;\n        uint256 userBalance = balances[user];\n        RewardTokenData storage curRewardTokenData = rewardTokenData[_rewardToken];\n\n        // Compute the share earned by the user since they last updated\n        if (userBalance > 0) {\n            currentShare += (curRewardTokenData.feeIntegral -\n                curRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                    userBalance.scaledMul(boostFactors[user])\n                );\n        }\n        return curRewardTokenData.userShares[user] + currentShare;\n    }\n\n    function computeNewBoost(\n        address user,\n        uint256 amountAdded,\n        uint256 newTotal\n    ) public view override returns (uint256) {\n        uint256 newBoost;\n        uint256 balance = balances[user];\n        uint256 startBoost = currentUInts256[_START_BOOST];\n        if (balance == 0 || newTotal == 0) {\n            newBoost = startBoost;\n        } else {\n            uint256 maxBoost = currentUInts256[_MAX_BOOST];\n            newBoost = boostFactors[user];\n            newBoost += (block.timestamp - lastUpdated[user])\n                .scaledDiv(currentUInts256[_INCREASE_PERIOD])\n                .scaledMul(maxBoost - startBoost);\n            if (newBoost > maxBoost) {\n                newBoost = maxBoost;\n            }\n            if (newTotal <= balance) {\n                return newBoost;\n            }\n            newBoost =\n                newBoost.scaledMul(balance.scaledDiv(newTotal)) +\n                startBoost.scaledMul(amountAdded.scaledDiv(newTotal));\n        }\n        return newBoost;\n    }\n\n    function _userCheckpoint(\n        address user,\n        uint256 amountAdded,\n        uint256 newTotal\n    ) internal {\n        RewardTokenData storage curRewardTokenData = rewardTokenData[rewardToken];\n\n        // Compute the share earned by the user since they last updated\n        uint256 userBalance = balances[user];\n        if (userBalance > 0) {\n            curRewardTokenData.userShares[user] += (curRewardTokenData.feeIntegral -\n                curRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                    userBalance.scaledMul(boostFactors[user])\n                );\n\n            // Update values for previous rewardTokens\n            if (lastUpdated[user] < lastMigrationEvent) {\n                uint256 length = _replacedRewardTokens.length();\n                for (uint256 i; i < length; i = i.uncheckedInc()) {\n                    (address token, uint256 replacedAt) = _replacedRewardTokens.at(i);\n                    if (lastUpdated[user] < replacedAt) {\n                        RewardTokenData storage prevRewardTokenData = rewardTokenData[token];\n                        prevRewardTokenData.userShares[user] += (prevRewardTokenData.feeIntegral -\n                            prevRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                                userBalance.scaledMul(boostFactors[user])\n                            );\n                        prevRewardTokenData.userFeeIntegrals[user] = prevRewardTokenData\n                            .feeIntegral;\n                    }\n                }\n            }\n        }\n\n        uint256 newBoost = computeNewBoost(user, amountAdded, newTotal);\n        totalLockedBoosted =\n            totalLockedBoosted +\n            newTotal.scaledMul(newBoost) -\n            balances[user].scaledMul(boostFactors[user]);\n\n        // Update user values\n        curRewardTokenData.userFeeIntegrals[user] = curRewardTokenData.feeIntegral;\n        lastUpdated[user] = block.timestamp;\n        boostFactors[user] = newBoost;\n        balances[user] = newTotal;\n    }\n}\n\n\n",
        "CodeNames": [
            "BkdLocker.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "BkdLocker.sol",
                "Type": "Double counting",
                "Description": "Users can claim more fees than expected if governance migrates current rewardToken again by fault.",
                "Repair": "Add require statement to migrate() function"
            },
            {
                "Location": "depositFees() function in BkdLocker.sol",
                "Type": "Front-running attack on depositFees() function",
                "Description": "Every time the BkdLocker#depositFees() gets called, there will be a surge of rewards per locked token for the existing stakeholders.",
                "Repair": "Switch the reward to a rewardRate-based gradual release model or force the rewards to linearly vest to prevent the front-run from being effective"
            },
            {
                "Location": "initialize() function in BkdLocker.sol",
                "Type": "Multiple initialization of contract BkdLocker",
                "Description": "If initialize() is called by startBoost=0 then it's possible to call it again with different values for other parameters.",
                "Repair": "Add some other variable to check the status of initialization of contract or verify that startBoost is greater than 0 to ensure that the exploit is not applicable"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"../../interfaces/IStakerVault.sol\";\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/ILpGauge.sol\";\nimport \"../../interfaces/tokenomics/IRewardsGauge.sol\";\n\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"../access/Authorization.sol\";\n\ncontract LpGauge is ILpGauge, IRewardsGauge, Authorization {\n    using AddressProviderHelpers for IAddressProvider;\n    using ScaledMath for uint256;\n\n    IController public immutable controller;\n    IStakerVault public immutable stakerVault;\n    IInflationManager public immutable inflationManager;\n\n    uint256 public poolStakedIntegral;\n    uint256 public poolLastUpdate;\n    mapping(address => uint256) public perUserStakedIntegral;\n    mapping(address => uint256) public perUserShare;\n\n    constructor(IController _controller, address _stakerVault)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        require(_stakerVault != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        controller = IController(_controller);\n        stakerVault = IStakerVault(_stakerVault);\n        IInflationManager _inflationManager = IController(_controller).inflationManager();\n        require(address(_inflationManager) != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        inflationManager = _inflationManager;\n    }\n\n    /**\n     * @notice Checkpoint function for the pool statistics.\n     * @return `true` if successful.\n     */\n    function poolCheckpoint() external override returns (bool) {\n        return _poolCheckpoint();\n    }\n\n    /**\n     * @notice Calculates the token rewards a user should receive and mints these.\n     * @param beneficiary Address to claim rewards for.\n     * @return `true` if success.\n     */\n    function claimRewards(address beneficiary) external override returns (uint256) {\n        require(\n            msg.sender == beneficiary || _roleManager().hasRole(Roles.GAUGE_ZAP, msg.sender),\n            Error.UNAUTHORIZED_ACCESS\n        );\n        userCheckpoint(beneficiary);\n        uint256 amount = perUserShare[beneficiary];\n        if (amount <= 0) return 0;\n        perUserShare[beneficiary] = 0;\n        _mintRewards(beneficiary, amount);\n        return amount;\n    }\n\n    function claimableRewards(address beneficiary) external view override returns (uint256) {\n        uint256 poolTotalStaked = stakerVault.getPoolTotalStaked();\n        uint256 poolStakedIntegral_ = poolStakedIntegral;\n        if (poolTotalStaked > 0) {\n            poolStakedIntegral_ += (inflationManager.getLpRateForStakerVault(address(stakerVault)) *\n                (block.timestamp - poolLastUpdate)).scaledDiv(poolTotalStaked);\n        }\n\n        return\n            perUserShare[beneficiary] +\n            stakerVault.stakedAndActionLockedBalanceOf(beneficiary).scaledMul(\n                poolStakedIntegral_ - perUserStakedIntegral[beneficiary]\n            );\n    }\n\n    /**\n     * @notice Checkpoint function for the statistics for a particular user.\n     * @param user Address of the user to checkpoint.\n     * @return `true` if successful.\n     */\n    function userCheckpoint(address user) public override returns (bool) {\n        _poolCheckpoint();\n\n        // No checkpoint for the actions and strategies, since this does not accumulate tokens\n        if (\n            IController(controller).addressProvider().isAction(user) || stakerVault.isStrategy(user)\n        ) {\n            return false;\n        }\n        uint256 poolStakedIntegral_ = poolStakedIntegral;\n        perUserShare[user] += (\n            (stakerVault.stakedAndActionLockedBalanceOf(user)).scaledMul(\n                (poolStakedIntegral_ - perUserStakedIntegral[user])\n            )\n        );\n\n        perUserStakedIntegral[user] = poolStakedIntegral_;\n\n        return true;\n    }\n\n    function _mintRewards(address beneficiary, uint256 amount) internal {\n        inflationManager.mintRewards(beneficiary, amount);\n    }\n\n    function _poolCheckpoint() internal returns (bool) {\n        uint256 currentRate = inflationManager.getLpRateForStakerVault(address(stakerVault));\n        // Update the integral of total token supply for the pool\n        uint256 poolTotalStaked = stakerVault.getPoolTotalStaked();\n        if (poolTotalStaked > 0) {\n            poolStakedIntegral += (currentRate * (block.timestamp - poolLastUpdate)).scaledDiv(\n                poolTotalStaked\n            );\n        }\n        poolLastUpdate = block.timestamp;\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "LpGauge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "LpGauge.sol",
                "Type": "Uninitialized Variable",
                "Description": "Users can claim extremely large rewards or lock rewards from LpGauge due to uninitialised poolLastUpdate variable.",
                "Repair": "Initialize poolLastUpdate variable in the constructor"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../libraries/AddressProviderHelpers.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/UncheckedMath.sol\";\nimport \"../../interfaces/pool/ILiquidityPool.sol\";\nimport \"../../interfaces/IFeeBurner.sol\";\nimport \"../../interfaces/ISwapperRouter.sol\";\nimport \"../../interfaces/IAddressProvider.sol\";\n\n/**\n * The Fee Burner converts all of the callers Backd LP Tokens to a single target Backd LP Token.\n * It first burns the Pool LP Tokens for the Pool underlying.\n * Then it swaps all the underlyings for the target Pool underlying.\n * Finally it deposits the Pool underlying into the target Pool to get the target LP Token.\n */\ncontract FeeBurner is IFeeBurner {\n    using SafeERC20 for IERC20;\n    using UncheckedMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    address private constant _WETH = address(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH\n\n    IAddressProvider private immutable _addressProvider; // Address Provider, used for getting pools and swapper router\n\n    event Burned(address targetLpToken, uint256 amountBurned); // Emmited after a successfull burn to target lp token\n\n    constructor(address addressProvider_) {\n        _addressProvider = IAddressProvider(addressProvider_);\n    }\n\n    receive() external payable {} // Recieve function for withdrawing from Backd ETH Pool\n\n    /**\n     * @notice Converts callers Tokens to target Backd LP Token for the given tokens_.\n     * @param tokens_ The Tokens to convert to the targetLpToken_.\n     * @param targetLpToken_ The LP Token that should be received.\n     * @return received The amount of the target LP Token received.\n     */\n    function burnToTarget(address[] memory tokens_, address targetLpToken_)\n        public\n        payable\n        override\n        returns (uint256 received)\n    {\n        require(tokens_.length != 0, \"No tokens to burn\");\n\n        // Swapping tokens for WETH\n        ILiquidityPool targetPool_ = _addressProvider.getPoolForToken(targetLpToken_);\n        address targetUnderlying_ = targetPool_.getUnderlying();\n        ISwapperRouter swapperRouter_ = _swapperRouter();\n        bool burningEth_;\n        for (uint256 i; i < tokens_.length; i = i.uncheckedInc()) {\n            IERC20 token_ = IERC20(tokens_[i]);\n\n            // Handling ETH\n            if (address(token_) == address(0)) {\n                if (msg.value == 0) continue;\n                burningEth_ = true;\n                swapperRouter_.swapAll{value: msg.value}(address(token_), _WETH);\n                continue;\n            }\n\n            // Handling ERC20\n            uint256 tokenBalance_ = token_.balanceOf(msg.sender);\n            if (tokenBalance_ == 0) continue;\n            token_.safeTransferFrom(msg.sender, address(this), tokenBalance_);\n            if (address(token_) == targetUnderlying_) continue;\n            _approve(address(token_), address(swapperRouter_));\n            swapperRouter_.swap(address(token_), _WETH, tokenBalance_);\n        }\n        require(burningEth_ || msg.value == 0, Error.INVALID_VALUE);\n\n        // Swapping WETH for target underlying\n        _approve(_WETH, address(swapperRouter_));\n        swapperRouter_.swapAll(_WETH, targetUnderlying_);\n\n        // Depositing target underlying into target pool\n        uint256 targetLpTokenBalance_ = _depositInPool(targetUnderlying_, targetPool_);\n\n        // Transfering LP tokens back to sender\n        IERC20(targetLpToken_).safeTransfer(msg.sender, targetLpTokenBalance_);\n        emit Burned(targetLpToken_, targetLpTokenBalance_);\n        return targetLpTokenBalance_;\n    }\n\n    /**\n     * @dev Deposits underlying into pool to receive LP Tokens.\n     * @param underlying_ The underlying of the pool.\n     * @param pool_ The pool to deposit into.\n     * @return received The amount of LP Tokens received.\n     */\n    function _depositInPool(address underlying_, ILiquidityPool pool_)\n        internal\n        returns (uint256 received)\n    {\n        // Handling ETH deposits\n        if (underlying_ == address(0)) {\n            uint256 ethBalance_ = address(this).balance;\n            return pool_.deposit{value: ethBalance_}(ethBalance_);\n        }\n\n        // Handling ERC20 deposits\n        _approve(underlying_, address(pool_));\n        return pool_.deposit(IERC20(underlying_).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token_ The token to approve for.\n     * @param spender_ The spender to approve.\n     */\n    function _approve(address token_, address spender_) internal {\n        if (IERC20(token_).allowance(address(this), spender_) > 0) return;\n        IERC20(token_).safeApprove(spender_, type(uint256).max);\n    }\n\n    /**\n     * @dev Gets the swapper router.\n     * @return The swapper router.\n     */\n    function _swapperRouter() internal view returns (ISwapperRouter) {\n        return _addressProvider.getSwapperRouter();\n    }\n}\n\n\n",
        "CodeNames": [
            "FeeBurner.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "FeeBurner.sol",
                "Type": "Failure to Deposit Fees",
                "Description": "BkdLocker depositFees can be blocked if burnFees fails if none of the pool tokens have underlying token as native ETH token.",
                "Repair": "Add a pool denominated in ETH to ensure the logic goes through"
            },
            {
                "Location": "FeeBurner.sol",
                "Type": "Lack of Slippage Check",
                "Description": "FeeBurner initiates swap without any slippage checks if Chainlink oracle fails.",
                "Repair": "Initiate the transaction with a default slippage of 99% or perform own swaps to ensure a more reliable outcome"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/IBkdToken.sol\";\nimport \"../../interfaces/tokenomics/IMinter.sol\";\n\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"./BkdToken.sol\";\nimport \"../access/Authorization.sol\";\n\ncontract Minter is IMinter, Authorization, ReentrancyGuard {\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    uint256 private constant _INFLATION_DECAY_PERIOD = 365 days;\n\n    // Lp Rates\n    uint256 public immutable initialAnnualInflationRateLp;\n    uint256 public immutable annualInflationDecayLp;\n    uint256 public currentInflationAmountLp;\n\n    // Keeper Rates\n    uint256 public immutable initialPeriodKeeperInflation;\n    uint256 public immutable initialAnnualInflationRateKeeper;\n    uint256 public immutable annualInflationDecayKeeper;\n    uint256 public currentInflationAmountKeeper;\n\n    // AMM Rates\n    uint256 public immutable initialPeriodAmmInflation;\n    uint256 public immutable initialAnnualInflationRateAmm;\n    uint256 public immutable annualInflationDecayAmm;\n    uint256 public currentInflationAmountAmm;\n\n    bool public initialPeriodEnded;\n\n    // Non-inflation rates\n    uint256 public immutable nonInflationDistribution;\n    uint256 public issuedNonInflationSupply;\n\n    uint256 public lastInflationDecay;\n    uint256 public currentTotalInflation;\n\n    // Used for final safety check to ensure inflation is not exceeded\n    uint256 public totalAvailableToNow;\n    uint256 public totalMintedToNow;\n    uint256 public lastEvent;\n\n    IController public immutable controller;\n    BkdToken public token;\n\n    event TokensMinted(address beneficiary, uint256 amount);\n\n    constructor(\n        uint256 _annualInflationRateLp,\n        uint256 _annualInflationRateKeeper,\n        uint256 _annualInflationRateAmm,\n        uint256 _annualInflationDecayLp,\n        uint256 _annualInflationDecayKeeper,\n        uint256 _annualInflationDecayAmm,\n        uint256 _initialPeriodKeeperInflation,\n        uint256 _initialPeriodAmmInflation,\n        uint256 _nonInflationDistribution,\n        IController _controller\n    ) Authorization(_controller.addressProvider().getRoleManager()) {\n        require(_annualInflationDecayLp < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayKeeper < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        require(_annualInflationDecayAmm < ScaledMath.ONE, Error.INVALID_PARAMETER_VALUE);\n        initialAnnualInflationRateLp = _annualInflationRateLp;\n        initialAnnualInflationRateKeeper = _annualInflationRateKeeper;\n        initialAnnualInflationRateAmm = _annualInflationRateAmm;\n\n        annualInflationDecayLp = _annualInflationDecayLp;\n        annualInflationDecayKeeper = _annualInflationDecayKeeper;\n        annualInflationDecayAmm = _annualInflationDecayAmm;\n\n        initialPeriodKeeperInflation = _initialPeriodKeeperInflation;\n        initialPeriodAmmInflation = _initialPeriodAmmInflation;\n\n        currentInflationAmountLp = _annualInflationRateLp / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountKeeper = _initialPeriodKeeperInflation / _INFLATION_DECAY_PERIOD;\n        currentInflationAmountAmm = _initialPeriodAmmInflation / _INFLATION_DECAY_PERIOD;\n\n        currentTotalInflation =\n            currentInflationAmountLp +\n            currentInflationAmountKeeper +\n            currentInflationAmountAmm;\n\n        nonInflationDistribution = _nonInflationDistribution;\n        controller = _controller;\n    }\n\n    function setToken(address _token) external override onlyGovernance {\n        require(address(token) == address(0), \"Token already set!\");\n        token = BkdToken(_token);\n    }\n\n    function startInflation() external override onlyGovernance {\n        require(lastEvent == 0, \"Inflation has already started.\");\n        lastEvent = block.timestamp;\n        lastInflationDecay = block.timestamp;\n    }\n\n    /**\n     * @notice Update the inflation rate according to the piecewise linear schedule.\n     * @dev This updates the inflation rate to the next linear segment in the inflations schedule.\n     * @return `true` if successful.\n     */\n    function executeInflationRateUpdate() external override returns (bool) {\n        return _executeInflationRateUpdate();\n    }\n\n    /**\n     * @notice Mints BKD tokens to a specified address.\n     * @dev Can only be called by the controller.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mint(address beneficiary, uint256 amount)\n        external\n        override\n        nonReentrant\n        returns (bool)\n    {\n        require(msg.sender == address(controller.inflationManager()), Error.UNAUTHORIZED_ACCESS);\n        if (lastEvent == 0) return false;\n        return _mint(beneficiary, amount);\n    }\n\n    /**\n     * @notice Mint tokens that are not part of the inflation schedule.\n     * @dev The amount of tokens that can be minted in total is subject to a pre-set upper limit.\n     * @param beneficiary Address to mint tokens for.\n     * @param amount Amount of tokens to mint.\n     * @return `true` if successful.\n     */\n    function mintNonInflationTokens(address beneficiary, uint256 amount)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(\n            issuedNonInflationSupply + amount <= nonInflationDistribution,\n            \"Maximum non-inflation amount exceeded.\"\n        );\n        issuedNonInflationSupply += amount;\n        token.mint(beneficiary, amount);\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs per unit of time (seconds).\n     * @return LP inflation rate.\n     */\n    function getLpInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountLp;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for keepers per unit of time (seconds).\n     * @return keeper inflation rate.\n     */\n    function getKeeperInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountKeeper;\n    }\n\n    /**\n     * @notice Supplies the inflation rate for LPs on AMMs per unit of time (seconds).\n     * @return AMM inflation rate.\n     */\n    function getAmmInflationRate() external view override returns (uint256) {\n        if (lastEvent == 0) return 0;\n        return currentInflationAmountAmm;\n    }\n\n    function _executeInflationRateUpdate() internal returns (bool) {\n        totalAvailableToNow += (currentTotalInflation * (block.timestamp - lastEvent));\n        lastEvent = block.timestamp;\n        if (block.timestamp >= lastInflationDecay + _INFLATION_DECAY_PERIOD) {\n            currentInflationAmountLp = currentInflationAmountLp.scaledMul(annualInflationDecayLp);\n            if (initialPeriodEnded) {\n                currentInflationAmountKeeper = currentInflationAmountKeeper.scaledMul(\n                    annualInflationDecayKeeper\n                );\n                currentInflationAmountAmm = currentInflationAmountAmm.scaledMul(\n                    annualInflationDecayAmm\n                );\n            } else {\n                currentInflationAmountKeeper =\n                    initialAnnualInflationRateKeeper /\n                    _INFLATION_DECAY_PERIOD;\n\n                currentInflationAmountAmm = initialAnnualInflationRateAmm / _INFLATION_DECAY_PERIOD;\n                initialPeriodEnded = true;\n            }\n            currentTotalInflation =\n                currentInflationAmountLp +\n                currentInflationAmountKeeper +\n                currentInflationAmountAmm;\n            controller.inflationManager().checkpointAllGauges();\n            lastInflationDecay = block.timestamp;\n        }\n        return true;\n    }\n\n    function _mint(address beneficiary, uint256 amount) internal returns (bool) {\n        totalAvailableToNow += ((block.timestamp - lastEvent) * currentTotalInflation);\n        uint256 newTotalMintedToNow = totalMintedToNow + amount;\n        require(newTotalMintedToNow <= totalAvailableToNow, \"Mintable amount exceeded\");\n        totalMintedToNow = newTotalMintedToNow;\n        lastEvent = block.timestamp;\n        token.mint(beneficiary, amount);\n        _executeInflationRateUpdate();\n        emit TokensMinted(beneficiary, amount);\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "Minter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Minter.sol#startInflation()",
                "Type": "Access Control",
                "Description": "The 'executeInflationRateUpdate()' method does not check the value of 'lastEvent' and 'lastInflationDecay' and uses them directly, which can bypass the 'startInflation()' method and render the constraints of 'totalAvailableToNow' incorrect and useless.",
                "Repair": "Initialize 'lastEvent' and 'lastInflationDecay' in 'constructor()' or add 'require(lastEvent != 0 && lastInflationDecay != 0, \"...\")' to 'executeInflationRateUpdate()'"
            },
            {
                "Location": "_executeInflationRateUpdate() function in Minter.sol",
                "Type": "Total supply not guaranteed and not deterministic",
                "Description": "The actual total supply of the token is random and depends on when _executeInflationRateUpdate is executed.",
                "Repair": "Update the calculation of totalAvailableToNow based on the condition block.timestamp = lastInflationDecay + _INFLATION_DECAY_PERIOD"
            },
            {
                "Location": "Minter.sol#_executeInflationRateUpdate()",
                "Type": "Incorrect order of operations",
                "Description": "When _executeInflationRateUpdate() is called, if an _INFLATION_DECAY_PERIOD has past since lastInflationDecay, it will update the InflationRate for all of the gauges. However, in the current implementation, the rates will be updated first, followed by the rewards being settled using the new rates on the gauges using inflationManager().checkpointAllGauges(). If the _INFLATION_DECAY_PERIOD has passed for a long time before executeInflationRateUpdate() is called, the users may lose a significant amount of rewards.",
                "Repair": "Move the call to checkpointAllGauges() before the currentInflationAmountKeeper is updated"
            },
            {
                "Location": "Minter.sol line 220",
                "Type": "Inaccurate amount distribution when updating weights",
                "Description": "Updating pool inflation rates without calling poolCheckpoint can lead to inaccurate computations and either users losing a part of their claims or too many tokens being distributed, preventing some users from claiming due to the totalAvailableToNow requirement in Minter.",
                "Repair": "Checkpoint every LpStakerVault, KeeperGauge or AmmGauge when updating the weights of one of them"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../libraries/ScaledMath.sol\";\nimport \"../libraries/Errors.sol\";\nimport \"../libraries/AddressProviderHelpers.sol\";\nimport \"../libraries/UncheckedMath.sol\";\n\nimport \"../interfaces/IStakerVault.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/tokenomics/IRewardsGauge.sol\";\nimport \"../interfaces/tokenomics/IInflationManager.sol\";\nimport \"../interfaces/pool/ILiquidityPool.sol\";\nimport \"../interfaces/tokenomics/ILpGauge.sol\";\nimport \"../interfaces/IERC20Full.sol\";\n\nimport \"./utils/Preparable.sol\";\nimport \"./Controller.sol\";\nimport \"./pool/LiquidityPool.sol\";\nimport \"./access/Authorization.sol\";\nimport \"./utils/Pausable.sol\";\n\n/**\n * @notice This contract handles staked tokens from Backd pools\n * However, note that this is NOT an ERC-20 compliant contract and these\n * tokens should never be integrated with any protocol assuming ERC-20 compliant\n * tokens\n * @dev When paused, allows only withdraw/unstake\n */\ncontract StakerVault is IStakerVault, Authorization, Pausable, Initializable, Preparable {\n    using AddressProviderHelpers for IAddressProvider;\n    using SafeERC20 for IERC20;\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n\n    bytes32 internal constant _LP_GAUGE = \"lpGauge\";\n\n    IController public immutable controller;\n\n    IInflationManager public immutable inflationManager;\n    IAddressProvider public immutable addressProvider;\n\n    address public token;\n\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public actionLockedBalances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    // All the data fields required for the staking tracking\n    uint256 private _poolTotalStaked;\n\n    mapping(address => bool) public strategies;\n    uint256 public strategiesTotalStaked;\n\n    constructor(IController _controller)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        IInflationManager inflationManager_ = controller.inflationManager();\n        require(address(inflationManager_) != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        inflationManager = inflationManager_;\n        addressProvider = _controller.addressProvider();\n    }\n\n    function initialize(address _token) external override initializer {\n        token = _token;\n    }\n\n    function initializeLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\n        require(currentAddresses[_LP_GAUGE] == address(0), Error.ROLE_EXISTS);\n        _setConfig(_LP_GAUGE, _lpGauge);\n        inflationManager.addGaugeForVault(token);\n        return true;\n    }\n\n    function prepareLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\n        _prepare(_LP_GAUGE, _lpGauge);\n        return true;\n    }\n\n    function executeLpGauge() external override onlyGovernance returns (bool) {\n        _executeAddress(_LP_GAUGE);\n        inflationManager.addGaugeForVault(token);\n        return true;\n    }\n\n    /**\n     * @notice Registers an address as a strategy to be excluded from token accumulation.\n     * @dev This should be used if a strategy deposits into a stakerVault and should not get gov. tokens.\n     * @return `true` if success.\n     */\n    function addStrategy(address strategy) external override returns (bool) {\n        require(msg.sender == address(inflationManager), Error.UNAUTHORIZED_ACCESS);\n        strategies[strategy] = true;\n        return true;\n    }\n\n    /**\n     * @notice Transfer staked tokens to an account.\n     * @dev This is not an ERC20 transfer, as tokens are still owned by this contract, but fees get updated in the LP pool.\n     * @param account Address to transfer to.\n     * @param amount Amount to transfer.\n     * @return `true` if success.\n     */\n    function transfer(address account, uint256 amount) external override notPaused returns (bool) {\n        require(msg.sender != account, Error.SELF_TRANSFER_NOT_ALLOWED);\n        require(balances[msg.sender] >= amount, Error.INSUFFICIENT_BALANCE);\n\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        pool.handleLpTokenTransfer(msg.sender, account, amount);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(msg.sender);\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n\n        balances[msg.sender] -= amount;\n        balances[account] += amount;\n\n        emit Transfer(msg.sender, account, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer staked tokens from src to dst.\n     * @dev This is not an ERC20 transfer, as tokens are still owned by this contract, but fees get updated in the LP pool.\n     * @param src Address to transfer from.\n     * @param dst Address to transfer to.\n     * @param amount Amount to transfer.\n     * @return `true` if success.\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override notPaused returns (bool) {\n        /* Do not allow self transfers */\n        require(src != dst, Error.SAME_ADDRESS_NOT_ALLOWED);\n\n        /* Get the allowance, infinite for the account owner */\n        uint256 startingAllowance;\n        if (msg.sender == src) {\n            startingAllowance = type(uint256).max;\n        } else {\n            startingAllowance = _allowances[src][msg.sender];\n        }\n        require(startingAllowance >= amount, Error.INSUFFICIENT_ALLOWANCE);\n\n        uint256 srcTokens = balances[src];\n        require(srcTokens >= amount, Error.INSUFFICIENT_BALANCE);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(src);\n            ILpGauge(lpGauge).userCheckpoint(dst);\n        }\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        pool.handleLpTokenTransfer(src, dst, amount);\n\n        /* Update token balances */\n        balances[src] = srcTokens.uncheckedSub(amount);\n        balances[dst] = balances[dst] + amount;\n\n        /* Update allowance if necessary */\n        if (startingAllowance != type(uint256).max) {\n            _allowances[src][msg.sender] = startingAllowance.uncheckedSub(amount);\n        }\n        emit Transfer(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Approve staked tokens for spender.\n     * @param spender Address to approve tokens for.\n     * @param amount Amount to approve.\n     * @return `true` if success.\n     */\n    function approve(address spender, uint256 amount) external override notPaused returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice If an action is registered and stakes funds, this updates the actionLockedBalances for the user.\n     * @param account Address that registered the action.\n     * @param amount Amount staked by the action.\n     * @return `true` if success.\n     */\n    function increaseActionLockedBalance(address account, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        require(addressProvider.isAction(msg.sender), Error.UNAUTHORIZED_ACCESS);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n        actionLockedBalances[account] += amount;\n        return true;\n    }\n\n    /**\n     * @notice If an action is executed/reset, this updates the actionLockedBalances for the user.\n     * @param account Address that registered the action.\n     * @param amount Amount executed/reset by the action.\n     * @return `true` if success.\n     */\n    function decreaseActionLockedBalance(address account, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        require(addressProvider.isAction(msg.sender), Error.UNAUTHORIZED_ACCESS);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n        if (actionLockedBalances[account] > amount) {\n            actionLockedBalances[account] = actionLockedBalances[account].uncheckedSub(amount);\n        } else {\n            actionLockedBalances[account] = 0;\n        }\n        return true;\n    }\n\n    function poolCheckpoint() external override returns (bool) {\n        if (currentAddresses[_LP_GAUGE] != address(0)) {\n            return ILpGauge(currentAddresses[_LP_GAUGE]).poolCheckpoint();\n        }\n        return false;\n    }\n\n    function getLpGauge() external view override returns (address) {\n        return currentAddresses[_LP_GAUGE];\n    }\n\n    function isStrategy(address user) external view override returns (bool) {\n        return strategies[user];\n    }\n\n    /**\n     * @notice Get the total amount of tokens that are staked by actions\n     * @return Total amount staked by actions\n     */\n    function getStakedByActions() external view override returns (uint256) {\n        address[] memory actions = addressProvider.allActions();\n        uint256 total;\n        for (uint256 i; i < actions.length; i = i.uncheckedInc()) {\n            total += balances[actions[i]];\n        }\n        return total;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return balances[account];\n    }\n\n    function getPoolTotalStaked() external view override returns (uint256) {\n        return _poolTotalStaked;\n    }\n\n    /**\n     * @notice Returns the total balance in the staker vault, including that locked in positions.\n     * @param account Account to query balance for.\n     * @return Total balance in staker vault for account.\n     */\n    function stakedAndActionLockedBalanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account] + actionLockedBalances[account];\n    }\n\n    function actionLockedBalanceOf(address account) external view override returns (uint256) {\n        return actionLockedBalances[account];\n    }\n\n    function decimals() external view override returns (uint8) {\n        return IERC20Full(token).decimals();\n    }\n\n    function getToken() external view override returns (address) {\n        return token;\n    }\n\n    function unstake(uint256 amount) public override returns (bool) {\n        return unstakeFor(msg.sender, msg.sender, amount);\n    }\n\n    /**\n     * @notice Stake an amount of vault tokens.\n     * @param amount Amount of token to stake.\n     * @return `true` if success.\n     */\n    function stake(uint256 amount) public override returns (bool) {\n        return stakeFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Stake amount of vault token on behalf of another account.\n     * @param account Account for which tokens will be staked.\n     * @param amount Amount of token to stake.\n     * @return `true` if success.\n     */\n    function stakeFor(address account, uint256 amount) public override notPaused returns (bool) {\n        require(IERC20(token).balanceOf(msg.sender) >= amount, Error.INSUFFICIENT_BALANCE);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n\n        uint256 oldBal = IERC20(token).balanceOf(address(this));\n\n        if (msg.sender != account) {\n            ILiquidityPool pool = addressProvider.getPoolForToken(token);\n            pool.handleLpTokenTransfer(msg.sender, account, amount);\n        }\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 staked = IERC20(token).balanceOf(address(this)) - oldBal;\n        require(staked == amount, Error.INVALID_AMOUNT);\n        balances[account] += staked;\n\n        if (strategies[account]) {\n            strategiesTotalStaked += staked;\n        } else {\n            _poolTotalStaked += staked;\n        }\n        emit Staked(account, amount);\n        return true;\n    }\n\n    /**\n     * @notice Unstake tokens on behalf of another account.\n     * @dev Needs to be approved.\n     * @param src Account for which tokens will be unstaked.\n     * @param dst Account receiving the tokens.\n     * @param amount Amount of token to unstake/receive.\n     * @return `true` if success.\n     */\n    function unstakeFor(\n        address src,\n        address dst,\n        uint256 amount\n    ) public override returns (bool) {\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        uint256 allowance_ = _allowances[src][msg.sender];\n        require(\n            src == msg.sender || allowance_ >= amount || address(pool) == msg.sender,\n            Error.UNAUTHORIZED_ACCESS\n        );\n        require(balances[src] >= amount, Error.INSUFFICIENT_BALANCE);\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(src);\n        }\n        uint256 oldBal = IERC20(token).balanceOf(address(this));\n\n        if (src != dst) {\n            pool.handleLpTokenTransfer(src, dst, amount);\n        }\n\n        IERC20(token).safeTransfer(dst, amount);\n\n        uint256 unstaked = oldBal.uncheckedSub(IERC20(token).balanceOf(address(this)));\n\n        if (src != msg.sender && allowance_ != type(uint256).max && address(pool) != msg.sender) {\n            // update allowance\n            _allowances[src][msg.sender] -= unstaked;\n        }\n        balances[src] -= unstaked;\n\n        if (strategies[src]) {\n            strategiesTotalStaked -= unstaked;\n        } else {\n            _poolTotalStaked -= unstaked;\n        }\n        emit Unstaked(src, amount);\n        return true;\n    }\n\n    function _isAuthorizedToPause(address account) internal view override returns (bool) {\n        return _roleManager().hasRole(Roles.GOVERNANCE, account);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"../../interfaces/IStakerVault.sol\";\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/ILpGauge.sol\";\nimport \"../../interfaces/tokenomics/IRewardsGauge.sol\";\n\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\n\nimport \"../access/Authorization.sol\";\n\ncontract LpGauge is ILpGauge, IRewardsGauge, Authorization {\n    using AddressProviderHelpers for IAddressProvider;\n    using ScaledMath for uint256;\n\n    IController public immutable controller;\n    IStakerVault public immutable stakerVault;\n    IInflationManager public immutable inflationManager;\n\n    uint256 public poolStakedIntegral;\n    uint256 public poolLastUpdate;\n    mapping(address => uint256) public perUserStakedIntegral;\n    mapping(address => uint256) public perUserShare;\n\n    constructor(IController _controller, address _stakerVault)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        require(_stakerVault != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        controller = IController(_controller);\n        stakerVault = IStakerVault(_stakerVault);\n        IInflationManager _inflationManager = IController(_controller).inflationManager();\n        require(address(_inflationManager) != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        inflationManager = _inflationManager;\n    }\n\n    /**\n     * @notice Checkpoint function for the pool statistics.\n     * @return `true` if successful.\n     */\n    function poolCheckpoint() external override returns (bool) {\n        return _poolCheckpoint();\n    }\n\n    /**\n     * @notice Calculates the token rewards a user should receive and mints these.\n     * @param beneficiary Address to claim rewards for.\n     * @return `true` if success.\n     */\n    function claimRewards(address beneficiary) external override returns (uint256) {\n        require(\n            msg.sender == beneficiary || _roleManager().hasRole(Roles.GAUGE_ZAP, msg.sender),\n            Error.UNAUTHORIZED_ACCESS\n        );\n        userCheckpoint(beneficiary);\n        uint256 amount = perUserShare[beneficiary];\n        if (amount <= 0) return 0;\n        perUserShare[beneficiary] = 0;\n        _mintRewards(beneficiary, amount);\n        return amount;\n    }\n\n    function claimableRewards(address beneficiary) external view override returns (uint256) {\n        uint256 poolTotalStaked = stakerVault.getPoolTotalStaked();\n        uint256 poolStakedIntegral_ = poolStakedIntegral;\n        if (poolTotalStaked > 0) {\n            poolStakedIntegral_ += (inflationManager.getLpRateForStakerVault(address(stakerVault)) *\n                (block.timestamp - poolLastUpdate)).scaledDiv(poolTotalStaked);\n        }\n\n        return\n            perUserShare[beneficiary] +\n            stakerVault.stakedAndActionLockedBalanceOf(beneficiary).scaledMul(\n                poolStakedIntegral_ - perUserStakedIntegral[beneficiary]\n            );\n    }\n\n    /**\n     * @notice Checkpoint function for the statistics for a particular user.\n     * @param user Address of the user to checkpoint.\n     * @return `true` if successful.\n     */\n    function userCheckpoint(address user) public override returns (bool) {\n        _poolCheckpoint();\n\n        // No checkpoint for the actions and strategies, since this does not accumulate tokens\n        if (\n            IController(controller).addressProvider().isAction(user) || stakerVault.isStrategy(user)\n        ) {\n            return false;\n        }\n        uint256 poolStakedIntegral_ = poolStakedIntegral;\n        perUserShare[user] += (\n            (stakerVault.stakedAndActionLockedBalanceOf(user)).scaledMul(\n                (poolStakedIntegral_ - perUserStakedIntegral[user])\n            )\n        );\n\n        perUserStakedIntegral[user] = poolStakedIntegral_;\n\n        return true;\n    }\n\n    function _mintRewards(address beneficiary, uint256 amount) internal {\n        inflationManager.mintRewards(beneficiary, amount);\n    }\n\n    function _poolCheckpoint() internal returns (bool) {\n        uint256 currentRate = inflationManager.getLpRateForStakerVault(address(stakerVault));\n        // Update the integral of total token supply for the pool\n        uint256 poolTotalStaked = stakerVault.getPoolTotalStaked();\n        if (poolTotalStaked > 0) {\n            poolStakedIntegral += (currentRate * (block.timestamp - poolLastUpdate)).scaledDiv(\n                poolTotalStaked\n            );\n        }\n        poolLastUpdate = block.timestamp;\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "StakerVault.sol",
            "LpGauge.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "StakerVault.sol, LpGauge.sol",
                "Type": "Accounting",
                "Description": "Strategy in 'StakerVault.sol' can steal more rewards even though it's designed strategies shouldn't get rewards. Also, there will be a problem with a rewarding system in 'LpGauge.sol' so that some normal users wouldn't get rewards properly.",
                "Repair": "Method 1: Forbid a transfer between strategy and non-strategy. Method 2: Update 'StakerVault.strategiesTotalStaked' and 'StakerVault._poolTotalStaked' correctly"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/utils/SafeERC20Upgradeable.sol\";\n\nimport \"../../../interfaces/actions/IActionFeeHandler.sol\";\nimport \"../../../interfaces/IController.sol\";\nimport \"../../../interfaces/tokenomics/IKeeperGauge.sol\";\n\nimport \"../../../libraries/Errors.sol\";\nimport \"../../../libraries/ScaledMath.sol\";\nimport \"../../../libraries/AddressProviderHelpers.sol\";\n\nimport \"../../LpToken.sol\";\nimport \"../../access/Authorization.sol\";\nimport \"../../pool/LiquidityPool.sol\";\nimport \"../../utils/Preparable.sol\";\n\n/**\n * @notice Contract to manage the distribution of protocol fees\n */\ncontract TopUpActionFeeHandler is IActionFeeHandler, Authorization, Preparable {\n    using ScaledMath for uint256;\n    using SafeERC20Upgradeable for LpToken;\n    using AddressProviderHelpers for IAddressProvider;\n\n    bytes32 internal constant _KEEPER_FEE_FRACTION_KEY = \"KeeperFee\";\n    bytes32 internal constant _KEEPER_GAUGE_KEY = \"KeeperGauge\";\n    bytes32 internal constant _TREASURY_FEE_FRACTION_KEY = \"TreasuryFee\";\n\n    address public immutable actionContract;\n    IController public immutable controller;\n\n    mapping(address => uint256) public treasuryAmounts;\n    mapping(address => mapping(address => uint256)) public keeperRecords;\n\n    event KeeperFeesClaimed(address indexed keeper, address token, uint256 totalClaimed);\n\n    event FeesPayed(\n        address indexed payer,\n        address indexed keeper,\n        address token,\n        uint256 amount,\n        uint256 keeperAmount,\n        uint256 lpAmount\n    );\n\n    constructor(\n        IController _controller,\n        address _actionContract,\n        uint256 keeperFee,\n        uint256 treasuryFee\n    ) Authorization(_controller.addressProvider().getRoleManager()) {\n        require(keeperFee + treasuryFee <= ScaledMath.ONE, Error.INVALID_AMOUNT);\n        actionContract = _actionContract;\n        controller = _controller;\n        _setConfig(_KEEPER_FEE_FRACTION_KEY, keeperFee);\n        _setConfig(_TREASURY_FEE_FRACTION_KEY, treasuryFee);\n    }\n\n    function setInitialKeeperGaugeForToken(address lpToken, address _keeperGauge)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(getKeeperGauge(lpToken) == address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        require(_keeperGauge != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        _setConfig(_getKeeperGaugeKey(lpToken), _keeperGauge);\n        return true;\n    }\n\n    /**\n     * @notice Transfers the keeper and treasury fees to the fee handler and burns LP fees.\n     * @param payer Account who's position the fees are charged on.\n     * @param beneficiary Beneficiary of the fees paid (usually this will be the keeper).\n     * @param amount Total fee value (both keeper and LP fees).\n     * @param lpTokenAddress Address of the lpToken used to pay fees.\n     * @return `true` if successful.\n     */\n    function payFees(\n        address payer,\n        address beneficiary,\n        uint256 amount,\n        address lpTokenAddress\n    ) external override returns (bool) {\n        require(msg.sender == actionContract, Error.UNAUTHORIZED_ACCESS);\n        // Handle keeper fees\n        uint256 keeperAmount = amount.scaledMul(getKeeperFeeFraction());\n        uint256 treasuryAmount = amount.scaledMul(getTreasuryFeeFraction());\n        LpToken lpToken = LpToken(lpTokenAddress);\n\n        lpToken.safeTransferFrom(msg.sender, address(this), amount);\n\n        address keeperGauge = getKeeperGauge(lpTokenAddress);\n        if (keeperGauge != address(0)) {\n            IKeeperGauge(keeperGauge).reportFees(beneficiary, keeperAmount, lpTokenAddress);\n        }\n\n        // Accrue keeper and treasury fees here for periodic claiming\n        keeperRecords[beneficiary][lpTokenAddress] += keeperAmount;\n        treasuryAmounts[lpTokenAddress] += treasuryAmount;\n\n        // Handle LP fees\n        uint256 lpAmount = amount - keeperAmount - treasuryAmount;\n        lpToken.burn(lpAmount);\n        emit FeesPayed(payer, beneficiary, lpTokenAddress, amount, keeperAmount, lpAmount);\n        return true;\n    }\n\n    /**\n     * @notice Claim all accrued fees for an LPToken.\n     * @param beneficiary Address to claim the fees for.\n     * @param token Address of the lpToken for claiming.\n     * @return `true` if successful.\n     */\n    function claimKeeperFeesForPool(address beneficiary, address token)\n        external\n        override\n        returns (bool)\n    {\n        uint256 totalClaimable = keeperRecords[beneficiary][token];\n        require(totalClaimable > 0, Error.NOTHING_TO_CLAIM);\n        keeperRecords[beneficiary][token] = 0;\n\n        LpToken lpToken = LpToken(token);\n        lpToken.safeTransfer(beneficiary, totalClaimable);\n\n        emit KeeperFeesClaimed(beneficiary, token, totalClaimable);\n        return true;\n    }\n\n    /**\n     * @notice Claim all accrued treasury fees for an LPToken.\n     * @param token Address of the lpToken for claiming.\n     * @return `true` if successful.\n     */\n    function claimTreasuryFees(address token) external override returns (bool) {\n        uint256 claimable = treasuryAmounts[token];\n        treasuryAmounts[token] = 0;\n        LpToken(token).safeTransfer(controller.addressProvider().getRewardHandler(), claimable);\n        return true;\n    }\n\n    /**\n     * @notice Prepare update of keeper fee (with time delay enforced).\n     * @param newKeeperFee New keeper fee value.\n     * @return `true` if successful.\n     */\n    function prepareKeeperFee(uint256 newKeeperFee)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(newKeeperFee <= ScaledMath.ONE, Error.INVALID_AMOUNT);\n        return _prepare(_KEEPER_FEE_FRACTION_KEY, newKeeperFee);\n    }\n\n    /**\n     * @notice Execute update of keeper fee (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New keeper fee.\n     */\n    function executeKeeperFee() external override returns (uint256) {\n        require(\n            pendingUInts256[_TREASURY_FEE_FRACTION_KEY] +\n                pendingUInts256[_KEEPER_FEE_FRACTION_KEY] <=\n                ScaledMath.ONE,\n            Error.INVALID_AMOUNT\n        );\n        return _executeUInt256(_KEEPER_FEE_FRACTION_KEY);\n    }\n\n    function resetKeeperFee() external override onlyGovernance returns (bool) {\n        return _resetUInt256Config(_KEEPER_FEE_FRACTION_KEY);\n    }\n\n    function prepareKeeperGauge(address lpToken, address newKeeperGauge)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        return _prepare(_getKeeperGaugeKey(lpToken), newKeeperGauge);\n    }\n\n    function executeKeeperGauge(address lpToken) external override returns (address) {\n        return _executeAddress(_getKeeperGaugeKey(lpToken));\n    }\n\n    function resetKeeperGauge(address lpToken) external override onlyGovernance returns (bool) {\n        return _resetAddressConfig(_getKeeperGaugeKey(lpToken));\n    }\n\n    /**\n     * @notice Prepare update of treasury fee (with time delay enforced).\n     * @param newTreasuryFee New treasury fee value.\n     * @return `true` if successful.\n     */\n    function prepareTreasuryFee(uint256 newTreasuryFee)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(newTreasuryFee <= ScaledMath.ONE, Error.INVALID_AMOUNT);\n        return _prepare(_TREASURY_FEE_FRACTION_KEY, newTreasuryFee);\n    }\n\n    /**\n     * @notice Execute update of treasury fee (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New treasury fee.\n     */\n    function executeTreasuryFee() external override returns (uint256) {\n        require(\n            pendingUInts256[_TREASURY_FEE_FRACTION_KEY] +\n                pendingUInts256[_KEEPER_FEE_FRACTION_KEY] <=\n                ScaledMath.ONE,\n            Error.INVALID_AMOUNT\n        );\n        return _executeUInt256(_TREASURY_FEE_FRACTION_KEY);\n    }\n\n    function resetTreasuryFee() external override onlyGovernance returns (bool) {\n        return _resetUInt256Config(_TREASURY_FEE_FRACTION_KEY);\n    }\n\n    function getKeeperFeeFraction() public view override returns (uint256) {\n        return currentUInts256[_KEEPER_FEE_FRACTION_KEY];\n    }\n\n    function getKeeperGauge(address lpToken) public view override returns (address) {\n        return currentAddresses[_getKeeperGaugeKey(lpToken)];\n    }\n\n    function getTreasuryFeeFraction() public view override returns (uint256) {\n        return currentUInts256[_TREASURY_FEE_FRACTION_KEY];\n    }\n\n    function _getKeeperGaugeKey(address lpToken) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_KEEPER_GAUGE_KEY, lpToken));\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../interfaces/IController.sol\";\nimport \"../../interfaces/tokenomics/IKeeperGauge.sol\";\n\nimport \"../../libraries/ScaledMath.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\nimport \"../../libraries/UncheckedMath.sol\";\n\nimport \"../access/Authorization.sol\";\n\ncontract KeeperGauge is IKeeperGauge, Authorization {\n    using AddressProviderHelpers for IAddressProvider;\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n\n    struct KeeperRecord {\n        mapping(uint256 => uint256) feesInPeriod;\n        uint256 nextEpochToClaim;\n        bool firstEpochSet;\n    }\n\n    mapping(address => KeeperRecord) public keeperRecords;\n    mapping(uint256 => uint256) public perPeriodTotalFees;\n\n    IController public immutable controller;\n    address public immutable pool;\n    uint256 public epoch;\n\n    uint48 public lastUpdated;\n    mapping(uint256 => uint256) public perPeriodTotalInflation;\n\n    bool public override killed;\n\n    modifier onlyInflationManager() {\n        require(msg.sender == address(controller.inflationManager()), Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    constructor(IController _controller, address _pool)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        pool = _pool;\n        lastUpdated = uint48(block.timestamp);\n    }\n\n    /**\n     * @notice Shut down the gauge.\n     * @dev Accrued inflation can still be claimed from the gauge after shutdown.\n     * @return `true` if successful.\n     */\n    function kill() external override onlyInflationManager returns (bool) {\n        poolCheckpoint();\n        epoch++;\n        killed = true;\n        return true;\n    }\n\n    /**\n     * @notice Report fees generated by a keeper (this is the basis for inflation accrual).\n     * @dev lpTokenAddress is included for forward compatibility with a single gauge solution.\n     * @param beneficiary Address of the keeper who earned the fees.\n     * @param amount Amount of fees (in lp tokens) earned.\n     * @param lpTokenAddress Address of the lpToken in which the fees are paid.\n     * @return `true` if successful.\n     */\n    function reportFees(\n        address beneficiary,\n        uint256 amount,\n        address lpTokenAddress\n    ) external override returns (bool) {\n        lpTokenAddress; // silencing compiler warning\n        require(\n            IController(controller).addressProvider().isWhiteListedFeeHandler(msg.sender),\n            Error.ADDRESS_NOT_WHITELISTED\n        );\n        require(!killed, Error.CONTRACT_PAUSED);\n        if (!keeperRecords[beneficiary].firstEpochSet) {\n            keeperRecords[beneficiary].firstEpochSet = true;\n            keeperRecords[beneficiary].nextEpochToClaim = epoch;\n        }\n        keeperRecords[beneficiary].feesInPeriod[epoch] += amount;\n        perPeriodTotalFees[epoch] += amount;\n        return true;\n    }\n\n    /**\n     * @notice Advance the inflation accrual epoch.\n     * @return `true` if successful.\n     */\n    function advanceEpoch() external virtual override onlyInflationManager returns (bool) {\n        poolCheckpoint();\n        epoch++;\n        return true;\n    }\n\n    function claimRewards(address beneficiary) external override returns (uint256) {\n        return claimRewards(beneficiary, epoch);\n    }\n\n    function claimableRewards(address beneficiary) external view override returns (uint256) {\n        return _calcTotalClaimable(beneficiary, keeperRecords[beneficiary].nextEpochToClaim, epoch);\n    }\n\n    function poolCheckpoint() public override returns (bool) {\n        if (killed) return false;\n        uint256 timeElapsed = block.timestamp - uint256(lastUpdated);\n        uint256 currentRate = IController(controller).inflationManager().getKeeperRateForPool(pool);\n        perPeriodTotalInflation[epoch] += currentRate * timeElapsed;\n        lastUpdated = uint48(block.timestamp);\n        return true;\n    }\n\n    /**\n     * @notice Claim rewards with an epoch up to which they should be claimed specified.\n     * @param beneficiary Address to claim rewards for.\n     * @param endEpoch Epoch up to which to claim rewards.\n     * @return The amount of rewards claimed.\n     */\n    function claimRewards(address beneficiary, uint256 endEpoch) public override returns (uint256) {\n        require(\n            msg.sender == beneficiary || _roleManager().hasRole(Roles.GAUGE_ZAP, msg.sender),\n            Error.UNAUTHORIZED_ACCESS\n        );\n        if (endEpoch > epoch) {\n            endEpoch = epoch;\n        }\n\n        uint256 totalClaimable = _calcTotalClaimable(\n            beneficiary,\n            keeperRecords[beneficiary].nextEpochToClaim,\n            endEpoch\n        );\n        keeperRecords[beneficiary].nextEpochToClaim = endEpoch;\n        require(totalClaimable > 0, Error.ZERO_TRANSFER_NOT_ALLOWED);\n        _mintRewards(beneficiary, totalClaimable);\n\n        return totalClaimable;\n    }\n\n    function _mintRewards(address beneficiary, uint256 amount) internal returns (bool) {\n        IController(controller).inflationManager().mintRewards(beneficiary, amount);\n        return true;\n    }\n\n    function _calcTotalClaimable(\n        address beneficiary,\n        uint256 startEpoch,\n        uint256 endEpoch\n    ) internal view returns (uint256) {\n        uint256 totalClaimable;\n        for (uint256 i = startEpoch; i < endEpoch; i = i.uncheckedInc()) {\n            totalClaimable += (\n                keeperRecords[beneficiary].feesInPeriod[i].scaledDiv(perPeriodTotalFees[i])\n            ).scaledMul(perPeriodTotalInflation[i]);\n        }\n        return totalClaimable;\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"../../interfaces/IStakerVault.sol\";\nimport \"../../interfaces/tokenomics/IInflationManager.sol\";\nimport \"../../interfaces/tokenomics/IKeeperGauge.sol\";\nimport \"../../interfaces/tokenomics/IAmmGauge.sol\";\n\nimport \"../../libraries/EnumerableMapping.sol\";\nimport \"../../libraries/EnumerableExtensions.sol\";\nimport \"../../libraries/AddressProviderHelpers.sol\";\nimport \"../../libraries/UncheckedMath.sol\";\n\nimport \"./Minter.sol\";\nimport \"../utils/Preparable.sol\";\nimport \"../access/Authorization.sol\";\n\ncontract InflationManager is Authorization, IInflationManager, Preparable {\n    using UncheckedMath for uint256;\n    using EnumerableMapping for EnumerableMapping.AddressToAddressMap;\n    using EnumerableExtensions for EnumerableMapping.AddressToAddressMap;\n    using AddressProviderHelpers for IAddressProvider;\n\n    IAddressProvider public immutable addressProvider;\n\n    bytes32 internal constant _KEEPER_WEIGHT_KEY = \"keeperWeight\";\n    bytes32 internal constant _AMM_WEIGHT_KEY = \"ammWeight\";\n    bytes32 internal constant _LP_WEIGHT_KEY = \"lpWeight\";\n\n    address public minter;\n    bool public weightBasedKeeperDistributionDeactivated;\n    uint256 public totalKeeperPoolWeight;\n    uint256 public totalLpPoolWeight;\n    uint256 public totalAmmTokenWeight;\n\n    // Pool -> keeperGauge\n    EnumerableMapping.AddressToAddressMap private _keeperGauges;\n    // AMM token -> ammGauge\n    EnumerableMapping.AddressToAddressMap private _ammGauges;\n\n    mapping(address => bool) public gauges;\n\n    event NewKeeperWeight(address indexed pool, uint256 newWeight);\n    event NewLpWeight(address indexed pool, uint256 newWeight);\n    event NewAmmTokenWeight(address indexed token, uint256 newWeight);\n\n    modifier onlyGauge() {\n        require(gauges[msg.sender], Error.UNAUTHORIZED_ACCESS);\n        _;\n    }\n\n    constructor(IAddressProvider _addressProvider)\n        Authorization(_addressProvider.getRoleManager())\n    {\n        addressProvider = _addressProvider;\n    }\n\n    function setMinter(address _minter) external override onlyGovernance returns (bool) {\n        require(minter == address(0), Error.ADDRESS_ALREADY_SET);\n        require(_minter != address(0), Error.INVALID_MINTER);\n        minter = _minter;\n        return true;\n    }\n\n    /**\n     * @notice Advance the keeper gauge for a pool by on epoch.\n     * @param pool Pool for which the keeper gauge is advanced.\n     * @return `true` if successful.\n     */\n    function advanceKeeperGaugeEpoch(address pool) external override onlyGovernance returns (bool) {\n        IKeeperGauge(_keeperGauges.get(pool)).advanceEpoch();\n        return true;\n    }\n\n    /**\n     * @notice Mints BKD tokens.\n     * @param beneficiary Address to receive the tokens.\n     * @param amount Amount of tokens to mint.\n     */\n    function mintRewards(address beneficiary, uint256 amount) external override onlyGauge {\n        Minter(minter).mint(beneficiary, amount);\n    }\n\n    /**\n     * @notice Deactivates the weight-based distribution of keeper inflation.\n     * @dev This can only be done once, when the keeper inflation mechanism is altered.\n     * @return `true` if successful.\n     */\n    function deactivateWeightBasedKeeperDistribution()\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(!weightBasedKeeperDistributionDeactivated, \"Weight-based dist. deactivated.\");\n        address[] memory liquidityPools = addressProvider.allPools();\n        uint256 length = liquidityPools.length;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            _removeKeeperGauge(address(liquidityPools[i]));\n        }\n        weightBasedKeeperDistributionDeactivated = true;\n        return true;\n    }\n\n    /**\n     * @notice Checkpoints all gauges.\n     * @dev This is mostly used upon inflation rate updates.\n     * @return `true` if successful.\n     */\n    function checkpointAllGauges() external override returns (bool) {\n        uint256 length = _keeperGauges.length();\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            IKeeperGauge(_keeperGauges.valueAt(i)).poolCheckpoint();\n        }\n        address[] memory stakerVaults = addressProvider.allStakerVaults();\n        for (uint256 i; i < stakerVaults.length; i = i.uncheckedInc()) {\n            IStakerVault(stakerVaults[i]).poolCheckpoint();\n        }\n\n        length = _ammGauges.length();\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            IAmmGauge(_ammGauges.valueAt(i)).poolCheckpoint();\n        }\n        return true;\n    }\n\n    /**\n     * @notice Prepare update of a keeper pool weight (with time delay enforced).\n     * @param pool Pool to update the keeper weight for.\n     * @param newPoolWeight New weight for the keeper inflation for the pool.\n     * @return `true` if successful.\n     */\n    function prepareKeeperPoolWeight(address pool, uint256 newPoolWeight)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(_keeperGauges.contains(pool), Error.INVALID_ARGUMENT);\n        bytes32 key = _getKeeperGaugeKey(pool);\n        _prepare(key, newPoolWeight);\n        return true;\n    }\n\n    /**\n     * @notice Execute update of keeper pool weight (with time delay enforced).\n     * @param pool Pool to execute the keeper weight update for.\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New keeper pool weight.\n     */\n    function executeKeeperPoolWeight(address pool) external override returns (uint256) {\n        bytes32 key = _getKeeperGaugeKey(pool);\n        _executeKeeperPoolWeight(key, pool, isInflationWeightManager(msg.sender));\n        return currentUInts256[key];\n    }\n\n    /**\n     * @notice Prepare update of a batch of keeperGauge weights (with time delay enforced).\n     * @dev Each entry in the pools array corresponds to an entry in the weights array.\n     * @param pools Pools to update the keeper weight for.\n     * @param weights New weights for the keeper inflation for the pools.\n     * @return `true` if successful.\n     */\n    function batchPrepareKeeperPoolWeights(address[] calldata pools, uint256[] calldata weights)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        uint256 length = pools.length;\n        require(length == weights.length, Error.INVALID_ARGUMENT);\n        bytes32 key;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            require(_keeperGauges.contains(pools[i]), Error.INVALID_ARGUMENT);\n            key = _getKeeperGaugeKey(pools[i]);\n            _prepare(key, weights[i]);\n        }\n        return true;\n    }\n\n    function whitelistGauge(address gauge) external override onlyRole(Roles.CONTROLLER) {\n        gauges[gauge] = true;\n    }\n\n    /**\n     * @notice Execute weight updates for a batch of _keeperGauges.\n     * @param pools Pools to execute the keeper weight updates for.\n     * @return `true` if successful.\n     */\n    function batchExecuteKeeperPoolWeights(address[] calldata pools)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        uint256 length = pools.length;\n        bytes32 key;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            key = _getKeeperGaugeKey(pools[i]);\n            _executeKeeperPoolWeight(key, pools[i], isInflationWeightManager(msg.sender));\n        }\n        return true;\n    }\n\n    function removeStakerVaultFromInflation(address stakerVault, address lpToken)\n        external\n        override\n        onlyRole(Roles.CONTROLLER)\n    {\n        bytes32 key = _getLpStakerVaultKey(stakerVault);\n        _prepare(key, 0);\n        _executeLpPoolWeight(key, lpToken, stakerVault, true);\n    }\n\n    /**\n     * @notice Prepare update of a lp pool weight (with time delay enforced).\n     * @param lpToken LP token to update the weight for.\n     * @param newPoolWeight New LP inflation weight.\n     * @return `true` if successful.\n     */\n    function prepareLpPoolWeight(address lpToken, uint256 newPoolWeight)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        address stakerVault = addressProvider.getStakerVault(lpToken);\n        // Require both that gauge is registered and that pool is still in action\n        require(gauges[IStakerVault(stakerVault).getLpGauge()], Error.GAUGE_DOES_NOT_EXIST);\n        _ensurePoolExists(lpToken);\n        bytes32 key = _getLpStakerVaultKey(stakerVault);\n        _prepare(key, newPoolWeight);\n        return true;\n    }\n\n    /**\n     * @notice Execute update of lp pool weight (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New lp pool weight.\n     */\n    function executeLpPoolWeight(address lpToken) external override returns (uint256) {\n        address stakerVault = addressProvider.getStakerVault(lpToken);\n        // Require both that gauge is registered and that pool is still in action\n        require(IStakerVault(stakerVault).getLpGauge() != address(0), Error.ADDRESS_NOT_FOUND);\n        _ensurePoolExists(lpToken);\n        bytes32 key = _getLpStakerVaultKey(stakerVault);\n        _executeLpPoolWeight(key, lpToken, stakerVault, isInflationWeightManager(msg.sender));\n        return currentUInts256[key];\n    }\n\n    /**\n     * @notice Prepare update of a batch of LP token weights (with time delay enforced).\n     * @dev Each entry in the lpTokens array corresponds to an entry in the weights array.\n     * @param lpTokens LpTokens to update the inflation weight for.\n     * @param weights New weights for the inflation for the LpTokens.\n     * @return `true` if successful.\n     */\n    function batchPrepareLpPoolWeights(address[] calldata lpTokens, uint256[] calldata weights)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        uint256 length = lpTokens.length;\n        require(length == weights.length, \"Invalid length of arguments\");\n        bytes32 key;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            address stakerVault = addressProvider.getStakerVault(lpTokens[i]);\n            // Require both that gauge is registered and that pool is still in action\n            require(IStakerVault(stakerVault).getLpGauge() != address(0), Error.ADDRESS_NOT_FOUND);\n            _ensurePoolExists(lpTokens[i]);\n            key = _getLpStakerVaultKey(stakerVault);\n            _prepare(key, weights[i]);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Execute weight updates for a batch of LpTokens.\n     * @dev If this is called by the INFLATION_MANAGER role address, no time delay is enforced.\n     * @param lpTokens LpTokens to execute the weight updates for.\n     * @return `true` if successful.\n     */\n    function batchExecuteLpPoolWeights(address[] calldata lpTokens)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        uint256 length = lpTokens.length;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            address lpToken = lpTokens[i];\n            address stakerVault = addressProvider.getStakerVault(lpToken);\n            // Require both that gauge is registered and that pool is still in action\n            require(IStakerVault(stakerVault).getLpGauge() != address(0), Error.ADDRESS_NOT_FOUND);\n            _ensurePoolExists(lpToken);\n            bytes32 key = _getLpStakerVaultKey(stakerVault);\n            _executeLpPoolWeight(key, lpToken, stakerVault, isInflationWeightManager(msg.sender));\n        }\n        return true;\n    }\n\n    /**\n     * @notice Prepare an inflation weight update for an AMM token (with time delay enforced).\n     * @param token AMM token to update the weight for.\n     * @param newTokenWeight New AMM token inflation weight.\n     * @return `true` if successful.\n     */\n    function prepareAmmTokenWeight(address token, uint256 newTokenWeight)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        require(_ammGauges.contains(token), \"amm gauge not found\");\n        bytes32 key = _getAmmGaugeKey(token);\n        _prepare(key, newTokenWeight);\n        return true;\n    }\n\n    /**\n     * @notice Execute update of lp pool weight (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return New lp pool weight.\n     */\n    function executeAmmTokenWeight(address token) external override returns (uint256) {\n        bytes32 key = _getAmmGaugeKey(token);\n        _executeAmmTokenWeight(token, key, isInflationWeightManager(msg.sender));\n        return currentUInts256[key];\n    }\n\n    /**\n     * @notice Registers a pool's strategy with the stakerVault of the pool where the strategy deposits.\n     * @dev This simply avoids the strategy accumulating tokens in the deposit pool.\n     * @param depositStakerVault StakerVault of the pool where the strategy deposits.\n     * @param strategyPool The pool of the strategy to register (avoids blacklisting other addresses).\n     * @return `true` if successful.\n     */\n    function addStrategyToDepositStakerVault(address depositStakerVault, address strategyPool)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        IVault _vault = ILiquidityPool(strategyPool).getVault();\n        IStakerVault(depositStakerVault).addStrategy(address(_vault.getStrategy()));\n        return true;\n    }\n\n    /**\n     * @notice Prepare update of a batch of AMM token weights (with time delay enforced).\n     * @dev Each entry in the tokens array corresponds to an entry in the weights array.\n     * @param tokens AMM tokens to update the inflation weight for.\n     * @param weights New weights for the inflation for the AMM tokens.\n     * @return `true` if successful.\n     */\n    function batchPrepareAmmTokenWeights(address[] calldata tokens, uint256[] calldata weights)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        uint256 length = tokens.length;\n        bytes32 key;\n        require(length == weights.length, \"Invalid length of arguments\");\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            require(_ammGauges.contains(tokens[i]), \"amm gauge not found\");\n            key = _getAmmGaugeKey(tokens[i]);\n            _prepare(key, weights[i]);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Execute weight updates for a batch of AMM tokens.\n     * @dev If this is called by the INFLATION_MANAGER role address, no time delay is enforced.\n     * @param tokens AMM tokens to execute the weight updates for.\n     * @return `true` if successful.\n     */\n    function batchExecuteAmmTokenWeights(address[] calldata tokens)\n        external\n        override\n        onlyRoles2(Roles.GOVERNANCE, Roles.INFLATION_MANAGER)\n        returns (bool)\n    {\n        uint256 length = tokens.length;\n        bool isWeightManager = isInflationWeightManager(msg.sender);\n        bytes32 key;\n        address token;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            token = tokens[i];\n            key = _getAmmGaugeKey(token);\n            _executeAmmTokenWeight(token, key, isWeightManager);\n        }\n        return true;\n    }\n\n    /**\n     * @notice Sets the KeeperGauge for a pool.\n     * @dev Multiple pools can have the same KeeperGauge.\n     * @param pool Address of pool to set the KeeperGauge for.\n     * @param _keeperGauge Address of KeeperGauge.\n     * @return `true` if successful.\n     */\n    function setKeeperGauge(address pool, address _keeperGauge)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        uint256 length = _keeperGauges.length();\n        bool keeperGaugeExists = false;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            if (address(_keeperGauges.valueAt(i)) == _keeperGauge) {\n                keeperGaugeExists = true;\n                break;\n            }\n        }\n        // Check to make sure that once weight-based dist is deactivated, only one gauge can exist\n        if (!keeperGaugeExists && weightBasedKeeperDistributionDeactivated && length >= 1) {\n            return false;\n        }\n        (bool exists, address keeperGauge) = _keeperGauges.tryGet(pool);\n        require(!exists || keeperGauge != _keeperGauge, Error.INVALID_ARGUMENT);\n\n        if (exists && !IKeeperGauge(keeperGauge).killed()) {\n            IKeeperGauge(keeperGauge).poolCheckpoint();\n            IKeeperGauge(keeperGauge).kill();\n        }\n        _keeperGauges.set(pool, _keeperGauge);\n        gauges[_keeperGauge] = true;\n        return true;\n    }\n\n    function removeKeeperGauge(address pool) external onlyGovernance returns (bool) {\n        _removeKeeperGauge(pool);\n        return true;\n    }\n\n    /**\n     * @notice Sets the AmmGauge for a particular AMM token.\n     * @param token Address of the amm token.\n     * @param _ammGauge Address of AmmGauge.\n     * @return `true` if successful.\n     */\n    function setAmmGauge(address token, address _ammGauge)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(IAmmGauge(_ammGauge).isAmmToken(token), Error.ADDRESS_NOT_WHITELISTED);\n        uint256 length = _ammGauges.length();\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            if (address(_ammGauges.valueAt(i)) == _ammGauge) {\n                return false;\n            }\n        }\n        if (_ammGauges.contains(token)) {\n            address ammGauge = _ammGauges.get(token);\n            IAmmGauge(ammGauge).poolCheckpoint();\n            IAmmGauge(ammGauge).kill();\n        }\n        _ammGauges.set(token, _ammGauge);\n        gauges[_ammGauge] = true;\n        return true;\n    }\n\n    function removeAmmGauge(address token) external override onlyGovernance returns (bool) {\n        if (!_ammGauges.contains(token)) return false;\n        address ammGauge = _ammGauges.get(token);\n        bytes32 key = _getAmmGaugeKey(token);\n        _prepare(key, 0);\n        _executeAmmTokenWeight(token, key, true);\n        IAmmGauge(ammGauge).kill();\n        _ammGauges.remove(token);\n        // Do not delete from the gauges map to allow claiming of remaining balances\n        emit AmmGaugeDelisted(token, ammGauge);\n        return true;\n    }\n\n    function addGaugeForVault(address lpToken) external override returns (bool) {\n        IStakerVault _stakerVault = IStakerVault(msg.sender);\n        require(addressProvider.isStakerVault(msg.sender, lpToken), Error.UNAUTHORIZED_ACCESS);\n        address lpGauge = _stakerVault.getLpGauge();\n        require(lpGauge != address(0), Error.GAUGE_DOES_NOT_EXIST);\n        gauges[lpGauge] = true;\n        return true;\n    }\n\n    function getAllAmmGauges() external view override returns (address[] memory) {\n        return _ammGauges.valuesArray();\n    }\n\n    function getLpRateForStakerVault(address stakerVault) external view override returns (uint256) {\n        if (minter == address(0) || totalLpPoolWeight == 0) {\n            return 0;\n        }\n\n        bytes32 key = _getLpStakerVaultKey(stakerVault);\n        uint256 lpInflationRate = Minter(minter).getLpInflationRate();\n        uint256 poolInflationRate = (currentUInts256[key] * lpInflationRate) / totalLpPoolWeight;\n\n        return poolInflationRate;\n    }\n\n    function getKeeperRateForPool(address pool) external view override returns (uint256) {\n        if (minter == address(0)) {\n            return 0;\n        }\n        uint256 keeperInflationRate = Minter(minter).getKeeperInflationRate();\n        // After deactivation of weight based dist, KeeperGauge handles the splitting\n        if (weightBasedKeeperDistributionDeactivated) return keeperInflationRate;\n        if (totalKeeperPoolWeight == 0) return 0;\n        bytes32 key = _getKeeperGaugeKey(pool);\n        uint256 poolInflationRate = (currentUInts256[key] * keeperInflationRate) /\n            totalKeeperPoolWeight;\n        return poolInflationRate;\n    }\n\n    function getAmmRateForToken(address token) external view override returns (uint256) {\n        if (minter == address(0) || totalAmmTokenWeight == 0) {\n            return 0;\n        }\n        bytes32 key = _getAmmGaugeKey(token);\n        uint256 ammInflationRate = Minter(minter).getAmmInflationRate();\n        uint256 ammTokenInflationRate = (currentUInts256[key] * ammInflationRate) /\n            totalAmmTokenWeight;\n        return ammTokenInflationRate;\n    }\n\n    //TOOD: See if this is still needed somewhere\n    function getKeeperWeightForPool(address pool) external view override returns (uint256) {\n        bytes32 key = _getKeeperGaugeKey(pool);\n        return currentUInts256[key];\n    }\n\n    function getAmmWeightForToken(address token) external view override returns (uint256) {\n        bytes32 key = _getAmmGaugeKey(token);\n        return currentUInts256[key];\n    }\n\n    function getLpPoolWeight(address lpToken) external view override returns (uint256) {\n        address stakerVault = addressProvider.getStakerVault(lpToken);\n        bytes32 key = _getLpStakerVaultKey(stakerVault);\n        return currentUInts256[key];\n    }\n\n    function getKeeperGaugeForPool(address pool) external view override returns (address) {\n        (, address keeperGauge) = _keeperGauges.tryGet(pool);\n        return keeperGauge;\n    }\n\n    function getAmmGaugeForToken(address token) external view override returns (address) {\n        (, address ammGauge) = _ammGauges.tryGet(token);\n        return ammGauge;\n    }\n\n    /**\n     * @notice Check if an account is governance proxy.\n     * @param account Address to check.\n     * @return `true` if account is governance proxy.\n     */\n    function isInflationWeightManager(address account) public view override returns (bool) {\n        return _roleManager().hasRole(Roles.INFLATION_MANAGER, account);\n    }\n\n    function _executeKeeperPoolWeight(\n        bytes32 key,\n        address pool,\n        bool isWeightManager\n    ) internal returns (bool) {\n        IKeeperGauge(_keeperGauges.get(pool)).poolCheckpoint();\n        totalKeeperPoolWeight = totalKeeperPoolWeight - currentUInts256[key] + pendingUInts256[key];\n        totalKeeperPoolWeight = totalKeeperPoolWeight > 0 ? totalKeeperPoolWeight : 0;\n        isWeightManager ? _setConfig(key, pendingUInts256[key]) : _executeUInt256(key);\n        emit NewKeeperWeight(pool, currentUInts256[key]);\n        return true;\n    }\n\n    function _executeLpPoolWeight(\n        bytes32 key,\n        address lpToken,\n        address stakerVault,\n        bool isWeightManager\n    ) internal returns (bool) {\n        IStakerVault(stakerVault).poolCheckpoint();\n        totalLpPoolWeight = totalLpPoolWeight - currentUInts256[key] + pendingUInts256[key];\n        totalLpPoolWeight = totalLpPoolWeight > 0 ? totalLpPoolWeight : 0;\n        isWeightManager ? _setConfig(key, pendingUInts256[key]) : _executeUInt256(key);\n        emit NewLpWeight(lpToken, currentUInts256[key]);\n        return true;\n    }\n\n    function _executeAmmTokenWeight(\n        address token,\n        bytes32 key,\n        bool isWeightManager\n    ) internal returns (bool) {\n        IAmmGauge(_ammGauges.get(token)).poolCheckpoint();\n        totalAmmTokenWeight = totalAmmTokenWeight - currentUInts256[key] + pendingUInts256[key];\n        totalAmmTokenWeight = totalAmmTokenWeight > 0 ? totalAmmTokenWeight : 0;\n        isWeightManager ? _setConfig(key, pendingUInts256[key]) : _executeUInt256(key);\n        // Do pool checkpoint to update the pool integrals\n        emit NewAmmTokenWeight(token, currentUInts256[key]);\n        return true;\n    }\n\n    function _removeKeeperGauge(address pool) internal {\n        address keeperGauge = _keeperGauges.get(pool);\n        bytes32 key = _getKeeperGaugeKey(pool);\n        _prepare(key, 0);\n        _executeKeeperPoolWeight(key, pool, true);\n        _keeperGauges.remove(pool);\n        IKeeperGauge(keeperGauge).kill();\n        // Do not delete from the gauges map to allow claiming of remaining balances\n        emit KeeperGaugeDelisted(pool, keeperGauge);\n    }\n\n    function _ensurePoolExists(address lpToken) internal view {\n        require(\n            address(addressProvider.safeGetPoolForToken(lpToken)) != address(0),\n            Error.ADDRESS_NOT_FOUND\n        );\n    }\n\n    function _getKeeperGaugeKey(address pool) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_KEEPER_WEIGHT_KEY, pool));\n    }\n\n    function _getAmmGaugeKey(address token) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_AMM_WEIGHT_KEY, token));\n    }\n\n    function _getLpStakerVaultKey(address vault) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_LP_WEIGHT_KEY, vault));\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\n\nimport \"../../../interfaces/IGasBank.sol\";\nimport \"../../../interfaces/pool/ILiquidityPool.sol\";\nimport \"../../../interfaces/IController.sol\";\nimport \"../../../interfaces/IStakerVault.sol\";\nimport \"../../../interfaces/actions/topup/ITopUpHandler.sol\";\nimport \"../../../interfaces/actions/topup/ITopUpAction.sol\";\nimport \"../../../interfaces/actions/IActionFeeHandler.sol\";\n\nimport \"../../../libraries/AddressProviderHelpers.sol\";\nimport \"../../../libraries/Errors.sol\";\nimport \"../../../libraries/ScaledMath.sol\";\nimport \"../../../libraries/EnumerableExtensions.sol\";\nimport \"../../../libraries/UncheckedMath.sol\";\n\nimport \"../../access/Authorization.sol\";\nimport \"../../utils/Preparable.sol\";\n\n/**\n * @notice The logic here should really be part of the top-up action\n * but is split in a library to circumvent the byte-code size limit\n */\nlibrary TopUpActionLibrary {\n    using SafeERC20 for IERC20;\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    /**\n     * @dev \"Locks\" an amount of tokens on behalf of the TopUpAction\n     * Funds are taken from staker vault if allowance is sufficient, else direct transfer or a combination of both.\n     * @param stakerVaultAddress The address of the staker vault\n     * @param payer Owner of the funds to be locked\n     * @param token Token to lock\n     * @param lockAmount Minimum amount of `token` to lock\n     * @param depositAmount Amount of `token` that was deposited.\n     *                      If this is 0 then the staker vault allowance should be used.\n     *                      If this is greater than `requiredAmount` more tokens will be locked.\n     */\n    function lockFunds(\n        address stakerVaultAddress,\n        address payer,\n        address token,\n        uint256 lockAmount,\n        uint256 depositAmount\n    ) external {\n        IStakerVault stakerVault = IStakerVault(stakerVaultAddress);\n\n        // stake deposit amount\n        if (depositAmount > 0) {\n            depositAmount = depositAmount > lockAmount ? lockAmount : depositAmount;\n            IERC20(token).safeTransferFrom(payer, address(this), depositAmount);\n            _approve(token, stakerVaultAddress);\n            stakerVault.stake(depositAmount);\n            stakerVault.increaseActionLockedBalance(payer, depositAmount);\n            lockAmount -= depositAmount;\n        }\n\n        // use stake vault allowance if available and required\n        if (lockAmount > 0) {\n            uint256 balance = stakerVault.balanceOf(payer);\n            uint256 allowance = stakerVault.allowance(payer, address(this));\n            uint256 availableFunds = balance < allowance ? balance : allowance;\n            if (availableFunds >= lockAmount) {\n                stakerVault.transferFrom(payer, address(this), lockAmount);\n                stakerVault.increaseActionLockedBalance(payer, lockAmount);\n                lockAmount = 0;\n            }\n        }\n\n        require(lockAmount == 0, Error.INSUFFICIENT_UPDATE_BALANCE);\n    }\n\n    /**\n     * @dev Computes and returns the amount of LP tokens of type `token` that will be received in exchange for an `amount` of the underlying.\n     */\n    function calcExchangeAmount(\n        IAddressProvider addressProvider,\n        address token,\n        address actionToken,\n        uint256 amount\n    ) external view returns (uint256) {\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        uint256 rate = pool.exchangeRate();\n        address underlying = pool.getUnderlying();\n        require(underlying == actionToken, Error.TOKEN_NOT_USABLE);\n        return amount.scaledDivRoundUp(rate);\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token The token to approve for.\n     * @param spender The spender to approve.\n     */\n    function _approve(address token, address spender) private {\n        if (IERC20(token).allowance(address(this), spender) > 0) return;\n        IERC20(token).safeApprove(spender, type(uint256).max);\n    }\n}\n\ncontract TopUpAction is ITopUpAction, Authorization, Preparable, Initializable {\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n    using ScaledMath for uint128;\n    using SafeERC20 for IERC20;\n    using EnumerableSet for EnumerableSet.AddressSet;\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n    using EnumerableExtensions for EnumerableSet.AddressSet;\n    using AddressProviderHelpers for IAddressProvider;\n    using SafeCast for uint256;\n\n    /**\n     * @dev Temporary struct to hold local variables in execute\n     * and avoid the stack being \"too deep\"\n     */\n    struct ExecuteLocalVars {\n        uint256 minActionAmountToTopUp;\n        uint256 actionTokenAmount;\n        uint256 depositTotalFeesAmount;\n        uint256 actionAmountWithFees;\n        uint256 userFactor;\n        uint256 rate;\n        uint256 depositAmountWithFees;\n        uint256 depositAmountWithoutFees;\n        uint256 actionFee;\n        uint256 totalActionTokenAmount;\n        uint128 totalTopUpAmount;\n        bool topupResult;\n        uint256 gasBankBalance;\n        uint256 initialGas;\n        uint256 gasConsumed;\n        uint256 userGasPrice;\n        uint256 estimatedRequiredGas;\n        uint256 estimatedRequiredWeiForGas;\n        uint256 requiredWeiForGas;\n        uint256 reimbursedWeiForGas;\n        address underlying;\n        bool removePosition;\n        address topUpHandler;\n    }\n\n    EnumerableSet.AddressSet private _usableTokens;\n\n    uint256 internal constant _INITIAL_ESTIMATED_GAS_USAGE = 550_000;\n\n    bytes32 internal constant _ACTION_FEE_KEY = \"ActionFee\";\n    bytes32 internal constant _FEE_HANDLER_KEY = \"FeeHandler\";\n    bytes32 internal constant _TOP_UP_HANDLER_KEY = \"TopUpHandler\";\n    bytes32 internal constant _ESTIMATED_GAS_USAGE_KEY = \"EstimatedGasUsage\";\n\n    uint256 internal constant _MAX_ACTION_FEE = 0.5 * 1e18;\n\n    IController public immutable controller;\n    IAddressProvider public immutable addressProvider;\n\n    EnumerableSet.Bytes32Set internal _supportedProtocols;\n\n    /// @notice mapping of (payer -> account -> protocol -> Record)\n    mapping(address => mapping(bytes32 => mapping(bytes32 => Record))) private _positions;\n\n    mapping(address => RecordMeta[]) internal _userPositions;\n\n    EnumerableSet.AddressSet internal _usersWithPositions;\n\n    constructor(IController _controller)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        addressProvider = controller.addressProvider();\n        _setConfig(_ESTIMATED_GAS_USAGE_KEY, _INITIAL_ESTIMATED_GAS_USAGE);\n    }\n\n    receive() external payable {\n        // solhint-disable-previous-line no-empty-blocks\n    }\n\n    function initialize(\n        address feeHandler,\n        bytes32[] calldata protocols,\n        address[] calldata handlers\n    ) external initializer onlyGovernance {\n        require(protocols.length == handlers.length, Error.INVALID_ARGUMENT);\n        _setConfig(_FEE_HANDLER_KEY, feeHandler);\n        for (uint256 i; i < protocols.length; i = i.uncheckedInc()) {\n            bytes32 protocolKey = _getProtocolKey(protocols[i]);\n            _setConfig(protocolKey, handlers[i]);\n            _updateTopUpHandler(protocols[i], address(0), handlers[i]);\n        }\n    }\n\n    /**\n     * @notice Register a top up action.\n     * @dev The `depositAmount`, once converted to units of `actionToken`, must be greater or equal to the `totalTopUpAmount` (which is denominated in `actionToken`).\n     * @param account Account to be topped up (first 20 bytes will typically be the address).\n     * @param protocol Protocol which holds position to be topped up.\n     * @param depositAmount Amount of `depositToken` that will be locked.\n     * @param record containing the data for the position to register\n     */\n    function register(\n        bytes32 account,\n        bytes32 protocol,\n        uint128 depositAmount,\n        Record memory record\n    ) external payable override returns (bool) {\n        require(record.maxFee != 0, Error.INVALID_MAX_FEE);\n        require(_supportedProtocols.contains(protocol), Error.PROTOCOL_NOT_FOUND);\n        require(record.singleTopUpAmount > 0, Error.INVALID_AMOUNT);\n        require(record.threshold > ScaledMath.ONE, Error.INVALID_AMOUNT);\n        require(record.singleTopUpAmount <= record.totalTopUpAmount, Error.INVALID_AMOUNT);\n        require(\n            _positions[msg.sender][account][protocol].threshold == 0,\n            Error.POSITION_ALREADY_EXISTS\n        );\n        require(_isSwappable(record.depositToken, record.actionToken), Error.SWAP_PATH_NOT_FOUND);\n        require(isUsable(record.depositToken), Error.TOKEN_NOT_USABLE);\n\n        uint256 gasDeposit = (record.totalTopUpAmount.divRoundUp(record.singleTopUpAmount)) *\n            record.maxFee *\n            getEstimatedGasUsage();\n\n        require(msg.value >= gasDeposit, Error.VALUE_TOO_LOW_FOR_GAS);\n\n        uint256 totalLockAmount = _calcExchangeAmount(\n            record.depositToken,\n            record.actionToken,\n            record.totalTopUpAmount\n        );\n        _lockFunds(msg.sender, record.depositToken, totalLockAmount, depositAmount);\n\n        addressProvider.getGasBank().depositFor{value: msg.value}(msg.sender);\n\n        record.registeredAt = uint64(block.timestamp);\n        record.depositTokenBalance = totalLockAmount.toUint128();\n        _positions[msg.sender][account][protocol] = record;\n        _userPositions[msg.sender].push(RecordMeta(account, protocol));\n        _usersWithPositions.add(msg.sender);\n\n        emit Register(\n            account,\n            protocol,\n            record.threshold,\n            msg.sender,\n            record.depositToken,\n            totalLockAmount,\n            record.actionToken,\n            record.singleTopUpAmount,\n            record.totalTopUpAmount,\n            record.maxFee,\n            record.extra\n        );\n        return true;\n    }\n\n    /**\n     * @notice See overloaded version of `execute` for more details.\n     */\n    function execute(\n        address payer,\n        bytes32 account,\n        address beneficiary,\n        bytes32 protocol\n    ) external override returns (bool) {\n        return execute(payer, account, beneficiary, protocol, 0);\n    }\n\n    /**\n     * @notice Delete a position to back on the given protocol for `account`.\n     * @param account Account holding the position.\n     * @param protocol Protocol the position is held on.\n     * @param unstake If the tokens should be unstaked from vault.\n     * @return `true` if successful.\n     */\n    function resetPosition(\n        bytes32 account,\n        bytes32 protocol,\n        bool unstake\n    ) external override returns (bool) {\n        address payer = msg.sender;\n        Record memory position = _positions[payer][account][protocol];\n        require(position.threshold != 0, Error.NO_POSITION_EXISTS);\n\n        IAddressProvider addressProvider_ = addressProvider;\n        address vault = addressProvider_.getStakerVault(position.depositToken); // will revert if vault does not exist\n        IStakerVault staker = IStakerVault(vault);\n        staker.decreaseActionLockedBalance(payer, position.depositTokenBalance);\n        if (unstake) {\n            staker.unstake(position.depositTokenBalance);\n            IERC20(position.depositToken).safeTransfer(payer, position.depositTokenBalance);\n        } else {\n            staker.transfer(payer, position.depositTokenBalance);\n        }\n\n        _removePosition(payer, account, protocol);\n        addressProvider_.getGasBank().withdrawUnused(payer);\n        return true;\n    }\n\n    /**\n     * @notice Execute top up handler update (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @param protocol Protocol for which a new handler should be executed.\n     * @return Address of new handler.\n     */\n    function executeTopUpHandler(bytes32 protocol) external override returns (address) {\n        address oldHandler = _getHandler(protocol, false);\n        address newHandler = _executeAddress(_getProtocolKey(protocol));\n\n        _updateTopUpHandler(protocol, oldHandler, newHandler);\n        return newHandler;\n    }\n\n    /**\n     * @notice Reset new top up handler deadline for a protocol.\n     * @param protocol Protocol for which top up handler deadline should be reset.\n     * @return `true` if successful.\n     */\n    function resetTopUpHandler(bytes32 protocol) external override onlyGovernance returns (bool) {\n        return _resetAddressConfig(_getProtocolKey(protocol));\n    }\n\n    /**\n     * @notice Prepare action fee update.\n     * @param newActionFee New fee to set.\n     * @return `true` if success.\n     */\n    function prepareActionFee(uint256 newActionFee)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        require(newActionFee <= _MAX_ACTION_FEE, Error.INVALID_AMOUNT);\n        return _prepare(_ACTION_FEE_KEY, newActionFee);\n    }\n\n    /**\n     * @notice Execute action fee update (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return `true` if successful.\n     */\n    function executeActionFee() external override returns (uint256) {\n        return _executeUInt256(_ACTION_FEE_KEY);\n    }\n\n    /**\n     * @notice Reset action fee deadline.\n     * @return `true` if successful.\n     */\n    function resetActionFee() external override onlyGovernance returns (bool) {\n        return _resetUInt256Config(_ACTION_FEE_KEY);\n    }\n\n    /** Set fee handler */\n    /**\n     * @notice Prepare update of fee handler.\n     * @param handler New fee handler.\n     * @return `true` if success.\n     */\n    function prepareFeeHandler(address handler) external override onlyGovernance returns (bool) {\n        return _prepare(_FEE_HANDLER_KEY, handler);\n    }\n\n    /**\n     * @notice Execute update of fee handler (with time delay enforced).\n     * @dev Needs to be called after the update was prepared. Fails if called before time delay is met.\n     * @return `true` if successful.\n     */\n    function executeFeeHandler() external override returns (address) {\n        return _executeAddress(_FEE_HANDLER_KEY);\n    }\n\n    /**\n     * @notice Reset the handler deadline.\n     * @return `true` if success.\n     */\n    function resetFeeHandler() external override onlyGovernance returns (bool) {\n        return _resetAddressConfig(_FEE_HANDLER_KEY);\n    }\n\n    /**\n     * @notice Prepare update of estimated gas usage.\n     * @param gasUsage New estimated gas usage.\n     * @return `true` if success.\n     */\n    function prepareEstimatedGasUsage(uint256 gasUsage)\n        external\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        return _prepare(_ESTIMATED_GAS_USAGE_KEY, gasUsage);\n    }\n\n    /**\n     * @notice Execute update of gas usage (with time delay enforced).\n     * @return `true` if successful.\n     */\n    function executeEstimatedGasUsage() external override returns (uint256) {\n        return _executeUInt256(_ESTIMATED_GAS_USAGE_KEY);\n    }\n\n    /**\n     * @notice Reset the gas usage deadline.\n     * @return `true` if success.\n     */\n    function resetGasUsage() external override onlyGovernance returns (bool) {\n        return _resetUInt256Config(_ESTIMATED_GAS_USAGE_KEY);\n    }\n\n    /**\n     * @notice Add a new deposit token that is supported by the action.\n     * @dev There is a separate check for whether the usable token (i.e. deposit token)\n     *      is swappable for some action token.\n     * @param token Address of deposit token that can be used by the action.\n     */\n    function addUsableToken(address token) external override onlyGovernance returns (bool) {\n        return _usableTokens.add(token);\n    }\n\n    /**\n     * @notice Computes the total amount of ETH (as wei) required to pay for all\n     * the top-ups assuming the maximum gas price and the current estimated gas\n     * usage of a top-up\n     */\n    function getEthRequiredForGas(address payer) external view override returns (uint256) {\n        uint256 totalEthRequired;\n        RecordMeta[] memory userRecordsMeta = _userPositions[payer];\n        uint256 gasUsagePerCall = getEstimatedGasUsage();\n        uint256 length = userRecordsMeta.length;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            RecordMeta memory meta = userRecordsMeta[i];\n            Record memory record = _positions[payer][meta.account][meta.protocol];\n            uint256 totalCalls = record.totalTopUpAmount.divRoundUp(record.singleTopUpAmount);\n            totalEthRequired += totalCalls * gasUsagePerCall * record.maxFee;\n        }\n        return totalEthRequired;\n    }\n\n    /**\n     * @notice Returns a list of positions for the given payer\n     */\n    function getUserPositions(address payer) external view override returns (RecordMeta[] memory) {\n        return _userPositions[payer];\n    }\n\n    /**\n     * @notice Get a list supported protocols.\n     * @return List of supported protocols.\n     */\n    function getSupportedProtocols() external view override returns (bytes32[] memory) {\n        uint256 length = _supportedProtocols.length();\n        bytes32[] memory protocols = new bytes32[](length);\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            protocols[i] = _supportedProtocols.at(i);\n        }\n        return protocols;\n    }\n\n    /*\n     * @notice Gets a list of users that have an active position.\n     * @dev Uses cursor pagination.\n     * @param cursor The cursor for pagination (should start at 0 for first call).\n     * @param howMany Maximum number of users to return in this pagination request.\n     * @return users List of users that have an active position.\n     * @return nextCursor The cursor to use for the next pagination request.\n     */\n    function usersWithPositions(uint256 cursor, uint256 howMany)\n        external\n        view\n        override\n        returns (address[] memory users, uint256 nextCursor)\n    {\n        uint256 length = _usersWithPositions.length();\n        if (cursor >= length) return (new address[](0), 0);\n        if (howMany >= length - cursor) {\n            howMany = length - cursor;\n        }\n\n        address[] memory usersWithPositions_ = new address[](howMany);\n        for (uint256 i; i < howMany; i = i.uncheckedInc()) {\n            usersWithPositions_[i] = _usersWithPositions.at(i + cursor);\n        }\n\n        return (usersWithPositions_, cursor + howMany);\n    }\n\n    /**\n     * @notice Get a list of all tokens usable for this action.\n     * @dev This refers to all tokens that can be used as deposit tokens.\n     * @return Array of addresses of usable tokens.\n     */\n    function getUsableTokens() external view override returns (address[] memory) {\n        return _usableTokens.toArray();\n    }\n\n    /**\n     * @notice Retrieves the topup handler for the given `protocol`\n     */\n    function getTopUpHandler(bytes32 protocol) external view override returns (address) {\n        return _getHandler(protocol, false);\n    }\n\n    /**\n     * @notice Successfully tops up a position if it's conditions are met.\n     * @dev pool and vault funds are rebalanced after withdrawal for top up\n     * @param payer Account that pays for the top up.\n     * @param account Account owning the position for top up.\n     * @param beneficiary Address of the keeper's wallet for fee accrual.\n     * @param protocol Protocol of the top up position.\n     * @param maxWeiForGas the maximum extra amount of wei that the keeper is willing to pay for the gas\n     * @return `true` if successful.\n     */\n    function execute(\n        address payer,\n        bytes32 account,\n        address beneficiary,\n        bytes32 protocol,\n        uint256 maxWeiForGas\n    ) public override returns (bool) {\n        require(controller.canKeeperExecuteAction(msg.sender), Error.NOT_ENOUGH_BKD_STAKED);\n\n        ExecuteLocalVars memory vars;\n\n        vars.initialGas = gasleft();\n\n        Record storage position = _positions[payer][account][protocol];\n        require(position.threshold != 0, Error.NO_POSITION_EXISTS);\n        require(position.totalTopUpAmount > 0, Error.INSUFFICIENT_BALANCE);\n        require(block.timestamp > position.registeredAt, Error.CANNOT_EXECUTE_IN_SAME_BLOCK);\n\n        vars.topUpHandler = _getHandler(protocol, true);\n        vars.userFactor = ITopUpHandler(vars.topUpHandler).getUserFactor(account, position.extra);\n\n        // ensure that the position is actually below its set user factor threshold\n        require(vars.userFactor < position.threshold, Error.INSUFFICIENT_THRESHOLD);\n\n        IAddressProvider addressProvider_ = addressProvider;\n        IGasBank gasBank = addressProvider_.getGasBank();\n\n        // fail early if the user does not have enough funds in the gas bank\n        // to cover the cost of the transaction\n        vars.estimatedRequiredGas = getEstimatedGasUsage();\n        vars.estimatedRequiredWeiForGas = vars.estimatedRequiredGas * tx.gasprice;\n\n        // compute the gas price that the user will be paying\n        vars.userGasPrice = block.basefee + position.priorityFee;\n        if (vars.userGasPrice > tx.gasprice) vars.userGasPrice = tx.gasprice;\n        if (vars.userGasPrice > position.maxFee) vars.userGasPrice = position.maxFee;\n\n        // ensure the current position allows for the gas to be paid\n        require(\n            vars.estimatedRequiredWeiForGas <=\n                vars.estimatedRequiredGas * vars.userGasPrice + maxWeiForGas,\n            Error.ESTIMATED_GAS_TOO_HIGH\n        );\n\n        vars.gasBankBalance = gasBank.balanceOf(payer);\n        // ensure the user has enough funds in the gas bank to cover the gas\n        require(\n            vars.gasBankBalance + maxWeiForGas >= vars.estimatedRequiredWeiForGas,\n            Error.GAS_BANK_BALANCE_TOO_LOW\n        );\n\n        vars.totalTopUpAmount = position.totalTopUpAmount;\n        vars.actionFee = getActionFee();\n        // add top-up fees to top-up amount\n        vars.minActionAmountToTopUp = position.singleTopUpAmount;\n        vars.actionAmountWithFees = vars.minActionAmountToTopUp.scaledMul(\n            ScaledMath.ONE + vars.actionFee\n        );\n\n        // if the amount that we want to top-up (including fees) is higher than\n        // the available topup amount, we lower this down to what is left of the position\n        if (vars.actionAmountWithFees > vars.totalTopUpAmount) {\n            vars.actionAmountWithFees = vars.totalTopUpAmount;\n            vars.minActionAmountToTopUp = vars.actionAmountWithFees.scaledDiv(\n                ScaledMath.ONE + vars.actionFee\n            );\n        }\n        ILiquidityPool pool = addressProvider_.getPoolForToken(position.depositToken);\n        vars.underlying = pool.getUnderlying();\n        vars.rate = pool.exchangeRate();\n\n        // compute the deposit tokens amount with and without fees\n        // we will need to unstake the amount with fees and to\n        // swap the amount without fees into action tokens\n        vars.depositAmountWithFees = vars.actionAmountWithFees.scaledDivRoundUp(vars.rate);\n        if (position.depositTokenBalance < vars.depositAmountWithFees) {\n            vars.depositAmountWithFees = position.depositTokenBalance;\n            vars.minActionAmountToTopUp =\n                (vars.depositAmountWithFees * vars.rate) /\n                (ScaledMath.ONE + vars.actionFee);\n        }\n\n        // compute amount of LP tokens needed to pay for action\n        // rate is expressed in actionToken per depositToken\n        vars.depositAmountWithoutFees = vars.minActionAmountToTopUp.scaledDivRoundUp(vars.rate);\n        vars.depositTotalFeesAmount = vars.depositAmountWithFees - vars.depositAmountWithoutFees;\n\n        // will revert if vault does not exist\n        address vault = addressProvider_.getStakerVault(position.depositToken);\n\n        // unstake deposit tokens including fees\n        IStakerVault(vault).unstake(vars.depositAmountWithFees);\n        IStakerVault(vault).decreaseActionLockedBalance(payer, vars.depositAmountWithFees);\n\n        // swap the amount without the fees\n        // as the fees are paid in deposit token, not in action token\n        vars.actionTokenAmount = pool.redeem(vars.depositAmountWithoutFees);\n\n        // compute how much of action token was actually redeemed and add fees to it\n        // this is to ensure that no funds get locked inside the contract\n        vars.totalActionTokenAmount =\n            vars.actionTokenAmount +\n            vars.depositTotalFeesAmount.scaledMul(vars.rate);\n\n        // at this point, we have exactly `vars.actionTokenAmount`\n        // (at least `position.singleTopUpAmount`) of action token\n        // and exactly `vars.depositTotalFeesAmount` deposit tokens in the contract\n        // solhint-disable-next-line avoid-low-level-calls\n        uint256 value_;\n        if (position.actionToken == address(0)) {\n            value_ = vars.actionTokenAmount;\n        } else {\n            _approve(position.actionToken, vars.topUpHandler);\n        }\n        vars.topupResult = ITopUpHandler(vars.topUpHandler).topUp{value: value_}(\n            account,\n            position.actionToken,\n            vars.actionTokenAmount,\n            position.extra\n        );\n\n        require(vars.topupResult, Error.TOP_UP_FAILED);\n\n        // totalTopUpAmount is updated to reflect the new \"balance\" of the position\n        if (vars.totalTopUpAmount > vars.totalActionTokenAmount) {\n            position.totalTopUpAmount -= vars.totalActionTokenAmount.toUint128();\n        } else {\n            position.totalTopUpAmount = 0;\n        }\n\n        position.depositTokenBalance -= vars.depositAmountWithFees.toUint128();\n\n        vars.removePosition = position.totalTopUpAmount == 0 || position.depositTokenBalance == 0;\n        _payFees(payer, beneficiary, vars.depositTotalFeesAmount, position.depositToken);\n        if (vars.removePosition) {\n            if (position.depositTokenBalance > 0) {\n                // transfer any unused locked tokens to the payer\n                IStakerVault(vault).transfer(payer, position.depositTokenBalance);\n                IStakerVault(vault).decreaseActionLockedBalance(\n                    payer,\n                    position.depositTokenBalance\n                );\n            }\n            _removePosition(payer, account, protocol);\n        }\n\n        emit TopUp(\n            account,\n            protocol,\n            payer,\n            position.depositToken,\n            vars.depositAmountWithFees,\n            position.actionToken,\n            vars.actionTokenAmount\n        );\n\n        // compute gas used and reimburse the keeper by using the\n        // funds of payer in the gas bank\n        // TODO: add constant gas consumed for transfer and tx prologue\n        vars.gasConsumed = vars.initialGas - gasleft();\n\n        vars.reimbursedWeiForGas = vars.userGasPrice * vars.gasConsumed;\n        if (vars.reimbursedWeiForGas > vars.gasBankBalance) {\n            vars.reimbursedWeiForGas = vars.gasBankBalance;\n        }\n\n        // ensure that the keeper is not overpaying\n        vars.requiredWeiForGas = tx.gasprice * vars.gasConsumed;\n        require(\n            vars.reimbursedWeiForGas + maxWeiForGas >= vars.requiredWeiForGas,\n            Error.GAS_TOO_HIGH\n        );\n        gasBank.withdrawFrom(payer, payable(msg.sender), vars.reimbursedWeiForGas);\n        if (vars.removePosition) {\n            gasBank.withdrawUnused(payer);\n        }\n\n        return true;\n    }\n\n    /**\n     * @notice Prepare new top up handler fee update.\n     * @dev Setting the address to 0 means that the protocol will no longer be supported.\n     * @param protocol Protocol for which a new handler should be prepared.\n     * @param newHandler Address of new handler.\n     * @return `true` if success.\n     */\n    function prepareTopUpHandler(bytes32 protocol, address newHandler)\n        public\n        override\n        onlyGovernance\n        returns (bool)\n    {\n        return _prepare(_getProtocolKey(protocol), newHandler);\n    }\n\n    /**\n     * @notice Check if action can be executed.\n     * @param protocol for which to get the health factor\n     * @param account for which to get the health factor\n     * @param extra data to be used by the topup handler\n     * @return healthFactor of the position\n     */\n    function getHealthFactor(\n        bytes32 protocol,\n        bytes32 account,\n        bytes calldata extra\n    ) public view override returns (uint256 healthFactor) {\n        ITopUpHandler topUpHandler = ITopUpHandler(_getHandler(protocol, true));\n        return topUpHandler.getUserFactor(account, extra);\n    }\n\n    function getHandler(bytes32 protocol) public view override returns (address) {\n        return _getHandler(protocol, false);\n    }\n\n    /**\n     * @notice returns the current estimated gas usage\n     */\n    function getEstimatedGasUsage() public view override returns (uint256) {\n        return currentUInts256[_ESTIMATED_GAS_USAGE_KEY];\n    }\n\n    /**\n     * @notice Returns the current action fee\n     */\n    function getActionFee() public view override returns (uint256) {\n        return currentUInts256[_ACTION_FEE_KEY];\n    }\n\n    /**\n     * @notice Returns the current fee handler\n     */\n    function getFeeHandler() public view override returns (address) {\n        return currentAddresses[_FEE_HANDLER_KEY];\n    }\n\n    /**\n     * @notice Get the record for a position.\n     * @param payer Registered payer of the position.\n     * @param account Address holding the position.\n     * @param protocol Protocol where the position is held.\n     */\n    function getPosition(\n        address payer,\n        bytes32 account,\n        bytes32 protocol\n    ) public view override returns (Record memory) {\n        return _positions[payer][account][protocol];\n    }\n\n    /**\n     * @notice Check whether a token is usable as a deposit token.\n     * @param token Address of token to check.\n     * @return True if token is usable as a deposit token for this action.\n     */\n    function isUsable(address token) public view override returns (bool) {\n        return _usableTokens.contains(token);\n    }\n\n    function _updateTopUpHandler(\n        bytes32 protocol,\n        address oldHandler,\n        address newHandler\n    ) internal {\n        if (newHandler == address(0)) {\n            _supportedProtocols.remove(protocol);\n        } else if (oldHandler == address(0)) {\n            _supportedProtocols.add(protocol);\n        }\n    }\n\n    /**\n     * @dev Pays fees to the feeHandler\n     * @param payer The account who's position the fees are charged on\n     * @param beneficiary The beneficiary of the fees paid (usually this will be the keeper)\n     * @param feeAmount The amount in tokens to pay as fees\n     * @param depositToken The LpToken used to pay the fees\n     */\n    function _payFees(\n        address payer,\n        address beneficiary,\n        uint256 feeAmount,\n        address depositToken\n    ) internal {\n        address feeHandler = getFeeHandler();\n        IERC20(depositToken).safeApprove(feeHandler, feeAmount);\n        IActionFeeHandler(feeHandler).payFees(payer, beneficiary, feeAmount, depositToken);\n    }\n\n    /**\n     * @dev \"Locks\" an amount of tokens on behalf of the TopUpAction\n     * Funds are taken from staker vault if allowance is sufficient, else direct transfer or a combination of both.\n     * @param payer Owner of the funds to be locked\n     * @param token Token to lock\n     * @param lockAmount Minimum amount of `token` to lock\n     * @param depositAmount Amount of `token` that was deposited.\n     *                      If this is 0 then the staker vault allowance should be used.\n     *                      If this is greater than `requiredAmount` more tokens will be locked.\n     */\n    function _lockFunds(\n        address payer,\n        address token,\n        uint256 lockAmount,\n        uint256 depositAmount\n    ) internal {\n        address stakerVaultAddress = addressProvider.getStakerVault(token);\n        TopUpActionLibrary.lockFunds(stakerVaultAddress, payer, token, lockAmount, depositAmount);\n    }\n\n    function _removePosition(\n        address payer,\n        bytes32 account,\n        bytes32 protocol\n    ) internal {\n        delete _positions[payer][account][protocol];\n        _removeUserPosition(payer, account, protocol);\n        if (_userPositions[payer].length == 0) {\n            _usersWithPositions.remove(payer);\n        }\n        emit Deregister(payer, account, protocol);\n    }\n\n    function _removeUserPosition(\n        address payer,\n        bytes32 account,\n        bytes32 protocol\n    ) internal {\n        RecordMeta[] storage positionsMeta = _userPositions[payer];\n        uint256 length = positionsMeta.length;\n        for (uint256 i; i < length; i = i.uncheckedInc()) {\n            RecordMeta storage positionMeta = positionsMeta[i];\n            if (positionMeta.account == account && positionMeta.protocol == protocol) {\n                positionsMeta[i] = positionsMeta[length - 1];\n                positionsMeta.pop();\n                return;\n            }\n        }\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token The token to approve for.\n     * @param spender The spender to approve.\n     */\n    function _approve(address token, address spender) internal {\n        if (IERC20(token).allowance(address(this), spender) > 0) return;\n        IERC20(token).safeApprove(spender, type(uint256).max);\n    }\n\n    /**\n     * @dev Computes and returns the amount of LP tokens of type `token` that will be received in exchange for an `amount` of the `actionToken`.\n     */\n    function _calcExchangeAmount(\n        address token,\n        address actionToken,\n        uint256 amount\n    ) internal view returns (uint256) {\n        return TopUpActionLibrary.calcExchangeAmount(addressProvider, token, actionToken, amount);\n    }\n\n    function _getHandler(bytes32 protocol, bool ensureExists) internal view returns (address) {\n        address handler = currentAddresses[_getProtocolKey(protocol)];\n        require(!ensureExists || handler != address(0), Error.PROTOCOL_NOT_FOUND);\n        return handler;\n    }\n\n    function _isSwappable(address depositToken, address toToken) internal view returns (bool) {\n        ILiquidityPool pool = addressProvider.getPoolForToken(depositToken);\n        return pool.getUnderlying() == toToken;\n    }\n\n    function _getProtocolKey(bytes32 protocol) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_TOP_UP_HANDLER_KEY, protocol));\n    }\n}\n\n\n",
        "CodeNames": [
            "TopUpActionFeeHandler.sol",
            "KeeperGauge.sol",
            "InflationManager.sol",
            "TopUpAction.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "InflationManager.sol, KeeperGauge.sol, TopUpActionFeeHandler.sol, TopUpAction.sol",
                "Type": "DoS",
                "Description": "When _removeKeeperGauge is called, there is no guarantee that the keeper gauge isn't currently in use by any TopUpActionFeeHandler. If it's still in use, any top up action executions will be disabled as reporting fees in KeeperGauge.sol will revert.",
                "Repair": "Add an on-chain check to ensure that the keeper gauge is not in use before removing them"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\n\nimport \"../libraries/ScaledMath.sol\";\nimport \"../libraries/Errors.sol\";\nimport \"../libraries/AddressProviderHelpers.sol\";\nimport \"../libraries/UncheckedMath.sol\";\n\nimport \"../interfaces/IStakerVault.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IVault.sol\";\nimport \"../interfaces/tokenomics/IRewardsGauge.sol\";\nimport \"../interfaces/tokenomics/IInflationManager.sol\";\nimport \"../interfaces/pool/ILiquidityPool.sol\";\nimport \"../interfaces/tokenomics/ILpGauge.sol\";\nimport \"../interfaces/IERC20Full.sol\";\n\nimport \"./utils/Preparable.sol\";\nimport \"./Controller.sol\";\nimport \"./pool/LiquidityPool.sol\";\nimport \"./access/Authorization.sol\";\nimport \"./utils/Pausable.sol\";\n\n/**\n * @notice This contract handles staked tokens from Backd pools\n * However, note that this is NOT an ERC-20 compliant contract and these\n * tokens should never be integrated with any protocol assuming ERC-20 compliant\n * tokens\n * @dev When paused, allows only withdraw/unstake\n */\ncontract StakerVault is IStakerVault, Authorization, Pausable, Initializable, Preparable {\n    using AddressProviderHelpers for IAddressProvider;\n    using SafeERC20 for IERC20;\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n\n    bytes32 internal constant _LP_GAUGE = \"lpGauge\";\n\n    IController public immutable controller;\n\n    IInflationManager public immutable inflationManager;\n    IAddressProvider public immutable addressProvider;\n\n    address public token;\n\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public actionLockedBalances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    // All the data fields required for the staking tracking\n    uint256 private _poolTotalStaked;\n\n    mapping(address => bool) public strategies;\n    uint256 public strategiesTotalStaked;\n\n    constructor(IController _controller)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        IInflationManager inflationManager_ = controller.inflationManager();\n        require(address(inflationManager_) != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        inflationManager = inflationManager_;\n        addressProvider = _controller.addressProvider();\n    }\n\n    function initialize(address _token) external override initializer {\n        token = _token;\n    }\n\n    function initializeLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\n        require(currentAddresses[_LP_GAUGE] == address(0), Error.ROLE_EXISTS);\n        _setConfig(_LP_GAUGE, _lpGauge);\n        inflationManager.addGaugeForVault(token);\n        return true;\n    }\n\n    function prepareLpGauge(address _lpGauge) external override onlyGovernance returns (bool) {\n        _prepare(_LP_GAUGE, _lpGauge);\n        return true;\n    }\n\n    function executeLpGauge() external override onlyGovernance returns (bool) {\n        _executeAddress(_LP_GAUGE);\n        inflationManager.addGaugeForVault(token);\n        return true;\n    }\n\n    /**\n     * @notice Registers an address as a strategy to be excluded from token accumulation.\n     * @dev This should be used if a strategy deposits into a stakerVault and should not get gov. tokens.\n     * @return `true` if success.\n     */\n    function addStrategy(address strategy) external override returns (bool) {\n        require(msg.sender == address(inflationManager), Error.UNAUTHORIZED_ACCESS);\n        strategies[strategy] = true;\n        return true;\n    }\n\n    /**\n     * @notice Transfer staked tokens to an account.\n     * @dev This is not an ERC20 transfer, as tokens are still owned by this contract, but fees get updated in the LP pool.\n     * @param account Address to transfer to.\n     * @param amount Amount to transfer.\n     * @return `true` if success.\n     */\n    function transfer(address account, uint256 amount) external override notPaused returns (bool) {\n        require(msg.sender != account, Error.SELF_TRANSFER_NOT_ALLOWED);\n        require(balances[msg.sender] >= amount, Error.INSUFFICIENT_BALANCE);\n\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        pool.handleLpTokenTransfer(msg.sender, account, amount);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(msg.sender);\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n\n        balances[msg.sender] -= amount;\n        balances[account] += amount;\n\n        emit Transfer(msg.sender, account, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer staked tokens from src to dst.\n     * @dev This is not an ERC20 transfer, as tokens are still owned by this contract, but fees get updated in the LP pool.\n     * @param src Address to transfer from.\n     * @param dst Address to transfer to.\n     * @param amount Amount to transfer.\n     * @return `true` if success.\n     */\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 amount\n    ) external override notPaused returns (bool) {\n        /* Do not allow self transfers */\n        require(src != dst, Error.SAME_ADDRESS_NOT_ALLOWED);\n\n        /* Get the allowance, infinite for the account owner */\n        uint256 startingAllowance;\n        if (msg.sender == src) {\n            startingAllowance = type(uint256).max;\n        } else {\n            startingAllowance = _allowances[src][msg.sender];\n        }\n        require(startingAllowance >= amount, Error.INSUFFICIENT_ALLOWANCE);\n\n        uint256 srcTokens = balances[src];\n        require(srcTokens >= amount, Error.INSUFFICIENT_BALANCE);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(src);\n            ILpGauge(lpGauge).userCheckpoint(dst);\n        }\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        pool.handleLpTokenTransfer(src, dst, amount);\n\n        /* Update token balances */\n        balances[src] = srcTokens.uncheckedSub(amount);\n        balances[dst] = balances[dst] + amount;\n\n        /* Update allowance if necessary */\n        if (startingAllowance != type(uint256).max) {\n            _allowances[src][msg.sender] = startingAllowance.uncheckedSub(amount);\n        }\n        emit Transfer(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Approve staked tokens for spender.\n     * @param spender Address to approve tokens for.\n     * @param amount Amount to approve.\n     * @return `true` if success.\n     */\n    function approve(address spender, uint256 amount) external override notPaused returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice If an action is registered and stakes funds, this updates the actionLockedBalances for the user.\n     * @param account Address that registered the action.\n     * @param amount Amount staked by the action.\n     * @return `true` if success.\n     */\n    function increaseActionLockedBalance(address account, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        require(addressProvider.isAction(msg.sender), Error.UNAUTHORIZED_ACCESS);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n        actionLockedBalances[account] += amount;\n        return true;\n    }\n\n    /**\n     * @notice If an action is executed/reset, this updates the actionLockedBalances for the user.\n     * @param account Address that registered the action.\n     * @param amount Amount executed/reset by the action.\n     * @return `true` if success.\n     */\n    function decreaseActionLockedBalance(address account, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        require(addressProvider.isAction(msg.sender), Error.UNAUTHORIZED_ACCESS);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n        if (actionLockedBalances[account] > amount) {\n            actionLockedBalances[account] = actionLockedBalances[account].uncheckedSub(amount);\n        } else {\n            actionLockedBalances[account] = 0;\n        }\n        return true;\n    }\n\n    function poolCheckpoint() external override returns (bool) {\n        if (currentAddresses[_LP_GAUGE] != address(0)) {\n            return ILpGauge(currentAddresses[_LP_GAUGE]).poolCheckpoint();\n        }\n        return false;\n    }\n\n    function getLpGauge() external view override returns (address) {\n        return currentAddresses[_LP_GAUGE];\n    }\n\n    function isStrategy(address user) external view override returns (bool) {\n        return strategies[user];\n    }\n\n    /**\n     * @notice Get the total amount of tokens that are staked by actions\n     * @return Total amount staked by actions\n     */\n    function getStakedByActions() external view override returns (uint256) {\n        address[] memory actions = addressProvider.allActions();\n        uint256 total;\n        for (uint256 i; i < actions.length; i = i.uncheckedInc()) {\n            total += balances[actions[i]];\n        }\n        return total;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function balanceOf(address account) external view override returns (uint256) {\n        return balances[account];\n    }\n\n    function getPoolTotalStaked() external view override returns (uint256) {\n        return _poolTotalStaked;\n    }\n\n    /**\n     * @notice Returns the total balance in the staker vault, including that locked in positions.\n     * @param account Account to query balance for.\n     * @return Total balance in staker vault for account.\n     */\n    function stakedAndActionLockedBalanceOf(address account)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return balances[account] + actionLockedBalances[account];\n    }\n\n    function actionLockedBalanceOf(address account) external view override returns (uint256) {\n        return actionLockedBalances[account];\n    }\n\n    function decimals() external view override returns (uint8) {\n        return IERC20Full(token).decimals();\n    }\n\n    function getToken() external view override returns (address) {\n        return token;\n    }\n\n    function unstake(uint256 amount) public override returns (bool) {\n        return unstakeFor(msg.sender, msg.sender, amount);\n    }\n\n    /**\n     * @notice Stake an amount of vault tokens.\n     * @param amount Amount of token to stake.\n     * @return `true` if success.\n     */\n    function stake(uint256 amount) public override returns (bool) {\n        return stakeFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Stake amount of vault token on behalf of another account.\n     * @param account Account for which tokens will be staked.\n     * @param amount Amount of token to stake.\n     * @return `true` if success.\n     */\n    function stakeFor(address account, uint256 amount) public override notPaused returns (bool) {\n        require(IERC20(token).balanceOf(msg.sender) >= amount, Error.INSUFFICIENT_BALANCE);\n\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(account);\n        }\n\n        uint256 oldBal = IERC20(token).balanceOf(address(this));\n\n        if (msg.sender != account) {\n            ILiquidityPool pool = addressProvider.getPoolForToken(token);\n            pool.handleLpTokenTransfer(msg.sender, account, amount);\n        }\n\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        uint256 staked = IERC20(token).balanceOf(address(this)) - oldBal;\n        require(staked == amount, Error.INVALID_AMOUNT);\n        balances[account] += staked;\n\n        if (strategies[account]) {\n            strategiesTotalStaked += staked;\n        } else {\n            _poolTotalStaked += staked;\n        }\n        emit Staked(account, amount);\n        return true;\n    }\n\n    /**\n     * @notice Unstake tokens on behalf of another account.\n     * @dev Needs to be approved.\n     * @param src Account for which tokens will be unstaked.\n     * @param dst Account receiving the tokens.\n     * @param amount Amount of token to unstake/receive.\n     * @return `true` if success.\n     */\n    function unstakeFor(\n        address src,\n        address dst,\n        uint256 amount\n    ) public override returns (bool) {\n        ILiquidityPool pool = addressProvider.getPoolForToken(token);\n        uint256 allowance_ = _allowances[src][msg.sender];\n        require(\n            src == msg.sender || allowance_ >= amount || address(pool) == msg.sender,\n            Error.UNAUTHORIZED_ACCESS\n        );\n        require(balances[src] >= amount, Error.INSUFFICIENT_BALANCE);\n        address lpGauge = currentAddresses[_LP_GAUGE];\n        if (lpGauge != address(0)) {\n            ILpGauge(lpGauge).userCheckpoint(src);\n        }\n        uint256 oldBal = IERC20(token).balanceOf(address(this));\n\n        if (src != dst) {\n            pool.handleLpTokenTransfer(src, dst, amount);\n        }\n\n        IERC20(token).safeTransfer(dst, amount);\n\n        uint256 unstaked = oldBal.uncheckedSub(IERC20(token).balanceOf(address(this)));\n\n        if (src != msg.sender && allowance_ != type(uint256).max && address(pool) != msg.sender) {\n            // update allowance\n            _allowances[src][msg.sender] -= unstaked;\n        }\n        balances[src] -= unstaked;\n\n        if (strategies[src]) {\n            strategiesTotalStaked -= unstaked;\n        } else {\n            _poolTotalStaked -= unstaked;\n        }\n        emit Unstaked(src, amount);\n        return true;\n    }\n\n    function _isAuthorizedToPause(address account) internal view override returns (bool) {\n        return _roleManager().hasRole(Roles.GOVERNANCE, account);\n    }\n}\n\n\n",
        "CodeNames": [
            "StakerVault.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "StakerVault.sol",
                "Type": "uint underflow",
                "Description": "StakerVault.unstake(), StakerVault.unstakeFor() would revert with a uint underflow error of StakerVault.strategiesTotalStaked, StakerVault._poolTotalStaked.",
                "Repair": "Modify StakerVault.addStrategy(), StakerVault.transfer(), StakerVault.transferFrom() functions to move staked amount from StakerVault._poolTotalStaked to StakerVault.strategiesTotalStaked every time when StakerVault.inflationManager approves a new strategy"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IFeeBurner.sol\";\nimport \"../interfaces/IBkdLocker.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IRewardHandler.sol\";\nimport \"./utils/Preparable.sol\";\nimport \"./access/Authorization.sol\";\nimport \"../libraries/AddressProviderHelpers.sol\";\nimport \"../libraries/UncheckedMath.sol\";\n\ncontract RewardHandler is IRewardHandler, Preparable, Authorization {\n    using UncheckedMath for uint256;\n    using SafeERC20 for IERC20;\n    using AddressProviderHelpers for IAddressProvider;\n\n    IController public immutable controller;\n    IAddressProvider public immutable addressProvider;\n\n    constructor(IController _controller)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        addressProvider = IAddressProvider(controller.addressProvider());\n    }\n\n    receive() external payable {}\n\n    /**\n     * @notice Burns all accumulated fees and pays these out to the BKD locker.\n     */\n    function burnFees() external override {\n        IBkdLocker bkdLocker = IBkdLocker(addressProvider.getBKDLocker());\n        IFeeBurner feeBurner = addressProvider.getFeeBurner();\n        address targetLpToken = bkdLocker.rewardToken();\n        address[] memory pools = addressProvider.allPools();\n        uint256 ethBalance = address(this).balance;\n        address[] memory tokens = new address[](pools.length);\n        for (uint256 i; i < pools.length; i = i.uncheckedInc()) {\n            ILiquidityPool pool = ILiquidityPool(pools[i]);\n            address underlying = pool.getUnderlying();\n            if (underlying != address(0)) {\n                _approve(underlying, address(feeBurner));\n            }\n            tokens[i] = underlying;\n        }\n        feeBurner.burnToTarget{value: ethBalance}(tokens, targetLpToken);\n        uint256 burnedAmount = IERC20(targetLpToken).balanceOf(address(this));\n        IERC20(targetLpToken).safeApprove(address(bkdLocker), burnedAmount);\n        bkdLocker.depositFees(burnedAmount);\n        emit Burned(targetLpToken, burnedAmount);\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token The token to approve for.\n     * @param spender The spender to approve.\n     */\n    function _approve(address token, address spender) internal {\n        if (IERC20(token).allowance(address(this), spender) > 0) return;\n        IERC20(token).safeApprove(spender, type(uint256).max);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../interfaces/zaps/IPoolMigrationZap.sol\";\nimport \"../../interfaces/IAddressProvider.sol\";\nimport \"../../interfaces/pool/ILiquidityPool.sol\";\n\n/**\n * This is a Zap contract to assist in the migration from the V1 Backd Pools to the new Backd Pools.\n */\ncontract PoolMigrationZap is IPoolMigrationZap {\n    using SafeERC20 for IERC20;\n\n    mapping(address => ILiquidityPool) internal _underlyingNewPools; // A mapping from underlyings to new pools\n\n    event Migrated(address user, address oldPool, address newPool, uint256 lpTokenAmount); // Emitted when a migration is completed\n\n    constructor(address newAddressProviderAddress_) {\n        address[] memory newPools_ = IAddressProvider(newAddressProviderAddress_).allPools();\n        for (uint256 i; i < newPools_.length; ++i) {\n            ILiquidityPool newPool_ = ILiquidityPool(newPools_[i]);\n            address underlying_ = newPool_.getUnderlying();\n            _underlyingNewPools[underlying_] = newPool_;\n            if (underlying_ == address(0)) continue;\n            IERC20(underlying_).safeApprove(address(newPool_), type(uint256).max);\n        }\n    }\n\n    receive() external payable {}\n\n    /**\n     * @notice Migrates all of a users balance from the old pools to the new pools.\n     * @dev The user must have balance in all pools given, otherwise transaction will revert.\n     * @param oldPoolAddresses_ The list of old pools to migrate for the user.\n     */\n    function migrateAll(address[] calldata oldPoolAddresses_) external override {\n        for (uint256 i; i < oldPoolAddresses_.length; ) {\n            migrate(oldPoolAddresses_[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Migrates a users balance from an old pool to a new pool.\n     * @dev The user must have balance in the pool given, otherwise transaction will revert.\n     * @param oldPoolAddress_ The old pool to migrate for the user.\n     */\n    function migrate(address oldPoolAddress_) public override {\n        ILiquidityPool oldPool_ = ILiquidityPool(oldPoolAddress_);\n        IERC20 lpToken_ = IERC20(oldPool_.getLpToken());\n        uint256 lpTokenAmount_ = lpToken_.balanceOf(msg.sender);\n        require(lpTokenAmount_ != 0, \"No LP Tokens\");\n        require(oldPool_.getWithdrawalFee(msg.sender, lpTokenAmount_) == 0, \"withdrawal fee not 0\");\n        lpToken_.safeTransferFrom(msg.sender, address(this), lpTokenAmount_);\n        uint256 underlyingAmount_ = oldPool_.redeem(lpTokenAmount_);\n        address underlying_ = oldPool_.getUnderlying();\n        ILiquidityPool newPool_ = _underlyingNewPools[underlying_];\n        uint256 ethValue_ = underlying_ == address(0) ? underlyingAmount_ : 0;\n        newPool_.depositFor{value: ethValue_}(msg.sender, underlyingAmount_);\n        emit Migrated(msg.sender, address(oldPool_), address(newPool_), lpTokenAmount_);\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../libraries/ScaledMath.sol\";\nimport \"../libraries/Errors.sol\";\nimport \"../libraries/EnumerableExtensions.sol\";\nimport \"../libraries/UncheckedMath.sol\";\nimport \"../interfaces/IBkdLocker.sol\";\nimport \"../interfaces/tokenomics/IMigrationContract.sol\";\nimport \"./utils/Preparable.sol\";\nimport \"./access/Authorization.sol\";\n\ncontract BkdLocker is IBkdLocker, Authorization, Preparable {\n    using ScaledMath for uint256;\n    using UncheckedMath for uint256;\n    using SafeERC20 for IERC20;\n    using EnumerableMapping for EnumerableMapping.AddressToUintMap;\n    using EnumerableExtensions for EnumerableMapping.AddressToUintMap;\n\n    bytes32 internal constant _START_BOOST = \"startBoost\";\n    bytes32 internal constant _MAX_BOOST = \"maxBoost\";\n    bytes32 internal constant _INCREASE_PERIOD = \"increasePeriod\";\n    bytes32 internal constant _WITHDRAW_DELAY = \"withdrawDelay\";\n\n    // User-specific data\n    mapping(address => uint256) public balances;\n    mapping(address => uint256) public boostFactors;\n    mapping(address => uint256) public lastUpdated;\n    mapping(address => WithdrawStash[]) public stashedGovTokens;\n    mapping(address => uint256) public totalStashed;\n\n    // Global data\n    uint256 public totalLocked;\n    uint256 public totalLockedBoosted;\n    uint256 public lastMigrationEvent;\n    EnumerableMapping.AddressToUintMap private _replacedRewardTokens;\n\n    // Reward token data\n    mapping(address => RewardTokenData) public rewardTokenData;\n    address public override rewardToken;\n    IERC20 public immutable govToken;\n\n    constructor(\n        address _rewardToken,\n        address _govToken,\n        IRoleManager roleManager\n    ) Authorization(roleManager) {\n        rewardToken = _rewardToken;\n        govToken = IERC20(_govToken);\n    }\n\n    function initialize(\n        uint256 startBoost,\n        uint256 maxBoost,\n        uint256 increasePeriod,\n        uint256 withdrawDelay\n    ) external override onlyGovernance {\n        require(currentUInts256[_START_BOOST] == 0, Error.CONTRACT_INITIALIZED);\n        _setConfig(_START_BOOST, startBoost);\n        _setConfig(_MAX_BOOST, maxBoost);\n        _setConfig(_INCREASE_PERIOD, increasePeriod);\n        _setConfig(_WITHDRAW_DELAY, withdrawDelay);\n    }\n\n    /**\n     * @notice Sets a new token to be the rewardToken. Fees are then accumulated in this token.\n     * @dev Previously used rewardTokens can be set again here.\n     */\n    function migrate(address newRewardToken) external override onlyGovernance {\n        _replacedRewardTokens.remove(newRewardToken);\n        _replacedRewardTokens.set(rewardToken, block.timestamp);\n        lastMigrationEvent = block.timestamp;\n        rewardToken = newRewardToken;\n    }\n\n    /**\n     * @notice Lock gov. tokens.\n     * @dev The amount needs to be approved in advance.\n     */\n    function lock(uint256 amount) external override {\n        return lockFor(msg.sender, amount);\n    }\n\n    /**\n     * @notice Deposit fees (in the rewardToken) to be distributed to lockers of gov. tokens.\n     * @dev `deposit` or `depositFor` needs to be called at least once before this function can be called\n     * @param amount Amount of rewardToken to deposit.\n     */\n    function depositFees(uint256 amount) external override {\n        require(amount > 0, Error.INVALID_AMOUNT);\n        require(totalLockedBoosted > 0, Error.NOT_ENOUGH_FUNDS);\n        IERC20(rewardToken).safeTransferFrom(msg.sender, address(this), amount);\n\n        RewardTokenData storage curRewardTokenData = rewardTokenData[rewardToken];\n\n        curRewardTokenData.feeIntegral += amount.scaledDiv(totalLockedBoosted);\n        curRewardTokenData.feeBalance += amount;\n        emit FeesDeposited(amount);\n    }\n\n    function claimFees() external override {\n        claimFees(rewardToken);\n    }\n\n    /**\n     * @notice Checkpoint function to update user data, in particular the boost factor.\n     */\n    function userCheckpoint(address user) external override {\n        _userCheckpoint(user, 0, balances[user]);\n    }\n\n    /**\n     * @notice Prepare unlocking of locked gov. tokens.\n     * @dev A delay is enforced and unlocking can only be executed after that.\n     * @param amount Amount of gov. tokens to prepare for unlocking.\n     */\n    function prepareUnlock(uint256 amount) external override {\n        require(\n            totalStashed[msg.sender] + amount <= balances[msg.sender],\n            \"Amount exceeds locked balance\"\n        );\n        totalStashed[msg.sender] += amount;\n        stashedGovTokens[msg.sender].push(\n            WithdrawStash(block.timestamp + currentUInts256[_WITHDRAW_DELAY], amount)\n        );\n        emit WithdrawPrepared(msg.sender, amount);\n    }\n\n    /**\n     * @notice Execute all prepared gov. token withdrawals.\n     */\n    function executeUnlocks() external override {\n        uint256 totalAvailableToWithdraw;\n        WithdrawStash[] storage stashedWithdraws = stashedGovTokens[msg.sender];\n        uint256 length = stashedWithdraws.length;\n        require(length > 0, \"No entries\");\n        uint256 i = length;\n        while (i > 0) {\n            i = i - 1;\n            if (stashedWithdraws[i].releaseTime <= block.timestamp) {\n                totalAvailableToWithdraw += stashedWithdraws[i].amount;\n\n                stashedWithdraws[i] = stashedWithdraws[stashedWithdraws.length - 1];\n\n                stashedWithdraws.pop();\n            }\n        }\n        totalStashed[msg.sender] -= totalAvailableToWithdraw;\n        uint256 newTotal = balances[msg.sender] - totalAvailableToWithdraw;\n        _userCheckpoint(msg.sender, 0, newTotal);\n        totalLocked -= totalAvailableToWithdraw;\n        govToken.safeTransfer(msg.sender, totalAvailableToWithdraw);\n        emit WithdrawExecuted(msg.sender, totalAvailableToWithdraw);\n    }\n\n    function getUserShare(address user) external view override returns (uint256) {\n        return getUserShare(user, rewardToken);\n    }\n\n    /**\n     * @notice Get the boosted locked balance for a user.\n     * @dev This includes the gov. tokens queued for withdrawal.\n     * @param user Address to get the boosted balance for.\n     * @return boosted balance for user.\n     */\n    function boostedBalance(address user) external view override returns (uint256) {\n        return balances[user].scaledMul(boostFactors[user]);\n    }\n\n    /**\n     * @notice Get the vote weight for a user.\n     * @dev This does not invlude the gov. tokens queued for withdrawal.\n     * @param user Address to get the vote weight for.\n     * @return vote weight for user.\n     */\n    function balanceOf(address user) external view override returns (uint256) {\n        return (balances[user] - totalStashed[user]).scaledMul(boostFactors[user]);\n    }\n\n    /**\n     * @notice Get the share of the total boosted locked balance for a user.\n     * @dev This includes the gov. tokens queued for withdrawal.\n     * @param user Address to get the share of the total boosted balance for.\n     * @return share of the total boosted balance for user.\n     */\n    function getShareOfTotalBoostedBalance(address user) external view override returns (uint256) {\n        return balances[user].scaledMul(boostFactors[user]).scaledDiv(totalLockedBoosted);\n    }\n\n    function getStashedGovTokens(address user)\n        external\n        view\n        override\n        returns (WithdrawStash[] memory)\n    {\n        return stashedGovTokens[user];\n    }\n\n    function claimableFees(address user) external view override returns (uint256) {\n        return claimableFees(user, rewardToken);\n    }\n\n    /**\n     * @notice Claim fees accumulated in the Locker.\n     */\n    function claimFees(address _rewardToken) public override {\n        require(\n            _rewardToken == rewardToken || _replacedRewardTokens.contains(_rewardToken),\n            Error.INVALID_ARGUMENT\n        );\n        _userCheckpoint(msg.sender, 0, balances[msg.sender]);\n        RewardTokenData storage curRewardTokenData = rewardTokenData[_rewardToken];\n        uint256 claimable = curRewardTokenData.userShares[msg.sender];\n        curRewardTokenData.userShares[msg.sender] = 0;\n        curRewardTokenData.feeBalance -= claimable;\n        IERC20(_rewardToken).safeTransfer(msg.sender, claimable);\n        emit RewardsClaimed(msg.sender, _rewardToken, claimable);\n    }\n\n    /**\n     * @notice Lock gov. tokens on behalf of another user.\n     * @dev The amount needs to be approved in advance.\n     * @param user Address of user to lock on behalf of.\n     * @param amount Amount of gov. tokens to lock.\n     */\n    function lockFor(address user, uint256 amount) public override {\n        govToken.safeTransferFrom(msg.sender, address(this), amount);\n        _userCheckpoint(user, amount, balances[user] + amount);\n        totalLocked += amount;\n        emit Locked(user, amount);\n    }\n\n    function getUserShare(address user, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return rewardTokenData[_rewardToken].userShares[user];\n    }\n\n    function claimableFees(address user, address _rewardToken)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        uint256 currentShare;\n        uint256 userBalance = balances[user];\n        RewardTokenData storage curRewardTokenData = rewardTokenData[_rewardToken];\n\n        // Compute the share earned by the user since they last updated\n        if (userBalance > 0) {\n            currentShare += (curRewardTokenData.feeIntegral -\n                curRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                    userBalance.scaledMul(boostFactors[user])\n                );\n        }\n        return curRewardTokenData.userShares[user] + currentShare;\n    }\n\n    function computeNewBoost(\n        address user,\n        uint256 amountAdded,\n        uint256 newTotal\n    ) public view override returns (uint256) {\n        uint256 newBoost;\n        uint256 balance = balances[user];\n        uint256 startBoost = currentUInts256[_START_BOOST];\n        if (balance == 0 || newTotal == 0) {\n            newBoost = startBoost;\n        } else {\n            uint256 maxBoost = currentUInts256[_MAX_BOOST];\n            newBoost = boostFactors[user];\n            newBoost += (block.timestamp - lastUpdated[user])\n                .scaledDiv(currentUInts256[_INCREASE_PERIOD])\n                .scaledMul(maxBoost - startBoost);\n            if (newBoost > maxBoost) {\n                newBoost = maxBoost;\n            }\n            if (newTotal <= balance) {\n                return newBoost;\n            }\n            newBoost =\n                newBoost.scaledMul(balance.scaledDiv(newTotal)) +\n                startBoost.scaledMul(amountAdded.scaledDiv(newTotal));\n        }\n        return newBoost;\n    }\n\n    function _userCheckpoint(\n        address user,\n        uint256 amountAdded,\n        uint256 newTotal\n    ) internal {\n        RewardTokenData storage curRewardTokenData = rewardTokenData[rewardToken];\n\n        // Compute the share earned by the user since they last updated\n        uint256 userBalance = balances[user];\n        if (userBalance > 0) {\n            curRewardTokenData.userShares[user] += (curRewardTokenData.feeIntegral -\n                curRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                    userBalance.scaledMul(boostFactors[user])\n                );\n\n            // Update values for previous rewardTokens\n            if (lastUpdated[user] < lastMigrationEvent) {\n                uint256 length = _replacedRewardTokens.length();\n                for (uint256 i; i < length; i = i.uncheckedInc()) {\n                    (address token, uint256 replacedAt) = _replacedRewardTokens.at(i);\n                    if (lastUpdated[user] < replacedAt) {\n                        RewardTokenData storage prevRewardTokenData = rewardTokenData[token];\n                        prevRewardTokenData.userShares[user] += (prevRewardTokenData.feeIntegral -\n                            prevRewardTokenData.userFeeIntegrals[user]).scaledMul(\n                                userBalance.scaledMul(boostFactors[user])\n                            );\n                        prevRewardTokenData.userFeeIntegrals[user] = prevRewardTokenData\n                            .feeIntegral;\n                    }\n                }\n            }\n        }\n\n        uint256 newBoost = computeNewBoost(user, amountAdded, newTotal);\n        totalLockedBoosted =\n            totalLockedBoosted +\n            newTotal.scaledMul(newBoost) -\n            balances[user].scaledMul(boostFactors[user]);\n\n        // Update user values\n        curRewardTokenData.userFeeIntegrals[user] = curRewardTokenData.feeIntegral;\n        lastUpdated[user] = block.timestamp;\n        boostFactors[user] = newBoost;\n        balances[user] = newTotal;\n    }\n}\n\n\n// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../access/Authorization.sol\";\n\nimport \"../../libraries/AddressProviderHelpers.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/DecimalScale.sol\";\nimport \"../../libraries/ScaledMath.sol\";\n\nimport \"../../interfaces/IAddressProvider.sol\";\nimport \"../../interfaces/ISwapperRouter.sol\";\nimport \"../../interfaces/vendor/UniswapRouter02.sol\";\nimport \"../../interfaces/vendor/IWETH.sol\";\nimport \"../../interfaces/IERC20Full.sol\";\nimport \"../../interfaces/vendor/ICurveSwapEth.sol\";\n\n/**\n * The swapper router handles the swapping from one token to another.\n * By default it does all swaps through WETH, in two steps checking which DEX is better for each stage of the swap.\n * It also supports ETH in or out and handles it by converting to WETH and back.\n */\ncontract SwapperRouter is ISwapperRouter, Authorization {\n    using SafeERC20 for IERC20;\n    using DecimalScale for uint256;\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    // Dex contracts\n    address private constant _UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap Router, used for swapping tokens on Uniswap\n    address private constant _SUSHISWAP = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // Sushiswap Router, used for swapping tokens on Sushiswap\n    IWETH private constant _WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH, used for wrapping and unwrapping ETH for swaps\n\n    IAddressProvider private immutable _addressProvider; // Address provider used for getting oracle provider\n\n    uint256 public slippageTolerance; // The amount of slippage to allow from the oracle price of an asset\n    mapping(address => ICurveSwapEth) public curvePools; // Curve Pool to use for swapping with WETH\n\n    event Swapped(address fromToken, address toToken, uint256 amountIn, uint256 amountOut); // Emmited after a successfull swap\n    event SetSlippageTolerance(uint256 value); // Emitted after a successful setting of slippage tolerance\n    event SetCurvePool(address token, address curvePool); // Emitted after a successful setting of a Curve Pool\n\n    constructor(address addressProvider_)\n        Authorization(IAddressProvider(addressProvider_).getRoleManager())\n    {\n        _addressProvider = IAddressProvider(addressProvider_);\n        slippageTolerance = 0.97e18;\n    }\n\n    receive() external payable {} // Used for receiving ETH when unwrapping WETH\n\n    /**\n     * @notice Swaps all of the users balance of fromToken for toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @return amountOut The amount of toToken received.\n     */\n    function swapAll(address fromToken_, address toToken_)\n        external\n        payable\n        override\n        returns (uint256 amountOut)\n    {\n        // Swapping if from token is ETH\n        if (fromToken_ == address(0)) {\n            return swap(fromToken_, toToken_, address(this).balance);\n        }\n\n        // Swapping if from token is ERC20\n        return swap(fromToken_, toToken_, IERC20(fromToken_).balanceOf(address(msg.sender)));\n    }\n\n    /**\n     * @notice Set slippage tolerance for swaps.\n     * @dev Stored as a multiplier, e.g. 2% would be set as 0.98.\n     * @param slippageTolerance_ New slippage tolerance.\n     */\n    function setSlippageTolerance(uint256 slippageTolerance_) external override onlyGovernance {\n        require(slippageTolerance_ <= ScaledMath.ONE, Error.INVALID_SLIPPAGE_TOLERANCE);\n        slippageTolerance = slippageTolerance_;\n        emit SetSlippageTolerance(slippageTolerance_);\n    }\n\n    /**\n     * @notice Sets the Curve Pool to use for swapping a token with WETH.\n     * @dev To use Uniswap or Sushiswap instead, set the Curve Pool to the zero address.\n     * @param token_ The token to set the Curve Pool for.\n     * @param curvePool_ The address of the Curve Pool.\n     */\n    function setCurvePool(address token_, address curvePool_) external override onlyGovernance {\n        require(token_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        require(curvePool_ != address(curvePools[token_]), Error.SAME_ADDRESS_NOT_ALLOWED);\n        curvePools[token_] = ICurveSwapEth(curvePool_);\n        emit SetCurvePool(token_, curvePool_);\n    }\n\n    /**\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\n     * @dev In the case where a custom swapper is used, return value may not be precise.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken being swapped.\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\n     */\n    function getAmountOut(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_\n    ) external view override returns (uint256 amountOut) {\n        if (fromToken_ == toToken_ || amountIn_ == 0) return amountIn_;\n\n        return _getTokenOut(toToken_, _getWethOut(fromToken_, amountIn_));\n    }\n\n    /**\n     * @notice Swaps an amount of fromToken to toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken to swap for toToken.\n     * @return amountOut The amount of toToken received.\n     */\n    function swap(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_\n    ) public payable override returns (uint256 amountOut) {\n        // Validating ETH value sent\n        require(msg.value == (fromToken_ == address(0) ? amountIn_ : 0), Error.INVALID_AMOUNT);\n        if (amountIn_ == 0) {\n            emit Swapped(fromToken_, toToken_, 0, 0);\n            return 0;\n        }\n\n        // Handling swap between the same token\n        if (fromToken_ == toToken_) {\n            if (fromToken_ == address(0)) {\n                payable(msg.sender).transfer(amountIn_);\n            }\n            emit Swapped(fromToken_, toToken_, amountIn_, amountIn_);\n            return amountIn_;\n        }\n\n        // Transferring to contract if ERC20\n        if (fromToken_ != address(0)) {\n            IERC20(fromToken_).safeTransferFrom(msg.sender, address(this), amountIn_);\n        }\n\n        // Swapping token via WETH\n        uint256 amountOut_ = _swapWethForToken(toToken_, _swapForWeth(fromToken_));\n        emit Swapped(fromToken_, toToken_, amountIn_, amountOut_);\n        return _returnTokens(toToken_, amountOut_);\n    }\n\n    /**\n     * @dev Swaps the full contract balance of token to WETH.\n     * @param token_ The token to swap to WETH.\n     * @return amountOut The amount of WETH received from the swap.\n     */\n    function _swapForWeth(address token_) internal returns (uint256 amountOut) {\n        if (token_ == address(_WETH)) return _WETH.balanceOf(address(this));\n\n        // Handling ETH -> WETH\n        if (token_ == address(0)) {\n            uint256 ethBalance_ = address(this).balance;\n            if (ethBalance_ == 0) return 0;\n            _WETH.deposit{value: ethBalance_}();\n            return ethBalance_;\n        }\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            uint256 amount_ = IERC20(token_).balanceOf(address(this));\n            if (amount_ == 0) return 0;\n            _approve(token_, address(curvePool_));\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            curvePool_.exchange(\n                tokenIndex_,\n                wethIndex_,\n                amount_,\n                _minWethAmountOut(amount_, token_)\n            );\n            return _WETH.balanceOf(address(this));\n        }\n\n        // Handling ERC20 -> WETH\n        return _swap(token_, address(_WETH), IERC20(token_).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Swaps the full contract balance of WETH to token.\n     * @param token_ The token to swap WETH to.\n     * @return amountOut The amount of token received from the swap.\n     */\n    function _swapWethForToken(address token_, uint256 amount_)\n        internal\n        returns (uint256 amountOut)\n    {\n        if (amount_ == 0) return 0;\n        if (token_ == address(_WETH)) return amount_;\n\n        // Handling WETH -> ETH\n        if (token_ == address(0)) {\n            _WETH.withdraw(amount_);\n            return amount_;\n        }\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            _approve(address(_WETH), address(curvePool_));\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            curvePool_.exchange(\n                wethIndex_,\n                tokenIndex_,\n                amount_,\n                _minTokenAmountOut(amount_, token_)\n            );\n            return IERC20(token_).balanceOf(address(this));\n        }\n\n        // Handling WETH -> ERC20\n        return _swap(address(_WETH), token_, amount_);\n    }\n\n    /**\n     * @dev Swaps an amount of fromToken to toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amount_ The amount of fromToken to swap.\n     * @return amountOut The amount of toToken received from the swap.\n     */\n    function _swap(\n        address fromToken_,\n        address toToken_,\n        uint256 amount_\n    ) internal returns (uint256 amountOut) {\n        if (amount_ == 0) return 0;\n        if (fromToken_ == toToken_) return amount_;\n        address dex_ = _getBestDex(fromToken_, toToken_, amount_);\n        _approve(fromToken_, dex_);\n        address[] memory path_ = new address[](2);\n        path_[0] = fromToken_;\n        path_[1] = toToken_;\n        return\n            UniswapRouter02(dex_).swapExactTokensForTokens(\n                amount_,\n                _getAmountOutMin(amount_, fromToken_, toToken_),\n                path_,\n                address(this),\n                block.timestamp\n            )[1];\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token_ The token to approve for.\n     * @param spender_ The spender to approve.\n     */\n    function _approve(address token_, address spender_) internal {\n        if (IERC20(token_).allowance(address(this), spender_) > 0) return;\n        IERC20(token_).safeApprove(spender_, type(uint256).max);\n    }\n\n    /**\n     * @dev Returns an amount of tokens to the sender.\n     * @param token_ The token to return to sender.\n     * @param amount_ The amount of tokens to return to sender.\n     * @return amountReturned The amount of tokens returned to sender.\n     */\n    function _returnTokens(address token_, uint256 amount_)\n        internal\n        returns (uint256 amountReturned)\n    {\n        // Returning if ETH\n        if (token_ == address(0)) {\n            payable(msg.sender).transfer(amount_);\n            return amount_;\n        }\n\n        // Returning if ERC20\n        IERC20(token_).safeTransfer(msg.sender, amount_);\n        return amount_;\n    }\n\n    /**\n     * @dev Gets the amount of WETH received by swapping amount of token\n     *      In the case where a custom swapper is used, return value may not be precise.\n     * @param token_ The token to swap from.\n     * @param amount_ The mount of token being swapped.\n     * @return amountOut The amount of WETH received by swapping amount of token.\n     */\n    function _getWethOut(address token_, uint256 amount_)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            return curvePool_.get_dy(tokenIndex_, wethIndex_, amount_);\n        }\n\n        return\n            _tokenAmountOut(\n                token_,\n                address(_WETH),\n                amount_,\n                _getBestDex(token_, address(_WETH), amount_)\n            );\n    }\n\n    /**\n     * @dev Gets the amount of token received by swapping amount of WETH\n     *      In the case where a custom swapper is used, return value may not be precise.\n     * @param token_ The token to swap to.\n     * @param amount_ The amount of WETH being swapped.\n     * @return amountOut The amount of token received by swapping amount of WETH.\n     */\n    function _getTokenOut(address token_, uint256 amount_)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            return curvePool_.get_dy(wethIndex_, tokenIndex_, amount_);\n        }\n\n        return\n            _tokenAmountOut(\n                address(_WETH),\n                token_,\n                amount_,\n                _getBestDex(address(_WETH), token_, amount_)\n            );\n    }\n\n    /**\n     * @dev Gets the best dex to use for swapping tokens based on which gives the highest amount out.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amount_ The amount of fromToken to swap.\n     * @return bestDex The best dex to use for swapping tokens based on which gives the highest amount out\n     */\n    function _getBestDex(\n        address fromToken_,\n        address toToken_,\n        uint256 amount_\n    ) internal view returns (address bestDex) {\n        address uniswap_ = _UNISWAP;\n        address sushiswap_ = _SUSHISWAP;\n        return\n            _tokenAmountOut(fromToken_, toToken_, amount_, uniswap_) >=\n                _tokenAmountOut(fromToken_, toToken_, amount_, sushiswap_)\n                ? uniswap_\n                : sushiswap_;\n    }\n\n    /**\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken being swapped.\n     * @param dex_ The DEX to use for the swap.\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\n     */\n    function _tokenAmountOut(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_,\n        address dex_\n    ) internal view returns (uint256 amountOut) {\n        address[] memory path_ = new address[](2);\n        path_[0] = fromToken_;\n        path_[1] = toToken_;\n        return UniswapRouter02(dex_).getAmountsOut(amountIn_, path_)[1];\n    }\n\n    /**\n     * @dev Returns the minimum amount of toToken_ to receive from swap.\n     * @param amount_ The amount of fromToken_ being swapped.\n     * @param fromToken_ The Token being swapped from.\n     * @param toToken_ The Token being swapped to.\n     * @return amountOutMin The minimum amount of toToken_ to receive from swap.\n     */\n    function _getAmountOutMin(\n        uint256 amount_,\n        address fromToken_,\n        address toToken_\n    ) internal view returns (uint256 amountOutMin) {\n        return\n            fromToken_ == address(_WETH)\n                ? _minTokenAmountOut(amount_, toToken_)\n                : _minWethAmountOut(amount_, fromToken_);\n    }\n\n    /**\n     * @dev Returns the minimum amount of Token to receive from swap.\n     * @param wethAmount_ The amount of WETH being swapped.\n     * @param token_ The Token the WETH is being swapped to.\n     * @return minAmountOut The minimum amount of Token to receive from swap.\n     */\n    function _minTokenAmountOut(uint256 wethAmount_, address token_)\n        internal\n        view\n        returns (uint256 minAmountOut)\n    {\n        uint256 priceInEth_ = _getPriceInEth(token_);\n        if (priceInEth_ == 0) return 0;\n        return\n            wethAmount_.scaledDiv(priceInEth_).scaledMul(slippageTolerance).scaleTo(\n                IERC20Full(token_).decimals()\n            );\n    }\n\n    /**\n     * @dev Returns the minimum amount of WETH to receive from swap.\n     * @param tokenAmount_ The amount of Token being swapped.\n     * @param token_ The Token that is being swapped for WETH.\n     * @return minAmountOut The minimum amount of WETH to receive from swap.\n     */\n    function _minWethAmountOut(uint256 tokenAmount_, address token_)\n        internal\n        view\n        returns (uint256 minAmountOut)\n    {\n        uint256 priceInEth_ = _getPriceInEth(token_);\n        if (priceInEth_ == 0) return 0;\n        return\n            tokenAmount_.scaledMul(priceInEth_).scaledMul(slippageTolerance).scaleFrom(\n                IERC20Full(token_).decimals()\n            );\n    }\n\n    /**\n     * @dev Returns the price in ETH of the given token. If no oracle exists for the token, returns 0.\n     * @param token_ The token to get the price for.\n     * @return tokenPriceInEth The price of the token in ETH.\n     */\n    function _getPriceInEth(address token_) internal view returns (uint256 tokenPriceInEth) {\n        try _addressProvider.getOracleProvider().getPriceETH(token_) returns (uint256 price_) {\n            return price_;\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Returns the Curve Pool coin indices for a given Token.\n     * @param curvePool_ The Curve Pool to return the indices for.\n     * @param token_ The Token to get the indices for.\n     * @return wethIndex_ The coin index for WETH.\n     * @return tokenIndex_ The coin index for the Token.\n     */\n    function _getIndices(ICurveSwapEth curvePool_, address token_)\n        internal\n        view\n        returns (uint256 wethIndex_, uint256 tokenIndex_)\n    {\n        return curvePool_.coins(1) == token_ ? (0, 1) : (1, 0);\n    }\n}\n\n\n",
        "CodeNames": [
            "RewardHandler.sol",
            "PoolMigrationZap.sol",
            "BkdLocker.sol",
            "SwapperRouter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "PoolMigrationZap.sol, BkdLocker.sol, RewardHandler.sol, SwapperRouter.sol",
                "Type": "Rug",
                "Description": "There are multiple ways for admins/governance to rug users.",
                "Repair": "The DAO can accept proposals to spawn specific contracts, and hook up specific addresses in certain ways in the new deployment"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"../access/Authorization.sol\";\n\nimport \"../../libraries/AddressProviderHelpers.sol\";\nimport \"../../libraries/Errors.sol\";\nimport \"../../libraries/DecimalScale.sol\";\nimport \"../../libraries/ScaledMath.sol\";\n\nimport \"../../interfaces/IAddressProvider.sol\";\nimport \"../../interfaces/ISwapperRouter.sol\";\nimport \"../../interfaces/vendor/UniswapRouter02.sol\";\nimport \"../../interfaces/vendor/IWETH.sol\";\nimport \"../../interfaces/IERC20Full.sol\";\nimport \"../../interfaces/vendor/ICurveSwapEth.sol\";\n\n/**\n * The swapper router handles the swapping from one token to another.\n * By default it does all swaps through WETH, in two steps checking which DEX is better for each stage of the swap.\n * It also supports ETH in or out and handles it by converting to WETH and back.\n */\ncontract SwapperRouter is ISwapperRouter, Authorization {\n    using SafeERC20 for IERC20;\n    using DecimalScale for uint256;\n    using ScaledMath for uint256;\n    using AddressProviderHelpers for IAddressProvider;\n\n    // Dex contracts\n    address private constant _UNISWAP = address(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D); // Uniswap Router, used for swapping tokens on Uniswap\n    address private constant _SUSHISWAP = address(0xd9e1cE17f2641f24aE83637ab66a2cca9C378B9F); // Sushiswap Router, used for swapping tokens on Sushiswap\n    IWETH private constant _WETH = IWETH(0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2); // WETH, used for wrapping and unwrapping ETH for swaps\n\n    IAddressProvider private immutable _addressProvider; // Address provider used for getting oracle provider\n\n    uint256 public slippageTolerance; // The amount of slippage to allow from the oracle price of an asset\n    mapping(address => ICurveSwapEth) public curvePools; // Curve Pool to use for swapping with WETH\n\n    event Swapped(address fromToken, address toToken, uint256 amountIn, uint256 amountOut); // Emmited after a successfull swap\n    event SetSlippageTolerance(uint256 value); // Emitted after a successful setting of slippage tolerance\n    event SetCurvePool(address token, address curvePool); // Emitted after a successful setting of a Curve Pool\n\n    constructor(address addressProvider_)\n        Authorization(IAddressProvider(addressProvider_).getRoleManager())\n    {\n        _addressProvider = IAddressProvider(addressProvider_);\n        slippageTolerance = 0.97e18;\n    }\n\n    receive() external payable {} // Used for receiving ETH when unwrapping WETH\n\n    /**\n     * @notice Swaps all of the users balance of fromToken for toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @return amountOut The amount of toToken received.\n     */\n    function swapAll(address fromToken_, address toToken_)\n        external\n        payable\n        override\n        returns (uint256 amountOut)\n    {\n        // Swapping if from token is ETH\n        if (fromToken_ == address(0)) {\n            return swap(fromToken_, toToken_, address(this).balance);\n        }\n\n        // Swapping if from token is ERC20\n        return swap(fromToken_, toToken_, IERC20(fromToken_).balanceOf(address(msg.sender)));\n    }\n\n    /**\n     * @notice Set slippage tolerance for swaps.\n     * @dev Stored as a multiplier, e.g. 2% would be set as 0.98.\n     * @param slippageTolerance_ New slippage tolerance.\n     */\n    function setSlippageTolerance(uint256 slippageTolerance_) external override onlyGovernance {\n        require(slippageTolerance_ <= ScaledMath.ONE, Error.INVALID_SLIPPAGE_TOLERANCE);\n        slippageTolerance = slippageTolerance_;\n        emit SetSlippageTolerance(slippageTolerance_);\n    }\n\n    /**\n     * @notice Sets the Curve Pool to use for swapping a token with WETH.\n     * @dev To use Uniswap or Sushiswap instead, set the Curve Pool to the zero address.\n     * @param token_ The token to set the Curve Pool for.\n     * @param curvePool_ The address of the Curve Pool.\n     */\n    function setCurvePool(address token_, address curvePool_) external override onlyGovernance {\n        require(token_ != address(0), Error.ZERO_ADDRESS_NOT_ALLOWED);\n        require(curvePool_ != address(curvePools[token_]), Error.SAME_ADDRESS_NOT_ALLOWED);\n        curvePools[token_] = ICurveSwapEth(curvePool_);\n        emit SetCurvePool(token_, curvePool_);\n    }\n\n    /**\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\n     * @dev In the case where a custom swapper is used, return value may not be precise.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken being swapped.\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\n     */\n    function getAmountOut(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_\n    ) external view override returns (uint256 amountOut) {\n        if (fromToken_ == toToken_ || amountIn_ == 0) return amountIn_;\n\n        return _getTokenOut(toToken_, _getWethOut(fromToken_, amountIn_));\n    }\n\n    /**\n     * @notice Swaps an amount of fromToken to toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken to swap for toToken.\n     * @return amountOut The amount of toToken received.\n     */\n    function swap(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_\n    ) public payable override returns (uint256 amountOut) {\n        // Validating ETH value sent\n        require(msg.value == (fromToken_ == address(0) ? amountIn_ : 0), Error.INVALID_AMOUNT);\n        if (amountIn_ == 0) {\n            emit Swapped(fromToken_, toToken_, 0, 0);\n            return 0;\n        }\n\n        // Handling swap between the same token\n        if (fromToken_ == toToken_) {\n            if (fromToken_ == address(0)) {\n                payable(msg.sender).transfer(amountIn_);\n            }\n            emit Swapped(fromToken_, toToken_, amountIn_, amountIn_);\n            return amountIn_;\n        }\n\n        // Transferring to contract if ERC20\n        if (fromToken_ != address(0)) {\n            IERC20(fromToken_).safeTransferFrom(msg.sender, address(this), amountIn_);\n        }\n\n        // Swapping token via WETH\n        uint256 amountOut_ = _swapWethForToken(toToken_, _swapForWeth(fromToken_));\n        emit Swapped(fromToken_, toToken_, amountIn_, amountOut_);\n        return _returnTokens(toToken_, amountOut_);\n    }\n\n    /**\n     * @dev Swaps the full contract balance of token to WETH.\n     * @param token_ The token to swap to WETH.\n     * @return amountOut The amount of WETH received from the swap.\n     */\n    function _swapForWeth(address token_) internal returns (uint256 amountOut) {\n        if (token_ == address(_WETH)) return _WETH.balanceOf(address(this));\n\n        // Handling ETH -> WETH\n        if (token_ == address(0)) {\n            uint256 ethBalance_ = address(this).balance;\n            if (ethBalance_ == 0) return 0;\n            _WETH.deposit{value: ethBalance_}();\n            return ethBalance_;\n        }\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            uint256 amount_ = IERC20(token_).balanceOf(address(this));\n            if (amount_ == 0) return 0;\n            _approve(token_, address(curvePool_));\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            curvePool_.exchange(\n                tokenIndex_,\n                wethIndex_,\n                amount_,\n                _minWethAmountOut(amount_, token_)\n            );\n            return _WETH.balanceOf(address(this));\n        }\n\n        // Handling ERC20 -> WETH\n        return _swap(token_, address(_WETH), IERC20(token_).balanceOf(address(this)));\n    }\n\n    /**\n     * @dev Swaps the full contract balance of WETH to token.\n     * @param token_ The token to swap WETH to.\n     * @return amountOut The amount of token received from the swap.\n     */\n    function _swapWethForToken(address token_, uint256 amount_)\n        internal\n        returns (uint256 amountOut)\n    {\n        if (amount_ == 0) return 0;\n        if (token_ == address(_WETH)) return amount_;\n\n        // Handling WETH -> ETH\n        if (token_ == address(0)) {\n            _WETH.withdraw(amount_);\n            return amount_;\n        }\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            _approve(address(_WETH), address(curvePool_));\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            curvePool_.exchange(\n                wethIndex_,\n                tokenIndex_,\n                amount_,\n                _minTokenAmountOut(amount_, token_)\n            );\n            return IERC20(token_).balanceOf(address(this));\n        }\n\n        // Handling WETH -> ERC20\n        return _swap(address(_WETH), token_, amount_);\n    }\n\n    /**\n     * @dev Swaps an amount of fromToken to toToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amount_ The amount of fromToken to swap.\n     * @return amountOut The amount of toToken received from the swap.\n     */\n    function _swap(\n        address fromToken_,\n        address toToken_,\n        uint256 amount_\n    ) internal returns (uint256 amountOut) {\n        if (amount_ == 0) return 0;\n        if (fromToken_ == toToken_) return amount_;\n        address dex_ = _getBestDex(fromToken_, toToken_, amount_);\n        _approve(fromToken_, dex_);\n        address[] memory path_ = new address[](2);\n        path_[0] = fromToken_;\n        path_[1] = toToken_;\n        return\n            UniswapRouter02(dex_).swapExactTokensForTokens(\n                amount_,\n                _getAmountOutMin(amount_, fromToken_, toToken_),\n                path_,\n                address(this),\n                block.timestamp\n            )[1];\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token_ The token to approve for.\n     * @param spender_ The spender to approve.\n     */\n    function _approve(address token_, address spender_) internal {\n        if (IERC20(token_).allowance(address(this), spender_) > 0) return;\n        IERC20(token_).safeApprove(spender_, type(uint256).max);\n    }\n\n    /**\n     * @dev Returns an amount of tokens to the sender.\n     * @param token_ The token to return to sender.\n     * @param amount_ The amount of tokens to return to sender.\n     * @return amountReturned The amount of tokens returned to sender.\n     */\n    function _returnTokens(address token_, uint256 amount_)\n        internal\n        returns (uint256 amountReturned)\n    {\n        // Returning if ETH\n        if (token_ == address(0)) {\n            payable(msg.sender).transfer(amount_);\n            return amount_;\n        }\n\n        // Returning if ERC20\n        IERC20(token_).safeTransfer(msg.sender, amount_);\n        return amount_;\n    }\n\n    /**\n     * @dev Gets the amount of WETH received by swapping amount of token\n     *      In the case where a custom swapper is used, return value may not be precise.\n     * @param token_ The token to swap from.\n     * @param amount_ The mount of token being swapped.\n     * @return amountOut The amount of WETH received by swapping amount of token.\n     */\n    function _getWethOut(address token_, uint256 amount_)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            return curvePool_.get_dy(tokenIndex_, wethIndex_, amount_);\n        }\n\n        return\n            _tokenAmountOut(\n                token_,\n                address(_WETH),\n                amount_,\n                _getBestDex(token_, address(_WETH), amount_)\n            );\n    }\n\n    /**\n     * @dev Gets the amount of token received by swapping amount of WETH\n     *      In the case where a custom swapper is used, return value may not be precise.\n     * @param token_ The token to swap to.\n     * @param amount_ The amount of WETH being swapped.\n     * @return amountOut The amount of token received by swapping amount of WETH.\n     */\n    function _getTokenOut(address token_, uint256 amount_)\n        internal\n        view\n        returns (uint256 amountOut)\n    {\n        if (token_ == address(_WETH) || token_ == address(0)) return amount_;\n\n        // Handling Curve Pool swaps\n        ICurveSwapEth curvePool_ = curvePools[token_];\n        if (address(curvePool_) != address(0)) {\n            (uint256 wethIndex_, uint256 tokenIndex_) = _getIndices(curvePool_, token_);\n            return curvePool_.get_dy(wethIndex_, tokenIndex_, amount_);\n        }\n\n        return\n            _tokenAmountOut(\n                address(_WETH),\n                token_,\n                amount_,\n                _getBestDex(address(_WETH), token_, amount_)\n            );\n    }\n\n    /**\n     * @dev Gets the best dex to use for swapping tokens based on which gives the highest amount out.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amount_ The amount of fromToken to swap.\n     * @return bestDex The best dex to use for swapping tokens based on which gives the highest amount out\n     */\n    function _getBestDex(\n        address fromToken_,\n        address toToken_,\n        uint256 amount_\n    ) internal view returns (address bestDex) {\n        address uniswap_ = _UNISWAP;\n        address sushiswap_ = _SUSHISWAP;\n        return\n            _tokenAmountOut(fromToken_, toToken_, amount_, uniswap_) >=\n                _tokenAmountOut(fromToken_, toToken_, amount_, sushiswap_)\n                ? uniswap_\n                : sushiswap_;\n    }\n\n    /**\n     * @notice Gets the amount of toToken received by swapping amountIn of fromToken.\n     * @param fromToken_ The token to swap from.\n     * @param toToken_ The token to swap to.\n     * @param amountIn_ The amount of fromToken being swapped.\n     * @param dex_ The DEX to use for the swap.\n     * @return amountOut The amount of toToken received by swapping amountIn of fromToken.\n     */\n    function _tokenAmountOut(\n        address fromToken_,\n        address toToken_,\n        uint256 amountIn_,\n        address dex_\n    ) internal view returns (uint256 amountOut) {\n        address[] memory path_ = new address[](2);\n        path_[0] = fromToken_;\n        path_[1] = toToken_;\n        return UniswapRouter02(dex_).getAmountsOut(amountIn_, path_)[1];\n    }\n\n    /**\n     * @dev Returns the minimum amount of toToken_ to receive from swap.\n     * @param amount_ The amount of fromToken_ being swapped.\n     * @param fromToken_ The Token being swapped from.\n     * @param toToken_ The Token being swapped to.\n     * @return amountOutMin The minimum amount of toToken_ to receive from swap.\n     */\n    function _getAmountOutMin(\n        uint256 amount_,\n        address fromToken_,\n        address toToken_\n    ) internal view returns (uint256 amountOutMin) {\n        return\n            fromToken_ == address(_WETH)\n                ? _minTokenAmountOut(amount_, toToken_)\n                : _minWethAmountOut(amount_, fromToken_);\n    }\n\n    /**\n     * @dev Returns the minimum amount of Token to receive from swap.\n     * @param wethAmount_ The amount of WETH being swapped.\n     * @param token_ The Token the WETH is being swapped to.\n     * @return minAmountOut The minimum amount of Token to receive from swap.\n     */\n    function _minTokenAmountOut(uint256 wethAmount_, address token_)\n        internal\n        view\n        returns (uint256 minAmountOut)\n    {\n        uint256 priceInEth_ = _getPriceInEth(token_);\n        if (priceInEth_ == 0) return 0;\n        return\n            wethAmount_.scaledDiv(priceInEth_).scaledMul(slippageTolerance).scaleTo(\n                IERC20Full(token_).decimals()\n            );\n    }\n\n    /**\n     * @dev Returns the minimum amount of WETH to receive from swap.\n     * @param tokenAmount_ The amount of Token being swapped.\n     * @param token_ The Token that is being swapped for WETH.\n     * @return minAmountOut The minimum amount of WETH to receive from swap.\n     */\n    function _minWethAmountOut(uint256 tokenAmount_, address token_)\n        internal\n        view\n        returns (uint256 minAmountOut)\n    {\n        uint256 priceInEth_ = _getPriceInEth(token_);\n        if (priceInEth_ == 0) return 0;\n        return\n            tokenAmount_.scaledMul(priceInEth_).scaledMul(slippageTolerance).scaleFrom(\n                IERC20Full(token_).decimals()\n            );\n    }\n\n    /**\n     * @dev Returns the price in ETH of the given token. If no oracle exists for the token, returns 0.\n     * @param token_ The token to get the price for.\n     * @return tokenPriceInEth The price of the token in ETH.\n     */\n    function _getPriceInEth(address token_) internal view returns (uint256 tokenPriceInEth) {\n        try _addressProvider.getOracleProvider().getPriceETH(token_) returns (uint256 price_) {\n            return price_;\n        } catch {\n            return 0;\n        }\n    }\n\n    /**\n     * @dev Returns the Curve Pool coin indices for a given Token.\n     * @param curvePool_ The Curve Pool to return the indices for.\n     * @param token_ The Token to get the indices for.\n     * @return wethIndex_ The coin index for WETH.\n     * @return tokenIndex_ The coin index for the Token.\n     */\n    function _getIndices(ICurveSwapEth curvePool_, address token_)\n        internal\n        view\n        returns (uint256 wethIndex_, uint256 tokenIndex_)\n    {\n        return curvePool_.coins(1) == token_ ? (0, 1) : (1, 0);\n    }\n}\n\n\n",
        "CodeNames": [
            "SwapperRouter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "SwapperRouter.sol line 140",
                "Type": "Usage of deprecated transfer to send ETH",
                "Description": "Using transfer to send ETH limits the protocol's interaction with other contracts that require more than 2300 gas to process the transaction.",
                "Repair": "Use call instead of transfer"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-3.0-or-later\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"../interfaces/IFeeBurner.sol\";\nimport \"../interfaces/IBkdLocker.sol\";\nimport \"../interfaces/IController.sol\";\nimport \"../interfaces/IAddressProvider.sol\";\nimport \"../interfaces/IRewardHandler.sol\";\nimport \"./utils/Preparable.sol\";\nimport \"./access/Authorization.sol\";\nimport \"../libraries/AddressProviderHelpers.sol\";\nimport \"../libraries/UncheckedMath.sol\";\n\ncontract RewardHandler is IRewardHandler, Preparable, Authorization {\n    using UncheckedMath for uint256;\n    using SafeERC20 for IERC20;\n    using AddressProviderHelpers for IAddressProvider;\n\n    IController public immutable controller;\n    IAddressProvider public immutable addressProvider;\n\n    constructor(IController _controller)\n        Authorization(_controller.addressProvider().getRoleManager())\n    {\n        controller = _controller;\n        addressProvider = IAddressProvider(controller.addressProvider());\n    }\n\n    receive() external payable {}\n\n    /**\n     * @notice Burns all accumulated fees and pays these out to the BKD locker.\n     */\n    function burnFees() external override {\n        IBkdLocker bkdLocker = IBkdLocker(addressProvider.getBKDLocker());\n        IFeeBurner feeBurner = addressProvider.getFeeBurner();\n        address targetLpToken = bkdLocker.rewardToken();\n        address[] memory pools = addressProvider.allPools();\n        uint256 ethBalance = address(this).balance;\n        address[] memory tokens = new address[](pools.length);\n        for (uint256 i; i < pools.length; i = i.uncheckedInc()) {\n            ILiquidityPool pool = ILiquidityPool(pools[i]);\n            address underlying = pool.getUnderlying();\n            if (underlying != address(0)) {\n                _approve(underlying, address(feeBurner));\n            }\n            tokens[i] = underlying;\n        }\n        feeBurner.burnToTarget{value: ethBalance}(tokens, targetLpToken);\n        uint256 burnedAmount = IERC20(targetLpToken).balanceOf(address(this));\n        IERC20(targetLpToken).safeApprove(address(bkdLocker), burnedAmount);\n        bkdLocker.depositFees(burnedAmount);\n        emit Burned(targetLpToken, burnedAmount);\n    }\n\n    /**\n     * @dev Approves infinite spending for the given spender.\n     * @param token The token to approve for.\n     * @param spender The spender to approve.\n     */\n    function _approve(address token, address spender) internal {\n        if (IERC20(token).allowance(address(this), spender) > 0) return;\n        IERC20(token).safeApprove(spender, type(uint256).max);\n    }\n}\n\n\n",
        "CodeNames": [
            "RewardHandler.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "RewardHandler.sol line 39",
                "Type": "Stuck unclaimed fees from delisted pool",
                "Description": "Unclaimed fees from a delisted pool will become stuck in the contract if burnFees() is not called before delisting the pool.",
                "Repair": "Call burnFees() before delisting a pool"
            }
        ]
    }
]