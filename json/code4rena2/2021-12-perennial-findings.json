[
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.10;\n\nimport \"../interfaces/ICollateral.sol\";\nimport \"./types/OptimisticLedger.sol\";\nimport \"../utils/unstructured/UReentrancyGuard.sol\";\nimport \"../factory/UFactoryProvider.sol\";\n\n/**\n * @title Collateral\n * @notice Manages logic and state for all collateral accounts in the protocol.\n */\ncontract Collateral is ICollateral, UFactoryProvider, UReentrancyGuard {\n    using UFixed18Lib for UFixed18;\n    using Token18Lib for Token18;\n    using OptimisticLedgerLib for OptimisticLedger;\n\n    /// @dev ERC20 stablecoin for collateral\n    Token18 public token;\n\n    /// @dev Fee on maintenance for liquidation\n    UFixed18 public liquidationFee;\n\n    /// @dev Per product collateral state\n    mapping(IProduct => OptimisticLedger) private _products;\n\n    /// @dev Protocol and product fees collected, but not yet claimed\n    mapping(address => UFixed18) public fees;\n\n    /**\n     * @notice Initializes the contract state\n     * @param factory_ Factory contract address\n     * @param token_ Collateral ERC20 stablecoin address\n     */\n    function initialize(IFactory factory_, Token18 token_) external {\n        UFactoryProvider__initialize(factory_);\n        UReentrancyGuard__initialize();\n\n        token = token_;\n        liquidationFee = UFixed18Lib.ratio(50, 100);\n    }\n\n    /**\n     * @notice Deposits `amount` collateral from `msg.sender` to `account`'s `product`\n     *         account\n     * @param account Account to deposit the collateral for\n     * @param product Product to credit the collateral to\n     * @param amount Amount of collateral to deposit\n     */\n    function depositTo(address account, IProduct product, UFixed18 amount)\n    notPaused\n    collateralInvariant(account, product)\n    external {\n        _products[product].creditAccount(account, amount);\n        token.pull(msg.sender, amount);\n\n        emit Deposit(account, product, amount);\n    }\n\n    /**\n     * @notice Withdraws `amount` collateral from `msg.sender`'s `product` account\n     *         and sends it to `account`\n     * @param account Account to withdraw the collateral to\n     * @param product Product to withdraw the collateral from\n     * @param amount Amount of collateral to withdraw\n     */\n    function withdrawTo(address account, IProduct product, UFixed18 amount)\n    notPaused\n    collateralInvariant(msg.sender, product)\n    maintenanceInvariant(msg.sender, product)\n    external {\n        _products[product].debitAccount(msg.sender, amount);\n        token.push(account, amount);\n\n        emit Withdrawal(msg.sender, product, amount);\n    }\n\n    /**\n     * @notice Liquidates `account`'s `product` collateral account\n     * @dev Account must be under-collateralized, fee returned immediately to `msg.sender`\n     * @param account Account to liquidate\n     * @param product Product to liquidate for\n     */\n    function liquidate(address account, IProduct product) notPaused nonReentrant external {\n        // settle\n        product.settle();\n        product.settleAccount(account);\n\n        // liquidate\n        UFixed18 totalMaintenance = product.maintenance(account);\n        UFixed18 totalCollateral = collateral(account, product);\n\n        if (!totalMaintenance.gt(totalCollateral))\n            revert CollateralCantLiquidate(totalMaintenance, totalCollateral);\n\n        product.closeAll(account);\n\n        // claim fee\n        UFixed18 fee = UFixed18Lib.min(totalCollateral, totalMaintenance.mul(liquidationFee));\n\n        _products[product].debitAccount(account, fee);\n        token.push(msg.sender, fee);\n\n        emit Liquidation(account, product, msg.sender, fee);\n    }\n\n    /**\n     * @notice Credits `amount` to `account`'s collateral account\n     * @dev Callable only by the corresponding product as part of the settlement flywheel.\n     *      Moves collateral within a product, any collateral leaving the product due to\n     *      fees has already been accounted for in the settleProduct flywheel.\n     *      Debits in excess of the account balance get recorded as shortfall, and can be\n     *      resolved by the product owner as needed.\n     * @param account Account to credit\n     * @param amount Amount to credit the account (can be negative)\n     */\n    function settleAccount(address account, Fixed18 amount) onlyProduct external {\n        IProduct product = IProduct(msg.sender);\n\n        UFixed18 newShortfall = _products[product].settleAccount(account, amount);\n\n        emit AccountSettle(product, account, amount, newShortfall);\n    }\n\n    /**\n     * @notice Debits `amount` from product's total collateral account\n     * @dev Callable only by the corresponding product as part of the settlement flywheel\n     *      Removes collateral from the product as fees.\n     * @param amount Amount to debit from the account\n     */\n    function settleProduct(UFixed18 amount) onlyProduct external {\n        IProduct product = IProduct(msg.sender);\n\n        address protocolTreasury = factory().treasury();\n        address productTreasury = factory().treasury(product);\n\n        UFixed18 protocolFee = amount.mul(factory().fee());\n        UFixed18 productFee = amount.sub(protocolFee);\n\n        _products[product].debit(amount);\n        fees[protocolTreasury] = fees[protocolTreasury].add(protocolFee);\n        fees[productTreasury] = fees[productTreasury].add(productFee);\n\n        emit ProductSettle(product, protocolFee, productFee);\n    }\n\n    /**\n     * @notice Returns the balance of `account`'s `product` collateral account\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return The balance of the collateral account\n     */\n    function collateral(address account, IProduct product) public view returns (UFixed18) {\n        return _products[product].balances[account];\n    }\n\n    /**\n     * @notice Returns the total balance of `product`'s collateral\n     * @param product Product to return for\n     * @return The total balance of collateral in the product\n     */\n    function collateral(IProduct product) public view returns (UFixed18) {\n        return _products[product].total;\n    }\n\n    /**\n     * @notice Returns the current shortfall of `product`'s collateral\n     * @param product Product to return for\n     * @return The current shortfall of the product\n     */\n    function shortfall(IProduct product) public view returns (UFixed18) {\n        return _products[product].shortfall;\n    }\n\n    /**\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return Whether the account can be liquidated\n     */\n    function liquidatable(address account, IProduct product) external view returns (bool) {\n        return product.maintenance(account).gt(collateral(account, product));\n    }\n\n    /**\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\n     *         after the next oracle version settlement\n     * @dev Takes into account the current pre-position on the account\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return Whether the account can be liquidated\n     */\n    function liquidatableNext(address account, IProduct product) external view returns (bool) {\n        return product.maintenanceNext(account).gt(collateral(account, product));\n    }\n\n    /**\n     * @notice Injects additional collateral into a product to resolve shortfall\n     * @dev Shortfall is a measure of settled insolvency in the market\n     *      This hook can be used by the product owner or an insurance fund to re-capitalize an insolvent market\n     * @param product Product to resolve shortfall for\n     * @param amount Amount of shortfall to resolve\n     */\n    function resolveShortfall(IProduct product, UFixed18 amount) notPaused external {\n        _products[product].resolve(amount);\n        token.pull(msg.sender, amount);\n\n        emit ShortfallResolution(product, amount);\n    }\n\n    /**\n     * @notice Claims all of `msg.sender`'s fees\n     */\n    function claimFee() notPaused external {\n        UFixed18 amount = fees[msg.sender];\n\n        fees[msg.sender] = UFixed18Lib.ZERO;\n        token.push(msg.sender, amount);\n\n        emit FeeClaim(msg.sender, amount);\n    }\n\n    /**\n     * @notice Updates the liquidation fee\n     * @param newLiquidationFee New liquidation fee\n     */\n    function updateLiquidationFee(UFixed18 newLiquidationFee) onlyOwner external {\n        liquidationFee = newLiquidationFee;\n        emit LiquidationFeeUpdated(newLiquidationFee);\n    }\n\n    /// @dev Ensure that the user has sufficient margin for both current and next maintenance\n    modifier maintenanceInvariant(address account, IProduct product) {\n        _;\n\n        UFixed18 maintenance = product.maintenance(account);\n        UFixed18 maintenanceNext = product.maintenanceNext(account);\n\n        if (UFixed18Lib.max(maintenance, maintenanceNext).gt(collateral(account, product)))\n            revert CollateralInsufficientCollateralError();\n    }\n\n    /// @dev Ensure that the account is either empty or above the collateral minimum\n    modifier collateralInvariant(address account, IProduct product) {\n        _;\n\n        UFixed18 accountCollateral = collateral(account, product);\n        if (!accountCollateral.isZero() && accountCollateral.lt(factory().minCollateral()))\n            revert CollateralUnderLimitError();\n    }\n}\n\n\n",
        "CodeNames": [
            "Collateral.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Collateral contract",
                "Type": "No checks if given product is created by the factory",
                "Description": "An attacker can create a fake product. Collateral contract does not check whether the given product is created by the factory. A malicious product can return arbitrary maintenance amounts, therefore they can make any deposit to fake product stuck (simply return collateral 1 as maintenance) and fake product owner can change the maintenance and liquidate whenever wanted and claim full collateral.",
                "Repair": "Add a mapping inside Collateral, which verifies whether a product is created by factory or not. This mapping should get updated by the factory. Or directly call a function from factory to verify."
            },
            {
                "Location": "initialize method of the Collateral contract",
                "Type": "Multiple initialization of Collateral contract",
                "Description": "The attacker can initialize the contract, take malicious actions, and allow it to be re-initialized by the project without any error being noticed.",
                "Repair": "Use initializer modifier"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.10;\n\nimport \"../../utils/types/UFixed18.sol\";\n\n/// @dev OptimisticLedger type\nstruct OptimisticLedger {\n    /// @dev Individual account collateral balances\n    mapping(address => UFixed18) balances;\n\n    /// @dev Total ledger collateral balance\n    UFixed18 total;\n\n    /// @dev Total ledger collateral shortfall\n    UFixed18 shortfall;\n}\n\n/**\n * @title OptimisticLedgerLib\n * @notice Library that manages a global vs account ledger where the global ledger is settled separately,\n *         and ahead of, the user-level accounts.\n * @dev    Ensures that no more collateral leaves the ledger than goes it, while allowing user-level accounts\n *         to settle as a follow up step. Overdrafts on the user-level are accounted as \"shortall\". Shortfall\n *         in the system is the quantity of insolvency that can be optionally resolved by the ledger owner.\n *         Until the shortfall is resolved, collateral may be withdrawn from the ledger on a FCFS basis. However\n *         once the ledger total has been depleted, users will not be able to withdraw even if they have non-zero\n *         user level balances until the shortfall is resolved, recapitalizing the ledger.\n */\nlibrary OptimisticLedgerLib {\n    using UFixed18Lib for UFixed18;\n    using Fixed18Lib for Fixed18;\n\n    /**\n     * @notice Credits `account` with `amount` collateral\n     * @param self The struct to operate on\n     * @param account Account to credit collateral to\n     * @param amount Amount of collateral to credit\n     */\n    function creditAccount(OptimisticLedger storage self, address account, UFixed18 amount) internal {\n        self.balances[account] = self.balances[account].add(amount);\n        self.total = self.total.add(amount);\n    }\n\n    /**\n     * @notice Debits `account` `amount` collateral\n     * @param self The struct to operate on\n     * @param account Account to debit collateral from\n     * @param amount Amount of collateral to debit\n     */\n    function debitAccount(OptimisticLedger storage self, address account, UFixed18 amount) internal {\n        self.balances[account] = self.balances[account].sub(amount);\n        self.total = self.total.sub(amount);\n    }\n\n    /**\n     * @notice Credits `account` with `amount` collateral\n     * @dev Funds come from inside the product, not totals are updated\n     *      Shortfall is created if more funds are debited from an account than exist\n     * @param self The struct to operate on\n     * @param account Account to credit collateral to\n     * @param amount Amount of collateral to credit\n     */\n    function settleAccount(OptimisticLedger storage self, address account, Fixed18 amount)\n    internal returns (UFixed18 shortfall) {\n        Fixed18 newBalance = Fixed18Lib.from(self.balances[account]).add(amount);\n\n        if (newBalance.sign() == -1) {\n            shortfall = self.shortfall.add(newBalance.abs());\n            newBalance = Fixed18Lib.ZERO;\n        }\n\n        self.balances[account] = newBalance.abs();\n        self.shortfall = self.shortfall.add(shortfall);\n    }\n\n    /**\n     * @notice Debits ledger globally `amount` collateral\n     * @dev Removes balance from total that is accounted for elsewhere (e.g. product-level accumulators)\n     * @param self The struct to operate on\n     * @param amount Amount of collateral to debit\n     */\n    function debit(OptimisticLedger storage self, UFixed18 amount) internal {\n        self.total = self.total.sub(amount);\n    }\n\n    /**\n     * @notice Reduces the amount of collateral shortfall in the ledger\n     * @param self The struct to operate on\n     * @param amount Amount of shortfall to resolve\n     */\n    function resolve(OptimisticLedger storage self, UFixed18 amount) internal {\n        self.shortfall = self.shortfall.sub(amount);\n        self.total = self.total.add(amount);\n    }\n}\n\n\n",
        "CodeNames": [
            "OptimisticLedger.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "settleAccount function of OptimisticLedger contract",
                "Type": "Wrong shortfall calculation",
                "Description": "Every time an account is settled, if shortfall is created, due to a wrong calculation shortfall will double in size and add the new shortfall.",
                "Repair": "Move the setting of self.shortfall to inside the if function and change the line to: self.shortfall = shortfall"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.10;\n\nimport \"./PrePosition.sol\";\nimport \"../accumulator/Accumulator.sol\";\n\n/// @dev AccountPosition type\nstruct AccountPosition {\n    /// @dev The current settled position of the account\n    Position position;\n\n    /// @dev The current position delta pending-settlement\n    PrePosition pre;\n\n    /// @dev Whether the account is currently locked for liquidation\n    bool liquidation;\n}\n\n/**\n * @title AccountPositionLib\n * @notice Library that manages an account-level position.\n */\nlibrary AccountPositionLib {\n    using UFixed18Lib for UFixed18;\n    using Fixed18Lib for Fixed18;\n    using PositionLib for Position;\n    using PrePositionLib for PrePosition;\n\n    /**\n     * @notice Settled the account's position to oracle version `toOracleVersion`\n     * @param self The struct to operate on\n     * @param provider The parameter provider of the product\n     * @param toOracleVersion The oracle version to accumulate to\n     * @return positionFee The fee accrued from opening or closing a new position\n     */\n    function settle(AccountPosition storage self, IProductProvider provider, uint256 toOracleVersion) internal returns (UFixed18 positionFee) {\n        bool settled;\n        (self.position, positionFee, settled) = self.position.settled(self.pre, provider, toOracleVersion);\n        if (settled) delete self.pre;\n    }\n\n    /**\n     * @notice Returns the current maintenance requirement for the account\n     * @param self The struct to operate on\n     * @param provider The parameter provider of the product\n     * @return Current maintenance requirement for the account\n     */\n    function maintenance(AccountPosition storage self, IProductProvider provider) internal view returns (UFixed18) {\n        if (self.liquidation) return UFixed18Lib.ZERO;\n        return maintenanceInternal(self.position, provider);\n    }\n\n    /**\n     * @notice Returns the maintenance requirement after the next oracle version settlement\n     * @dev Includes the current pending-settlement position delta, assumes no price change\n     * @param self The struct to operate on\n     * @param provider The parameter provider of the product\n     * @return Next maintenance requirement for the account\n     */\n    function maintenanceNext(AccountPosition storage self, IProductProvider provider) internal view returns (UFixed18) {\n        return maintenanceInternal(self.position.next(self.pre), provider);\n    }\n\n    /**\n      @notice Returns the maintenance requirement for a given `position`\n     * @dev Internal helper\n     * @param position The position to compete the maintenance requirement for\n     * @param provider The parameter provider of the product\n     * @return Next maintenance requirement for the account\n     */\n    function maintenanceInternal(Position memory position, IProductProvider provider) private view returns (UFixed18) {\n        Fixed18 oraclePrice = provider.priceAtVersion(provider.currentVersion());\n        UFixed18 notionalMax = Fixed18Lib.from(position.max()).mul(oraclePrice).abs();\n        return notionalMax.mul(provider.maintenance());\n    }\n\n    /**\n     * @notice Returns whether an account is completely closed, i.e. no position or pre-position\n     * @param self The struct to operate on\n     * @return Whether the account is closed\n     */\n    function isClosed(AccountPosition memory self) internal pure returns (bool) {\n        return self.pre.isEmpty() && self.position.isEmpty();\n    }\n\n    /**\n     * @notice Returns whether an account has opened position on both sides of the market (maker vs taker)\n     * @dev Used to verify the invariant that a single account can only have a position on one side of the\n     *      market at a time\n     * @param self The struct to operate on\n     * @return Whether the account is currently doubled sided\n     */\n    function isDoubleSided(AccountPosition storage self) internal view returns (bool) {\n        bool makerEmpty = self.position.maker.isZero() && self.pre.openPosition.maker.isZero() && self.pre.closePosition.maker.isZero();\n        bool takerEmpty = self.position.taker.isZero() && self.pre.openPosition.taker.isZero() && self.pre.closePosition.taker.isZero();\n\n        return !makerEmpty && !takerEmpty;\n    }\n\n    /**\n     * @notice Returns whether the account's pending-settlement delta closes more position than is open\n     * @dev Used to verify the invariant that an account cannot settle into having a negative position\n     * @param self The struct to operate on\n     * @return Whether the account is currently over closed\n     */\n    function isOverClosed(AccountPosition storage self) internal view returns (bool) {\n        Position memory nextOpen = self.position.add(self.pre.openPosition);\n\n        return  self.pre.closePosition.maker.gt(nextOpen.maker) || self.pre.closePosition.taker.gt(nextOpen.taker);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.10;\n\nimport \"../interfaces/ICollateral.sol\";\nimport \"./types/OptimisticLedger.sol\";\nimport \"../utils/unstructured/UReentrancyGuard.sol\";\nimport \"../factory/UFactoryProvider.sol\";\n\n/**\n * @title Collateral\n * @notice Manages logic and state for all collateral accounts in the protocol.\n */\ncontract Collateral is ICollateral, UFactoryProvider, UReentrancyGuard {\n    using UFixed18Lib for UFixed18;\n    using Token18Lib for Token18;\n    using OptimisticLedgerLib for OptimisticLedger;\n\n    /// @dev ERC20 stablecoin for collateral\n    Token18 public token;\n\n    /// @dev Fee on maintenance for liquidation\n    UFixed18 public liquidationFee;\n\n    /// @dev Per product collateral state\n    mapping(IProduct => OptimisticLedger) private _products;\n\n    /// @dev Protocol and product fees collected, but not yet claimed\n    mapping(address => UFixed18) public fees;\n\n    /**\n     * @notice Initializes the contract state\n     * @param factory_ Factory contract address\n     * @param token_ Collateral ERC20 stablecoin address\n     */\n    function initialize(IFactory factory_, Token18 token_) external {\n        UFactoryProvider__initialize(factory_);\n        UReentrancyGuard__initialize();\n\n        token = token_;\n        liquidationFee = UFixed18Lib.ratio(50, 100);\n    }\n\n    /**\n     * @notice Deposits `amount` collateral from `msg.sender` to `account`'s `product`\n     *         account\n     * @param account Account to deposit the collateral for\n     * @param product Product to credit the collateral to\n     * @param amount Amount of collateral to deposit\n     */\n    function depositTo(address account, IProduct product, UFixed18 amount)\n    notPaused\n    collateralInvariant(account, product)\n    external {\n        _products[product].creditAccount(account, amount);\n        token.pull(msg.sender, amount);\n\n        emit Deposit(account, product, amount);\n    }\n\n    /**\n     * @notice Withdraws `amount` collateral from `msg.sender`'s `product` account\n     *         and sends it to `account`\n     * @param account Account to withdraw the collateral to\n     * @param product Product to withdraw the collateral from\n     * @param amount Amount of collateral to withdraw\n     */\n    function withdrawTo(address account, IProduct product, UFixed18 amount)\n    notPaused\n    collateralInvariant(msg.sender, product)\n    maintenanceInvariant(msg.sender, product)\n    external {\n        _products[product].debitAccount(msg.sender, amount);\n        token.push(account, amount);\n\n        emit Withdrawal(msg.sender, product, amount);\n    }\n\n    /**\n     * @notice Liquidates `account`'s `product` collateral account\n     * @dev Account must be under-collateralized, fee returned immediately to `msg.sender`\n     * @param account Account to liquidate\n     * @param product Product to liquidate for\n     */\n    function liquidate(address account, IProduct product) notPaused nonReentrant external {\n        // settle\n        product.settle();\n        product.settleAccount(account);\n\n        // liquidate\n        UFixed18 totalMaintenance = product.maintenance(account);\n        UFixed18 totalCollateral = collateral(account, product);\n\n        if (!totalMaintenance.gt(totalCollateral))\n            revert CollateralCantLiquidate(totalMaintenance, totalCollateral);\n\n        product.closeAll(account);\n\n        // claim fee\n        UFixed18 fee = UFixed18Lib.min(totalCollateral, totalMaintenance.mul(liquidationFee));\n\n        _products[product].debitAccount(account, fee);\n        token.push(msg.sender, fee);\n\n        emit Liquidation(account, product, msg.sender, fee);\n    }\n\n    /**\n     * @notice Credits `amount` to `account`'s collateral account\n     * @dev Callable only by the corresponding product as part of the settlement flywheel.\n     *      Moves collateral within a product, any collateral leaving the product due to\n     *      fees has already been accounted for in the settleProduct flywheel.\n     *      Debits in excess of the account balance get recorded as shortfall, and can be\n     *      resolved by the product owner as needed.\n     * @param account Account to credit\n     * @param amount Amount to credit the account (can be negative)\n     */\n    function settleAccount(address account, Fixed18 amount) onlyProduct external {\n        IProduct product = IProduct(msg.sender);\n\n        UFixed18 newShortfall = _products[product].settleAccount(account, amount);\n\n        emit AccountSettle(product, account, amount, newShortfall);\n    }\n\n    /**\n     * @notice Debits `amount` from product's total collateral account\n     * @dev Callable only by the corresponding product as part of the settlement flywheel\n     *      Removes collateral from the product as fees.\n     * @param amount Amount to debit from the account\n     */\n    function settleProduct(UFixed18 amount) onlyProduct external {\n        IProduct product = IProduct(msg.sender);\n\n        address protocolTreasury = factory().treasury();\n        address productTreasury = factory().treasury(product);\n\n        UFixed18 protocolFee = amount.mul(factory().fee());\n        UFixed18 productFee = amount.sub(protocolFee);\n\n        _products[product].debit(amount);\n        fees[protocolTreasury] = fees[protocolTreasury].add(protocolFee);\n        fees[productTreasury] = fees[productTreasury].add(productFee);\n\n        emit ProductSettle(product, protocolFee, productFee);\n    }\n\n    /**\n     * @notice Returns the balance of `account`'s `product` collateral account\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return The balance of the collateral account\n     */\n    function collateral(address account, IProduct product) public view returns (UFixed18) {\n        return _products[product].balances[account];\n    }\n\n    /**\n     * @notice Returns the total balance of `product`'s collateral\n     * @param product Product to return for\n     * @return The total balance of collateral in the product\n     */\n    function collateral(IProduct product) public view returns (UFixed18) {\n        return _products[product].total;\n    }\n\n    /**\n     * @notice Returns the current shortfall of `product`'s collateral\n     * @param product Product to return for\n     * @return The current shortfall of the product\n     */\n    function shortfall(IProduct product) public view returns (UFixed18) {\n        return _products[product].shortfall;\n    }\n\n    /**\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return Whether the account can be liquidated\n     */\n    function liquidatable(address account, IProduct product) external view returns (bool) {\n        return product.maintenance(account).gt(collateral(account, product));\n    }\n\n    /**\n     * @notice Returns whether `account`'s `product` collateral account can be liquidated\n     *         after the next oracle version settlement\n     * @dev Takes into account the current pre-position on the account\n     * @param account Account to return for\n     * @param product Product to return for\n     * @return Whether the account can be liquidated\n     */\n    function liquidatableNext(address account, IProduct product) external view returns (bool) {\n        return product.maintenanceNext(account).gt(collateral(account, product));\n    }\n\n    /**\n     * @notice Injects additional collateral into a product to resolve shortfall\n     * @dev Shortfall is a measure of settled insolvency in the market\n     *      This hook can be used by the product owner or an insurance fund to re-capitalize an insolvent market\n     * @param product Product to resolve shortfall for\n     * @param amount Amount of shortfall to resolve\n     */\n    function resolveShortfall(IProduct product, UFixed18 amount) notPaused external {\n        _products[product].resolve(amount);\n        token.pull(msg.sender, amount);\n\n        emit ShortfallResolution(product, amount);\n    }\n\n    /**\n     * @notice Claims all of `msg.sender`'s fees\n     */\n    function claimFee() notPaused external {\n        UFixed18 amount = fees[msg.sender];\n\n        fees[msg.sender] = UFixed18Lib.ZERO;\n        token.push(msg.sender, amount);\n\n        emit FeeClaim(msg.sender, amount);\n    }\n\n    /**\n     * @notice Updates the liquidation fee\n     * @param newLiquidationFee New liquidation fee\n     */\n    function updateLiquidationFee(UFixed18 newLiquidationFee) onlyOwner external {\n        liquidationFee = newLiquidationFee;\n        emit LiquidationFeeUpdated(newLiquidationFee);\n    }\n\n    /// @dev Ensure that the user has sufficient margin for both current and next maintenance\n    modifier maintenanceInvariant(address account, IProduct product) {\n        _;\n\n        UFixed18 maintenance = product.maintenance(account);\n        UFixed18 maintenanceNext = product.maintenanceNext(account);\n\n        if (UFixed18Lib.max(maintenance, maintenanceNext).gt(collateral(account, product)))\n            revert CollateralInsufficientCollateralError();\n    }\n\n    /// @dev Ensure that the account is either empty or above the collateral minimum\n    modifier collateralInvariant(address account, IProduct product) {\n        _;\n\n        UFixed18 accountCollateral = collateral(account, product);\n        if (!accountCollateral.isZero() && accountCollateral.lt(factory().minCollateral()))\n            revert CollateralUnderLimitError();\n    }\n}\n\n\n",
        "CodeNames": [
            "AccountPosition.sol",
            "Collateral.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Collateral contract, AccountPosition contract",
                "Type": "withdrawTo Does Not Sync Before Checking A Position's Margin Requirements",
                "Description": "The maintenanceInvariant modifier in Collateral aims to check if a user meets the margin requirements to withdraw collateral by checking its current and next maintenance. maintenanceInvariant inevitably calls AccountPosition.maintenance which uses the oracle's price to calculate the margin requirements for a given position. Hence, if the oracle has not synced in a long time, maintenanceInvariant may end up utilising an outdated price for a withdrawal. This may allow a user to withdraw collateral on an undercollaterized position.",
                "Repair": "Consider adding settleForAccount(msg.sender) to the Collateral.withdrawTo function to ensure the most up to date oracle price is used when assessing an account's margin requirements."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/math/SafeCast.sol\";\nimport \"../interfaces/IOracle.sol\";\nimport \"../utils/types/UFixed18.sol\";\nimport \"../utils/unstructured/UOwnable.sol\";\n\n/**\n * @title ChainlinkOracle\n * @notice Chainlink implementation of the IOracle interface.\n * @dev One instance per Chainlink price feed should be deployed. Multiple products may use the same\n *      ChainlinkOracle instance if their payoff functions are based on the same underlying oracle.\n */\ncontract ChainlinkOracle is IOracle, UOwnable {\n\n    event MinDelayUpdated(uint256 newMinDelay);\n\n    /// @dev Chainlink price feed to read from\n    IChainlinkFeed public feed;\n\n    /// @dev Mapping of historical price at each oracle version\n    Fixed18[] public priceAtVersion;\n\n    /// @dev Mapping of historical timestamp at each oracle version\n    uint256[] public timestampAtVersion;\n\n    /// @dev Decimal offset used to normalize chainlink price to 18 decimals\n    uint256 private _decimalOffset;\n\n    /// @dev Minimum timestamp delay before committed a new version\n    uint256 public minDelay;\n\n    /**\n     * @notice Initializes the contract state\n     * @param feed_ Chainlink price feed\n     */\n    constructor(IChainlinkFeed feed_) {\n        feed = feed_;\n        _decimalOffset = 10 ** feed_.decimals();\n        minDelay = 30 minutes;\n\n        sync();\n        UOwnable__initialize();\n    }\n\n    /**\n     * @notice Checks for a new price and updates the oracle version if one is found\n     */\n    function sync() public {\n        (, int256 feedPrice, , uint256 timestamp, ) = feed.latestRoundData();\n        Fixed18 price = Fixed18Lib.ratio(feedPrice, SafeCast.toInt256(_decimalOffset));\n\n        if (priceAtVersion.length == 0 || timestamp > timestampAtVersion[currentVersion()] + minDelay) {\n            priceAtVersion.push(price);\n            timestampAtVersion.push(timestamp);\n\n            emit Version(currentVersion(), timestamp, price);\n        }\n    }\n\n    /**\n     * @notice Returns the current oracle version\n     * @return Current oracle version\n     */\n    function currentVersion() public view returns (uint256) {\n        return priceAtVersion.length - 1;\n    }\n\n    /**\n     * @notice Updates the minimum delay before a new version can be committed\n     * @param newMinDelay New minimum delay\n     */\n    function updateMinDelay(uint256 newMinDelay) onlyOwner external {\n        minDelay = newMinDelay;\n        emit MinDelayUpdated(newMinDelay);\n    }\n}\n\ninterface IChainlinkFeed {\n    function decimals() external view returns (uint8);\n    function latestRoundData() external view returns (\n        uint80 roundID,\n        int price,\n        uint startedAt,\n        uint timeStamp,\n        uint80 answeredInRound\n    );\n}\n\n\n",
        "CodeNames": [
            "ChainlinkOracle.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "ChainlinkOracle.sol",
                "Type": "Stale Data",
                "Description": "Using latestRoundData without checking if the return value indicates stale data could lead to stale prices according to the Chainlink documentation.",
                "Repair": "Add missing checks for stale data"
            }
        ]
    }
]