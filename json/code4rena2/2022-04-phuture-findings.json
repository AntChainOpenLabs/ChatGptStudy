[
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\n\nimport \"./libraries/BP.sol\";\nimport \"./libraries/IndexLibrary.sol\";\n\nimport \"./interfaces/IvToken.sol\";\nimport \"./interfaces/IOrderer.sol\";\nimport \"./interfaces/IIndexLogic.sol\";\nimport \"./interfaces/IvTokenFactory.sol\";\nimport \"./interfaces/IPhuturePriceOracle.sol\";\n\nimport \"./PhutureIndex.sol\";\n\n/// @title Index logic\n/// @notice Contains common logic for index minting and burning\ncontract IndexLogic is PhutureIndex, IIndexLogic {\n    using FullMath for uint;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Asset role\n    bytes32 internal constant ASSET_ROLE = keccak256(\"ASSET_ROLE\");\n    /// @notice Role granted for asset which should be skipped during burning\n    bytes32 internal constant SKIPPED_ASSET_ROLE = keccak256(\"SKIPPED_ASSET_ROLE\");\n\n    /// @notice Mints index to `_recipient` address\n    /// @param _recipient Recipient address\n    function mint(address _recipient) external override {\n        address feePool = IIndexRegistry(registry).feePool();\n        _chargeAUMFee(feePool);\n\n        IPhuturePriceOracle oracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\n\n        uint lastAssetBalanceInBase;\n        uint minAmountInBase = type(uint).max;\n        for (uint i; i < assets.length(); ++i) {\n            require(IAccessControl(registry).hasRole(ASSET_ROLE, assets.at(i)), \"Index: INVALID_ASSET\");\n            if (weightOf[assets.at(i)] == 0) {\n                continue;\n            }\n            uint assetPerBaseInUQ = oracle.refreshedAssetPerBaseInUQ(assets.at(i));\n            // Q_b * w_i * p_i = Q_i\n            // Q_b = Q_i / (w_i * p_i)\n            IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(assets.at(i)));\n            uint amountInAsset = IERC20(assets.at(i)).balanceOf(address(vToken)) - vToken.lastBalance();\n            uint weightedPrice = assetPerBaseInUQ * weightOf[assets.at(i)];\n            uint _minAmountInBase = amountInAsset.mulDiv(FixedPoint112.Q112 * IndexLibrary.MAX_WEIGHT, weightedPrice);\n            if (_minAmountInBase < minAmountInBase) {\n                minAmountInBase = _minAmountInBase;\n            }\n            uint lastBalanceInAsset = vToken.lastAssetBalanceOf(address(this));\n            vToken.mint();\n            uint balanceInBase = lastBalanceInAsset.mulDiv(FixedPoint112.Q112, assetPerBaseInUQ);\n            lastAssetBalanceInBase += balanceInBase;\n        }\n\n        for (uint i; i < inactiveAssets.length(); ++i) {\n            if (!IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, inactiveAssets.at(i))) {\n                uint lastBalanceInAsset = IvToken(\n                    IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(inactiveAssets.at(i))\n                ).lastAssetBalanceOf(address(this));\n                lastAssetBalanceInBase += lastBalanceInAsset.mulDiv(\n                    FixedPoint112.Q112,\n                    oracle.refreshedAssetPerBaseInUQ(inactiveAssets.at(i))\n                );\n            }\n        }\n\n        assert(minAmountInBase != type(uint).max);\n\n        uint value;\n        if (totalSupply() != 0) {\n            require(lastAssetBalanceInBase > 0, \"Index: INSUFFICIENT_AMOUNT\");\n            value =\n                (oracle.convertToIndex(minAmountInBase, decimals()) * totalSupply()) /\n                oracle.convertToIndex(lastAssetBalanceInBase, decimals());\n        } else {\n            value = oracle.convertToIndex(minAmountInBase, decimals()) - IndexLibrary.INITIAL_QUANTITY;\n            _mint(address(0xdead), IndexLibrary.INITIAL_QUANTITY);\n        }\n\n        uint fee = (value * IFeePool(feePool).mintingFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\n        if (fee > 0) {\n            _mint(feePool, fee);\n            value -= fee;\n        }\n\n        _mint(_recipient, value);\n    }\n\n    /// @notice Burns index and transfers assets to `_recipient` address\n    /// @param _recipient Recipient address\n    function burn(address _recipient) external override {\n        uint value = balanceOf(address(this));\n        require(value > 0, \"Index: INSUFFICIENT_AMOUNT\");\n        uint length = assets.length();\n\n        bool containsBlacklistedAssets;\n        for (uint i; i < length; ++i) {\n            if (!IAccessControl(registry).hasRole(ASSET_ROLE, assets.at(i))) {\n                containsBlacklistedAssets = true;\n                break;\n            }\n        }\n\n        if (!containsBlacklistedAssets) {\n            address feePool = IIndexRegistry(registry).feePool();\n\n            uint fee = (value * IFeePool(feePool).burningFeeInBPOf(address(this))) / BP.DECIMAL_FACTOR;\n\n            if (fee > 0) {\n                // AUM charged in _transfer method\n                _transfer(address(this), feePool, fee);\n                value -= fee;\n            } else {\n                _chargeAUMFee(feePool);\n            }\n        }\n\n        address orderer = IIndexRegistry(registry).orderer();\n        uint lastOrderId = IOrderer(orderer).lastOrderIdOf(address(this));\n        for (uint i; i < length + inactiveAssets.length(); ++i) {\n            address asset = i < length ? assets.at(i) : inactiveAssets.at(i - length);\n            if (containsBlacklistedAssets && IAccessControl(registry).hasRole(SKIPPED_ASSET_ROLE, asset)) {\n                continue;\n            }\n\n            IvToken vToken = IvToken(IvTokenFactory(vTokenFactory).vTokenOf(asset));\n            uint indexAssetBalance = vToken.balanceOf(address(this));\n            uint accountBalance = (value * indexAssetBalance) / totalSupply();\n            if (accountBalance == 0) {\n                continue;\n            }\n\n            // calculate index value in vault to be burned\n            vToken.transfer(address(vToken), accountBalance);\n            vToken.burn(_recipient);\n            if (lastOrderId > 0) {\n                IOrderer(orderer).reduceOrderAsset(asset, totalSupply() - value, totalSupply());\n            }\n        }\n\n        _burn(address(this), value);\n    }\n}\n\n\n",
        "CodeNames": [
            "IndexLogic.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "IndexLogic contract, mint function",
                "Type": "Smart Contract Logic",
                "Description": "An attacker can mint tokens for himself using assets deposited by other users.",
                "Repair": "Implement proper access control and validation checks to prevent unauthorized minting of tokens"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\n\nimport \"./libraries/BP.sol\";\nimport \"./libraries/NAV.sol\";\n\nimport \"./interfaces/IvToken.sol\";\nimport \"./interfaces/IIndexRegistry.sol\";\n\n/// @title Vault token\n/// @notice Contains logic for index's asset management\ncontract vToken is IvToken, Initializable, ReentrancyGuardUpgradeable, ERC165Upgradeable {\n    using NAV for NAV.Data;\n    using SafeERC20 for IERC20;\n    using ERC165CheckerUpgradeable for address;\n\n    /// @notice Index role\n    bytes32 private constant INDEX_ROLE = keccak256(\"INDEX_ROLE\");\n    /// @notice Oracle role\n    bytes32 private constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n    /// @notice Orderer role\n    bytes32 private constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n    /// @notice Role allows configure reserve related data/components\n    bytes32 private constant RESERVE_MANAGER_ROLE = keccak256(\"RESERVE_MANAGER_ROLE\");\n\n    /// @inheritdoc IvToken\n    address public override asset;\n    /// @inheritdoc IvToken\n    address public override registry;\n\n    /// @notice NAV library used to track contract shares between indexes\n    NAV.Data internal _NAV;\n\n    /// @notice Requires msg.sender to have `_role` role\n    /// @param _role Required role\n    modifier onlyRole(bytes32 _role) {\n        require(IAccessControl(registry).hasRole(_role, msg.sender), \"vToken: FORBIDDEN\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    /// @inheritdoc IvToken\n    /// @dev also sets initial values for public variables\n    function initialize(address _asset, address _registry) external override initializer {\n        bytes4[] memory interfaceIds = new bytes4[](2);\n        interfaceIds[0] = type(IAccessControl).interfaceId;\n        interfaceIds[1] = type(IIndexRegistry).interfaceId;\n        require(_registry.supportsAllInterfaces(interfaceIds), \"vToken: INTERFACE\");\n        require(_asset != address(0), \"vToken: ZERO\");\n\n        __ERC165_init();\n        __ReentrancyGuard_init();\n\n        asset = _asset;\n        registry = _registry;\n    }\n\n    /// @inheritdoc IvToken\n    function transferAsset(address _recipient, uint _amount) external override nonReentrant {\n        require(msg.sender == IIndexRegistry(registry).orderer(), \"vToken: FORBIDDEN\");\n        _transferAsset(_recipient, _amount);\n    }\n\n    /// @inheritdoc IvToken\n    function transfer(address _recipient, uint _amount) external override nonReentrant {\n        _transfer(msg.sender, _recipient, _amount);\n    }\n\n    /// @inheritdoc IvToken\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _shares\n    ) external override nonReentrant onlyRole(ORDERER_ROLE) {\n        _transfer(_from, _to, _shares);\n    }\n\n    /// @inheritdoc IvToken\n    function mint() external override nonReentrant onlyRole(INDEX_ROLE) returns (uint shares) {\n        return _mint(msg.sender);\n    }\n\n    /// @inheritdoc IvToken\n    function burn(address _recipient) external override nonReentrant onlyRole(INDEX_ROLE) returns (uint amount) {\n        return _burn(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function mintFor(address _recipient) external override nonReentrant onlyRole(ORDERER_ROLE) returns (uint) {\n        return _mint(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function burnFor(address _recipient) external override nonReentrant onlyRole(ORDERER_ROLE) returns (uint) {\n        return _burn(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function sync() external override nonReentrant {\n        _NAV.sync(totalAssetSupply());\n    }\n\n    /// @inheritdoc IvToken\n    function balanceOf(address _account) external view override returns (uint) {\n        return _NAV.balanceOf[_account];\n    }\n\n    /// @inheritdoc IvToken\n    function lastBalance() external view override returns (uint) {\n        return _NAV.lastBalance;\n    }\n\n    /// @inheritdoc IvToken\n    function mintableShares(uint _amount) external view override returns (uint) {\n        return _NAV.mintableShares(_amount);\n    }\n\n    /// @inheritdoc IvToken\n    function totalSupply() external view override returns (uint) {\n        return _NAV.totalSupply;\n    }\n\n    /// @inheritdoc IvToken\n    function lastAssetBalanceOf(address _account) external view override returns (uint) {\n        return _NAV.assetBalanceForShares(_NAV.balanceOf[_account], _NAV.lastBalance);\n    }\n\n    /// @inheritdoc IvToken\n    function assetBalanceOf(address _account) external view override returns (uint) {\n        return _NAV.assetBalanceForShares(_NAV.balanceOf[_account], totalAssetSupply());\n    }\n\n    /// @inheritdoc IvToken\n    function assetDataOf(address _account, uint _shares) external view override returns (AssetData memory) {\n        _shares = Math.min(_shares, _NAV.balanceOf[_account]);\n        uint amountInAsset = _NAV.assetBalanceForShares(_shares, totalAssetSupply());\n        return AssetData({ maxShares: _shares, amountInAsset: amountInAsset });\n    }\n\n    /// @inheritdoc IvToken\n    function shareChange(address _account, uint _amountInAsset)\n        external\n        view\n        override\n        returns (uint newShares, uint oldShares)\n    {\n        oldShares = _NAV.balanceOf[_account];\n        uint _totalSupply = _NAV.totalSupply;\n        if (_totalSupply > 0) {\n            uint _balance = _NAV.balanceOf[_account];\n            uint _assetBalance = totalAssetSupply();\n            uint availableAssets = (_balance * _assetBalance) / _totalSupply;\n            newShares = (_amountInAsset * (_totalSupply - oldShares)) / (_assetBalance - availableAssets);\n        } else {\n            newShares = _amountInAsset < NAV.INITIAL_QUANTITY ? 0 : _amountInAsset - NAV.INITIAL_QUANTITY;\n        }\n    }\n\n    /// @inheritdoc IvToken\n    function totalAssetSupply() public view override returns (uint) {\n        return IERC20(asset).balanceOf(address(this));\n    }\n\n    /// @inheritdoc ERC165Upgradeable\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IvToken).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Mints shares to `_recipient` address\n    /// @param _recipient Shares recipient\n    /// @return shares Amount of minted shares\n    function _mint(address _recipient) internal returns (uint shares) {\n        uint _totalAssetSupply = totalAssetSupply();\n        shares = _NAV.mint(_totalAssetSupply, _recipient);\n        _NAV.sync(_totalAssetSupply);\n        emit VTokenTransfer(address(0), _recipient, shares);\n    }\n\n    /// @notice Burns shares from `_recipient` address\n    /// @param _recipient Recipient of assets from burnt shares\n    /// @return amount Amount of asset for burnt shares\n    function _burn(address _recipient) internal returns (uint amount) {\n        uint shares = _NAV.balanceOf[address(this)];\n        amount = _NAV.burn(totalAssetSupply());\n        _transferAsset(_recipient, amount);\n        _NAV.sync(totalAssetSupply());\n        emit VTokenTransfer(_recipient, address(0), shares);\n    }\n\n    /// @notice Transfers `_amount` of shares from one address to another\n    /// @param _from Address to transfer shares from\n    /// @param _to Address to transfer shares to\n    /// @param _amount Amount of shares to transfer\n    function _transfer(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal {\n        _NAV.transfer(_from, _to, _amount);\n        emit VTokenTransfer(_from, _to, _amount);\n    }\n\n    /// @notice Transfers `_amount` of asset to `_recipient` address\n    /// @param _recipient Recipient of assets\n    /// @param _amount Amount of assets to transfer\n    function _transferAsset(address _recipient, uint _amount) internal {\n        uint balance = IERC20(asset).balanceOf(address(this));\n        IERC20(asset).safeTransfer(_recipient, Math.min(_amount, balance));\n    }\n\n    uint256[42] private __gap;\n}\n\n\n",
        "CodeNames": [
            "vToken.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "vToken.sol, shareChange() function",
                "Type": "Smart Contract Logic",
                "Description": "Users can get the wrong amount of vToken and lose their funds based on the code in function shareChange() in vToken.sol.",
                "Repair": "Modify the line from if (_totalSupply == 0) to if (_totalSupply - oldShares == 0)"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Vault.sol, addValue() function",
                "Type": "Smart Contract Logic",
                "Description": "ERC20 tokens that charge fee for every transfer() / transferFrom() are not supported.",
                "Repair": "Use the balance change before and after the transfer instead of the amount to support tokens with transfer fee"
            },
            {
                "Location": "contracts/IndexLogic.sol (lines 60-70)",
                "Type": "Inactive skipped assets can be drained",
                "Description": "If an index has any inactive assets with the role SKIPPED_ASSET_ROLE, a user can repeatedly deposit and withdraw assets, always getting the skipped asset without having to deposit any.",
                "Repair": "Change && to || in the SKIPPED_ASSET_ROLE in the code block directly above."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"./interfaces/IIndexFactory.sol\";\nimport \"./interfaces/IReweightableIndex.sol\";\nimport \"./interfaces/ITopNMarketCapIndexReweightingLogic.sol\";\n\nimport \"./BaseIndex.sol\";\n\n/// @title Top N market capitalization index\n/// @notice Contains initialization and reweighting logic\n/// @dev This index reweighs according to the latest data from the TopNMarketCapCategories contract\ncontract TopNMarketCapIndex is IReweightableIndex, BaseIndex {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Orderer role\n    bytes32 internal constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n\n    /// @notice Number of assets used in the index\n    uint8 public topN;\n    /// @notice Category identifier used for the given index\n    uint public category;\n\n    /// @notice Latest category snapshot to track diff\n    uint private snapshot;\n\n    constructor() BaseIndex(msg.sender) {}\n\n    /// @notice Initializes index with provided set of parameters\n    /// @param _topN Number of assets used in the index\n    /// @param _category Category identifier used for the given index\n    /// @param _snapshot Initial snapshot from the category\n    /// @param _assets Assets list\n    /// @param _capitalizations List of corresponding assets capitalizations\n    /// @param _totalCapitalization Total capitalization of assets\n    function initialize(\n        uint8 _topN,\n        uint _category,\n        uint _snapshot,\n        address[] calldata _assets,\n        uint[] calldata _capitalizations,\n        uint _totalCapitalization\n    ) external {\n        require(msg.sender == factory, \"TopNMarketCapIndex: FORBIDDEN\");\n\n        uint8 _totalWeight;\n        for (uint i; i < _assets.length; ++i) {\n            uint _i = _assets.length - 1 - i;\n            address asset = _assets[_i];\n            uint8 weight = _i == 0\n                ? IndexLibrary.MAX_WEIGHT - _totalWeight\n                : uint8((_capitalizations[_i] * type(uint8).max) / _totalCapitalization);\n            weightOf[asset] = weight;\n            require(asset != address(0), \"TopNMarketCapIndex: ZERO\");\n            if (weight > 0) {\n                assets.add(asset);\n                _totalWeight += weight;\n                emit UpdateAnatomy(asset, weight);\n            }\n        }\n        snapshot = _snapshot;\n        category = _category;\n        topN = _topN;\n    }\n\n    /// @notice Reweighs index assets according to the latest market cap data for specified category\n    function reweight() external override onlyRole(ORDERER_ROLE) {\n        (bool success, bytes memory data) = IIndexFactory(factory).reweightingLogic().delegatecall(\n            abi.encodeWithSelector(ITopNMarketCapIndexReweightingLogic.reweight.selector, category, snapshot, topN)\n        );\n        if (!success) {\n            if (data.length == 0) {\n                revert(\"TopNMarketCapIndex: REWEIGH_FAILED\");\n            } else {\n                assembly {\n                    revert(add(32, data), mload(data))\n                }\n            }\n        }\n        snapshot = abi.decode(data, (uint));\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IReweightableIndex).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"./interfaces/IIndexFactory.sol\";\nimport \"./interfaces/IReweightableIndex.sol\";\nimport \"./interfaces/ITrackedIndexReweightingLogic.sol\";\n\nimport \"./BaseIndex.sol\";\n\n/// @title Tracked index\n/// @notice  Contains initialization and reweighting logic\ncontract TrackedIndex is IReweightableIndex, BaseIndex {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Orderer role\n    bytes32 internal constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n\n    constructor() BaseIndex(msg.sender) {}\n\n    /// @notice Initializes index with provided set of parameters\n    /// @param _assets Assets list\n    /// @param _capitalizations List of corresponding assets capitalizations\n    /// @param _totalCapitalization Total capitalization of assets\n    function initialize(\n        address[] calldata _assets,\n        uint[] calldata _capitalizations,\n        uint _totalCapitalization\n    ) external {\n        require(msg.sender == factory, \"TrackedIndex: FORBIDDEN\");\n\n        uint8 totalWeight;\n        uint maxCapitalization = _capitalizations[0];\n        address maxCapitalizationAsset = _assets[0];\n        for (uint i; i < _assets.length; ++i) {\n            address asset = _assets[i];\n            uint8 weight = uint8((_capitalizations[i] * type(uint8).max) / _totalCapitalization);\n            if (_capitalizations[i] > maxCapitalization) {\n                emit UpdateAnatomy(maxCapitalizationAsset, weightOf[maxCapitalizationAsset]);\n                maxCapitalization = _capitalizations[i];\n                maxCapitalizationAsset = asset;\n            }\n            weightOf[asset] = weight;\n            totalWeight += weight;\n            assets.add(asset);\n            if (asset != maxCapitalizationAsset) {\n                emit UpdateAnatomy(asset, weight);\n            }\n        }\n        if (totalWeight < IndexLibrary.MAX_WEIGHT) {\n            weightOf[maxCapitalizationAsset] += IndexLibrary.MAX_WEIGHT - totalWeight;\n        }\n        emit UpdateAnatomy(maxCapitalizationAsset, weightOf[maxCapitalizationAsset]);\n    }\n\n    /// @notice Reweighs index assets according to the latest market cap data\n    function reweight() external override onlyRole(ORDERER_ROLE) {\n        (bool success, bytes memory data) = IIndexFactory(factory).reweightingLogic().delegatecall(\n            abi.encodeWithSelector(ITrackedIndexReweightingLogic.reweight.selector)\n        );\n        if (!success) {\n            if (data.length == 0) {\n                revert(\"TrackedIndex: REWEIGH_FAILED\");\n            } else {\n                assembly {\n                    revert(add(32, data), mload(data))\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IReweightableIndex).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165CheckerUpgradeable.sol\";\n\nimport \"./libraries/BP.sol\";\nimport \"./libraries/NAV.sol\";\n\nimport \"./interfaces/IvToken.sol\";\nimport \"./interfaces/IIndexRegistry.sol\";\n\n/// @title Vault token\n/// @notice Contains logic for index's asset management\ncontract vToken is IvToken, Initializable, ReentrancyGuardUpgradeable, ERC165Upgradeable {\n    using NAV for NAV.Data;\n    using SafeERC20 for IERC20;\n    using ERC165CheckerUpgradeable for address;\n\n    /// @notice Index role\n    bytes32 private constant INDEX_ROLE = keccak256(\"INDEX_ROLE\");\n    /// @notice Oracle role\n    bytes32 private constant ORACLE_ROLE = keccak256(\"ORACLE_ROLE\");\n    /// @notice Orderer role\n    bytes32 private constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n    /// @notice Role allows configure reserve related data/components\n    bytes32 private constant RESERVE_MANAGER_ROLE = keccak256(\"RESERVE_MANAGER_ROLE\");\n\n    /// @inheritdoc IvToken\n    address public override asset;\n    /// @inheritdoc IvToken\n    address public override registry;\n\n    /// @notice NAV library used to track contract shares between indexes\n    NAV.Data internal _NAV;\n\n    /// @notice Requires msg.sender to have `_role` role\n    /// @param _role Required role\n    modifier onlyRole(bytes32 _role) {\n        require(IAccessControl(registry).hasRole(_role, msg.sender), \"vToken: FORBIDDEN\");\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() initializer {}\n\n    /// @inheritdoc IvToken\n    /// @dev also sets initial values for public variables\n    function initialize(address _asset, address _registry) external override initializer {\n        bytes4[] memory interfaceIds = new bytes4[](2);\n        interfaceIds[0] = type(IAccessControl).interfaceId;\n        interfaceIds[1] = type(IIndexRegistry).interfaceId;\n        require(_registry.supportsAllInterfaces(interfaceIds), \"vToken: INTERFACE\");\n        require(_asset != address(0), \"vToken: ZERO\");\n\n        __ERC165_init();\n        __ReentrancyGuard_init();\n\n        asset = _asset;\n        registry = _registry;\n    }\n\n    /// @inheritdoc IvToken\n    function transferAsset(address _recipient, uint _amount) external override nonReentrant {\n        require(msg.sender == IIndexRegistry(registry).orderer(), \"vToken: FORBIDDEN\");\n        _transferAsset(_recipient, _amount);\n    }\n\n    /// @inheritdoc IvToken\n    function transfer(address _recipient, uint _amount) external override nonReentrant {\n        _transfer(msg.sender, _recipient, _amount);\n    }\n\n    /// @inheritdoc IvToken\n    function transferFrom(\n        address _from,\n        address _to,\n        uint _shares\n    ) external override nonReentrant onlyRole(ORDERER_ROLE) {\n        _transfer(_from, _to, _shares);\n    }\n\n    /// @inheritdoc IvToken\n    function mint() external override nonReentrant onlyRole(INDEX_ROLE) returns (uint shares) {\n        return _mint(msg.sender);\n    }\n\n    /// @inheritdoc IvToken\n    function burn(address _recipient) external override nonReentrant onlyRole(INDEX_ROLE) returns (uint amount) {\n        return _burn(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function mintFor(address _recipient) external override nonReentrant onlyRole(ORDERER_ROLE) returns (uint) {\n        return _mint(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function burnFor(address _recipient) external override nonReentrant onlyRole(ORDERER_ROLE) returns (uint) {\n        return _burn(_recipient);\n    }\n\n    /// @inheritdoc IvToken\n    function sync() external override nonReentrant {\n        _NAV.sync(totalAssetSupply());\n    }\n\n    /// @inheritdoc IvToken\n    function balanceOf(address _account) external view override returns (uint) {\n        return _NAV.balanceOf[_account];\n    }\n\n    /// @inheritdoc IvToken\n    function lastBalance() external view override returns (uint) {\n        return _NAV.lastBalance;\n    }\n\n    /// @inheritdoc IvToken\n    function mintableShares(uint _amount) external view override returns (uint) {\n        return _NAV.mintableShares(_amount);\n    }\n\n    /// @inheritdoc IvToken\n    function totalSupply() external view override returns (uint) {\n        return _NAV.totalSupply;\n    }\n\n    /// @inheritdoc IvToken\n    function lastAssetBalanceOf(address _account) external view override returns (uint) {\n        return _NAV.assetBalanceForShares(_NAV.balanceOf[_account], _NAV.lastBalance);\n    }\n\n    /// @inheritdoc IvToken\n    function assetBalanceOf(address _account) external view override returns (uint) {\n        return _NAV.assetBalanceForShares(_NAV.balanceOf[_account], totalAssetSupply());\n    }\n\n    /// @inheritdoc IvToken\n    function assetDataOf(address _account, uint _shares) external view override returns (AssetData memory) {\n        _shares = Math.min(_shares, _NAV.balanceOf[_account]);\n        uint amountInAsset = _NAV.assetBalanceForShares(_shares, totalAssetSupply());\n        return AssetData({ maxShares: _shares, amountInAsset: amountInAsset });\n    }\n\n    /// @inheritdoc IvToken\n    function shareChange(address _account, uint _amountInAsset)\n        external\n        view\n        override\n        returns (uint newShares, uint oldShares)\n    {\n        oldShares = _NAV.balanceOf[_account];\n        uint _totalSupply = _NAV.totalSupply;\n        if (_totalSupply > 0) {\n            uint _balance = _NAV.balanceOf[_account];\n            uint _assetBalance = totalAssetSupply();\n            uint availableAssets = (_balance * _assetBalance) / _totalSupply;\n            newShares = (_amountInAsset * (_totalSupply - oldShares)) / (_assetBalance - availableAssets);\n        } else {\n            newShares = _amountInAsset < NAV.INITIAL_QUANTITY ? 0 : _amountInAsset - NAV.INITIAL_QUANTITY;\n        }\n    }\n\n    /// @inheritdoc IvToken\n    function totalAssetSupply() public view override returns (uint) {\n        return IERC20(asset).balanceOf(address(this));\n    }\n\n    /// @inheritdoc ERC165Upgradeable\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IvToken).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Mints shares to `_recipient` address\n    /// @param _recipient Shares recipient\n    /// @return shares Amount of minted shares\n    function _mint(address _recipient) internal returns (uint shares) {\n        uint _totalAssetSupply = totalAssetSupply();\n        shares = _NAV.mint(_totalAssetSupply, _recipient);\n        _NAV.sync(_totalAssetSupply);\n        emit VTokenTransfer(address(0), _recipient, shares);\n    }\n\n    /// @notice Burns shares from `_recipient` address\n    /// @param _recipient Recipient of assets from burnt shares\n    /// @return amount Amount of asset for burnt shares\n    function _burn(address _recipient) internal returns (uint amount) {\n        uint shares = _NAV.balanceOf[address(this)];\n        amount = _NAV.burn(totalAssetSupply());\n        _transferAsset(_recipient, amount);\n        _NAV.sync(totalAssetSupply());\n        emit VTokenTransfer(_recipient, address(0), shares);\n    }\n\n    /// @notice Transfers `_amount` of shares from one address to another\n    /// @param _from Address to transfer shares from\n    /// @param _to Address to transfer shares to\n    /// @param _amount Amount of shares to transfer\n    function _transfer(\n        address _from,\n        address _to,\n        uint _amount\n    ) internal {\n        _NAV.transfer(_from, _to, _amount);\n        emit VTokenTransfer(_from, _to, _amount);\n    }\n\n    /// @notice Transfers `_amount` of asset to `_recipient` address\n    /// @param _recipient Recipient of assets\n    /// @param _amount Amount of assets to transfer\n    function _transferAsset(address _recipient, uint _amount) internal {\n        uint balance = IERC20(asset).balanceOf(address(this));\n        IERC20(asset).safeTransfer(_recipient, Math.min(_amount, balance));\n    }\n\n    uint256[42] private __gap;\n}\n\n\n",
        "CodeNames": [
            "TopNMarketCapIndex.sol",
            "TrackedIndex.sol",
            "vToken.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "vToken.sol, transferFrom() function; TopNMarketCapIndex.sol, reweight() function; TrackedIndex.sol, reweight() function",
                "Type": "Smart Contract Logic",
                "Description": "The ORDERER_ROLE role has the ability to arbitrarily transfer user funds, and this role is shared between both the orderer and people who can rebalance the index.",
                "Repair": "Split the role into two, and only give the ORDERER_ROLE role to the orderer"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport \"./libraries/IndexLibrary.sol\";\n\nimport \"./interfaces/IvToken.sol\";\nimport \"./interfaces/IOrderer.sol\";\nimport \"./interfaces/IvTokenFactory.sol\";\nimport \"./interfaces/IIndexRegistry.sol\";\nimport \"./interfaces/IManagedIndexReweightingLogic.sol\";\n\nimport \"./IndexLayout.sol\";\n\n/// @title ManagedIndex reweighting logic\n/// @notice Contains reweighting logic\ncontract ManagedIndexReweightingLogic is IndexLayout, IManagedIndexReweightingLogic, ERC165 {\n    using FullMath for uint;\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Asset role\n    bytes32 internal constant ASSET_ROLE = keccak256(\"ASSET_ROLE\");\n\n    /// @inheritdoc IManagedIndexReweightingLogic\n    function reweight(address[] calldata _updatedAssets, uint8[] calldata _updatedWeights) external override {\n        require(\n            _updatedAssets.length > 1 &&\n                _updatedWeights.length == _updatedAssets.length &&\n                _updatedAssets.length <= IIndexRegistry(registry).maxComponents(),\n            \"ManagedIndex: INVALID\"\n        );\n\n        uint virtualEvaluationInBase;\n        IPhuturePriceOracle oracle = IPhuturePriceOracle(IIndexRegistry(registry).priceOracle());\n        for (uint i; i < assets.length(); ++i) {\n            uint priceAssetPerBaseInUQ = oracle.refreshedAssetPerBaseInUQ(assets.at(i));\n            uint availableAssets = IvToken(IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(assets.at(i)))\n                .assetBalanceOf(address(this));\n            virtualEvaluationInBase += availableAssets.mulDiv(FixedPoint112.Q112, priceAssetPerBaseInUQ);\n        }\n\n        IOrderer orderer = IOrderer(IIndexRegistry(registry).orderer());\n        uint orderId = orderer.placeOrder();\n\n        uint _totalWeight = IndexLibrary.MAX_WEIGHT;\n\n        for (uint i; i < _updatedAssets.length; ++i) {\n            address asset = _updatedAssets[i];\n            require(asset != address(0), \"ManagedIndex: ZERO\");\n\n            uint8 newWeight = _updatedWeights[i];\n\n            if (i > 0) {\n                // makes sure that there are no duplicate assets\n                require(_updatedAssets[i - 1] < asset, \"ManagedIndex: SORT\");\n            }\n\n            if (newWeight > 0) {\n                require(IAccessControl(registry).hasRole(ASSET_ROLE, asset), \"ManagedIndex: INVALID_ASSET\");\n                assets.add(asset);\n                inactiveAssets.remove(asset);\n\n                uint8 prevWeight = weightOf[asset];\n                if (prevWeight != newWeight) {\n                    emit UpdateAnatomy(asset, newWeight);\n                }\n\n                _totalWeight = _totalWeight + newWeight - prevWeight;\n                weightOf[asset] = newWeight;\n\n                uint amountInBase = (virtualEvaluationInBase * weightOf[asset]) / IndexLibrary.MAX_WEIGHT;\n                uint amountInAsset = amountInBase.mulDiv(oracle.refreshedAssetPerBaseInUQ(asset), FixedPoint112.Q112);\n                (uint newShares, uint oldShares) = IvToken(IvTokenFactory(vTokenFactory).createOrReturnVTokenOf(asset))\n                    .shareChange(address(this), amountInAsset);\n\n                if (newShares > oldShares) {\n                    orderer.addOrderDetails(orderId, asset, newShares - oldShares, IOrderer.OrderSide.Buy);\n                } else if (oldShares > newShares) {\n                    orderer.addOrderDetails(orderId, asset, oldShares - newShares, IOrderer.OrderSide.Sell);\n                }\n            } else {\n                require(assets.remove(asset), \"ManagedIndex: INVALID\");\n                inactiveAssets.add(asset);\n\n                _totalWeight -= weightOf[asset];\n\n                delete weightOf[asset];\n\n                emit UpdateAnatomy(asset, 0);\n            }\n        }\n        address[] memory _inactiveAssets = inactiveAssets.values();\n        for (uint i; i < _inactiveAssets.length; ++i) {\n            uint shares = IvToken(IvTokenFactory(vTokenFactory).vTokenOf(_inactiveAssets[i])).balanceOf(address(this));\n            if (shares > 0) {\n                orderer.addOrderDetails(orderId, _inactiveAssets[i], shares, IOrderer.OrderSide.Sell);\n            } else {\n                inactiveAssets.remove(_inactiveAssets[i]);\n            }\n        }\n        require(_totalWeight == IndexLibrary.MAX_WEIGHT, \"ManagedIndex: MAX\");\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IManagedIndexReweightingLogic).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n",
        "CodeNames": [
            "ManagedIndexReweightingLogic.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "ManagedIndexReweightingLogic.sol#L32",
                "Type": "Wrong requirement",
                "Description": "The list of assets won't be changed after reweight because of reverted tx.",
                "Repair": "Require assets.length() <= IIndexRegistry(registry).maxComponents() at the end of function instead."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/access/IAccessControl.sol\";\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV2V3Interface.sol\";\n\nimport \"./libraries/FullMath.sol\";\nimport \"./libraries/FixedPoint112.sol\";\n\nimport \"./interfaces/IChainlinkPriceOracle.sol\";\n\n/// @title Chainlink price oracle\n/// @notice Contains logic for getting asset's price from Chainlink data feed\n/// @dev Oracle works through base asset which is set in initialize function\ncontract ChainlinkPriceOracle is IChainlinkPriceOracle, ERC165 {\n    using FullMath for uint;\n\n    struct AssetInfo {\n        AggregatorV2V3Interface aggregator;\n        uint8 answerDecimals;\n        uint8 decimals;\n        uint lastAssetPerBaseInUQ;\n    }\n\n    /// @notice Role allows configure asset related data/components\n    bytes32 private constant ASSET_MANAGER_ROLE = keccak256(\"ASSET_MANAGER_ROLE\");\n\n    /// @notice Index registry address\n    IAccessControl private immutable registry;\n\n    /// @notice Chainlink aggregator for the base asset\n    AggregatorV2V3Interface private immutable baseAggregator;\n\n    /// @notice Number of decimals in base asset answer\n    uint8 private immutable baseDecimals;\n\n    /// @notice Number of decimals in base asset answer\n    uint8 private immutable baseAnswerDecimals;\n\n    /// @notice Infos of added assets\n    mapping(address => AssetInfo) private assetInfoOf;\n\n    constructor(\n        address _registry,\n        address _base,\n        address _baseAggregator\n    ) {\n        require(_baseAggregator != address(0) && _base != address(0), \"ChainlinkPriceOracle: ZERO\");\n\n        registry = IAccessControl(_registry);\n        baseAnswerDecimals = AggregatorV2V3Interface(_baseAggregator).decimals();\n        baseDecimals = IERC20Metadata(_base).decimals();\n        baseAggregator = AggregatorV2V3Interface(_baseAggregator);\n    }\n\n    /// @inheritdoc IChainlinkPriceOracle\n    function addAsset(address _asset, address _assetAggregator) external override {\n        require(registry.hasRole(ASSET_MANAGER_ROLE, msg.sender), \"ChainlinkPriceOracle: FORBIDDEN\");\n        require(_asset != address(0), \"ChainlinkPriceOracle: ZERO\");\n\n        assetInfoOf[_asset] = AssetInfo({\n            aggregator: AggregatorV2V3Interface(_assetAggregator),\n            answerDecimals: AggregatorV2V3Interface(_assetAggregator).decimals(),\n            decimals: IERC20Metadata(_asset).decimals(),\n            lastAssetPerBaseInUQ: 0\n        });\n\n        refreshedAssetPerBaseInUQ(_asset);\n    }\n\n    /// @inheritdoc IPriceOracle\n    function lastAssetPerBaseInUQ(address _asset) external view override returns (uint) {\n        return assetInfoOf[_asset].lastAssetPerBaseInUQ;\n    }\n\n    /// @inheritdoc IPriceOracle\n    function refreshedAssetPerBaseInUQ(address _asset) public override returns (uint) {\n        AssetInfo storage assetInfo = assetInfoOf[_asset];\n\n        (, int basePrice, , , ) = baseAggregator.latestRoundData();\n        (, int quotePrice, , , ) = assetInfo.aggregator.latestRoundData();\n\n        require(basePrice > 0 && quotePrice > 0, \"ChainlinkPriceOracle: NEGATIVE\");\n\n        uint assetPerBaseInUQ = ((uint(basePrice) * 10**assetInfo.decimals).mulDiv(\n            FixedPoint112.Q112,\n            (uint(quotePrice) * 10**baseDecimals)\n        ) * 10**assetInfo.answerDecimals) / 10**baseAnswerDecimals;\n        assetInfo.lastAssetPerBaseInUQ = assetPerBaseInUQ;\n        return assetPerBaseInUQ;\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IChainlinkPriceOracle).interfaceId ||\n            _interfaceId == type(IPriceOracle).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n}\n\n\n",
        "CodeNames": [
            "ChainlinkPriceOracle.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "ChainlinkPriceOracle.sol#L60",
                "Type": "Asset Manager can update existing",
                "Description": "Asset Manager can update the aggregator of an existing asset thus impacting all function making use of this asset.",
                "Repair": "addAsset should only work if assetInfoOf[_asset] value is empty."
            },
            {
                "Location": "ChainlinkPriceOracle.sol#L83-L84",
                "Type": "latestRoundData might return stale or incorrect results",
                "Description": "On ChainlinkPriceOracle.sol, we are using latestRoundData, but there is no check if the return value indicates stale data.",
                "Repair": "Add missing checks for stale data."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"./interfaces/IIndexFactory.sol\";\nimport \"./interfaces/IReweightableIndex.sol\";\nimport \"./interfaces/ITopNMarketCapIndexReweightingLogic.sol\";\n\nimport \"./BaseIndex.sol\";\n\n/// @title Top N market capitalization index\n/// @notice Contains initialization and reweighting logic\n/// @dev This index reweighs according to the latest data from the TopNMarketCapCategories contract\ncontract TopNMarketCapIndex is IReweightableIndex, BaseIndex {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Orderer role\n    bytes32 internal constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n\n    /// @notice Number of assets used in the index\n    uint8 public topN;\n    /// @notice Category identifier used for the given index\n    uint public category;\n\n    /// @notice Latest category snapshot to track diff\n    uint private snapshot;\n\n    constructor() BaseIndex(msg.sender) {}\n\n    /// @notice Initializes index with provided set of parameters\n    /// @param _topN Number of assets used in the index\n    /// @param _category Category identifier used for the given index\n    /// @param _snapshot Initial snapshot from the category\n    /// @param _assets Assets list\n    /// @param _capitalizations List of corresponding assets capitalizations\n    /// @param _totalCapitalization Total capitalization of assets\n    function initialize(\n        uint8 _topN,\n        uint _category,\n        uint _snapshot,\n        address[] calldata _assets,\n        uint[] calldata _capitalizations,\n        uint _totalCapitalization\n    ) external {\n        require(msg.sender == factory, \"TopNMarketCapIndex: FORBIDDEN\");\n\n        uint8 _totalWeight;\n        for (uint i; i < _assets.length; ++i) {\n            uint _i = _assets.length - 1 - i;\n            address asset = _assets[_i];\n            uint8 weight = _i == 0\n                ? IndexLibrary.MAX_WEIGHT - _totalWeight\n                : uint8((_capitalizations[_i] * type(uint8).max) / _totalCapitalization);\n            weightOf[asset] = weight;\n            require(asset != address(0), \"TopNMarketCapIndex: ZERO\");\n            if (weight > 0) {\n                assets.add(asset);\n                _totalWeight += weight;\n                emit UpdateAnatomy(asset, weight);\n            }\n        }\n        snapshot = _snapshot;\n        category = _category;\n        topN = _topN;\n    }\n\n    /// @notice Reweighs index assets according to the latest market cap data for specified category\n    function reweight() external override onlyRole(ORDERER_ROLE) {\n        (bool success, bytes memory data) = IIndexFactory(factory).reweightingLogic().delegatecall(\n            abi.encodeWithSelector(ITopNMarketCapIndexReweightingLogic.reweight.selector, category, snapshot, topN)\n        );\n        if (!success) {\n            if (data.length == 0) {\n                revert(\"TopNMarketCapIndex: REWEIGH_FAILED\");\n            } else {\n                assembly {\n                    revert(add(32, data), mload(data))\n                }\n            }\n        }\n        snapshot = abi.decode(data, (uint));\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IReweightableIndex).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"./interfaces/IIndexFactory.sol\";\nimport \"./interfaces/IReweightableIndex.sol\";\nimport \"./interfaces/ITrackedIndexReweightingLogic.sol\";\n\nimport \"./BaseIndex.sol\";\n\n/// @title Tracked index\n/// @notice  Contains initialization and reweighting logic\ncontract TrackedIndex is IReweightableIndex, BaseIndex {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Orderer role\n    bytes32 internal constant ORDERER_ROLE = keccak256(\"ORDERER_ROLE\");\n\n    constructor() BaseIndex(msg.sender) {}\n\n    /// @notice Initializes index with provided set of parameters\n    /// @param _assets Assets list\n    /// @param _capitalizations List of corresponding assets capitalizations\n    /// @param _totalCapitalization Total capitalization of assets\n    function initialize(\n        address[] calldata _assets,\n        uint[] calldata _capitalizations,\n        uint _totalCapitalization\n    ) external {\n        require(msg.sender == factory, \"TrackedIndex: FORBIDDEN\");\n\n        uint8 totalWeight;\n        uint maxCapitalization = _capitalizations[0];\n        address maxCapitalizationAsset = _assets[0];\n        for (uint i; i < _assets.length; ++i) {\n            address asset = _assets[i];\n            uint8 weight = uint8((_capitalizations[i] * type(uint8).max) / _totalCapitalization);\n            if (_capitalizations[i] > maxCapitalization) {\n                emit UpdateAnatomy(maxCapitalizationAsset, weightOf[maxCapitalizationAsset]);\n                maxCapitalization = _capitalizations[i];\n                maxCapitalizationAsset = asset;\n            }\n            weightOf[asset] = weight;\n            totalWeight += weight;\n            assets.add(asset);\n            if (asset != maxCapitalizationAsset) {\n                emit UpdateAnatomy(asset, weight);\n            }\n        }\n        if (totalWeight < IndexLibrary.MAX_WEIGHT) {\n            weightOf[maxCapitalizationAsset] += IndexLibrary.MAX_WEIGHT - totalWeight;\n        }\n        emit UpdateAnatomy(maxCapitalizationAsset, weightOf[maxCapitalizationAsset]);\n    }\n\n    /// @notice Reweighs index assets according to the latest market cap data\n    function reweight() external override onlyRole(ORDERER_ROLE) {\n        (bool success, bytes memory data) = IIndexFactory(factory).reweightingLogic().delegatecall(\n            abi.encodeWithSelector(ITrackedIndexReweightingLogic.reweight.selector)\n        );\n        if (!success) {\n            if (data.length == 0) {\n                revert(\"TrackedIndex: REWEIGH_FAILED\");\n            } else {\n                assembly {\n                    revert(add(32, data), mload(data))\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IReweightableIndex).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.8.7;\n\nimport \"./interfaces/IManagedIndex.sol\";\nimport \"./interfaces/IIndexFactory.sol\";\nimport \"./interfaces/IManagedIndexReweightingLogic.sol\";\n\nimport \"./BaseIndex.sol\";\n\n/// @title Managed index\n/// @notice Contains initialization and reweighting logic\ncontract ManagedIndex is IManagedIndex, BaseIndex {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    /// @notice Role for index reweighting\n    bytes32 private REWEIGHT_INDEX_ROLE;\n\n    constructor() BaseIndex(msg.sender) {\n        REWEIGHT_INDEX_ROLE = keccak256(abi.encodePacked(\"REWEIGHT_PERMISSION\", address(this)));\n    }\n\n    /// @notice Index initialization with assets and their weights\n    /// @dev Method is called by factory\n    /// @param _assets Assets list for the index\n    /// @param _weights List of assets corresponding weights\n    function initialize(address[] calldata _assets, uint8[] calldata _weights) external {\n        require(msg.sender == factory, \"ManagedIndex: FORBIDDEN\");\n\n        for (uint i; i < _assets.length; ++i) {\n            address asset = _assets[i];\n            uint8 weight = _weights[i];\n\n            weightOf[asset] = weight;\n            assets.add(asset);\n\n            emit UpdateAnatomy(asset, weight);\n        }\n    }\n\n    /// @inheritdoc IManagedIndex\n    /// @dev Assets total weight should be equal to 255\n    function reweight(address[] calldata _updatedAssets, uint8[] calldata _updatedWeights) external override {\n        require(\n            IAccessControl(registry).hasRole(INDEX_MANAGER_ROLE, msg.sender) ||\n                IAccessControl(registry).hasRole(REWEIGHT_INDEX_ROLE, msg.sender),\n            \"ManagedIndex: FORBIDDEN\"\n        );\n        (bool success, bytes memory data) = IIndexFactory(factory).reweightingLogic().delegatecall(\n            abi.encodeWithSelector(IManagedIndexReweightingLogic.reweight.selector, _updatedAssets, _updatedWeights)\n        );\n        if (!success) {\n            if (data.length == 0) {\n                revert(\"ManagedIndex: REWEIGH_FAILED\");\n            } else {\n                assembly {\n                    revert(add(32, data), mload(data))\n                }\n            }\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IManagedIndex).interfaceId || super.supportsInterface(_interfaceId);\n    }\n}\n\n\n",
        "CodeNames": [
            "TopNMarketCapIndex.sol",
            "TrackedIndex.sol",
            "ManagedIndex.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "ManagedIndex.sol#L35, TopNMarketCapIndex.sol#L57, TrackedIndex.sol#L45",
                "Type": "Duplicate asset can be added",
                "Description": "Initialize function can be called multiple times with same asset.",
                "Repair": "Add a check to fail if assets already contains the passed asset argument. Also add a modifier so that initialize could only be called once."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: GPL-2.0-or-later\n\npragma solidity >=0.8.7;\n\nimport \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/v2-periphery/contracts/libraries/UniswapV2OracleLibrary.sol\";\n\nimport \"./interfaces/IUniswapV2PriceOracle.sol\";\n\n/// @title Uniswap V2 price oracle\n/// @notice Contains logic for price calculation of asset using Uniswap V2 Pair\n/// @dev Oracle works through base asset which is set in initialize function\ncontract UniswapV2PriceOracle is IUniswapV2PriceOracle, ERC165 {\n    using UniswapV2OracleLibrary for address;\n\n    /// @notice Minimum oracle update interval\n    /// @dev If min update interval hasn't passed (24h) before update, previously cached value is returned\n    uint private constant MIN_UPDATE_INTERVAL = 24 hours;\n\n    IUniswapV2Pair immutable pair;\n    /// @inheritdoc IUniswapV2PriceOracle\n    address public immutable override asset0;\n    /// @inheritdoc IUniswapV2PriceOracle\n    address public immutable override asset1;\n\n    uint private price0CumulativeLast;\n    uint private price1CumulativeLast;\n    uint32 private blockTimestampLast;\n    uint private price0Average;\n    uint private price1Average;\n\n    constructor(\n        address _factory,\n        address _assetA,\n        address _assetB\n    ) {\n        IUniswapV2Pair _pair = IUniswapV2Pair(IUniswapV2Factory(_factory).getPair(_assetA, _assetB));\n        pair = _pair;\n        asset0 = _pair.token0();\n        asset1 = _pair.token1();\n\n        uint112 reserve0;\n        uint112 reserve1;\n        (reserve0, reserve1, blockTimestampLast) = _pair.getReserves();\n        require(reserve0 != 0 && reserve1 != 0, \"UniswapV2PriceOracle: RESERVES\");\n\n        uint _price0CumulativeLast = _pair.price0CumulativeLast();\n        uint _price1CumulativeLast = _pair.price1CumulativeLast();\n        (uint price0Cml, uint price1Cml, uint32 blockTimestamp) = address(_pair).currentCumulativePrices();\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n        price0CumulativeLast = _price0CumulativeLast;\n        price1CumulativeLast = _price1CumulativeLast;\n        price0Average = (price0Cml - _price0CumulativeLast) / timeElapsed;\n        price1Average = (price1Cml - _price1CumulativeLast) / timeElapsed;\n    }\n\n    /// @inheritdoc IPriceOracle\n    /// @dev Updates and returns cumulative price value\n    /// @dev If min update interval hasn't passed (24h), previously cached value is returned\n    function refreshedAssetPerBaseInUQ(address _asset) external override returns (uint) {\n        (uint price0Cumulative, uint price1Cumulative, uint32 blockTimestamp) = address(pair).currentCumulativePrices();\n        uint32 timeElapsed = blockTimestamp - blockTimestampLast;\n\n        if (timeElapsed >= MIN_UPDATE_INTERVAL) {\n            price0Average = (price0Cumulative - price0CumulativeLast) / timeElapsed;\n            price1Average = (price1Cumulative - price1CumulativeLast) / timeElapsed;\n\n            price0CumulativeLast = price0Cumulative;\n            price1CumulativeLast = price1Cumulative;\n            blockTimestampLast = blockTimestamp;\n        }\n\n        return lastAssetPerBaseInUQ(_asset);\n    }\n\n    /// @inheritdoc IPriceOracle\n    /// @dev Returns cumulative price value cached during last refresh call\n    function lastAssetPerBaseInUQ(address _asset) public view override returns (uint) {\n        if (_asset == asset0) {\n            return price1Average;\n        } else {\n            require(_asset == asset1, \"UniswapV2PriceOracle: UNKNOWN\");\n            return price0Average;\n        }\n    }\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IUniswapV2PriceOracle).interfaceId ||\n            _interfaceId == type(IPriceOracle).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n}\n\n\n",
        "CodeNames": [
            "UniswapV2PriceOracle.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "UniswapV2PriceOracle.sol currentCumulativePrices()",
                "Type": "Arithmetic overflow",
                "Description": "The current implementation of UniswapV2PriceOracle.sol will revert when priceCumulative addition overflow due to using Solidity version 0.8 which reverts on overflow. The vulnerability is caused by the desired overflow in the original version of UniswapV2OracleLibrary.sol, which only works at solidity < 0.8.0.",
                "Repair": "Change the code to use unchecked keyword to allow overflow"
            }
        ]
    }
]