[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "multiple locations",
                "Type": "smart contract vulnerability",
                "Description": "The text describes several smart contract vulnerabilities and their locations, repair methods, and information about the vulnerabilities. Each vulnerability has its own details and repair method.",
                "Repair": "varies depending on the vulnerability"
            },
            {
                "Location": "contracts/IndexLogic.sol (lines 60-70) and (lines 125-140)",
                "Type": "Inactive skipped assets can be drained",
                "Description": "If an index has any inactive assets with the role SKIPPED_ASSET_ROLE, a user can repeatedly deposit and withdraw assets, always getting the skipped asset without having to deposit any. During minting, any asset that has the 'skipped' role is excluded from the checks of assets deposited. During burning, however, there's a bug that only skips if there are 'blacklisted' assets.",
                "Repair": "Change the code to use || instead of && in the SKIPPED_ASSET_ROLE check during burning. Alternatively, update the contest documentation to clarify that this is intentional behavior."
            },
            {
                "Location": "contracts/ChainlinkPriceOracle.sol (lines 83-84)",
                "Type": "Chainlink's latestRoundData might return stale or incorrect results",
                "Description": "The use of latestRoundData without checking for stale data could lead to stale prices according to the Chainlink documentation.",
                "Repair": "Add missing checks for stale data, such as requiring that the round ID matches the answered round ID and that the timestamp is not zero. Also, check that the base and quote prices are not zero."
            },
            {
                "Location": "contracts/ManagedIndex.sol (line 35), contracts/TopNMarketCapIndex.sol (line 57), and contracts/TrackedIndex.sol (line 45)",
                "Type": "Duplicate asset can be added",
                "Description": "Calling the initialize function with the same asset multiple times will make duplicate entries in the assets list, which can impact any function reading assets.",
                "Repair": "Add a check to fail if assets already contain the passed asset argument. Also, add a modifier so that initialize could only be called once."
            },
            {
                "Location": "contracts/UniswapV2PriceOracle.sol (line 62)",
                "Type": "UniswapV2PriceOracle.sol currentCumulativePrices() will revert when priceCumulative addition overflow",
                "Description": "When price0Cumulative or price1Cumulative is big enough, currentCumulativePrices will revert due to overflow. This is because the Solidity version used by the current implementation of UniswapV2OracleLibrary.sol is >=0.8.0, and there are some breaking changes in Solidity v0.8.0: Arithmetic operations revert on underflow and overflow.",
                "Repair": "Change the code to use unchecked in the currentCumulativePrices() function to allow for overflow. This requires a fork of the library contract provided by Uniswap."
            }
        ]
    }
]