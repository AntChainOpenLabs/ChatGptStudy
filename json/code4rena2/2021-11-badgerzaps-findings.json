[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "IbbtcVaultZap.sol deposit function",
                "Type": "No slippage control",
                "Description": "There is no slippage control on deposit of IbbtcVaultZap.sol, which expose user to sandwich attack.",
                "Repair": "Add a minOut in line with the mint function of other contacts, and pass it as a parameter on L174"
            },
            {
                "Location": "Zap.sol redeem function",
                "Type": "Improper input validation",
                "Description": "In the redeem() function, the user can pass a token address. That's the token they receive in return for the ibbtc they give back. Because of missing address checks the user can provide any possible ERC20 token here without the function reverting.",
                "Repair": "Verify that the passed token address is either wBTC or renbtc"
            },
            {
                "Location": "SettToRenIbbtcZap.sol setZapConfig function",
                "Type": "Missing token approval",
                "Description": "When curvePool or token got updated, token is not approved to curvePool, which will malfunction the contract and break minting.",
                "Repair": "Add an if statement to check if curvePool has been updated and approve _token to _curvePool if it has."
            },
            {
                "Location": "IbbtcVaultZap.sol deposit function",
                "Type": "Excessive require",
                "Description": "The check for RENCRV_VAULT.blockLock is only needed when if (_amounts[1] > 0 || _amounts[2] > 0). However, in the current implementation, the check is done at the very first, making transactions unrelated to RENCRV_VAULT fail unexpectedly if there is a prior transaction involved with RENCRV_VAULT in the same block.",
                "Repair": "Check for RENCRV_VAULT.blockLock only when if (_amounts[1] > 0 || _amounts[2] > 0)"
            },
            {
                "Location": "IbbtcVaultZap.sol and SettToRenIbbtcZap.sol setGuardian function",
                "Type": "Improper implementation",
                "Description": "governance = _guardian should be guardian = _guardian.",
                "Repair": "Change governance = _guardian to guardian = _guardian"
            },
            {
                "Location": "Zap.sol calcMint function",
                "Type": "Incorrect function implementation",
                "Description": "calcMint in Zap.sol always return poolId=0 and idx=0, while the docstring specified it should return the most optimal route instead. This will lead to suboptimal zap.",
                "Repair": "Implement the missing functions for calcMint"
            }
        ]
    }
]