[
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '../interfaces/ISavingsAccount.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n\nlibrary SavingsAccountUtil {\n    using SafeERC20 for IERC20;\n\n    function depositFromSavingsAccount(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        bool _withdrawShares,\n        bool _toSavingsAccount\n    ) internal returns (uint256) {\n        if (_toSavingsAccount) {\n            return savingsAccountTransfer(_savingsAccount, _from, _to, _amount, _token, _strategy);\n        } else {\n            return withdrawFromSavingsAccount(_savingsAccount, _from, _to, _amount, _token, _strategy, _withdrawShares);\n        }\n    }\n\n    function directDeposit(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        bool _toSavingsAccount,\n        address _strategy\n    ) internal returns (uint256) {\n        if (_toSavingsAccount) {\n            return directSavingsAccountDeposit(_savingsAccount, _from, _to, _amount, _token, _strategy);\n        } else {\n            return transferTokens(_token, _amount, _from, _to);\n        }\n    }\n\n    function directSavingsAccountDeposit(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256 _sharesReceived) {\n        transferTokens(_token, _amount, _from, address(this));\n        uint256 _ethValue;\n        if (_token == address(0)) {\n            _ethValue = _amount;\n        } else {\n            address _approveTo = _strategy;\n            if (_strategy == address(0)) {\n                _approveTo = address(_savingsAccount);\n            }\n            IERC20(_token).safeApprove(_approveTo, _amount);\n        }\n        _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount, _token, _strategy, _to);\n    }\n\n    function savingsAccountTransfer(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256) {\n        if (_from == address(this)) {\n            _savingsAccount.transfer(_amount, _token, _strategy, _to);\n        } else {\n            _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);\n        }\n        return _amount;\n    }\n\n    function withdrawFromSavingsAccount(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        bool _withdrawShares\n    ) internal returns (uint256 _amountReceived) {\n        if (_from == address(this)) {\n            _amountReceived = _savingsAccount.withdraw(_amount, _token, _strategy, payable(_to), _withdrawShares);\n        } else {\n            _amountReceived = _savingsAccount.withdrawFrom(_amount, _token, _strategy, _from, payable(_to), _withdrawShares);\n        }\n    }\n\n    function transferTokens(\n        address _token,\n        uint256 _amount,\n        address _from,\n        address _to\n    ) internal returns (uint256) {\n        if (_amount == 0) {\n            return 0;\n        }\n        if (_token == address(0)) {\n            require(msg.value >= _amount, 'ethers provided should be greater than _amount');\n\n            if (_to != address(this)) {\n                (bool success, ) = payable(_to).call{value: _amount}('');\n                require(success, 'Transfer failed');\n            }\n            if (msg.value > _amount) {\n                (bool success, ) = payable(address(msg.sender)).call{value: msg.value - _amount}('');\n                require(success, 'Transfer failed');\n            }\n            return _amount;\n        }\n        if (_from == address(this)) {\n            IERC20(_token).safeTransfer(_to, _amount);\n        } else {\n            //pool\n            IERC20(_token).safeTransferFrom(_from, _to, _amount);\n        }\n        return _amount;\n    }\n}\n\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol';\nimport '../interfaces/IPoolFactory.sol';\nimport '../interfaces/IPriceOracle.sol';\nimport '../interfaces/IYield.sol';\nimport '../interfaces/IRepayment.sol';\nimport '../interfaces/ISavingsAccount.sol';\nimport '../SavingsAccount/SavingsAccountUtil.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IExtension.sol';\nimport '../interfaces/IVerification.sol';\n\n/**\n * @title Pool contract with Methods related to Pool\n * @notice Implements the functions related to Pool\n * @author Sublime\n */\ncontract Pool is Initializable, ERC20PausableUpgradeable, IPool, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    enum LoanStatus {\n        COLLECTION, //denotes collection period\n        ACTIVE, // denotes the active loan\n        CLOSED, // Loan is repaid and closed\n        CANCELLED, // Cancelled by borrower\n        DEFAULTED, // Repayment defaulted by  borrower\n        TERMINATED // Pool terminated by admin\n    }\n\n    address poolFactory;\n\n    struct LendingDetails {\n        uint256 effectiveInterestWithdrawn;\n        uint256 marginCallEndTime;\n        uint256 extraLiquidityShares;\n    }\n\n    // Pool constants\n    struct PoolConstants {\n        address borrower;\n        uint256 borrowAmountRequested;\n        uint256 loanStartTime;\n        uint256 loanWithdrawalDeadline;\n        address borrowAsset;\n        uint256 idealCollateralRatio;\n        uint256 borrowRate;\n        uint256 noOfRepaymentIntervals;\n        uint256 repaymentInterval;\n        address collateralAsset;\n        address poolSavingsStrategy; // invest contract\n        address lenderVerifier;\n    }\n\n    struct PoolVariables {\n        uint256 baseLiquidityShares;\n        uint256 extraLiquidityShares;\n        LoanStatus loanStatus;\n        uint256 penaltyLiquidityAmount;\n    }\n\n    /**\n     * @notice used to keep track of lenders' details\n     */\n    mapping(address => LendingDetails) public lenders;\n\n    /**\n     * @notice object of type PoolConstants\n     */\n    PoolConstants public poolConstants;\n\n    /**\n     * @notice object of type PoolVariables\n     */\n    PoolVariables public poolVariables;\n\n    /**\n     * @notice checks if the _user is pool's valid borrower\n     * @param _user address of the borrower\n     */\n    modifier onlyBorrower(address _user) {\n        require(_user == poolConstants.borrower, 'OB1');\n        _;\n    }\n\n    /**\n     * @notice checks if the _lender is pool's valid lender\n     * @param _lender address of the lender\n     */\n    modifier isLender(address _lender) {\n        require(balanceOf(_lender) != 0, 'IL1');\n        _;\n    }\n\n    /**\n     * @notice checks if the msg.sender is pool's valid owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == IPoolFactory(poolFactory).owner(), 'OO1');\n        _;\n    }\n\n    /**\n     * @notice checks if the msg.sender is pool's latest repayment implementation\n     */\n    modifier onlyRepaymentImpl() {\n        require(msg.sender == IPoolFactory(poolFactory).repaymentImpl(), 'OR1');\n        _;\n    }\n\n    /**\n     * @notice initializing the pool and adding initial collateral\n     * @param _borrowAmountRequested the amount of borrow asset requested by the borrower\n     * @param _borrower address of the borrower\n     * @param _borrowAsset address of the borrow asset\n     * @param _collateralAsset address of the collateral asset\n     * @param _idealCollateralRatio the ideal collateral ratio of the pool\n     * @param _borrowRate the borrow rate as specified by borrower\n     * @param _repaymentInterval the interval between to repayments\n     * @param _noOfRepaymentIntervals number of repayments to be done by borrower\n     * @param _poolSavingsStrategy address of the savings strategy preferred\n     * @param _collateralAmount amount of collateral to be deposited by the borrower\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     * @param _loanWithdrawalDuration time interval for the borrower to withdraw the lent amount in borrow asset\n     * @param _collectionPeriod time interval where lender lend into the borrow pool\n     */\n    function initialize(\n        uint256 _borrowAmountRequested,\n        uint256 _borrowRate,\n        address _borrower,\n        address _borrowAsset,\n        address _collateralAsset,\n        uint256 _idealCollateralRatio,\n        uint256 _repaymentInterval,\n        uint256 _noOfRepaymentIntervals,\n        address _poolSavingsStrategy,\n        uint256 _collateralAmount,\n        bool _transferFromSavingsAccount,\n        address _lenderVerifier,\n        uint256 _loanWithdrawalDuration,\n        uint256 _collectionPeriod\n    ) external payable initializer {\n        poolFactory = msg.sender;\n        poolConstants.borrowAsset = _borrowAsset;\n        poolConstants.idealCollateralRatio = _idealCollateralRatio;\n        poolConstants.collateralAsset = _collateralAsset;\n        poolConstants.poolSavingsStrategy = _poolSavingsStrategy;\n        poolConstants.borrowAmountRequested = _borrowAmountRequested;\n        _initialDeposit(_borrower, _collateralAmount, _transferFromSavingsAccount);\n        poolConstants.borrower = _borrower;\n        poolConstants.borrowRate = _borrowRate;\n        poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals;\n        poolConstants.repaymentInterval = _repaymentInterval;\n        poolConstants.lenderVerifier = _lenderVerifier;\n\n        poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod);\n        poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration);\n        __ERC20_init('Pool Tokens', 'PT');\n        try ERC20Upgradeable(_borrowAsset).decimals() returns(uint8 _decimals) {\n            _setupDecimals(_decimals);\n        } catch(bytes memory) {}\n    }\n\n    /**\n     * @notice add collateral to a pool\n     * @param _amount amount of collateral to be deposited denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     */\n    function depositCollateral(uint256 _amount, bool _transferFromSavingsAccount) external payable override {\n        require(_amount != 0, 'DC1');\n        require(balanceOf(msg.sender) == 0, 'DC2');\n        _depositCollateral(msg.sender, _amount, _transferFromSavingsAccount);\n    }\n\n    /**\n     * @notice called when borrow pool is initialized to make initial collateral deposit\n     * @param _borrower address of the borrower\n     * @param _amount amount of collateral getting deposited denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     */\n    function _initialDeposit(\n        address _borrower,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) internal {\n        uint256 _equivalentCollateral = getEquivalentTokens(\n            poolConstants.borrowAsset,\n            poolConstants.collateralAsset,\n            poolConstants.borrowAmountRequested\n        );\n        require(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30), 'ID1');\n        _depositCollateral(_borrower, _amount, _transferFromSavingsAccount);\n    }\n\n    /**\n     * @notice internal function used to deposit collateral from _borrower to pool\n     * @param _depositor address transferring the collateral\n     * @param _amount amount of collateral to be transferred denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet\n     */\n    function _depositCollateral(\n        address _depositor,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) internal nonReentrant {\n        uint256 _sharesReceived = _deposit(\n            _transferFromSavingsAccount,\n            true,\n            poolConstants.collateralAsset,\n            _amount,\n            poolConstants.poolSavingsStrategy,\n            _depositor,\n            address(this)\n        );\n        poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived);\n        emit CollateralAdded(_depositor, _amount, _sharesReceived);\n    }\n\n    /**\n     * @notice internal function used to get amount of collateral deposited to the pool\n     * @param _fromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet\n     * @param _toSavingsAccount if true, collateral is transferred to pool's savings account, if false, it is withdrawn from _sender's savings account\n     * @param _asset address of the asset to be deposited\n     * @param _amount amount of tokens to be deposited in the pool\n     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit\n     * @param _depositFrom address which makes the deposit\n     * @param _depositTo address to which the tokens are deposited\n     * @return _sharesReceived number of equivalent shares for given _asset\n     */\n    function _deposit(\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        address _asset,\n        uint256 _amount,\n        address _poolSavingsStrategy,\n        address _depositFrom,\n        address _depositTo\n    ) internal returns (uint256 _sharesReceived) {\n        if (_fromSavingsAccount) {\n            _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(\n                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n                _depositFrom,\n                _depositTo,\n                _amount,\n                _asset,\n                _poolSavingsStrategy,\n                true,\n                _toSavingsAccount\n            );\n        } else {\n            _sharesReceived = SavingsAccountUtil.directDeposit(\n                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n                _depositFrom,\n                _depositTo,\n                _amount,\n                _asset,\n                _toSavingsAccount,\n                _poolSavingsStrategy\n            );\n        }\n    }\n\n    /**\n     * @notice used to add extra collateral deposit during margin calls\n     * @param _lender the address of the _lender who has requested for margin call\n     * @param _amount amount of tokens requested for the margin call\n     * @param _transferFromSavingsAccount if true, collateral is transferred from borrower's savings account, if false, it is transferred from borrower's wallet\n     */\n    function addCollateralInMarginCall(\n        address _lender,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) external payable override nonReentrant {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'ACMC1');\n        require(balanceOf(msg.sender) == 0, 'ACMC2');\n        require(getMarginCallEndTime(_lender) >= block.timestamp, 'ACMC3');\n\n        require(_amount != 0, 'ACMC4');\n\n        uint256 _sharesReceived = _deposit(\n            _transferFromSavingsAccount,\n            true,\n            poolConstants.collateralAsset,\n            _amount,\n            poolConstants.poolSavingsStrategy,\n            msg.sender,\n            address(this)\n        );\n\n        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived);\n\n        lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived);\n\n        if (getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio) {\n            delete lenders[_lender].marginCallEndTime;\n        }\n\n        emit MarginCallCollateralAdded(msg.sender, _lender, _amount, _sharesReceived);\n    }\n\n    /**\n     * @notice used by the borrower to withdraw tokens from the pool when loan is active\n     */\n    function withdrawBorrowedAmount() external override onlyBorrower(msg.sender) nonReentrant {\n        LoanStatus _poolStatus = poolVariables.loanStatus;\n        uint256 _tokensLent = totalSupply();\n        require(\n            _poolStatus == LoanStatus.COLLECTION &&\n                poolConstants.loanStartTime < block.timestamp &&\n                block.timestamp < poolConstants.loanWithdrawalDeadline,\n            'WBA1'\n        );\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30), 'WBA2');\n\n        poolVariables.loanStatus = LoanStatus.ACTIVE;\n        uint256 _currentCollateralRatio = getCurrentCollateralRatio();\n        require(_currentCollateralRatio >= poolConstants.idealCollateralRatio, 'WBA3');\n\n        uint256 _noOfRepaymentIntervals = poolConstants.noOfRepaymentIntervals;\n        uint256 _repaymentInterval = poolConstants.repaymentInterval;\n        IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(\n            _noOfRepaymentIntervals,\n            _repaymentInterval,\n            poolConstants.borrowRate,\n            poolConstants.loanStartTime,\n            poolConstants.borrowAsset\n        );\n        IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval);\n\n        address _borrowAsset = poolConstants.borrowAsset;\n        (uint256 _protocolFeeFraction, address _collector) = _poolFactory.getProtocolFeeData();\n        uint256 _protocolFee = _tokensLent.mul(_protocolFeeFraction).div(10**30);\n        delete poolConstants.loanWithdrawalDeadline;\n\n        uint256 _feeAdjustedWithdrawalAmount = _tokensLent.sub(_protocolFee);\n\n        SavingsAccountUtil.transferTokens(_borrowAsset, _protocolFee, address(this), _collector);\n        SavingsAccountUtil.transferTokens(_borrowAsset, _feeAdjustedWithdrawalAmount, address(this), msg.sender);\n\n        emit AmountBorrowed(_feeAdjustedWithdrawalAmount, _protocolFee);\n    }\n\n    /**\n     * @notice internal function used to withdraw all collateral tokens from the pool (minus penalty)\n     * @param _receiver address which receives all the collateral tokens\n     * @param _penalty amount of penalty incurred by the borrower when pool is cancelled\n     */\n    function _withdrawAllCollateral(address _receiver, uint256 _penalty) internal {\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        address _collateralAsset = poolConstants.collateralAsset;\n        uint256 _collateralShares = 0;\n        if (poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty) {\n            _collateralShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares).sub(_penalty);\n        }\n        // uint256 _collateralTokens = _collateralShares;\n        uint256 _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares, _collateralAsset);\n\n        poolVariables.baseLiquidityShares = _penalty;\n        delete poolVariables.extraLiquidityShares;\n\n        uint256 _sharesReceived;\n        if (_collateralShares != 0) {\n            ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());\n            _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(\n                _savingsAccount,\n                address(this),\n                _receiver,\n                _collateralTokens,\n                _collateralAsset,\n                _poolSavingsStrategy\n            );\n        }\n        emit CollateralWithdrawn(_receiver, _sharesReceived);\n    }\n\n    /**\n     * @notice used by lender to supply liquidity to a borrow pool\n     * @param _lender address of the lender\n     * @param _amount amount of liquidity supplied by the _lender\n     * @param _strategy address of strategy from which tokens are lent if done from savings account, \n     *                  in case of direct deposits, zeroAddress should be used\n     */\n    function lend(\n        address _lender,\n        uint256 _amount,\n        address _strategy\n    ) external payable nonReentrant {\n        address _lenderVerifier = poolConstants.lenderVerifier;\n        address _borrower = poolConstants.borrower;\n        require(_lender != _borrower && _borrower != msg.sender, 'L1');\n        if (_lenderVerifier != address(0)) {\n            require(IVerification(IPoolFactory(poolFactory).userRegistry()).isUser(_lender, _lenderVerifier), 'L2');\n        }\n        require(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime, 'L3');\n        uint256 _borrowAmountNeeded = poolConstants.borrowAmountRequested;\n        uint256 _lentAmount = totalSupply();\n        if (_amount.add(_lentAmount) > _borrowAmountNeeded) {\n            _amount = _borrowAmountNeeded.sub(_lentAmount);\n        }\n\n        address _borrowToken = poolConstants.borrowAsset;\n        bool _fromSavingsAccount;\n        if(_strategy != address(0)) {\n            _fromSavingsAccount = true;\n        }\n        _deposit(\n            _fromSavingsAccount,\n            false,\n            _borrowToken,\n            _amount,\n            _strategy,\n            msg.sender,\n            address(this)\n        );\n        _mint(_lender, _amount);\n        emit LiquiditySupplied(_amount, _lender);\n    }\n\n    /**\n     * @notice used to transfer borrow pool tokens among lenders\n     * @param _from address of the lender who sends the borrow pool tokens\n     * @param _to addres of the lender who receives the borrow pool tokens\n     * @param _amount amount of borrow pool tokens transfered\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal override {\n        if (_to != address(0)) {\n            require(!paused(), 'TT1');\n        }\n        require(_to != poolConstants.borrower, 'TT2');\n\n        if (_from == address(0) || _to == address(0)) {\n            return;\n        }\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        address _lenderVerifier = poolConstants.lenderVerifier;\n        if (_lenderVerifier != address(0)) {\n            require(IVerification(_poolFactory.userRegistry()).isUser(_to, _lenderVerifier), 'TT5');\n        }\n        require(getMarginCallEndTime(_from) == 0, 'TT3');\n        require(getMarginCallEndTime(_to) == 0, 'TT4');\n\n        //Withdraw repayments for user\n\n        //We enforce pending interest withdrawals before the transfers\n        \n        //effectiveInterestWithdrawn stores the interest we assume addresses have withdrawn to simplify future interest withdrawals.\n        // For eg, if _from has 100 pool tokens, _to has 50 pool tokens, and _amount is 50, the effectiveInterestWithdrawn for \n        // _from is done using 50 pool tokens, since future interest repayment withdrawals are done with respect to 50 tokens for _from\n        // Similarly, we use 100 for _to's effectiveInterestWithdrawn calculation since their future interest withdrawals are calculated\n        // based on 100 pool tokens. Refer calculateRepaymentWithdrawable()\n        _withdrawRepayment(_from);\n        _withdrawRepayment(_to);\n        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));\n        uint256 _totalSupply = totalSupply();\n        uint256 _fromBalance = balanceOf(_from);\n        uint256 _toBalance = balanceOf(_to);\n        lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply);\n        lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply);\n\n        IExtension(_poolFactory.extension()).removeVotes(_from, _to, _amount);\n\n        //transfer extra liquidity shares\n        uint256 _liquidityShare = lenders[_from].extraLiquidityShares;\n        if (_liquidityShare == 0) return;\n\n        uint256 toTransfer = _liquidityShare;\n        if (_amount != _fromBalance) {\n            toTransfer = (_amount.mul(_liquidityShare)).div(_fromBalance);\n        }\n\n        lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer);\n        lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer);\n    }\n\n    function _calculatePenaltyTime(uint256 _loanStartTime, uint256 _loanWithdrawalDeadline) internal view returns (uint256) {\n        uint256 _penaltyTime = poolConstants.repaymentInterval;\n        if (block.timestamp > _loanStartTime) {\n            uint256 _penaltyEndTime = block.timestamp;\n            if (block.timestamp > _loanWithdrawalDeadline) {\n                _penaltyEndTime = _loanWithdrawalDeadline;\n            }\n            _penaltyTime = _penaltyTime.add(_penaltyEndTime.sub(_loanStartTime));\n        }\n        return _penaltyTime;\n    }\n\n    /**\n     * @notice used to cancel pool when the minimum borrow amount is not met\n     */\n    function cancelPool() external {\n        LoanStatus _poolStatus = poolVariables.loanStatus;\n        require(_poolStatus == LoanStatus.COLLECTION, 'CP1');\n        uint256 _loanStartTime = poolConstants.loanStartTime;\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n\n        if (\n            _loanStartTime < block.timestamp &&\n            totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30)\n        ) {\n            return _cancelPool(0);\n        }\n\n        uint256 _loanWithdrawalDeadline = poolConstants.loanWithdrawalDeadline;\n\n        if (_loanWithdrawalDeadline > block.timestamp) {\n            require(msg.sender == poolConstants.borrower, 'CP2');\n        }\n        // note: extra liquidity shares are not applicable as the loan never reaches active state\n        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares;\n        uint256 _penaltyTime = _calculatePenaltyTime(_loanStartTime, _loanWithdrawalDeadline);\n        uint256 _cancelPenaltyMultiple = _poolFactory.poolCancelPenaltyMultiple();\n        uint256 penalty = _cancelPenaltyMultiple\n            .mul(poolConstants.borrowRate)\n            .div(10**30)\n            .mul(_collateralLiquidityShare)\n            .div(10**30)\n            .mul(_penaltyTime)\n            .div(365 days);\n        _cancelPool(penalty);\n    }\n\n    /**\n     * @notice internal function to cancel borrow pool\n     * @param _penalty amount to be paid as penalty to cancel pool\n     */\n    function _cancelPool(uint256 _penalty) internal {\n        poolVariables.loanStatus = LoanStatus.CANCELLED;\n        _withdrawAllCollateral(poolConstants.borrower, _penalty);\n        _pause();\n        emit PoolCancelled();\n    }\n\n    /**\n     * @notice used to liquidate the penalty amount when pool is calcelled\n     * @dev _receiveLiquidityShares doesn't matter when _toSavingsAccount is true\n     * @param _toSavingsAccount if true, liquidity transfered to lender's savings account. If false, liquidity transfered to lender's wallet\n     * @param _receiveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidateCancelPenalty(bool _toSavingsAccount, bool _receiveLiquidityShare) external nonReentrant {\n        require(poolVariables.loanStatus == LoanStatus.CANCELLED, 'LCP1');\n        require(poolVariables.penaltyLiquidityAmount == 0, 'LCP2');\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        address _collateralAsset = poolConstants.collateralAsset;\n        // note: extra liquidity shares are not applicable as the loan never reaches active state\n        uint256 _collateralTokens = poolVariables.baseLiquidityShares;\n        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens, _collateralAsset);\n\n        uint256 _liquidationTokens = correspondingBorrowTokens(\n            _collateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n        poolVariables.penaltyLiquidityAmount = _liquidationTokens;\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _liquidationTokens, msg.sender, address(this));\n        _withdraw(\n            _toSavingsAccount,\n            _receiveLiquidityShare,\n            poolConstants.collateralAsset,\n            poolConstants.poolSavingsStrategy,\n            _collateralTokens\n        );\n    }\n\n    /**\n     * @notice used to terminate the pool\n     * @dev kill switch for owner to terminate the pool\n     */\n    function terminatePool() external onlyOwner {\n        _withdrawAllCollateral(msg.sender, 0);\n        _pause();\n        poolVariables.loanStatus = LoanStatus.TERMINATED;\n        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();\n        emit PoolTerminated();\n    }\n\n    /**\n     * @notice called to close the loan after repayment of principal\n     */\n    function closeLoan() external payable override nonReentrant onlyRepaymentImpl {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'CL1');\n\n        poolVariables.loanStatus = LoanStatus.CLOSED;\n\n        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();\n        _withdrawAllCollateral(poolConstants.borrower, 0);\n        _pause();\n\n        emit PoolClosed();\n    }\n\n    /**\n     * @notice used to return total remaining repayments along with provided liquidity to the lender\n     * @dev burns all shares and returns total remaining repayments along with provided liquidity\n     */\n    function withdrawLiquidity() external isLender(msg.sender) nonReentrant {\n        LoanStatus _loanStatus = poolVariables.loanStatus;\n\n        require(\n            _loanStatus == LoanStatus.CLOSED ||\n                _loanStatus == LoanStatus.CANCELLED ||\n                _loanStatus == LoanStatus.DEFAULTED ||\n                _loanStatus == LoanStatus.TERMINATED,\n            'WL1'\n        );\n\n        //gets amount through liquidity shares\n        uint256 _actualBalance = balanceOf(msg.sender);\n        uint256 _toTransfer = _actualBalance;\n\n        if (_loanStatus == LoanStatus.DEFAULTED || _loanStatus == LoanStatus.TERMINATED) {\n            uint256 _totalAsset;\n            if (poolConstants.borrowAsset != address(0)) {\n                _totalAsset = IERC20(poolConstants.borrowAsset).balanceOf(address(this));\n            } else {\n                _totalAsset = address(this).balance;\n            }\n            //assuming their will be no tokens in pool in any case except liquidation (to be checked) or we should store the amount in liquidate()\n            _toTransfer = _toTransfer.mul(_totalAsset).div(totalSupply());\n        }\n\n        if (_loanStatus == LoanStatus.CANCELLED) {\n            _toTransfer = _toTransfer.add(_toTransfer.mul(poolVariables.penaltyLiquidityAmount).div(totalSupply()));\n        }\n\n        if (_loanStatus == LoanStatus.CLOSED) {\n            //transfer repayment\n            _withdrawRepayment(msg.sender);\n        }\n        //to add transfer if not included in above (can be transferred with liquidity)\n        _burn(msg.sender, _actualBalance);\n\n        //transfer liquidity provided\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _toTransfer, address(this), msg.sender);\n\n        emit LiquidityWithdrawn(_toTransfer, msg.sender);\n    }\n\n    /**\n     * @notice function is executed by lender to exercise margin call\n     * @dev It will revert in case collateral ratio is not below expected value\n     * or the lender has already called it.\n     */\n\n    function requestMarginCall() external isLender(msg.sender) {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'RMC1');\n\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(getMarginCallEndTime(msg.sender) == 0, 'RMC2');\n        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender), 'RMC3');\n\n        lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration());\n\n        emit MarginCalled(msg.sender);\n    }\n\n    /**\n     * @notice used to get the interest accrued till current time in the current loan duration\n     * @return ineterest accrued till current time\n     */\n    function interestToPay() public view returns (uint256) {\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        (uint256 _loanDurationCovered, uint256 _interestPerSecond) = IRepayment(_poolFactory.repaymentImpl()).getInterestCalculationVars(\n            address(this)\n        );\n        uint256 _currentBlockTime = block.timestamp.mul(10**30);\n        uint256 _loanDurationTillNow = _currentBlockTime.sub(poolConstants.loanStartTime.mul(10**30));\n        if (_loanDurationTillNow <= _loanDurationCovered) {\n            return 0;\n        }\n        uint256 _interestAccrued = _interestPerSecond.mul(_loanDurationTillNow.sub(_loanDurationCovered)).div(10**60);\n\n        return _interestAccrued;\n    }\n\n    /**\n     * @notice used to calculate the collateral ratio\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @param _balance the principal amount lent\n     * @param _liquidityShares amount of collateral tokens available\n     * @return _ratio the collateral ratio\n     */\n    function calculateCollateralRatio(uint256 _balance, uint256 _liquidityShares) public returns (uint256 _ratio) {\n        uint256 _interest = interestToPay().mul(_balance).div(totalSupply());\n        address _collateralAsset = poolConstants.collateralAsset;\n        address _strategy = poolConstants.poolSavingsStrategy;\n        uint256 _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);\n\n        uint256 _equivalentCollateral = getEquivalentTokens(_collateralAsset, poolConstants.borrowAsset, _currentCollateralTokens);\n        _ratio = _equivalentCollateral.mul(10**30).div(_balance.add(_interest));\n    }\n\n    /**\n     * @notice used to get the current collateral ratio of the borrow pool\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @return _ratio the current collateral ratio of the borrow pool\n     */\n    function getCurrentCollateralRatio() public returns (uint256 _ratio) {\n        uint256 _liquidityShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);\n\n        _ratio = calculateCollateralRatio(totalSupply(), _liquidityShares);\n    }\n\n    /**\n     * @notice used to get the current collateral ratio of a lender\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @return _ratio the current collateral ratio of the lender\n     */\n    function getCurrentCollateralRatio(address _lender) public returns (uint256 _ratio) {\n        uint256 _balanceOfLender = balanceOf(_lender);\n        uint256 _liquidityShares = (poolVariables.baseLiquidityShares.mul(_balanceOfLender).div(totalSupply())).add(\n            lenders[_lender].extraLiquidityShares\n        );\n\n        return (calculateCollateralRatio(_balanceOfLender, _liquidityShares));\n    }\n\n    /**\n     * @notice used to liquidate the pool if the borrower has defaulted\n     * @param _fromSavingsAccount if true, collateral is transferred from sender's savings account, if false, it is transferred from sender's wallet\n     * @param _toSavingsAccount if true, liquidity transfered to sender's savings account. If false, liquidity transfered to sender's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidatePool(\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare\n    ) external payable nonReentrant {\n        LoanStatus _currentPoolStatus = poolVariables.loanStatus;\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(_currentPoolStatus == LoanStatus.ACTIVE, 'LP1');\n        require(IRepayment(_poolFactory.repaymentImpl()).didBorrowerDefault(address(this)), 'LP2');\n        poolVariables.loanStatus = LoanStatus.DEFAULTED;\n\n        address _collateralAsset = poolConstants.collateralAsset;\n        address _borrowAsset = poolConstants.borrowAsset;\n        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n\n        uint256 _collateralTokens = _collateralLiquidityShare;\n        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare, _collateralAsset);\n\n        uint256 _poolBorrowTokens = correspondingBorrowTokens(\n            _collateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n        delete poolVariables.extraLiquidityShares;\n        delete poolVariables.baseLiquidityShares;\n\n        _deposit(_fromSavingsAccount, false, _borrowAsset, _poolBorrowTokens, _poolFactory.noStrategyAddress(), msg.sender, address(this));\n        _withdraw(_toSavingsAccount, _recieveLiquidityShare, _collateralAsset, _poolSavingsStrategy, _collateralTokens);\n        emit PoolLiquidated(msg.sender);\n    }\n\n    /**\n     * @notice internal function used to withdraw tokens\n     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     * @param _asset address of the asset to be withdrawn\n     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit\n     * @param _amountInTokens amount of tokens to be withdrawn from the pool\n     * @return amount of equivalent shares from given asset\n     */\n    function _withdraw(\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare,\n        address _asset,\n        address _poolSavingsStrategy,\n        uint256 _amountInTokens\n    ) internal returns (uint256) {\n        ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());\n        return\n            SavingsAccountUtil.depositFromSavingsAccount(\n                _savingsAccount,\n                address(this),\n                msg.sender,\n                _amountInTokens,\n                _asset,\n                _poolSavingsStrategy,\n                _recieveLiquidityShare,\n                _toSavingsAccount\n            );\n    }\n\n    /**\n     * @notice used to ensure if a lender can be liquidated\n     * @param _lender address of the lender to be liquidated\n     */\n    function _canLenderBeLiquidated(address _lender) internal {\n        require((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline), 'CLBL1');\n        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;\n        require(getMarginCallEndTime(_lender) != 0, 'CLBL2');\n        require(_marginCallEndTime < block.timestamp, 'CLBL3');\n\n        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender), 'CLBL4');\n        require(balanceOf(_lender) != 0, 'CLBL5');\n    }\n\n    /**\n     * @notice used to add extra liquidity shares to lender's share\n     * @param _lender address of the lender to be liquidated\n     * @return _lenderCollateralLPShare share of the lender in collateral tokens\n     * @return _lenderBalance balance of lender in pool tokens\n     */\n    function _updateLenderSharesDuringLiquidation(address _lender)\n        internal\n        returns (uint256 _lenderCollateralLPShare, uint256 _lenderBalance)\n    {\n        uint256 _poolBaseLPShares = poolVariables.baseLiquidityShares;\n        _lenderBalance = balanceOf(_lender);\n\n        uint256 _lenderBaseLPShares = (_poolBaseLPShares.mul(_lenderBalance)).div(totalSupply());\n        uint256 _lenderExtraLPShares = lenders[_lender].extraLiquidityShares;\n        poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares);\n        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares);\n\n        _lenderCollateralLPShare = _lenderBaseLPShares.add(_lenderExtraLPShares);\n    }\n\n    /**\n     * @notice internal function to liquidate lender of the borrow pool\n     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet\n     * @param _lender address of the lender to be liquidated\n     * @param _lenderCollateralTokens share of the lender in collateral tokens\n     */\n    function _liquidateForLender(\n        bool _fromSavingsAccount,\n        address _lender,\n        uint256 _lenderCollateralTokens\n    ) internal {\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        uint256 _lenderLiquidationTokens = correspondingBorrowTokens(\n            _lenderCollateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n\n        address _borrowAsset = poolConstants.borrowAsset;\n        _deposit(_fromSavingsAccount, false, _borrowAsset, _lenderLiquidationTokens, _poolSavingsStrategy, msg.sender, _lender);\n        _withdrawRepayment(_lender);\n    }\n\n    /**\n     * @notice used to liquidate lender and burn lender's shares\n     * @param _lender address of the lender to be liquidated\n     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet\n     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidateForLender(\n        address _lender,\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare\n    ) external payable nonReentrant {\n        _canLenderBeLiquidated(_lender);\n\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        (uint256 _lenderCollateralLPShare, uint256 _lenderBalance) = _updateLenderSharesDuringLiquidation(_lender);\n\n        uint256 _lenderCollateralTokens = _lenderCollateralLPShare;\n        _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare, poolConstants.collateralAsset);\n\n        _liquidateForLender(_fromSavingsAccount, _lender, _lenderCollateralTokens);\n\n        uint256 _amountReceived = _withdraw(\n            _toSavingsAccount,\n            _recieveLiquidityShare,\n            poolConstants.collateralAsset,\n            _poolSavingsStrategy,\n            _lenderCollateralTokens\n        );\n        _burn(_lender, _lenderBalance);\n        delete lenders[_lender];\n        emit LenderLiquidated(msg.sender, _lender, _amountReceived);\n    }\n\n    /**\n     * @notice used to get corresponding borrow tokens for given collateral tokens\n     * @param _totalCollateralTokens amount of collateral tokens\n     * @param _priceOracle address of the pool\n     * @param _fraction Incentivizing fraction for the liquidator\n     * @return corresponding borrow tokens for collateral tokens\n     */\n    function correspondingBorrowTokens(\n        uint256 _totalCollateralTokens,\n        address _priceOracle,\n        uint256 _fraction\n    ) public view returns (uint256) {\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(_priceOracle).getLatestPrice(\n            poolConstants.collateralAsset,\n            poolConstants.borrowAsset\n        );\n        return _totalCollateralTokens.mul(_ratioOfPrices).div(10**_decimals).mul(uint256(10**30).sub(_fraction)).div(10**30);\n    }\n\n    /**\n     * @notice used to get the interest per second on the principal amount\n     * @param _principal amount of principal lent\n     * @return interest accrued on the principal in a second\n     */\n    function interestPerSecond(uint256 _principal) public view returns (uint256) {\n        uint256 _interest = ((_principal).mul(poolConstants.borrowRate)).div(365 days);\n        return _interest;\n    }\n\n    /**\n     * @notice used to get the interest per period on the principal amount\n     * @param _balance amount of principal lent\n     * @return interest accrued on the principal in a period\n     */\n    function interestPerPeriod(uint256 _balance) external view returns (uint256) {\n        return (interestPerSecond(_balance).mul(poolConstants.repaymentInterval));\n    }\n\n    /**\n     * @notice used to get the current repayment period for the borrow pool\n     * @return current repayment period\n     */\n    function calculateCurrentPeriod() external view returns (uint256) {\n        uint256 _currentPeriod = (block.timestamp.sub(poolConstants.loanStartTime, '34')).div(poolConstants.repaymentInterval);\n        return _currentPeriod;\n    }\n\n    /**\n     * @notice internal function used to get the withdrawable amount for a _lender\n     * @param _lender address of the _lender\n     * @return amount of withdrawable token from the borrow pool\n     */\n    function calculateRepaymentWithdrawable(address _lender) public view returns (uint256) {\n        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));\n\n        uint256 _amountWithdrawable = (balanceOf(_lender).mul(_totalRepaidAmount).div(totalSupply())).sub(\n            lenders[_lender].effectiveInterestWithdrawn\n        );\n\n        return _amountWithdrawable;\n    }\n\n    /**\n     * @notice used to get the withdrawable amount of borrow token for a lender\n     */\n    function withdrawRepayment() external isLender(msg.sender) nonReentrant {\n        _withdrawRepayment(msg.sender);\n    }\n\n    /**\n     * @notice internal function used to withdraw borrow asset from the pool by _lender\n     * @param _lender address of the _lender\n     */\n    function _withdrawRepayment(address _lender) internal {\n        uint256 _amountToWithdraw = calculateRepaymentWithdrawable(_lender);\n\n        if (_amountToWithdraw == 0) {\n            return;\n        }\n        lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw);\n\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _amountToWithdraw, address(this), _lender);\n    }\n\n    /**\n     * @notice used to get the end time for a margin call\n     * @param _lender address of the lender who has requested a margin call\n     * @return the time at which the margin call ends\n     */\n    function getMarginCallEndTime(address _lender) public view override returns (uint256) {\n        uint256 _marginCallDuration = IPoolFactory(poolFactory).marginCallDuration();\n        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;\n\n        if (block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2))) {\n            _marginCallEndTime = 0;\n        }\n        return _marginCallEndTime;\n    }\n\n    /**\n     * @notice used to get the balance details of a _lender\n     * @param _lender address of the _lender\n     * @return amount of pool tokens available with the _lender\n     * @return amount of pool tokens available in the pool\n     */\n    function getBalanceDetails(address _lender) external view override returns (uint256, uint256) {\n        return (balanceOf(_lender), totalSupply());\n    }\n\n    /**\n     * @notice used to get the loan status of the borrow pool\n     * @return integer respresenting loan status\n     */\n    function getLoanStatus() external view override returns (uint256) {\n        return uint256(poolVariables.loanStatus);\n    }\n\n    /**\n     * @notice used to receive ethers from savings accounts\n     */\n    receive() external payable {}\n\n    /**\n     * @notice used to get the equivalent amount of tokens from source to target tokens\n     * @param _source address of the tokens to be converted\n     * @param _target address of target conversion token\n     * @param _amount amount of tokens to be converted\n     * @return the equivalent amount of target tokens for given source tokens\n     */\n    function getEquivalentTokens(\n        address _source,\n        address _target,\n        uint256 _amount\n    ) public view returns (uint256) {\n        (uint256 _price, uint256 _decimals) = IPriceOracle(IPoolFactory(poolFactory).priceOracle()).getLatestPrice(_source, _target);\n        return _amount.mul(_price).div(10**_decimals);\n    }\n\n    /**\n     * @notice used to get the address of the borrower of the pool\n     * @return address of the borrower\n     */\n    function borrower() external view override returns (address) {\n        return poolConstants.borrower;\n    }\n\n    /**\n     * @notice used to total supply of pool tokens for the pool\n     * @return total supply of pool tokens\n     */\n    function totalSupply() public view override(ERC20Upgradeable, IPool) returns (uint256) {\n        return ERC20Upgradeable.totalSupply();\n    }\n}\n\n\n",
        "CodeNames": [
            "SavingsAccountUtil.sol",
            "Pool.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Pool.sol:645, SavingsAccountUtil.sol",
                "Type": "denial of service",
                "Description": "If the borrow token is address(0) (ether), and someone calls withdrawLiquidity, it calls SavingsAccountUtil.transferTokens which will transfer to msg.sender, msg.value (of withdrawLiquidity, because it's an internal function). In other words, the liquidity provided will pay to themselves and their liquidity tokens will still be burned. therefore they will never be able to get their funds back.",
                "Repair": "Remove all msg.value from the transferTokens function and just transfer _amount regularly"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '../interfaces/ISavingsAccount.sol';\nimport '../interfaces/IStrategyRegistry.sol';\nimport '../interfaces/IYield.sol';\n\n/**\n * @title Savings account contract with Methods related to savings account\n * @notice Implements the functions related to savings account\n * @author Sublime\n **/\ncontract SavingsAccount is ISavingsAccount, Initializable, OwnableUpgradeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @notice address of the strategy registry used to whitelist strategies\n     */\n    address public strategyRegistry;\n\n    /**\n     * @notice address of the credit lines contract\n     */\n    address public creditLine;\n\n    /**\n     * @notice mapping from user to token to strategy to balance of shares\n     * @dev user -> token -> strategy (underlying address) -> amount (shares)\n     */\n    mapping(address => mapping(address => mapping(address => uint256))) public override balanceInShares;\n\n    /**\n     * @notice mapping from user to token to toAddress for approval to amount approved\n     * @dev user => token => to => amount\n     */\n    mapping(address => mapping(address => mapping(address => uint256))) public allowance;\n\n    /**\n     * @notice modifier to check if address is the credit line\n     * @param _caller address to check if credit line\n     */\n    modifier onlyCreditLine(address _caller) {\n        require(_caller == creditLine, 'Invalid caller');\n        _;\n    }\n\n    /**\n     * @dev initialize the contract\n     * @param _owner address of the owner of the savings account contract\n     * @param _strategyRegistry address of the strategy registry\n     * @param _creditLine address of the credit line contract\n     **/\n    function initialize(\n        address _owner,\n        address _strategyRegistry,\n        address _creditLine\n    ) external initializer {\n        __Ownable_init();\n        super.transferOwnership(_owner);\n\n        _updateCreditLine(_creditLine);\n        _updateStrategyRegistry(_strategyRegistry);\n    }\n\n    /**\n     * @notice used to update credit line contract address\n     * @dev only owner can update\n     * @param _creditLine updated address of credit lines\n     */\n    function updateCreditLine(address _creditLine) external onlyOwner {\n        _updateCreditLine(_creditLine);\n    }\n\n    function _updateCreditLine(address _creditLine) internal {\n        require(_creditLine != address(0), 'SavingsAccount::initialize zero address');\n        creditLine = _creditLine;\n        emit CreditLineUpdated(_creditLine);\n    }\n\n    /**\n     * @notice used to update strategy registry address\n     * @dev only owner can update\n     * @param _strategyRegistry updated address of strategy registry\n     */\n    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {\n        _updateStrategyRegistry(_strategyRegistry);\n    }\n\n    function _updateStrategyRegistry(address _strategyRegistry) internal {\n        require(_strategyRegistry != address(0), 'SavingsAccount::updateStrategyRegistry zero address');\n        strategyRegistry = _strategyRegistry;\n        emit StrategyRegistryUpdated(_strategyRegistry);\n    }\n\n    /**\n     * @notice used to deposit tokens into strategy via savings account\n     * @dev if token is address(0), then it is Ether\n     * @param _amount amount of tokens deposited\n     * @param _token address of token contract\n     * @param _strategy address of the strategy into which tokens are to be deposited\n     * @param _to address to deposit to\n     */\n    function deposit(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address _to\n    ) external payable override nonReentrant returns (uint256) {\n        require(_to != address(0), 'SavingsAccount::deposit receiver address should not be zero address');\n        uint256 _sharesReceived = _deposit(_amount, _token, _strategy);\n        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_sharesReceived);\n        emit Deposited(_to, _sharesReceived, _token, _strategy);\n        return _sharesReceived;\n    }\n\n    function _deposit(\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256 _sharesReceived) {\n        require(_amount != 0, 'SavingsAccount::_deposit Amount must be greater than zero');\n        _sharesReceived = _depositToYield(_amount, _token, _strategy);\n    }\n\n    function _depositToYield(\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256 _sharesReceived) {\n        require(IStrategyRegistry(strategyRegistry).registry(_strategy), 'SavingsAccount::deposit strategy do not exist');\n        uint256 _ethValue;\n\n        if (_token == address(0)) {\n            _ethValue = _amount;\n            require(msg.value == _amount, 'SavingsAccount::deposit ETH sent must be equal to amount');\n        }\n        _sharesReceived = IYield(_strategy).lockTokens{value: _ethValue}(msg.sender, _token, _amount);\n    }\n\n    /**\n     * @dev Used to switch saving strategy of an _token\n     * @param _currentStrategy initial strategy of token\n     * @param _newStrategy new strategy to invest\n     * @param _token address of the token\n     * @param _amount amount of tokens to be reinvested\n     */\n    function switchStrategy(\n        uint256 _amount,\n        address _token,\n        address _currentStrategy,\n        address _newStrategy\n    ) external override nonReentrant {\n        require(_currentStrategy != _newStrategy, 'SavingsAccount::switchStrategy Same strategy');\n        require(IStrategyRegistry(strategyRegistry).registry(_newStrategy), 'SavingsAccount::_newStrategy do not exist');\n        require(_amount != 0, 'SavingsAccount::switchStrategy Amount must be greater than zero');\n\n        _amount = IYield(_currentStrategy).getSharesForTokens(_amount, _token);\n\n        balanceInShares[msg.sender][_token][_currentStrategy] = balanceInShares[msg.sender][_token][_currentStrategy].sub(\n            _amount,\n            'SavingsAccount::switchStrategy Insufficient balance'\n        );\n\n        uint256 _tokensReceived = IYield(_currentStrategy).unlockTokens(_token, _amount);\n\n        uint256 _ethValue;\n        if (_token != address(0)) {\n            IERC20(_token).safeApprove(_newStrategy, _tokensReceived);\n        } else {\n            _ethValue = _tokensReceived;\n        }\n        _amount = _tokensReceived;\n        \n        uint256 _sharesReceived = IYield(_newStrategy).lockTokens{value: _ethValue}(address(this), _token, _tokensReceived);\n\n        balanceInShares[msg.sender][_token][_newStrategy] = balanceInShares[msg.sender][_token][_newStrategy].add(_sharesReceived);\n        emit StrategySwitched(msg.sender, _token, _amount, _sharesReceived, _currentStrategy, _newStrategy);\n    }\n\n    /**\n     * @dev Used to withdraw token from Saving Account\n     * @param _to address to which token should be sent\n     * @param _amount amount of tokens to withdraw\n     * @param _token address of the token to be withdrawn\n     * @param _strategy strategy from where token has to withdrawn(ex:- compound,Aave etc)\n     * @param _withdrawShares boolean indicating to withdraw in liquidity share or underlying token\n     */\n    function withdraw(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address payable _to,\n        bool _withdrawShares\n    ) external override nonReentrant returns (uint256) {\n        require(_amount != 0, 'SavingsAccount::withdraw Amount must be greater than zero');\n\n        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);\n\n        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(\n            _amount,\n            'SavingsAccount::withdraw Insufficient amount'\n        );\n\n        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);\n\n        emit Withdrawn(msg.sender, _to, _amount, _token, _strategy, _withdrawShares);\n        return _amountReceived;\n    }\n\n    /**\n     * @dev Used to withdraw token from allowance of Saving Account\n     * @param _from address from which tokens will be withdrawn\n     * @param _to address to which token should be withdrawn\n     * @param _amount amount of tokens to withdraw\n     * @param _token address of the token to be withdrawn\n     * @param _strategy strategy from where token has to withdrawn(ex:- compound,Aave etc)\n     * @param _withdrawShares boolean indicating to withdraw in liquidity share or underlying token\n     */\n\n    function withdrawFrom(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address _from,\n        address payable _to,\n        bool _withdrawShares\n    ) external override nonReentrant returns (uint256) {\n        require(_amount != 0, 'SavingsAccount::withdrawFrom Amount must be greater than zero');\n\n        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(\n            _amount,\n            'SavingsAccount::withdrawFrom allowance limit exceeding'\n        );\n\n        _amount = IYield(_strategy).getSharesForTokens(_amount, _token);\n\n        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(\n            _amount,\n            'SavingsAccount::withdrawFrom insufficient balance'\n        );\n        (address _receivedToken, uint256 _amountReceived) = _withdraw(_amount, _token, _strategy, _to, _withdrawShares);\n        emit Withdrawn(_from, msg.sender, _amount, _token, _strategy, _withdrawShares);\n        return _amountReceived;\n    }\n\n    function _withdraw(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address payable _to,\n        bool _withdrawShares\n    ) internal returns (address _tokenReceived, uint256 _amountReceived) {\n        if (_withdrawShares) {\n            _tokenReceived = IYield(_strategy).liquidityToken(_token);\n            require(_tokenReceived != address(0), 'Liquidity Tokens address cannot be address(0)');\n            _amountReceived = IYield(_strategy).unlockShares(_tokenReceived, _amount);\n        } else {\n            _tokenReceived = _token;\n            _amountReceived = IYield(_strategy).unlockTokens(_token, _amount);\n        }\n        _transfer(_amountReceived, _tokenReceived, _to);\n    }\n\n    function _transfer(\n        uint256 _amount,\n        address _token,\n        address payable _to\n    ) internal {\n        if (_token == address(0)) {\n            (bool _success, ) = _to.call{value: _amount}('');\n            require(_success, 'Transfer failed');\n        } else {\n            IERC20(_token).safeTransfer(_to, _amount);\n        }\n    }\n\n    /**\n     * @notice used to withdraw a token from all strategies\n     * @param _token address of token which is to be withdrawn\n     */\n    function withdrawAll(address _token) external override nonReentrant returns (uint256 _tokenReceived) {\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n\n        for (uint256 i = 0; i < _strategyList.length; i++) {\n            if (balanceInShares[msg.sender][_token][_strategyList[i]] != 0 && _strategyList[i] != address(0)) {\n                uint256 _amount = balanceInShares[msg.sender][_token][_strategyList[i]];\n                _amount = IYield(_strategyList[i]).unlockTokens(_token, balanceInShares[msg.sender][_token][_strategyList[i]]);\n                _tokenReceived = _tokenReceived.add(_amount);\n                delete balanceInShares[msg.sender][_token][_strategyList[i]];\n            }\n        }\n\n        if (_tokenReceived == 0) return 0;\n\n        _transfer(_tokenReceived, _token, payable(msg.sender));\n\n        emit WithdrawnAll(msg.sender, _tokenReceived, _token);\n    }\n\n    function withdrawAll(address _token, address _strategy) external override nonReentrant returns (uint256 _tokenReceived) {\n        uint256 _sharesBalance = balanceInShares[msg.sender][_token][_strategy];\n\n        if(_sharesBalance == 0) return 0;\n\n        uint256 _amount = IYield(_strategy).unlockTokens(_token, _sharesBalance);\n\n        delete balanceInShares[msg.sender][_token][_strategy];\n\n        _transfer(_amount, _token, payable(msg.sender));\n\n        emit Withdrawn(msg.sender, msg.sender, _amount, _token, _strategy, false);\n    }\n\n    /**\n     * @notice used to approve allowance to an address\n     * @dev this is prone to race condition, hence increaseAllowance is recommended\n     * @param _amount amount of tokens approved\n     * @param _token address of token approved\n     * @param _to address of the user approved to\n     */\n    function approve(\n        uint256 _amount,\n        address _token,\n        address _to\n    ) external override {\n        allowance[msg.sender][_token][_to] = _amount;\n\n        emit Approved(_token, msg.sender, _to, _amount);\n    }\n\n    /**\n     * @notice used to increase allowance to an address\n     * @param _amount amount of tokens allowance is increased by\n     * @param _token address of token approved\n     * @param _to address of the address approved to\n     */\n    function increaseAllowance(\n        uint256 _amount,\n        address _token,\n        address _to\n    ) external override {\n        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].add(_amount);\n        allowance[msg.sender][_token][_to] = _updatedAllowance;\n\n        emit Approved(_token, msg.sender, _to, _updatedAllowance);\n    }\n\n    /**\n     * @notice used to decrease allowance to an address\n     * @param _amount amount of tokens allowance is decreased by\n     * @param _token address of token approved\n     * @param _to address of the user approved to\n     */\n    function decreaseAllowance(\n        uint256 _amount,\n        address _token,\n        address _to\n    ) external override {\n        uint256 _updatedAllowance = allowance[msg.sender][_token][_to].sub(_amount);\n        allowance[msg.sender][_token][_to] = _updatedAllowance;\n\n        emit Approved(_token, msg.sender, _to, _updatedAllowance);\n    }\n\n    /**\n     * @notice used by credit lines to replenish the allowance once the credit line pricinpal is repaid\n     * @param _amount amount of tokens allowance is increased by\n     * @param _token address of token approved\n     * @param _from address of the lender of the credit line which is being replenished\n     */\n    function increaseAllowanceToCreditLine(\n        uint256 _amount,\n        address _token,\n        address _from\n    ) external override onlyCreditLine(msg.sender) {\n        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].add(_amount);\n\n        emit CreditLineAllowanceRefreshed(_token, _from, msg.sender, _amount);\n    }\n\n    /**\n     * @notice used to transfer tokens\n     * @param _amount amount of tokens transferred\n     * @param _token address of token transferred\n     * @param _strategy address of the strategy from which tokens are transferred\n     * @param _to address of the user tokens are transferred to\n     */\n    function transfer(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address _to\n    ) external override returns (uint256) {\n        require(_amount != 0, 'SavingsAccount::transfer zero amount');\n\n        if (_strategy != address(0)) {\n            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);\n        }\n\n        balanceInShares[msg.sender][_token][_strategy] = balanceInShares[msg.sender][_token][_strategy].sub(\n            _amount,\n            'SavingsAccount::transfer insufficient funds'\n        );\n\n        //update receiver's balance\n        balanceInShares[_to][_token][_strategy] = balanceInShares[_to][_token][_strategy].add(_amount);\n\n        emit Transfer(_token, _strategy, msg.sender, _to, _amount);\n\n        return _amount;\n    }\n\n    /**\n     * @notice used to transfer tokens from allowance by another address\n     * @param _amount amount of tokens transferred\n     * @param _token address of token transferred\n     * @param _strategy address of the strategy from which tokens are transferred\n     * @param _from address from whose allowance tokens are transferred\n     * @param _to address of the user tokens are transferred to\n     */\n    function transferFrom(\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        address _from,\n        address _to\n    ) external override returns (uint256) {\n        require(_amount != 0, 'SavingsAccount::transferFrom zero amount');\n        //update allowance\n        allowance[_from][_token][msg.sender] = allowance[_from][_token][msg.sender].sub(\n            _amount,\n            'SavingsAccount::transferFrom allowance limit exceeding'\n        );\n\n        if (_strategy != address(0)) {\n            _amount = IYield(_strategy).getSharesForTokens(_amount, _token);\n        }\n\n        //reduce sender's balance\n        balanceInShares[_from][_token][_strategy] = balanceInShares[_from][_token][_strategy].sub(\n            _amount,\n            'SavingsAccount::transferFrom insufficient allowance'\n        );\n\n        //update receiver's balance\n        balanceInShares[_to][_token][_strategy] = (balanceInShares[_to][_token][_strategy]).add(_amount);\n\n        emit Transfer(_token, _strategy, _from, _to, _amount);\n\n        return _amount;\n    }\n\n    /**\n     * @notice used to query total tokens of a token with a user\n     * @param _user address of the user\n     * @param _token address of token\n     * @return _totalTokens total number of tokens of the token with the user\n     */\n    function getTotalTokens(address _user, address _token) external override returns (uint256 _totalTokens) {\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n\n        for (uint256 i = 0; i < _strategyList.length; i++) {\n            uint256 _liquidityShares = balanceInShares[_user][_token][_strategyList[i]];\n\n            if (_liquidityShares != 0) {\n                uint256 _tokenInStrategy = _liquidityShares;\n                if (_strategyList[i] != address(0)) {\n                    _tokenInStrategy = IYield(_strategyList[i]).getTokensForShares(_liquidityShares, _token);\n                }\n\n                _totalTokens = _totalTokens.add(_tokenInStrategy);\n            }\n        }\n    }\n\n    receive() external payable {}\n}\n\n\n",
        "CodeNames": [
            "SavingsAccount.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "SavingsAccount.sol:160, SavingsAccount.sol:162, SavingsAccount.sol:164-L167, SavingsAccount.sol:169, SavingsAccount.sol:171-L177, SavingsAccount.sol:179-L181",
                "Type": "possibility to drain contract assets",
                "Description": "A malicious actor can manipulate switchStrategy() function in a way to withdraw tokens that are locked in SavingsAccount contract.",
                "Repair": "Add a check for _currentStrategy to be from strategy list and implement getSharesForTokens() to always return 0"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../interfaces/IYield.sol';\nimport '../interfaces/Invest/IWETHGateway.sol';\nimport '../interfaces/Invest/AaveLendingPool.sol';\nimport '../interfaces/Invest/IScaledBalanceToken.sol';\nimport '../interfaces/Invest/IProtocolDataProvider.sol';\n\n/**\n * @title Yield contract\n * @notice Implements the functions to lock/unlock tokens into Aave protocol\n * @author Sublime\n **/\ncontract AaveYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @notice address of wethGateway used to deposit ETH to aave\n     */\n    address public wethGateway;\n\n    /**\n     * @notice address of protocolDataProvider which provides info about aTokens related to any token\n     */\n    address public protocolDataProvider;\n\n    /**\n     * @notice address of lendingPoolAddressesProvider used to get the pool related to any token\n     */\n    address public lendingPoolAddressesProvider;\n\n    /**\n     * @notice address of savings account contract\n     */\n    address payable public savingsAccount;\n\n    /**\n     * @notice aave referral code to represent sublime\n     */\n    uint16 public referralCode;\n\n    /**\n     * @notice emitted when aave protocol related addresses are updated\n     * @param wethGateway address of wethGateway\n     * @param protocolDataProvider address of protocol data provider\n     * @param lendingPoolAddressesProvider address of lending pool addresses provider\n     */\n    event AaveAddressesUpdated(\n        address indexed wethGateway,\n        address indexed protocolDataProvider,\n        address indexed lendingPoolAddressesProvider\n    );\n\n    /**\n     * @notice emitted when aave referral code is updated\n     * @param referralCode updated referral code\n     */\n    event ReferralCodeUpdated(uint16 referralCode);\n\n    /**\n     * @notice verifies if savings account invoked the contract\n     */\n    modifier onlySavingsAccount() {\n        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');\n        _;\n    }\n\n    /**\n     * @notice To initialize the contract addresses interacting with this contract\n     * @dev can only be initialized once\n     * @param _owner address of owner\n     * @param _savingsAccount address of the savings account contract\n     * @param _wethGateway address of wethGateway\n     * @param _protocolDataProvider the address of ProtocolDataProvider\n     * @param _lendingPoolAddressesProvider the address of LendingPoolAddressesProvider\n     **/\n    function initialize(\n        address _owner,\n        address payable _savingsAccount,\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) external initializer {\n        __Ownable_init();\n        super.transferOwnership(_owner);\n\n        _updateSavingsAccount(_savingsAccount);\n        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    /**\n     * @notice Used to get liquidity token address from asset address\n     * @param asset the address of underlying token\n     * @return aToken address of liquidity token\n     **/\n    function liquidityToken(address asset) public view override returns (address aToken) {\n        if (asset == address(0)) {\n            aToken = IWETHGateway(wethGateway).getAWETHAddress();\n        } else {\n            (aToken, , ) = IProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(asset);\n        }\n    }\n\n    /**\n     * @notice used to update savings account address\n     * @dev only owner can update\n     * @param _savingsAccount address of the updated savings account\n     */\n    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address payable _savingsAccount) internal {\n        require(_savingsAccount != address(0), 'Invest: zero address');\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update aave protocol related addresses\n     * @dev only owner can update\n     * @param _wethGateway address of wethGateway\n     * @param _protocolDataProvider address of protocol data provider\n     * @param _lendingPoolAddressesProvider address of lending pool addresses provider\n     */\n    function updateAaveAddresses(\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) external onlyOwner {\n        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    function _updateAaveAddresses(\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) internal {\n        require(_wethGateway != address(0), 'Invest: WETHGateway:: zero address');\n        require(_protocolDataProvider != address(0), 'Invest: protocolDataProvider:: zero address');\n        require(_lendingPoolAddressesProvider != address(0), 'Invest: lendingPoolAddressesProvider:: zero address');\n        wethGateway = _wethGateway;\n        protocolDataProvider = _protocolDataProvider;\n        lendingPoolAddressesProvider = _lendingPoolAddressesProvider;\n        emit AaveAddressesUpdated(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    /**\n     * @notice used to update referral code\n     * @dev only owner can update\n     * @param _referralCode updated referral code\n     */\n    function updateReferralCode(uint16 _referralCode) external onlyOwner {\n        referralCode = _referralCode;\n        emit ReferralCodeUpdated(_referralCode);\n    }\n\n    /**\n     * @notice used to withdraw all tokens of a type in case of emergencies\n     * @dev only owner can withdraw\n     * @param _asset address of the token being withdrawn\n     * @param _wallet address to which tokens are withdrawn\n     */\n    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n        require(_wallet != address(0), 'cant burn');\n        uint256 amount = IERC20(liquidityToken(_asset)).balanceOf(address(this));\n\n        if (_asset == address(0)) {\n            received = _withdrawETH(amount);\n            (bool success, ) = _wallet.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(_asset, amount);\n            IERC20(_asset).safeTransfer(_wallet, received);\n        }\n    }\n\n    /**\n     * @notice Used to lock tokens in protocol\n     * @dev Asset Tokens to be locked must be approved to this contract by user\n     * @param asset the address of token to invest\n     * @param amount the amount of asset\n     * @return sharesReceived amount of shares received\n     **/\n    function lockTokens(\n        address user,\n        address asset,\n        uint256 amount\n    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n        require(amount != 0, 'Invest: amount');\n\n        address investedTo;\n        if (asset == address(0)) {\n            require(msg.value == amount, 'Invest: ETH amount');\n            (investedTo, sharesReceived) = _depositETH(amount);\n        } else {\n            IERC20(asset).safeTransferFrom(user, address(this), amount);\n            (investedTo, sharesReceived) = _depositERC20(asset, amount);\n        }\n\n        emit LockedTokens(user, investedTo, sharesReceived);\n    }\n\n    /**\n     * @notice Used to unlock tokens from available protocol\n     * @param asset the address of underlying token\n     * @param amount the amount of asset\n     * @return received amount of tokens received\n     **/\n    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {\n        require(amount != 0, 'Invest: amount');\n\n        if (asset == address(0)) {\n            received = _withdrawETH(amount);\n            (bool success, ) = savingsAccount.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(asset, amount);\n            IERC20(asset).safeTransfer(savingsAccount, received);\n        }\n\n        emit UnlockedTokens(asset, received);\n    }\n\n    /**\n     * @notice Used to unlock shares\n     * @param asset the address of underlying token\n     * @param amount the amount of shares to unlock\n     * @return received amount of shares received\n     **/\n    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        require(asset != address(0), 'Asset address cannot be address(0)');\n        IERC20(asset).safeTransfer(savingsAccount, amount);\n\n        emit UnlockedShares(asset, amount);\n        return amount;\n    }\n\n    /**\n     * @notice Used to get amount of underlying tokens for current number of shares\n     * @param shares the amount of shares\n     * @param asset the address of token locked\n     * @return amount amount of underlying tokens\n     **/\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n        if (shares == 0) return 0;\n        address aToken = liquidityToken(asset);\n\n        (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);\n\n        amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(\n            IERC20(aToken).balanceOf(address(this))\n        );\n    }\n\n    /**\n     * @notice Used to get number of shares from an amount of underlying tokens\n     * @param amount the amount of tokens\n     * @param asset the address of token\n     * @return shares amount of shares for given tokens\n     **/\n    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {\n        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));\n    }\n\n    function _depositETH(uint256 amount) internal returns (address aToken, uint256 sharesReceived) {\n        aToken = IWETHGateway(wethGateway).getAWETHAddress();\n\n        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        //lock collateral\n        IWETHGateway(wethGateway).depositETH{value: amount}(lendingPool, address(this), referralCode);\n\n        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);\n    }\n\n    function _depositERC20(address asset, uint256 amount) internal returns (address aToken, uint256 sharesReceived) {\n        aToken = liquidityToken(asset);\n        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        //approve collateral to vault\n        IERC20(asset).approve(lendingPool, 0);\n        IERC20(asset).approve(lendingPool, amount);\n\n        //lock collateral in vault\n        AaveLendingPool(lendingPool).deposit(asset, amount, address(this), referralCode);\n\n        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);\n    }\n\n    function _withdrawETH(uint256 amount) internal returns (uint256 received) {\n        IERC20(IWETHGateway(wethGateway).getAWETHAddress()).approve(wethGateway, amount);\n\n        uint256 ethBalance = address(this).balance;\n\n        //lock collateral\n        IWETHGateway(wethGateway).withdrawETH(amount, address(this));\n\n        received = address(this).balance.sub(ethBalance);\n    }\n\n    function _withdrawERC(address asset, uint256 amount) internal returns (uint256 tokensReceived) {\n        address aToken = liquidityToken(asset);\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        uint256 tokensBefore = IERC20(asset).balanceOf(address(this));\n\n        IERC20(aToken).approve(lendingPool, amount);\n\n        //withdraw collateral from vault\n        AaveLendingPool(lendingPool).withdraw(asset, amount, address(this));\n\n        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(tokensBefore);\n    }\n\n    receive() external payable {}\n}\n\n\n",
        "CodeNames": [
            "AaveYield.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "AaveYield.sol: liquidityToken, _withdrawETH, _depositETH",
                "Type": "misspelled external function name",
                "Description": "In AaveYield.sol the functions liquidityToken, _withdrawETH, _depositETH make a conditional call to IWETHGateway(wethGateway).getAWETHAddress(). This function does not exist in the wethGateway contract, causing these function to fail with the error 'Fallback not allowed'.",
                "Repair": "Modify IWETHGateway(wethGateway).getAWETHAddress() to IWETHGateway(wethGateway).getWETHAddress()"
            },
            {
                "Location": "AaveYield.lockTokens()",
                "Type": "Rebasing issue",
                "Description": "Aave's share tokens are rebasing, breaking current strategy code and leading to loss of interest for users.",
                "Repair": "Create a non-rebasing wrapper LP token"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '../Proxy.sol';\nimport '../interfaces/IPoolFactory.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IVerification.sol';\nimport '../interfaces/IStrategyRegistry.sol';\nimport '../interfaces/IRepayment.sol';\nimport '../interfaces/IPriceOracle.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\n\n/**\n * @title Pool Factory contract with methods for handling different pools\n * @notice Implements the functions related to Pool (CRUD)\n * @author Sublime\n */\ncontract PoolFactory is Initializable, OwnableUpgradeable, IPoolFactory {\n    /*\n     * @notice Used to define limits for the Pool parameters\n     * @param min the minimum threshold for the parameter\n     * @param max the maximum threshold for the parameter\n     */\n    struct Limits {\n        uint256 min;\n        uint256 max;\n    }\n\n    /**\n     * @notice function definition of the pool contract\n     */\n    bytes4 public poolInitFuncSelector; //  bytes4(keccak256(\"initialize(uint256,address,address,address,uint256,uint256,uint256,uint256,bool)\"))\n\n    /**\n     * @notice address of the latest implementation of the pool logic\n     */\n    address public poolImpl;\n\n    /**\n     * @notice address of the contract storing the user registry\n     */\n    address public override userRegistry;\n\n    /**\n     * @notice address of the contract storing the strategy registry\n     */\n    address public strategyRegistry;\n\n    /**\n     * @notice address of the latest implementation of the extension logic\n     */\n    address public override extension;\n\n    /**\n     * @notice address of the latest implementation of the repayment logic\n     */\n    address public override repaymentImpl;\n\n    /**\n     * @notice address of the latest implementation of the pool logic\n     */\n    address public override priceOracle;\n\n    /**\n     * @notice address of the savings account used\n     */\n    address public override savingsAccount;\n\n    /**\n     * @notice the time interval for the lenders to make contributions to pool\n     */\n    uint256 public override collectionPeriod;\n\n    /**\n     * @notice the time interval for the borrower to withdraw the loan from pool\n     */\n    uint256 public override loanWithdrawalDuration;\n\n    /**\n     * @notice the time interval for the active stage of the margin call\n     */\n    uint256 public override marginCallDuration;\n\n    /**\n     * @notice Fraction of the requested amount for pool below which pool is cancelled\n     */\n    uint256 public override minBorrowFraction;\n\n    /**\n     * @notice the fraction used for calculating the liquidator reward\n     */\n    uint256 public override liquidatorRewardFraction;\n\n    /**\n     * @notice the fraction used for calculating the penalty when the pool is cancelled\n     */\n    uint256 public override poolCancelPenaltyMultiple;\n\n    /**\n     * @notice Contract Address of no yield\n     */\n    address public override noStrategyAddress;\n\n    uint256 protocolFeeFraction;\n    address protocolFeeCollector;\n\n    /*\n     * @notice Used to mark assets supported for borrowing\n     */\n    mapping(address => bool) isBorrowToken;\n\n    /*\n     * @notice Used to mark supported collateral assets\n     */\n    mapping(address => bool) isCollateralToken;\n\n    /**\n     * @notice Used to keep track of valid pool addresses\n     */\n    mapping(address => bool) public override poolRegistry;\n\n    /*\n     * @notice Used to set the min/max borrow amount for Pools\n     */\n    Limits poolSizeLimit;\n\n    /*\n     * @notice Used to set the min/max collateral ratio for Pools\n     */\n    Limits idealCollateralRatioLimit;\n\n    /*\n     * @notice Used to set the min/max borrow rates (interest rate provided by borrower) for Pools\n     */\n    Limits borrowRateLimit;\n\n    /*\n     * @notice used to set the min/max repayment interval for Pools\n     */\n    Limits repaymentIntervalLimit;\n\n    /*\n     * @notice used to set the min/max number of repayment intervals for Pools\n     */\n    Limits noOfRepaymentIntervalsLimit;\n\n    /**\n     * @notice functions affected by this modifier can only be invoked by the Pool\n     */\n    modifier onlyPool() {\n        require(poolRegistry[msg.sender], 'PoolFactory::onlyPool - Only pool can destroy itself');\n        _;\n    }\n\n    /**\n     * @notice functions affected by this modifier can only be invoked by the borrow of the Pool\n     */\n    modifier onlyBorrower(address _verifier) {\n        require(\n            IVerification(userRegistry).isUser(msg.sender, _verifier),\n            'PoolFactory::onlyBorrower - Only a valid Borrower can create Pool'\n        );\n        _;\n    }\n\n    /**\n     * @notice returns the owner of the pool\n     */\n    function owner() public view override(IPoolFactory, OwnableUpgradeable) returns (address) {\n        return OwnableUpgradeable.owner();\n    }\n\n    /**\n     * @notice used to initialize the pool factory\n     * @dev initializer can only be run once\n     * @param _admin address of admin\n     * @param _collectionPeriod period for which lenders can lend for pool\n     * @param _loanWithdrawalDuration period for which lent tokens can be withdrawn after pool starts\n     * @param _marginCallDuration duration of margin call before which collateral ratio has to be maintained\n     * @param _poolInitFuncSelector function signature for initializing pool\n     * @param _liquidatorRewardFraction fraction of liquidation amount which is given to liquidator as reward multiplied by 10**30\n     * @param _poolCancelPenaltyMultiple multiple of borrow rate of pool as penality for cancellation of pool multiplied by 10**30\n     * @param _minBorrowFraction amountCollected/amountRequested for a pool, if less than fraction by pool start time then pool can be cancelled without penality multiplied by 10**30\n     * @param _protocolFeeFraction fraction of amount borrowed in pool which is collected as protocol fee\n     * @param _protocolFeeCollector address where protocol fee is collected\n     * @param _noStrategy address of the no strategy address\n     */\n    function initialize(\n        address _admin,\n        uint256 _collectionPeriod,\n        uint256 _loanWithdrawalDuration,\n        uint256 _marginCallDuration,\n        bytes4 _poolInitFuncSelector,\n        uint256 _liquidatorRewardFraction,\n        uint256 _poolCancelPenaltyMultiple,\n        uint256 _minBorrowFraction,\n        uint256 _protocolFeeFraction,\n        address _protocolFeeCollector,\n        address _noStrategy\n    ) external initializer {\n        {\n            OwnableUpgradeable.__Ownable_init();\n            OwnableUpgradeable.transferOwnership(_admin);\n        }\n        _updateCollectionPeriod(_collectionPeriod);\n        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);\n        _updateMarginCallDuration(_marginCallDuration);\n        _updatepoolInitFuncSelector(_poolInitFuncSelector);\n        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);\n        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);\n        _updateMinBorrowFraction(_minBorrowFraction);\n        _updateProtocolFeeFraction(_protocolFeeFraction);\n        _updateProtocolFeeCollector(_protocolFeeCollector);\n        _updateNoStrategy(_noStrategy);\n    }\n\n    /**\n     * @notice used to setImplementation addresses\n     * @dev used to set some of the contracts pool factory interacts with. only admin can invoke\n     * @param _poolImpl address of the implementation address of pool\n     * @param _repaymentImpl address of the implementation address of repayments\n     * @param _userRegistry address of the user registry where users are verified\n     * @param _strategyRegistry address of the startegy registry where strategies are whitelisted\n     * @param _priceOracle address of the price oracle\n     * @param _savingsAccount address of the savings account contract\n     * @param _extension address of the extension contract for pools\n     */\n    function setImplementations(\n        address _poolImpl,\n        address _repaymentImpl,\n        address _userRegistry,\n        address _strategyRegistry,\n        address _priceOracle,\n        address _savingsAccount,\n        address _extension\n    ) external onlyOwner {\n        _updatePoolLogic(_poolImpl);\n        _updateRepaymentImpl(_repaymentImpl);\n        _updateSavingsAccount(_savingsAccount);\n        _updatedExtension(_extension);\n        _updateUserRegistry(_userRegistry);\n        _updateStrategyRegistry(_strategyRegistry);\n        _updatePriceoracle(_priceOracle);\n    }\n\n    /**\n     * @notice invoked when a new borrow pool is created. deploys a new pool for every borrow request\n     * @param _poolSize loan amount requested\n     * @param _borrowToken borrow asset requested\n     * @param _collateralToken collateral asset requested\n     * @param _idealCollateralRatio ideal pool collateral ratio set by the borrower\n     * @param _borrowRate interest rate provided by the borrower\n     * @param _repaymentInterval interval between the last dates of two repayment cycles\n     * @param _noOfRepaymentIntervals number of repayments to be made during the duration of the loan\n     * @param _poolSavingsStrategy savings strategy selected for the pool collateral\n     * @param _collateralAmount collateral amount deposited\n     * @param _transferFromSavingsAccount if true, initial collateral is transferred from borrower's savings account, if false, borrower transfers initial collateral deposit from wallet\n     * @param _salt random and unique initial seed\n     */\n    function createPool(\n        uint256 _poolSize,\n        uint256 _borrowRate,\n        address _borrowToken,\n        address _collateralToken,\n        uint256 _idealCollateralRatio,\n        uint256 _repaymentInterval,\n        uint256 _noOfRepaymentIntervals,\n        address _poolSavingsStrategy,\n        uint256 _collateralAmount,\n        bool _transferFromSavingsAccount,\n        bytes32 _salt,\n        address _verifier,\n        address _lenderVerifier\n    ) external payable onlyBorrower(_verifier) {\n        if (_collateralToken == address(0)) {\n            require(msg.value == _collateralAmount, 'PoolFactory::createPool - Ether send is different from collateral amount specified');\n        }\n        require(_borrowToken != _collateralToken, 'PoolFactory::createPool - cant borrow the asset put in as collateralToken');\n        require(isBorrowToken[_borrowToken], 'PoolFactory::createPool - Invalid borrow token type');\n        require(isCollateralToken[_collateralToken], 'PoolFactory::createPool - Invalid collateral token type');\n        require(\n            IPriceOracle(priceOracle).doesFeedExist(_collateralToken, _borrowToken),\n            \"PoolFactory::createPool - Price feed doesn't support token pair\"\n        );\n        require(IStrategyRegistry(strategyRegistry).registry(_poolSavingsStrategy), 'PoolFactory::createPool - Invalid strategy');\n        require(isWithinLimits(_poolSize, poolSizeLimit.min, poolSizeLimit.max), 'PoolFactory::createPool - PoolSize not within limits');\n        require(\n            isWithinLimits(_idealCollateralRatio, idealCollateralRatioLimit.min, idealCollateralRatioLimit.max),\n            'PoolFactory::createPool - Collateral Ratio not within limits'\n        );\n        require(\n            isWithinLimits(_borrowRate, borrowRateLimit.min, borrowRateLimit.max),\n            'PoolFactory::createPool - Borrow rate not within limits'\n        );\n        require(\n            isWithinLimits(_noOfRepaymentIntervals, noOfRepaymentIntervalsLimit.min, noOfRepaymentIntervalsLimit.max),\n            'PoolFactory::createPool - Loan duration not within limits'\n        );\n        require(\n            isWithinLimits(_repaymentInterval, repaymentIntervalLimit.min, repaymentIntervalLimit.max),\n            'PoolFactory::createPool - Repayment interval not within limits'\n        );\n        _createPool(\n            _poolSize,\n            _borrowRate,\n            _borrowToken,\n            _collateralToken,\n            _idealCollateralRatio,\n            _repaymentInterval,\n            _noOfRepaymentIntervals,\n            _poolSavingsStrategy,\n            _collateralAmount,\n            _transferFromSavingsAccount,\n            _salt,\n            _lenderVerifier\n        );\n    }\n\n    // @dev These functions are used to avoid stack too deep\n    function _createPool(\n        uint256 _poolSize,\n        uint256 _borrowRate,\n        address _borrowToken,\n        address _collateralToken,\n        uint256 _idealCollateralRatio,\n        uint256 _repaymentInterval,\n        uint256 _noOfRepaymentIntervals,\n        address _poolSavingsStrategy,\n        uint256 _collateralAmount,\n        bool _transferFromSavingsAccount,\n        bytes32 _salt,\n        address _lenderVerifier\n    ) internal {\n        bytes memory data = _encodePoolInitCall(\n            _poolSize,\n            _borrowRate,\n            _borrowToken,\n            _collateralToken,\n            _idealCollateralRatio,\n            _repaymentInterval,\n            _noOfRepaymentIntervals,\n            _poolSavingsStrategy,\n            _collateralAmount,\n            _transferFromSavingsAccount,\n            _lenderVerifier\n        );\n        bytes32 salt = keccak256(abi.encodePacked(_salt, msg.sender));\n        bytes memory bytecode = abi.encodePacked(type(SublimeProxy).creationCode, abi.encode(poolImpl, address(0x01), data));\n        uint256 amount = _collateralToken == address(0) ? _collateralAmount : 0;\n\n        address pool = _deploy(amount, salt, bytecode);\n\n        poolRegistry[pool] = true;\n        emit PoolCreated(pool, msg.sender);\n    }\n\n    // @dev These functions are used to avoid stack too deep\n    function _encodePoolInitCall(\n        uint256 _poolSize,\n        uint256 _borrowRate,\n        address _borrowToken,\n        address _collateralToken,\n        uint256 _idealCollateralRatio,\n        uint256 _repaymentInterval,\n        uint256 _noOfRepaymentIntervals,\n        address _poolSavingsStrategy,\n        uint256 _collateralAmount,\n        bool _transferFromSavingsAccount,\n        address _lenderVerifier\n    ) internal view returns (bytes memory data) {\n        data = abi.encodeWithSelector(\n            poolInitFuncSelector,\n            _poolSize,\n            _borrowRate,\n            msg.sender,\n            _borrowToken,\n            _collateralToken,\n            _idealCollateralRatio,\n            _repaymentInterval,\n            _noOfRepaymentIntervals,\n            _poolSavingsStrategy,\n            _collateralAmount,\n            _transferFromSavingsAccount,\n            _lenderVerifier,\n            loanWithdrawalDuration,\n            collectionPeriod\n        );\n    }\n\n    /**\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\n     * will be deployed can be known in advance via {computeAddress}.\n     *\n     * The bytecode for a contract can be obtained from Solidity with\n     * `type(contractName).creationCode`.\n     *\n     * Requirements:\n     *\n     * - `bytecode` must not be empty.\n     * - `salt` must have not been used for `bytecode` already.\n     * - the factory must have a balance of at least `amount`.\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\n     */\n    function _deploy(\n        uint256 amount,\n        bytes32 salt,\n        bytes memory bytecode\n    ) internal returns (address addr) {\n        require(bytecode.length != 0, 'Create2: bytecode length is zero');\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\n        }\n        require(addr != address(0), 'Create2: Failed on deploy');\n    }\n\n    /**\n     * @notice invoked to check if pool parameters are within thresholds\n     * @param _value supplied value of the parameter\n     * @param _min minimum threshold of the parameter\n     * @param _max maximum threshold of the parameter\n     */\n    function isWithinLimits(\n        uint256 _value,\n        uint256 _min,\n        uint256 _max\n    ) internal pure returns (bool) {\n        if (_min != 0 && _max != 0) {\n            return (_value >= _min && _value <= _max);\n        } else if (_min != 0) {\n            return (_value >= _min);\n        } else if (_max != 0) {\n            return (_value <= _max);\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @notice used to update the list of supported borrow tokens\n     * @param _borrowToken address of the borrow asset\n     * @param _isSupported true if _borrowToken is a valid borrow asset, false if _borrowToken is an invalid borrow asset\n     */\n    function updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) external onlyOwner {\n        _updateSupportedBorrowTokens(_borrowToken, _isSupported);\n    }\n\n    function _updateSupportedBorrowTokens(address _borrowToken, bool _isSupported) internal {\n        isBorrowToken[_borrowToken] = _isSupported;\n        emit BorrowTokenUpdated(_borrowToken, _isSupported);\n    }\n\n    /**\n     * @notice used to update the list of supported Collateral tokens\n     * @param _collateralToken address of the Collateral asset\n     * @param _isSupported true if _collateralToken is a valid Collateral asset, false if _collateralToken is an invalid Collateral asset\n     */\n    function updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) external onlyOwner {\n        _updateSupportedCollateralTokens(_collateralToken, _isSupported);\n    }\n\n    function _updateSupportedCollateralTokens(address _collateralToken, bool _isSupported) internal {\n        isCollateralToken[_collateralToken] = _isSupported;\n        emit CollateralTokenUpdated(_collateralToken, _isSupported);\n    }\n\n    /**\n     * @notice used to update the pointer to Initializer function of the proxy pool contract\n     * @param _functionId updated function definition of the proxy pool contract\n     */\n    function updatepoolInitFuncSelector(bytes4 _functionId) external onlyOwner {\n        _updatepoolInitFuncSelector(_functionId);\n    }\n\n    function _updatepoolInitFuncSelector(bytes4 _functionId) internal {\n        poolInitFuncSelector = _functionId;\n        emit PoolInitSelectorUpdated(_functionId);\n    }\n\n    /**\n     * @notice used to update the Pool.sol logic\n     * @param _poolLogic the address of the new Pool logic contract\n     */\n    function updatePoolLogic(address _poolLogic) external onlyOwner {\n        _updatePoolLogic(_poolLogic);\n    }\n\n    function _updatePoolLogic(address _poolLogic) internal {\n        poolImpl = _poolLogic;\n        emit PoolLogicUpdated(_poolLogic);\n    }\n\n    /**\n     * @notice used to update the user registry\n     * @param _userRegistry address of the contract storing the user registry\n     */\n    function updateUserRegistry(address _userRegistry) external onlyOwner {\n        _updateUserRegistry(_userRegistry);\n    }\n\n    function _updateUserRegistry(address _userRegistry) internal {\n        userRegistry = _userRegistry;\n        emit UserRegistryUpdated(_userRegistry);\n    }\n\n    /**\n     * @notice used to update the strategy registry\n     * @param _strategyRegistry address of the contract storing the strategy registry\n     */\n    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {\n        _updateStrategyRegistry(_strategyRegistry);\n    }\n\n    function _updateStrategyRegistry(address _strategyRegistry) internal {\n        strategyRegistry = _strategyRegistry;\n        emit StrategyRegistryUpdated(_strategyRegistry);\n    }\n\n    /**\n     * @notice used to update the implementation of the repayment logic\n     * @param _repaymentImpl address of the updated repayment.sol contract\n     */\n    function updateRepaymentImpl(address _repaymentImpl) external onlyOwner {\n        _updateRepaymentImpl(_repaymentImpl);\n    }\n\n    function _updateRepaymentImpl(address _repaymentImpl) internal {\n        repaymentImpl = _repaymentImpl;\n        emit RepaymentImplUpdated(_repaymentImpl);\n    }\n\n    /**\n     * @notice used to update contract address of nostrategy contract\n     * @param _noStrategy address of the updated noYield.sol contract\n     */\n    function updateNoStrategy(address _noStrategy) external onlyOwner {\n        _updateNoStrategy(_noStrategy);\n    }\n\n    function _updateNoStrategy(address _noStrategy) internal {\n        noStrategyAddress = _noStrategy;\n        emit NoStrategyUpdated(_noStrategy);\n    }\n\n    /**\n     * @notice used to update the implementation of the price oracle logic\n     * @param _priceOracle address of the updated price oracle contract\n     */\n    function updatePriceoracle(address _priceOracle) external onlyOwner {\n        _updatePriceoracle(_priceOracle);\n    }\n\n    function _updatePriceoracle(address _priceOracle) internal {\n        priceOracle = _priceOracle;\n        emit PriceOracleUpdated(_priceOracle);\n    }\n\n    /**\n     * @notice used to update the extensions contract\n     * @param _extension address of the updated extensions contract\n     */\n    function updatedExtension(address _extension) external onlyOwner {\n        _updatedExtension(_extension);\n    }\n\n    function _updatedExtension(address _extension) internal {\n        extension = _extension;\n        emit ExtensionImplUpdated(_extension);\n    }\n\n    /**\n     * @notice used to update the savings account contract\n     * @param _savingsAccount address of the updated savings account contract\n     */\n    function updateSavingsAccount(address _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address _savingsAccount) internal {\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update the collection period of the Pool\n     * @param _collectionPeriod updated value of the collection period\n     */\n    function updateCollectionPeriod(uint256 _collectionPeriod) external onlyOwner {\n        _updateCollectionPeriod(_collectionPeriod);\n    }\n\n    function _updateCollectionPeriod(uint256 _collectionPeriod) internal {\n        collectionPeriod = _collectionPeriod;\n        emit CollectionPeriodUpdated(_collectionPeriod);\n    }\n\n    /**\n     * @notice used to update the loan withdrawal duration by owner\n     * @param _loanWithdrawalDuration updated value of loanWithdrawalDuration\n     */\n    function updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) external onlyOwner {\n        _updateLoanWithdrawalDuration(_loanWithdrawalDuration);\n    }\n\n    function _updateLoanWithdrawalDuration(uint256 _loanWithdrawalDuration) internal {\n        loanWithdrawalDuration = _loanWithdrawalDuration;\n        emit LoanWithdrawalDurationUpdated(_loanWithdrawalDuration);\n    }\n\n    /**\n     * @notice used to update the active stage of the margin call of the Pool\n     * @param _marginCallDuration updated value of the margin call duration\n     */\n    function updateMarginCallDuration(uint256 _marginCallDuration) external onlyOwner {\n        _updateMarginCallDuration(_marginCallDuration);\n    }\n\n    function _updateMarginCallDuration(uint256 _marginCallDuration) internal {\n        marginCallDuration = _marginCallDuration;\n        emit MarginCallDurationUpdated(_marginCallDuration);\n    }\n\n    /**\n     * @notice used to update the min borrow fraction by owner\n     * @param _minBorrowFraction updated value of min borrow fraction multiplied by 10**30\n     */\n    function updateMinBorrowFraction(uint256 _minBorrowFraction) external onlyOwner {\n        _updateMinBorrowFraction(_minBorrowFraction);\n    }\n\n    function _updateMinBorrowFraction(uint256 _minBorrowFraction) internal {\n        minBorrowFraction = _minBorrowFraction;\n        emit MinBorrowFractionUpdated(_minBorrowFraction);\n    }\n\n    /**\n     * @notice used to update the reward fraction for liquidation of the Pool\n     * @param _liquidatorRewardFraction updated value of the reward fraction for liquidation multiplied by 10**30\n     */\n    function updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) external onlyOwner {\n        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);\n    }\n\n    function _updateLiquidatorRewardFraction(uint256 _liquidatorRewardFraction) internal {\n        liquidatorRewardFraction = _liquidatorRewardFraction;\n        emit LiquidatorRewardFractionUpdated(_liquidatorRewardFraction);\n    }\n\n    /**\n     * @notice used to update the pool cancel penalty multiple\n     * @param _poolCancelPenaltyMultiple updated value of the pool cancel penalty multiple multiplied by 10**30\n     */\n    function updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) external onlyOwner {\n        _updatePoolCancelPenaltyMultiple(_poolCancelPenaltyMultiple);\n    }\n\n    function _updatePoolCancelPenaltyMultiple(uint256 _poolCancelPenaltyMultiple) internal {\n        poolCancelPenaltyMultiple = _poolCancelPenaltyMultiple;\n        emit PoolCancelPenaltyMultipleUpdated(_poolCancelPenaltyMultiple);\n    }\n\n    /**\n     * @notice used to update the fraction of borrowed amount charged as protocol fee\n     * @param _protocolFee updated value of protocol fee fraction multiplied by 10**30\n     */\n    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {\n        _updateProtocolFeeFraction(_protocolFee);\n    }\n\n    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {\n        protocolFeeFraction = _protocolFee;\n        emit ProtocolFeeFractionUpdated(_protocolFee);\n    }\n\n    /**\n     * @notice used to update the address in which protocol fee is collected\n     * @param _protocolFeeCollector updated address of protocol fee collector\n     */\n    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {\n        _updateProtocolFeeCollector(_protocolFeeCollector);\n    }\n\n    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {\n        protocolFeeCollector = _protocolFeeCollector;\n        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);\n    }\n\n    /**\n     * @notice used to update the thresholds of the pool size of the Pool\n     * @param _min updated value of the minimum threshold value of the pool size\n     * @param _max updated value of the maximum threshold value of the pool size\n     */\n    function updatePoolSizeLimit(uint256 _min, uint256 _max) external onlyOwner {\n        poolSizeLimit = Limits(_min, _max);\n        emit LimitsUpdated('PoolSize', _min, _max);\n    }\n\n    /**\n     * @notice used to update the thresholds of the collateral ratio of the Pool\n     * @param _min updated value of the minimum threshold value of the collateral ratio\n     * @param _max updated value of the maximum threshold value of the collateral ratio\n     */\n    function updateidealCollateralRatioLimit(uint256 _min, uint256 _max) external onlyOwner {\n        idealCollateralRatioLimit = Limits(_min, _max);\n        emit LimitsUpdated('CollateralRatio', _min, _max);\n    }\n\n    /**\n     * @notice used to update the thresholds of the borrow rate of the Pool\n     * @param _min updated value of the minimum threshold value of the borrow rate\n     * @param _max updated value of the maximum threshold value of the borrow rate\n     */\n    function updateBorrowRateLimit(uint256 _min, uint256 _max) external onlyOwner {\n        borrowRateLimit = Limits(_min, _max);\n        emit LimitsUpdated('BorrowRate', _min, _max);\n    }\n\n    /**\n     * @notice used to update the thresholds of the repayment interval of the Pool\n     * @param _min updated value of the minimum threshold value of the repayment interval\n     * @param _max updated value of the maximum threshold value of the repayment interval\n     */\n    function updateRepaymentIntervalLimit(uint256 _min, uint256 _max) external onlyOwner {\n        repaymentIntervalLimit = Limits(_min, _max);\n        emit LimitsUpdated('RepaymentInterval', _min, _max);\n    }\n\n    /**\n     * @notice used to update the thresholds of the number of repayment intervals of the Pool\n     * @param _min updated value of the minimum threshold value of the number of repayment intervals\n     * @param _max updated value of the maximum threshold value of the number of repayment intervals\n     */\n    function updateNoOfRepaymentIntervalsLimit(uint256 _min, uint256 _max) external onlyOwner {\n        noOfRepaymentIntervalsLimit = Limits(_min, _max);\n        emit LimitsUpdated('NoOfRepaymentIntervals', _min, _max);\n    }\n\n    /**\n     * @notice used to query protocol fee fraction and address of the collector\n     * @return protocolFee Fraction multiplied by 10**30\n     * @return address of protocol fee collector\n     */\n    function getProtocolFeeData() external view override returns (uint256, address) {\n        return (protocolFeeFraction, protocolFeeCollector);\n    }\n}\n\n\n",
        "CodeNames": [
            "PoolFactory.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "PoolFactory.sol:260-317",
                "Type": "ether can be locked in the contract without a way to retrieve it",
                "Description": "If a borrower calls the createPool function with a non-zero value, but also includes an ERC20 token address for _collateralToken, then the Ether value sent will be locked in the PoolFactory contract forever.",
                "Repair": "If msg.value is greater than 0, make sure the _collateralToken address is set to address(0)"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '../interfaces/IPriceOracle.sol';\nimport '../interfaces/IYield.sol';\nimport '../interfaces/ISavingsAccount.sol';\nimport '../SavingsAccount/SavingsAccountUtil.sol';\nimport '../interfaces/IStrategyRegistry.sol';\n\n/**\n * @title Credit Line contract with Methods related to credit Line\n * @notice Implements the functions related to Credit Line\n * @author Sublime\n **/\n\ncontract CreditLine is ReentrancyGuard, OwnableUpgradeable {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    enum CreditLineStatus {\n        NOT_CREATED,\n        REQUESTED,\n        ACTIVE,\n        CLOSED,\n        CANCELLED,\n        LIQUIDATED\n    }\n\n    /**\n     * @notice counter that tracks the number of credit lines created\n     * @dev used to create unique identifier for credit lines\n     **/\n    uint256 public creditLineCounter;\n\n    uint256 constant YEAR_IN_SECONDS = 365 days;\n\n    struct CreditLineVariables {\n        CreditLineStatus status;\n        uint256 principal;\n        uint256 totalInterestRepaid;\n        uint256 lastPrincipalUpdateTime;\n        uint256 interestAccruedTillLastPrincipalUpdate;\n    }\n\n    struct CreditLineConstants {\n        address lender;\n        address borrower;\n        uint256 borrowLimit;\n        uint256 idealCollateralRatio;\n        uint256 borrowRate;\n        address borrowAsset;\n        address collateralAsset;\n        bool autoLiquidation;\n        bool requestByLender;\n    }\n    /**\n     * @notice stores the collateral shares in a credit line per strategy\n     * @dev creditLineId => Strategy => collateralShares\n     **/\n    mapping(uint256 => mapping(address => uint256)) public collateralShareInStrategy;\n\n    /**\n     * @notice stores the variables to maintain a credit line\n     **/\n    mapping(uint256 => CreditLineVariables) public creditLineVariables;\n\n    /**\n     * @notice stores the constants related to a credit line\n     **/\n    mapping(uint256 => CreditLineConstants) public creditLineConstants;\n\n    /**\n     * @notice stores the address of savings account contract\n     **/\n    address public savingsAccount;\n\n    /**\n     * @notice stores the address of price oracle contract\n     **/\n    address public priceOracle;\n\n    /**\n     * @notice stores the address of strategy registry contract\n     **/\n    address public strategyRegistry;\n\n    /**\n     * @notice stores the address of default strategy\n     **/\n    address public defaultStrategy;\n\n    /**\n     * @notice stores the fraction of borrowed amount charged as fee by protocol\n     * @dev it is multiplied by 10**30\n     **/\n    uint256 public protocolFeeFraction;\n\n    /**\n     * @notice address where protocol fee is collected\n     **/\n    address public protocolFeeCollector;\n\n    /**\n     * @notice stores the fraction of amount liquidated given as reward to liquidator\n     * @dev it is multiplied by 10**30\n     **/\n    uint256 public liquidatorRewardFraction;\n    /**\n     * @dev checks if Credit Line exists\n     * @param _id identifier for the credit line\n     **/\n    modifier ifCreditLineExists(uint256 _id) {\n        require(creditLineVariables[_id].status != CreditLineStatus.NOT_CREATED, 'Credit line does not exist');\n        _;\n    }\n\n    /**\n     * @dev checks if called by credit Line Borrower\n     * @param _id creditLine identifier\n     **/\n    modifier onlyCreditLineBorrower(uint256 _id) {\n        require(creditLineConstants[_id].borrower == msg.sender, 'Only credit line Borrower can access');\n        _;\n    }\n\n    /**\n     * @dev checks if called by credit Line Lender\n     * @param _id creditLine identifier\n     **/\n    modifier onlyCreditLineLender(uint256 _id) {\n        require(creditLineConstants[_id].lender == msg.sender, 'Only credit line Lender can access');\n        _;\n    }\n\n    /**\n     * @notice emitted when a collateral is deposited into credit line\n     * @param id id of the credit line\n     * @param amount amount of collateral deposited\n     * @param strategy address of the strategy into which collateral is deposited\n     */\n    event CollateralDeposited(uint256 indexed id, uint256 amount, address indexed strategy);\n\n    /**\n     * @notice emitted when collateral is withdrawn from credit line\n     * @param id id of the credit line\n     * @param amount amount of collateral withdrawn\n     */\n    event CollateralWithdrawn(uint256 indexed id, uint256 amount);\n\n    /**\n     * @notice emitted when a request for new credit line is placed\n     * @param id id of the credit line for which request was made\n     * @param lender address of the lender for credit line\n     * @param borrower address of the borrower for credit line\n     */\n    event CreditLineRequested(uint256 indexed id, address indexed lender, address indexed borrower);\n\n    /**\n     * @notice emitted when a credit line is liquidated\n     * @param id id of the credit line which is liquidated\n     * @param liquidator address of the liquidator\n     */\n    event CreditLineLiquidated(uint256 indexed id, address indexed liquidator);\n\n    /**\n     * @notice emitted when tokens are borrowed from credit line\n     * @param id id of the credit line from which tokens are borrowed\n     * @param borrowAmount amount of tokens borrowed\n     */\n    event BorrowedFromCreditLine(uint256 indexed id, uint256 borrowAmount);\n\n    /**\n     * @notice emitted when credit line is accepted\n     * @param id id of the credit line that was accepted\n     */\n    event CreditLineAccepted(uint256 indexed id);\n\n    /**\n     * @notice emitted when credit line is completely repaid and reset\n     * @param id id of the credit line that is reset\n     */\n    event CreditLineReset(uint256 indexed id);\n\n    /**\n     * @notice emitted when the credit line is partially repaid\n     * @param id id of the credit line\n     * @param repayAmount amount repaid\n     */\n    event PartialCreditLineRepaid(uint256 indexed id, uint256 repayAmount);\n\n    /**\n     * @notice emitted when the credit line is completely repaid\n     * @param id id of the credit line\n     * @param repayAmount amount repaid\n     */\n    event CompleteCreditLineRepaid(uint256 indexed id, uint256 repayAmount);\n\n    /**\n     * @notice emitted when the credit line is closed by one of the parties of credit line\n     * @param id id of the credit line\n     */\n    event CreditLineClosed(uint256 indexed id);\n\n    /**\n     * @notice emitted when default strategy for the credit line is updated\n     * @param defaultStrategy address of the strategy contract that is used as default by credit lines\n     */\n    event DefaultStrategyUpdated(address indexed defaultStrategy);\n\n    /**\n     * @notice emitted when the price oracle is updated\n     * @param priceOracle address of the updated price oracle\n     */\n    event PriceOracleUpdated(address indexed priceOracle);\n\n    /**\n     * @notice emitted when the savings account address is updated\n     * @param savingsAccount address of the updated savingsAccount\n     */\n    event SavingsAccountUpdated(address indexed savingsAccount);\n\n    /**\n     * @notice emitted when strategy registry address is updated\n     * @param strategyRegistry address of the updated strategy registry\n     */\n    event StrategyRegistryUpdated(address indexed strategyRegistry);\n\n    /**\n     * @notice emitted when fee that protocol charges for credit line is updated\n     * @param updatedProtocolFee updated value of protocolFeeFraction\n     */\n    event ProtocolFeeFractionUpdated(uint256 updatedProtocolFee);\n\n    /**\n     * @notice emitted when address which receives fee that protocol changes for pools is updated\n     * @param updatedProtocolFeeCollector updated value of protocolFeeCollector\n     */\n    event ProtocolFeeCollectorUpdated(address indexed updatedProtocolFeeCollector);\n\n    /**\n     * @notice emitted when liquidatorRewardFraction is updated\n     * @param liquidatorRewardFraction fraction of the liquidated amount given as reward to the liquidator\n     */\n    event LiquidationRewardFractionUpdated(uint256 liquidatorRewardFraction);\n\n    /**\n     * @notice used to initialize the contract\n     * @dev can only be called once during the life cycle of the contract\n     * @param _defaultStrategy default strategy used in credit lines\n     * @param _priceOracle address of the priceOracle\n     * @param _savingsAccount address of  the savings account contract\n     * @param _strategyRegistry address of the strategy registry contract\n     * @param _owner address of owner who can change global variables\n     * @param _protocolFeeFraction fraction of the fee charged by protocol\n     * @param _protocolFeeCollector address to which protocol fee is charged to\n     * @param _liquidatorRewardFraction fraction of the liquidated amount given as reward to the liquidator\n     */\n    function initialize(\n        address _defaultStrategy,\n        address _priceOracle,\n        address _savingsAccount,\n        address _strategyRegistry,\n        address _owner,\n        uint256 _protocolFeeFraction,\n        address _protocolFeeCollector,\n        uint256 _liquidatorRewardFraction\n    ) external initializer {\n        OwnableUpgradeable.__Ownable_init();\n        OwnableUpgradeable.transferOwnership(_owner);\n\n        _updateDefaultStrategy(_defaultStrategy);\n        _updatePriceOracle(_priceOracle);\n        _updateSavingsAccount(_savingsAccount);\n        _updateStrategyRegistry(_strategyRegistry);\n        _updateProtocolFeeFraction(_protocolFeeFraction);\n        _updateProtocolFeeCollector(_protocolFeeCollector);\n        _updateLiquidatorRewardFraction(_liquidatorRewardFraction);\n    }\n\n    /**\n     * @notice used to update the default strategy\n     * @dev can only be updated by owner\n     * @param _defaultStrategy address of the updated default strategy\n     */\n    function updateDefaultStrategy(address _defaultStrategy) external onlyOwner {\n        _updateDefaultStrategy(_defaultStrategy);\n    }\n\n    function _updateDefaultStrategy(address _defaultStrategy) internal {\n        defaultStrategy = _defaultStrategy;\n        emit DefaultStrategyUpdated(_defaultStrategy);\n    }\n\n    /**\n     * @notice used to update the price oracle\n     * @dev can only be updated by owner\n     * @param _priceOracle address of the updated price oracle\n     */\n    function updatePriceOracle(address _priceOracle) external onlyOwner {\n        _updatePriceOracle(_priceOracle);\n    }\n\n    function _updatePriceOracle(address _priceOracle) internal {\n        priceOracle = _priceOracle;\n        emit PriceOracleUpdated(_priceOracle);\n    }\n\n    /**\n     * @notice used to update the savings account address\n     * @dev can only be updated by owner\n     * @param _savingsAccount address of the updated savings account\n     */\n    function updateSavingsAccount(address _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address _savingsAccount) internal {\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update the protocol fee fraction\n     * @dev can only be updated by owner\n     * @param _protocolFee fraction of the borrower amount collected as protocol fee\n     */\n    function updateProtocolFeeFraction(uint256 _protocolFee) external onlyOwner {\n        _updateProtocolFeeFraction(_protocolFee);\n    }\n\n    function _updateProtocolFeeFraction(uint256 _protocolFee) internal {\n        protocolFeeFraction = _protocolFee;\n        emit ProtocolFeeFractionUpdated(_protocolFee);\n    }\n\n    /**\n     * @notice used to update the protocol fee collector\n     * @dev can only be updated by owner\n     * @param _protocolFeeCollector address in which protocol fee is collected\n     */\n    function updateProtocolFeeCollector(address _protocolFeeCollector) external onlyOwner {\n        _updateProtocolFeeCollector(_protocolFeeCollector);\n    }\n\n    function _updateProtocolFeeCollector(address _protocolFeeCollector) internal {\n        require(_protocolFeeCollector != address(0), 'cant be 0 address');\n        protocolFeeCollector = _protocolFeeCollector;\n        emit ProtocolFeeCollectorUpdated(_protocolFeeCollector);\n    }\n\n    /**\n     * @notice used to update the strategy registry address\n     * @dev can only be updated by owner\n     * @param _strategyRegistry address of the updated strategy registry\n     */\n    function updateStrategyRegistry(address _strategyRegistry) external onlyOwner {\n        _updateStrategyRegistry(_strategyRegistry);\n    }\n\n    function _updateStrategyRegistry(address _strategyRegistry) internal {\n        require(_strategyRegistry != address(0), 'CL::I zero address');\n        strategyRegistry = _strategyRegistry;\n        emit StrategyRegistryUpdated(_strategyRegistry);\n    }\n\n    /**\n     * @notice used to update the liquidatorRewardFraction\n     * @dev can only be updated by owner\n     * @param _rewardFraction fraction of liquidated amount given to liquidator as reward\n     */\n    function updateLiquidatorRewardFraction(uint256 _rewardFraction) external onlyOwner {\n        _updateLiquidatorRewardFraction(_rewardFraction);\n    }\n\n    function _updateLiquidatorRewardFraction(uint256 _rewardFraction) internal {\n        require(_rewardFraction <= 10**30, 'Fraction has to be less than 1');\n        liquidatorRewardFraction = _rewardFraction;\n        emit LiquidationRewardFractionUpdated(_rewardFraction);\n    }\n\n    /**\n     * @dev Used to Calculate Interest Per second on given principal and Interest rate\n     * @param _principal principal Amount for which interest has to be calculated.\n     * @param _borrowRate It is the Interest Rate at which Credit Line is approved\n     * @return interest per second for the given parameters\n     */\n    function calculateInterest(\n        uint256 _principal,\n        uint256 _borrowRate,\n        uint256 _timeElapsed\n    ) public pure returns (uint256) {\n        uint256 _interest = _principal.mul(_borrowRate).mul(_timeElapsed).div(10**30).div(YEAR_IN_SECONDS);\n\n        return _interest;\n    }\n\n    /**\n     * @dev Used to calculate interest accrued since last repayment\n     * @param _id identifier for the credit line\n     * @return interest accrued over current borrowed amount since last repayment\n     */\n\n    function calculateInterestAccrued(uint256 _id) public view returns (uint256) {\n        uint256 _lastPrincipalUpdateTime = creditLineVariables[_id].lastPrincipalUpdateTime;\n        if (_lastPrincipalUpdateTime == 0) return 0;\n        uint256 _timeElapsed = (block.timestamp).sub(_lastPrincipalUpdateTime);\n        uint256 _interestAccrued = calculateInterest(creditLineVariables[_id].principal, creditLineConstants[_id].borrowRate, _timeElapsed);\n        return _interestAccrued;\n    }\n\n    /**\n     * @dev Used to calculate current debt of borrower against a credit line.\n     * @param _id identifier for the credit line\n     * @return current debt of borrower\n     */\n    function calculateCurrentDebt(uint256 _id) public view returns (uint256) {\n        uint256 _interestAccrued = calculateInterestAccrued(_id);\n        uint256 _currentDebt = (creditLineVariables[_id].principal)\n            .add(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate)\n            .add(_interestAccrued)\n            .sub(creditLineVariables[_id].totalInterestRepaid);\n        return _currentDebt;\n    }\n\n    /**\n     * @notice used to calculate amount that can be borrowed by the borrower\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view.\n            borrowableAmount changes per block as interest changes per block.\n     * @param _id identifier for the credit line\n     * @return amount that can be borrowed from the credit line\n     */\n    function calculateBorrowableAmount(uint256 _id) public returns (uint256) {\n        CreditLineStatus _status = creditLineVariables[_id].status;\n        require(\n            _status == CreditLineStatus.ACTIVE || _status == CreditLineStatus.REQUESTED,\n            'CreditLine: Cannot only if credit line ACTIVE or REQUESTED'\n        );\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(\n            creditLineConstants[_id].collateralAsset,\n            creditLineConstants[_id].borrowAsset\n        );\n\n        uint256 _totalCollateralToken = calculateTotalCollateralTokens(_id);\n\n        uint256 _currentDebt = calculateCurrentDebt(_id);\n\n        uint256 _maxPossible = _totalCollateralToken.mul(_ratioOfPrices).div(creditLineConstants[_id].idealCollateralRatio).mul(10**30).div(\n            10**_decimals\n        );\n\n        uint256 _borrowLimit = creditLineConstants[_id].borrowLimit;\n\n        if (_maxPossible > _borrowLimit) {\n            _maxPossible = _borrowLimit;\n        }\n        if (_maxPossible > _currentDebt) {\n            return _maxPossible.sub(_currentDebt);\n        }\n        return 0;\n    }\n\n    function updateinterestAccruedTillLastPrincipalUpdate(uint256 _id) internal {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n\n        uint256 _interestAccrued = calculateInterestAccrued(_id);\n        uint256 _newInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(_interestAccrued);\n        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _newInterestAccrued;\n    }\n\n    function _depositCollateralFromSavingsAccount(\n        uint256 _id,\n        uint256 _amount,\n        address _sender\n    ) internal {\n        address _collateralAsset = creditLineConstants[_id].collateralAsset;\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);\n        uint256 _activeAmount;\n\n        for (uint256 _index = 0; _index < _strategyList.length; _index++) {\n            address _strategy = _strategyList[_index];\n            uint256 _liquidityShares = _savingsAccount.balanceInShares(_sender, _collateralAsset, _strategy);\n            if (_liquidityShares == 0 || _strategyList[_index] == address(0)) {\n                continue;\n            }\n            uint256 _tokenInStrategy = _liquidityShares;\n            _tokenInStrategy = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);\n\n            uint256 _tokensToTransfer = _tokenInStrategy;\n            if (_activeAmount.add(_tokenInStrategy) >= _amount) {\n                _tokensToTransfer = (_amount.sub(_activeAmount));\n            }\n            _activeAmount = _activeAmount.add(_tokensToTransfer);\n            _savingsAccount.transferFrom(_tokensToTransfer, _collateralAsset, _strategy, _sender, address(this));\n\n            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(\n                _liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy)\n            );\n\n            if (_amount == _activeAmount) {\n                return;\n            }\n        }\n        revert('CreditLine::_depositCollateralFromSavingsAccount - Insufficient balance');\n    }\n\n    /**\n     * @notice used to request a credit line either by borrower or lender\n     * @param _requestTo Address to which creditLine is requested, \n                        if borrower creates request then lender address and \n                        if lender creates then borrower address\n     * @param _borrowLimit maximum borrow amount in a credit line\n     * @param _borrowRate Interest Rate at which credit Line is requested\n     * @param _autoLiquidation if true, anyone can liquidate loan, otherwise only lender\n     * @param _collateralRatio ratio of the collateral to the debt below which credit line can be liquidated\n     * @param _borrowAsset address of the token to be borrowed\n     * @param _collateralAsset address of the token provided as collateral\n     * @param _requestAsLender if true, lender is placing request, otherwise borrower\n     * @return identifier for the credit line\n     */\n\n    function request(\n        address _requestTo,\n        uint256 _borrowLimit,\n        uint256 _borrowRate,\n        bool _autoLiquidation,\n        uint256 _collateralRatio,\n        address _borrowAsset,\n        address _collateralAsset,\n        bool _requestAsLender\n    ) external returns (uint256) {\n        require(_borrowAsset != _collateralAsset, 'R: cant borrow lent token');\n        require(IPriceOracle(priceOracle).doesFeedExist(_borrowAsset, _collateralAsset), 'R: No price feed');\n\n        address _lender = _requestTo;\n        address _borrower = msg.sender;\n        if (_requestAsLender) {\n            _lender = msg.sender;\n            _borrower = _requestTo;\n        }\n\n        uint256 _id = _createRequest(\n            _lender,\n            _borrower,\n            _borrowLimit,\n            _borrowRate,\n            _autoLiquidation,\n            _collateralRatio,\n            _borrowAsset,\n            _collateralAsset,\n            _requestAsLender\n        );\n\n        emit CreditLineRequested(_id, _lender, _borrower);\n        return _id;\n    }\n\n    function _createRequest(\n        address _lender,\n        address _borrower,\n        uint256 _borrowLimit,\n        uint256 _borrowRate,\n        bool _autoLiquidation,\n        uint256 _collateralRatio,\n        address _borrowAsset,\n        address _collateralAsset,\n        bool _requestByLender\n    ) internal returns (uint256) {\n        require(_lender != _borrower, 'Lender and Borrower cannot be same addresses');\n        uint256 _id = creditLineCounter + 1;\n        creditLineCounter = _id;\n        creditLineVariables[_id].status = CreditLineStatus.REQUESTED;\n        creditLineConstants[_id].borrower = _borrower;\n        creditLineConstants[_id].lender = _lender;\n        creditLineConstants[_id].borrowLimit = _borrowLimit;\n        creditLineConstants[_id].autoLiquidation = _autoLiquidation;\n        creditLineConstants[_id].idealCollateralRatio = _collateralRatio;\n        creditLineConstants[_id].borrowRate = _borrowRate;\n        creditLineConstants[_id].borrowAsset = _borrowAsset;\n        creditLineConstants[_id].collateralAsset = _collateralAsset;\n        creditLineConstants[_id].requestByLender = _requestByLender;\n        return _id;\n    }\n\n    /**\n     * @notice used to accept a credit line\n     * @dev if borrower places request, lender can accept and vice versa\n     * @param _id identifier for the credit line\n     */\n    function accept(uint256 _id) external {\n        require(\n            creditLineVariables[_id].status == CreditLineStatus.REQUESTED,\n            'CreditLine::acceptCreditLineLender - CreditLine is already accepted'\n        );\n        bool _requestByLender = creditLineConstants[_id].requestByLender;\n        require(\n            (msg.sender == creditLineConstants[_id].borrower && _requestByLender) ||\n                (msg.sender == creditLineConstants[_id].lender && !_requestByLender),\n            \"Only Borrower or Lender who hasn't requested can accept\"\n        );\n        creditLineVariables[_id].status = CreditLineStatus.ACTIVE;\n        emit CreditLineAccepted(_id);\n    }\n\n    /**\n     * @notice used to deposit collateral into the credit line\n     * @dev collateral tokens have to be approved in savingsAccount or token contract(unless ether).\n            If transferred from savings account, the tokens are transferred from strategies in the \n            order prespecified in strategy registry\n     * @param _id identifier for the credit line\n     * @param _amount amount of collateral being deposited\n     * @param _strategy strategy to which collateral is to be deposited in case transfer is not from savings account\n     * @param _fromSavingsAccount if true, tokens are transferred from savingsAccount \n                                otherwise direct from collateral token contract\n     */\n    function depositCollateral(\n        uint256 _id,\n        uint256 _amount,\n        address _strategy,\n        bool _fromSavingsAccount\n    ) external payable nonReentrant ifCreditLineExists(_id) {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine not active');\n        _depositCollateral(_id, _amount, _strategy, _fromSavingsAccount);\n        emit CollateralDeposited(_id, _amount, _strategy);\n    }\n\n    function _depositCollateral(\n        uint256 _id,\n        uint256 _amount,\n        address _strategy,\n        bool _fromSavingsAccount\n    ) internal {\n        require(creditLineConstants[_id].lender != msg.sender, 'lender cant deposit collateral');\n        if (_fromSavingsAccount) {\n            _depositCollateralFromSavingsAccount(_id, _amount, msg.sender);\n        } else {\n            address _collateralAsset = creditLineConstants[_id].collateralAsset;\n            ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);\n            if (_collateralAsset == address(0)) {\n                require(msg.value == _amount, \"CreditLine::_depositCollateral - value to transfer doesn't match argument\");\n            } else {\n                IERC20(_collateralAsset).safeTransferFrom(msg.sender, address(this), _amount);\n                IERC20(_collateralAsset).approve(_strategy, _amount);\n            }\n            uint256 _sharesReceived = _savingsAccount.deposit{value: msg.value}(_amount, _collateralAsset, _strategy, address(this));\n            collateralShareInStrategy[_id][_strategy] = collateralShareInStrategy[_id][_strategy].add(_sharesReceived);\n        }\n    }\n\n    function _withdrawBorrowAmount(\n        address _asset,\n        uint256 _amountInTokens,\n        address _lender\n    ) internal {\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);\n        uint256 _activeAmount;\n        for (uint256 _index = 0; _index < _strategyList.length; _index++) {\n            if (_strategyList[_index] == address(0)) {\n                continue;\n            }\n            uint256 _liquidityShares = _savingsAccount.balanceInShares(_lender, _asset, _strategyList[_index]);\n            if (_liquidityShares != 0) {\n                uint256 tokenInStrategy = _liquidityShares;\n                tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);\n                uint256 _tokensToTransfer = tokenInStrategy;\n                if (_activeAmount.add(tokenInStrategy) >= _amountInTokens) {\n                    _tokensToTransfer = (_amountInTokens.sub(_activeAmount));\n                }\n                _activeAmount = _activeAmount.add(_tokensToTransfer);\n                _savingsAccount.withdrawFrom(_tokensToTransfer, _asset, _strategyList[_index], _lender, address(this), false);\n                if (_activeAmount == _amountInTokens) {\n                    return;\n                }\n            }\n        }\n        require(_activeAmount == _amountInTokens, 'insufficient balance');\n    }\n\n    /**\n     * @notice used to borrow tokens from credit line by borrower\n     * @dev only borrower can call this function. Amount that can actually be borrowed is \n            min(amount based on borrowLimit, allowance to creditLine contract, balance of lender)\n     * @param _id identifier for the credit line\n     * @param _amount amount of tokens to borrow\n     */\n    function borrow(uint256 _id, uint256 _amount) external payable nonReentrant onlyCreditLineBorrower(_id) {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n        uint256 _borrowableAmount = calculateBorrowableAmount(_id);\n        require(_amount <= _borrowableAmount, \"CreditLine::borrow - The current collateral ratio doesn't allow to withdraw the amount\");\n        address _borrowAsset = creditLineConstants[_id].borrowAsset;\n        address _lender = creditLineConstants[_id].lender;\n\n        updateinterestAccruedTillLastPrincipalUpdate(_id);\n        creditLineVariables[_id].principal = creditLineVariables[_id].principal.add(_amount);\n        creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;\n\n        uint256 _tokenDiffBalance;\n        if (_borrowAsset != address(0)) {\n            uint256 _balanceBefore = IERC20(_borrowAsset).balanceOf(address(this));\n            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n            uint256 _balanceAfter = IERC20(_borrowAsset).balanceOf(address(this));\n            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n        } else {\n            uint256 _balanceBefore = address(this).balance;\n            _withdrawBorrowAmount(_borrowAsset, _amount, _lender);\n            uint256 _balanceAfter = address(this).balance;\n            _tokenDiffBalance = _balanceAfter.sub(_balanceBefore);\n        }\n        uint256 _protocolFee = _tokenDiffBalance.mul(protocolFeeFraction).div(10**30);\n        _tokenDiffBalance = _tokenDiffBalance.sub(_protocolFee);\n\n        if (_borrowAsset == address(0)) {\n            (bool feeSuccess, ) = protocolFeeCollector.call{value: _protocolFee}('');\n            require(feeSuccess, 'Transfer fail');\n            (bool success, ) = msg.sender.call{value: _tokenDiffBalance}('');\n            require(success, 'Transfer fail');\n        } else {\n            IERC20(_borrowAsset).safeTransfer(protocolFeeCollector, _protocolFee);\n            IERC20(_borrowAsset).safeTransfer(msg.sender, _tokenDiffBalance);\n        }\n        emit BorrowedFromCreditLine(_id, _tokenDiffBalance);\n    }\n\n    function _repayFromSavingsAccount(\n        uint256 _amount,\n        address _asset,\n        address _lender\n    ) internal {\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);\n        uint256 _activeAmount;\n\n        for (uint256 _index = 0; _index < _strategyList.length; _index++) {\n            if (_strategyList[_index] == address(0)) {\n                continue;\n            }\n            uint256 _liquidityShares = _savingsAccount.balanceInShares(msg.sender, _asset, _strategyList[_index]);\n            if (_liquidityShares == 0) {\n                continue;\n            }\n            uint256 _tokenInStrategy = _liquidityShares;\n            _tokenInStrategy = IYield(_strategyList[_index]).getTokensForShares(_liquidityShares, _asset);\n\n            uint256 _tokensToTransfer = _tokenInStrategy;\n            if (_activeAmount.add(_tokenInStrategy) >= _amount) {\n                _tokensToTransfer = (_amount.sub(_activeAmount));\n            }\n            _activeAmount = _activeAmount.add(_tokensToTransfer);\n            _savingsAccount.transferFrom(_tokensToTransfer, _asset, _strategyList[_index], msg.sender, _lender);\n\n            if (_amount == _activeAmount) {\n                return;\n            }\n        }\n        revert('CreditLine::_repayFromSavingsAccount - Insufficient balance');\n    }\n\n    function _repay(\n        uint256 _id,\n        uint256 _amount,\n        bool _fromSavingsAccount,\n        uint256 _principalPaid\n    ) internal {\n        ISavingsAccount _savingsAccount = ISavingsAccount(savingsAccount);\n        address _defaultStrategy = defaultStrategy;\n        address _borrowAsset = creditLineConstants[_id].borrowAsset;\n        address _lender = creditLineConstants[_id].lender;\n        if (!_fromSavingsAccount) {\n            if (_borrowAsset == address(0)) {\n                require(msg.value == _amount, 'creditLine::repay - Ether sent not equal to repay amount');\n                _savingsAccount.deposit{value: _amount}(_amount, _borrowAsset, _defaultStrategy, _lender);\n            } else {\n                IERC20(_borrowAsset).safeTransferFrom(msg.sender, address(this), _amount);\n                IERC20(_borrowAsset).approve(_defaultStrategy, _amount);\n                _savingsAccount.deposit(_amount, _borrowAsset, _defaultStrategy, _lender);\n            }\n        } else {\n            _repayFromSavingsAccount(_amount, _borrowAsset, _lender);\n        }\n        if (_principalPaid != 0) {\n            _savingsAccount.increaseAllowanceToCreditLine(_principalPaid, _borrowAsset, _lender);\n        }\n    }\n\n    /**\n     * @notice used to repay interest and principal to credit line. Interest has to be repaid before repaying principal\n     * @dev partial repayments possible\n     * @param _id identifier for the credit line\n     * @param _amount amount being repaid\n     * @param _fromSavingsAccount if true, tokens are transferred from savingsAccount \n                                otherwise direct from collateral token contract\n     */\n    function repay(\n        uint256 _id,\n        uint256 _amount,\n        bool _fromSavingsAccount\n    ) external payable nonReentrant {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: The credit line is not yet active.');\n        require(creditLineConstants[_id].lender != msg.sender, 'Lender cant repay');\n\n        uint256 _interestSincePrincipalUpdate = calculateInterestAccrued(_id);\n        uint256 _totalInterestAccrued = (creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate).add(\n            _interestSincePrincipalUpdate\n        );\n        uint256 _interestToPay = _totalInterestAccrued.sub(creditLineVariables[_id].totalInterestRepaid);\n        uint256 _totalCurrentDebt = _interestToPay.add(creditLineVariables[_id].principal);\n        uint256 _principalPaid = 0;\n\n        if (_amount >= _totalCurrentDebt) {\n            _amount = _totalCurrentDebt;\n            emit CompleteCreditLineRepaid(_id, _amount);\n        } else {\n            emit PartialCreditLineRepaid(_id, _amount);\n        }\n\n        if (_amount > _interestToPay) {\n            creditLineVariables[_id].principal = _totalCurrentDebt.sub(_amount);\n            creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = _totalInterestAccrued;\n            creditLineVariables[_id].lastPrincipalUpdateTime = block.timestamp;\n            creditLineVariables[_id].totalInterestRepaid = _totalInterestAccrued;\n            _principalPaid = _amount.sub(_interestToPay);\n        } else {\n            creditLineVariables[_id].totalInterestRepaid = creditLineVariables[_id].totalInterestRepaid.add(_amount);\n        }\n\n        _repay(_id, _amount, _fromSavingsAccount, _principalPaid);\n\n        if (creditLineVariables[_id].principal == 0) {\n            _resetCreditLine(_id);\n        }\n    }\n\n    function _resetCreditLine(uint256 _id) internal {\n        creditLineVariables[_id].lastPrincipalUpdateTime = 0;\n        creditLineVariables[_id].totalInterestRepaid = 0;\n        creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate = 0;\n        emit CreditLineReset(_id);\n    }\n\n    /**\n     * @dev used to close credit line by borrower or lender\n     * @param _id identifier for the credit line\n     */\n    function close(uint256 _id) external ifCreditLineExists(_id) {\n        require(\n            msg.sender == creditLineConstants[_id].borrower || msg.sender == creditLineConstants[_id].lender,\n            'CreditLine: Permission denied while closing Line of credit'\n        );\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');\n        require(creditLineVariables[_id].principal == 0, 'CreditLine: Cannot be closed since not repaid.');\n        require(creditLineVariables[_id].interestAccruedTillLastPrincipalUpdate == 0, 'CreditLine: Cannot be closed since not repaid.');\n        creditLineVariables[_id].status = CreditLineStatus.CLOSED;\n        emit CreditLineClosed(_id);\n    }\n\n    /**\n     * @notice used to calculate the current collateral ratio\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view.\n            Interest is also considered while calculating debt\n     * @param _id identifier for the credit line\n     * @return collateral ratio multiplied by 10**30 to retain precision\n     */\n    function calculateCurrentCollateralRatio(uint256 _id) public ifCreditLineExists(_id) returns (uint256) {\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(\n            creditLineConstants[_id].collateralAsset,\n            creditLineConstants[_id].borrowAsset\n        );\n\n        uint256 currentDebt = calculateCurrentDebt(_id);\n        uint256 currentCollateralRatio = calculateTotalCollateralTokens(_id).mul(_ratioOfPrices).div(currentDebt).mul(10**30).div(\n            10**_decimals\n        );\n\n        return currentCollateralRatio;\n    }\n\n    /**\n     * @notice used to calculate the total collateral tokens\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @param _id identifier for the credit line\n     * @return _amount total collateral tokens deposited into the credit line\n     */\n    function calculateTotalCollateralTokens(uint256 _id) public returns (uint256 _amount) {\n        address _collateralAsset = creditLineConstants[_id].collateralAsset;\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n        uint256 _liquidityShares;\n        for (uint256 index = 0; index < _strategyList.length; index++) {\n            if (_strategyList[index] == address(0)) {\n                continue;\n            }\n            _liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];\n            uint256 _tokenInStrategy = _liquidityShares;\n            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(_liquidityShares, _collateralAsset);\n\n            _amount = _amount.add(_tokenInStrategy);\n        }\n    }\n\n    /**\n     * @notice used to withdraw any excess collateral\n     * @dev collateral can't be withdraw if collateralRatio goes below the ideal value. Only borrower can withdraw\n     * @param _id identifier for the credit line\n     * @param _amount amount of collateral to withdraw\n     * @param _toSavingsAccount if true, tokens are transferred from savingsAccount \n                                otherwise direct from collateral token contract\n     */\n    function withdrawCollateral(\n        uint256 _id,\n        uint256 _amount,\n        bool _toSavingsAccount\n    ) external nonReentrant onlyCreditLineBorrower(_id) {\n        uint256 _withdrawableCollateral = withdrawableCollateral(_id);\n        require(_amount <= _withdrawableCollateral, 'Collateral ratio cant go below ideal');\n        address _collateralAsset = creditLineConstants[_id].collateralAsset;\n        _transferCollateral(_id, _collateralAsset, _amount, _toSavingsAccount);\n        emit CollateralWithdrawn(_id, _amount);\n    }\n\n    /**\n     * @notice used to calculate the collateral that can be withdrawn\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @param _id identifier for the credit line\n     * @return total collateral withdrawable by borrower\n     */\n    function withdrawableCollateral(uint256 _id) public returns (uint256) {\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(\n            creditLineConstants[_id].collateralAsset,\n            creditLineConstants[_id].borrowAsset\n        );\n\n        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);\n        uint256 _currentDebt = calculateCurrentDebt(_id);\n\n        uint256 _collateralNeeded = _currentDebt\n            .mul(creditLineConstants[_id].idealCollateralRatio)\n            .div(_ratioOfPrices)\n            .mul(10**_decimals)\n            .div(10**30);\n\n        if (_collateralNeeded >= _totalCollateralTokens) {\n            return 0;\n        }\n        return _totalCollateralTokens.sub(_collateralNeeded);\n    }\n\n    function _transferCollateral(\n        uint256 _id,\n        address _asset,\n        uint256 _amountInTokens,\n        bool _toSavingsAccount\n    ) internal {\n        address[] memory _strategyList = IStrategyRegistry(strategyRegistry).getStrategies();\n        uint256 _activeAmount;\n        for (uint256 index = 0; index < _strategyList.length; index++) {\n            uint256 liquidityShares = collateralShareInStrategy[_id][_strategyList[index]];\n            if (liquidityShares == 0 || _strategyList[index] == address(0)) {\n                continue;\n            }\n            uint256 _tokenInStrategy = liquidityShares;\n            _tokenInStrategy = IYield(_strategyList[index]).getTokensForShares(liquidityShares, _asset);\n            uint256 _tokensToTransfer = _tokenInStrategy;\n            if (_activeAmount.add(_tokenInStrategy) > _amountInTokens) {\n                _tokensToTransfer = _amountInTokens.sub(_activeAmount);\n                liquidityShares = liquidityShares.mul(_tokensToTransfer).div(_tokenInStrategy);\n            }\n            _activeAmount = _activeAmount.add(_tokensToTransfer);\n            collateralShareInStrategy[_id][_strategyList[index]] = collateralShareInStrategy[_id][_strategyList[index]].sub(\n                liquidityShares\n            );\n            if (_toSavingsAccount) {\n                ISavingsAccount(savingsAccount).transfer(_tokensToTransfer, _asset, _strategyList[index], msg.sender);\n            } else {\n                ISavingsAccount(savingsAccount).withdraw(_tokensToTransfer, _asset, _strategyList[index], msg.sender, false);\n            }\n\n            if (_activeAmount == _amountInTokens) {\n                return;\n            }\n        }\n        revert('insufficient collateral');\n    }\n\n    /**\n     * @notice used to liquidate credit line in case collateral ratio goes below the threshold\n     * @dev if lender liquidates, then collateral is directly transferred. \n            If autoLiquidation is true, anyone can liquidate by providing enough borrow tokens\n     * @param _id identifier for the credit line\n     * @param _toSavingsAccount if true, tokens are transferred from savingsAccount \n                                otherwise direct from collateral token contract\n     */\n    function liquidate(uint256 _id, bool _toSavingsAccount) external payable nonReentrant {\n        require(creditLineVariables[_id].status == CreditLineStatus.ACTIVE, 'CreditLine: Credit line should be active.');\n        require(creditLineVariables[_id].principal != 0, 'CreditLine: cannot liquidate if principal is 0');\n\n        uint256 currentCollateralRatio = calculateCurrentCollateralRatio(_id);\n        require(\n            currentCollateralRatio < creditLineConstants[_id].idealCollateralRatio,\n            'CreditLine: Collateral ratio is higher than ideal value'\n        );\n\n        address _collateralAsset = creditLineConstants[_id].collateralAsset;\n        address _lender = creditLineConstants[_id].lender;\n        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);\n        address _borrowAsset = creditLineConstants[_id].borrowAsset;\n\n        creditLineVariables[_id].status = CreditLineStatus.LIQUIDATED;\n\n        if (creditLineConstants[_id].autoLiquidation && _lender != msg.sender) {\n            uint256 _borrowTokens = _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);\n            if (_borrowAsset == address(0)) {\n                uint256 _returnETH = msg.value.sub(_borrowTokens, 'Insufficient ETH to liquidate');\n                if (_returnETH != 0) {\n                    (bool success, ) = msg.sender.call{value: _returnETH}('');\n                    require(success, 'Transfer fail');\n                }\n            } else {\n                IERC20(_borrowAsset).safeTransferFrom(msg.sender, _lender, _borrowTokens);\n            }\n        }\n\n        _transferCollateral(_id, _collateralAsset, _totalCollateralTokens, _toSavingsAccount);\n\n        emit CreditLineLiquidated(_id, msg.sender);\n    }\n\n    /**\n     * @notice used to calculate the borrow tokens necessary for liquidator to liquidate\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @param _id identifier for the credit line\n     * @return borrow tokens necessary for liquidator to liquidate\n     */\n    function borrowTokensToLiquidate(uint256 _id) external returns (uint256) {\n        address _collateralAsset = creditLineConstants[_id].collateralAsset;\n        uint256 _totalCollateralTokens = calculateTotalCollateralTokens(_id);\n        address _borrowAsset = creditLineConstants[_id].borrowAsset;\n\n        return _borrowTokensToLiquidate(_borrowAsset, _collateralAsset, _totalCollateralTokens);\n    }\n\n    function _borrowTokensToLiquidate(\n        address _borrowAsset,\n        address _collateralAsset,\n        uint256 _totalCollateralTokens\n    ) internal view returns (uint256) {\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(priceOracle).getLatestPrice(_borrowAsset, _collateralAsset);\n        uint256 _borrowTokens = (\n            _totalCollateralTokens.mul(uint256(10**30).sub(liquidatorRewardFraction)).div(10**30).mul(_ratioOfPrices).div(10**_decimals)\n        );\n\n        return _borrowTokens;\n    }\n\n    receive() external payable {\n        require(msg.sender == savingsAccount, 'CreditLine::receive invalid transaction');\n    }\n}\n\n\n// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../interfaces/IYield.sol';\nimport '../interfaces/Invest/IWETHGateway.sol';\nimport '../interfaces/Invest/AaveLendingPool.sol';\nimport '../interfaces/Invest/IScaledBalanceToken.sol';\nimport '../interfaces/Invest/IProtocolDataProvider.sol';\n\n/**\n * @title Yield contract\n * @notice Implements the functions to lock/unlock tokens into Aave protocol\n * @author Sublime\n **/\ncontract AaveYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @notice address of wethGateway used to deposit ETH to aave\n     */\n    address public wethGateway;\n\n    /**\n     * @notice address of protocolDataProvider which provides info about aTokens related to any token\n     */\n    address public protocolDataProvider;\n\n    /**\n     * @notice address of lendingPoolAddressesProvider used to get the pool related to any token\n     */\n    address public lendingPoolAddressesProvider;\n\n    /**\n     * @notice address of savings account contract\n     */\n    address payable public savingsAccount;\n\n    /**\n     * @notice aave referral code to represent sublime\n     */\n    uint16 public referralCode;\n\n    /**\n     * @notice emitted when aave protocol related addresses are updated\n     * @param wethGateway address of wethGateway\n     * @param protocolDataProvider address of protocol data provider\n     * @param lendingPoolAddressesProvider address of lending pool addresses provider\n     */\n    event AaveAddressesUpdated(\n        address indexed wethGateway,\n        address indexed protocolDataProvider,\n        address indexed lendingPoolAddressesProvider\n    );\n\n    /**\n     * @notice emitted when aave referral code is updated\n     * @param referralCode updated referral code\n     */\n    event ReferralCodeUpdated(uint16 referralCode);\n\n    /**\n     * @notice verifies if savings account invoked the contract\n     */\n    modifier onlySavingsAccount() {\n        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');\n        _;\n    }\n\n    /**\n     * @notice To initialize the contract addresses interacting with this contract\n     * @dev can only be initialized once\n     * @param _owner address of owner\n     * @param _savingsAccount address of the savings account contract\n     * @param _wethGateway address of wethGateway\n     * @param _protocolDataProvider the address of ProtocolDataProvider\n     * @param _lendingPoolAddressesProvider the address of LendingPoolAddressesProvider\n     **/\n    function initialize(\n        address _owner,\n        address payable _savingsAccount,\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) external initializer {\n        __Ownable_init();\n        super.transferOwnership(_owner);\n\n        _updateSavingsAccount(_savingsAccount);\n        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    /**\n     * @notice Used to get liquidity token address from asset address\n     * @param asset the address of underlying token\n     * @return aToken address of liquidity token\n     **/\n    function liquidityToken(address asset) public view override returns (address aToken) {\n        if (asset == address(0)) {\n            aToken = IWETHGateway(wethGateway).getAWETHAddress();\n        } else {\n            (aToken, , ) = IProtocolDataProvider(protocolDataProvider).getReserveTokensAddresses(asset);\n        }\n    }\n\n    /**\n     * @notice used to update savings account address\n     * @dev only owner can update\n     * @param _savingsAccount address of the updated savings account\n     */\n    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address payable _savingsAccount) internal {\n        require(_savingsAccount != address(0), 'Invest: zero address');\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update aave protocol related addresses\n     * @dev only owner can update\n     * @param _wethGateway address of wethGateway\n     * @param _protocolDataProvider address of protocol data provider\n     * @param _lendingPoolAddressesProvider address of lending pool addresses provider\n     */\n    function updateAaveAddresses(\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) external onlyOwner {\n        _updateAaveAddresses(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    function _updateAaveAddresses(\n        address _wethGateway,\n        address _protocolDataProvider,\n        address _lendingPoolAddressesProvider\n    ) internal {\n        require(_wethGateway != address(0), 'Invest: WETHGateway:: zero address');\n        require(_protocolDataProvider != address(0), 'Invest: protocolDataProvider:: zero address');\n        require(_lendingPoolAddressesProvider != address(0), 'Invest: lendingPoolAddressesProvider:: zero address');\n        wethGateway = _wethGateway;\n        protocolDataProvider = _protocolDataProvider;\n        lendingPoolAddressesProvider = _lendingPoolAddressesProvider;\n        emit AaveAddressesUpdated(_wethGateway, _protocolDataProvider, _lendingPoolAddressesProvider);\n    }\n\n    /**\n     * @notice used to update referral code\n     * @dev only owner can update\n     * @param _referralCode updated referral code\n     */\n    function updateReferralCode(uint16 _referralCode) external onlyOwner {\n        referralCode = _referralCode;\n        emit ReferralCodeUpdated(_referralCode);\n    }\n\n    /**\n     * @notice used to withdraw all tokens of a type in case of emergencies\n     * @dev only owner can withdraw\n     * @param _asset address of the token being withdrawn\n     * @param _wallet address to which tokens are withdrawn\n     */\n    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n        require(_wallet != address(0), 'cant burn');\n        uint256 amount = IERC20(liquidityToken(_asset)).balanceOf(address(this));\n\n        if (_asset == address(0)) {\n            received = _withdrawETH(amount);\n            (bool success, ) = _wallet.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(_asset, amount);\n            IERC20(_asset).safeTransfer(_wallet, received);\n        }\n    }\n\n    /**\n     * @notice Used to lock tokens in protocol\n     * @dev Asset Tokens to be locked must be approved to this contract by user\n     * @param asset the address of token to invest\n     * @param amount the amount of asset\n     * @return sharesReceived amount of shares received\n     **/\n    function lockTokens(\n        address user,\n        address asset,\n        uint256 amount\n    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n        require(amount != 0, 'Invest: amount');\n\n        address investedTo;\n        if (asset == address(0)) {\n            require(msg.value == amount, 'Invest: ETH amount');\n            (investedTo, sharesReceived) = _depositETH(amount);\n        } else {\n            IERC20(asset).safeTransferFrom(user, address(this), amount);\n            (investedTo, sharesReceived) = _depositERC20(asset, amount);\n        }\n\n        emit LockedTokens(user, investedTo, sharesReceived);\n    }\n\n    /**\n     * @notice Used to unlock tokens from available protocol\n     * @param asset the address of underlying token\n     * @param amount the amount of asset\n     * @return received amount of tokens received\n     **/\n    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {\n        require(amount != 0, 'Invest: amount');\n\n        if (asset == address(0)) {\n            received = _withdrawETH(amount);\n            (bool success, ) = savingsAccount.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(asset, amount);\n            IERC20(asset).safeTransfer(savingsAccount, received);\n        }\n\n        emit UnlockedTokens(asset, received);\n    }\n\n    /**\n     * @notice Used to unlock shares\n     * @param asset the address of underlying token\n     * @param amount the amount of shares to unlock\n     * @return received amount of shares received\n     **/\n    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        require(asset != address(0), 'Asset address cannot be address(0)');\n        IERC20(asset).safeTransfer(savingsAccount, amount);\n\n        emit UnlockedShares(asset, amount);\n        return amount;\n    }\n\n    /**\n     * @notice Used to get amount of underlying tokens for current number of shares\n     * @param shares the amount of shares\n     * @param asset the address of token locked\n     * @return amount amount of underlying tokens\n     **/\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n        if (shares == 0) return 0;\n        address aToken = liquidityToken(asset);\n\n        (, , , , , , , uint256 liquidityIndex, , ) = IProtocolDataProvider(protocolDataProvider).getReserveData(asset);\n\n        amount = IScaledBalanceToken(aToken).scaledBalanceOf(address(this)).mul(liquidityIndex).mul(shares).div(\n            IERC20(aToken).balanceOf(address(this))\n        );\n    }\n\n    /**\n     * @notice Used to get number of shares from an amount of underlying tokens\n     * @param amount the amount of tokens\n     * @param asset the address of token\n     * @return shares amount of shares for given tokens\n     **/\n    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {\n        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));\n    }\n\n    function _depositETH(uint256 amount) internal returns (address aToken, uint256 sharesReceived) {\n        aToken = IWETHGateway(wethGateway).getAWETHAddress();\n\n        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        //lock collateral\n        IWETHGateway(wethGateway).depositETH{value: amount}(lendingPool, address(this), referralCode);\n\n        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);\n    }\n\n    function _depositERC20(address asset, uint256 amount) internal returns (address aToken, uint256 sharesReceived) {\n        aToken = liquidityToken(asset);\n        uint256 aTokensBefore = IERC20(aToken).balanceOf(address(this));\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        //approve collateral to vault\n        IERC20(asset).approve(lendingPool, 0);\n        IERC20(asset).approve(lendingPool, amount);\n\n        //lock collateral in vault\n        AaveLendingPool(lendingPool).deposit(asset, amount, address(this), referralCode);\n\n        sharesReceived = IERC20(aToken).balanceOf(address(this)).sub(aTokensBefore);\n    }\n\n    function _withdrawETH(uint256 amount) internal returns (uint256 received) {\n        IERC20(IWETHGateway(wethGateway).getAWETHAddress()).approve(wethGateway, amount);\n\n        uint256 ethBalance = address(this).balance;\n\n        //lock collateral\n        IWETHGateway(wethGateway).withdrawETH(amount, address(this));\n\n        received = address(this).balance.sub(ethBalance);\n    }\n\n    function _withdrawERC(address asset, uint256 amount) internal returns (uint256 tokensReceived) {\n        address aToken = liquidityToken(asset);\n\n        address lendingPool = ILendingPoolAddressesProvider(lendingPoolAddressesProvider).getLendingPool();\n\n        uint256 tokensBefore = IERC20(asset).balanceOf(address(this));\n\n        IERC20(aToken).approve(lendingPool, amount);\n\n        //withdraw collateral from vault\n        AaveLendingPool(lendingPool).withdraw(asset, amount, address(this));\n\n        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(tokensBefore);\n    }\n\n    receive() external payable {}\n}\n\n\n",
        "CodeNames": [
            "CreditLine.sol",
            "AaveYield.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "CreditLine.sol:647, CreditLine.sol:779, AaveYield.sol:324",
                "Type": "missing approve(0)",
                "Description": "There are 3 instances where the IERC20.approve() function is called only once without setting the allowance to zero. Some tokens, like USDT, require first reducing the address' allowance to zero by calling approve(_spender, 0).",
                "Repair": "Use approve(_spender, 0) to set the allowance to zero immediately before each of the existing approve() calls"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function getLatestPrice(address num, address den) external view override returns (uint256, uint256)",
                "Type": "Price manipulation",
                "Description": "If for whatever reason the Chainlink oracle returns a malformed price due to oracle manipulation or a malfunctioned price, the result will be passed onto users, causing unintended consequences as a result.",
                "Repair": "Query both the Chainlink oracle and Uniswap pool for latest prices, ensuring that these two values are within some upper/lower bounds of each other. It may also be useful to track historic values and ensure that there are no sharp changes in price."
            },
            {
                "Location": "function liquidate(uint256 _id, address _collateralAsset, address _borrowAsset, uint256 _totalCollateralTokens, uint256 _totalBorrowTokens, address _lender) external payable",
                "Type": "Unauthorized liquidation",
                "Description": "Anyone can liquidate a position that has autoLiquidation set to false. Even worse, when autoLiquidation is set to false, the liquidator does not have to supply the initial amount of borrow tokens that normally have to be transferred when autoLiquidation is true.",
                "Repair": "Add a require statement to check that the sender is the lender if autoLiquidation is false."
            },
            {
                "Location": "function withdrawAll() external",
                "Type": "Frozen funds",
                "Description": "Full withdrawal and moving funds between strategies can lead to wrong accounting if the corresponding market has tight liquidity, which can be the case at least for AaveYield. That is, as the whole amount is required to be moved at once from Aave, both withdrawAll and switchStrategy will incorrectly account for partial withdrawal as if it was full whenever the corresponding underlying yield pool had liquidity issues.",
                "Repair": "Account for tokens received in both cases, which are _amount after unlockTokens for withdrawAll and _tokensReceived for switchStrategy."
            },
            {
                "Location": "CreditLine#_borrowTokensToLiquidate",
                "Type": "Oracle issue",
                "Description": "In CreditLine#_borrowTokensToLiquidate, the oracle is used in the wrong way, leading to loss/gain of funds for the liquidator/lender.",
                "Repair": "Consult the inverse of borrowToken/collateralToken"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../interfaces/IYield.sol';\nimport '../interfaces/Invest/ICEther.sol';\nimport '../interfaces/Invest/ICToken.sol';\n\n/**\n * @title Yield contract\n * @notice Implements the functions to lock/unlock tokens into available exchanges\n * @author Sublime\n **/\ncontract NoYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @notice stores the address of savings account contract\n     **/\n    address payable public savingsAccount;\n\n    /**\n     * @notice checks if contract is invoked by savings account\n     **/\n    modifier onlySavingsAccount() {\n        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');\n        _;\n    }\n\n    /**\n     * @notice used to initialize the variables in the contract\n     * @dev can only be called once\n     * @param _owner address of the owner\n     * @param _savingsAccount address of the savings account contract\n     **/\n    function initialize(address _owner, address payable _savingsAccount) external initializer {\n        __Ownable_init();\n        super.transferOwnership(_owner);\n\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    /**\n     * @notice used to query liquidity token for a given asset\n     * @param _asset address of the asset\n     * @return _tokenAddress address of the lqiudity token for the asset\n     **/\n    function liquidityToken(address _asset) external view override returns (address _tokenAddress) {\n        _tokenAddress = _asset;\n    }\n\n    /**\n     * @notice used to update savings account contract address\n     * @dev can only be called by owner\n     * @param _savingsAccount address of updated savings account contract\n     **/\n    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address payable _savingsAccount) internal {\n        require(_savingsAccount != address(0), 'Invest: zero address');\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to withdraw all tokens of a type in case of emergencies\n     * @dev only owner can withdraw\n     * @param _asset address of the token being withdrawn\n     * @param _wallet address to which tokens are withdrawn\n     */\n    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner returns (uint256 received) {\n        require(_wallet != address(0), 'cant burn');\n        uint256 amount = IERC20(_asset).balanceOf(address(this));\n        IERC20(_asset).safeTransfer(_wallet, received);\n        received = amount;\n    }\n\n    /**\n     * @notice Used to lock tokens in the protocol\n     * @dev Asset Tokens to be locked must be approved to this contract by user\n     * @param user the address of user\n     * @param asset the address of token to invest\n     * @param amount the amount of asset\n     * @return sharesReceived amount of shares received\n     **/\n    function lockTokens(\n        address user,\n        address asset,\n        uint256 amount\n    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n        require(amount != 0, 'Invest: amount');\n        if (asset != address(0)) {\n            IERC20(asset).safeTransferFrom(user, address(this), amount);\n        } else {\n            require(msg.value == amount, 'Invest: ETH amount');\n        }\n        sharesReceived = amount;\n        emit LockedTokens(user, asset, sharesReceived);\n    }\n\n    /**\n     * @notice Used to unlock tokens from the protocol\n     * @param asset the address of underlying token\n     * @param amount the amount of asset\n     * @return tokensReceived received amount of tokens received\n     **/\n    function unlockTokens(address asset, uint256 amount)\n        external\n        override\n        onlySavingsAccount\n        nonReentrant\n        returns (uint256 tokensReceived)\n    {\n        tokensReceived = _unlockTokens(asset, amount);\n    }\n\n    /**\n     * @notice Used to unlock shares\n     * @param asset the address of underlying token\n     * @param amount the amount of shares to unlock\n     * @return received amount of shares received\n     **/\n    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {\n        received = _unlockTokens(asset, amount);\n    }\n\n    function _unlockTokens(address asset, uint256 amount) internal returns (uint256 received) {\n        require(amount != 0, 'Invest: amount');\n        received = amount;\n        if (asset == address(0)) {\n            (bool success, ) = savingsAccount.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            IERC20(asset).safeTransfer(savingsAccount, received);\n        }\n        emit UnlockedTokens(asset, received);\n    }\n\n    /**\n     * @dev Used to get amount of underlying tokens for given number of shares\n     * @param shares the amount of shares\n     * @param asset the address of token locked\n     * @return amount amount of underlying tokens\n     **/\n    function getTokensForShares(uint256 shares, address asset) external pure override returns (uint256 amount) {\n        amount = shares;\n    }\n\n    /**\n     * @notice Used to get number of shares from an amount of underlying tokens\n     * @param amount the amount of tokens\n     * @param asset the address of token\n     * @return shares amount of shares for given tokens\n     **/\n    function getSharesForTokens(uint256 amount, address asset) external pure override returns (uint256 shares) {\n        shares = amount;\n    }\n}\n\n\n",
        "CodeNames": [
            "NoYield.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NoYield.sol#emergencyWithdraw()",
                "Type": "Wrong implementation",
                "Description": "The emergencyWithdraw() function does not work as expected because the received variable is not assigned before transferring.",
                "Repair": "Assign received variable before transferring"
            },
            {
                "Location": "NoYield.sol#emergencyWithdraw()",
                "Type": "Wrong implementation",
                "Description": "ETH tokens can never be withdrawn from the NoYield contract in the event of an emergency because the contract considers ETH as a zero address asset.",
                "Repair": "Handle the case where _asset is the zero address"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';\nimport '@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol';\nimport '../interfaces/IPoolFactory.sol';\nimport '../interfaces/IPriceOracle.sol';\nimport '../interfaces/IYield.sol';\nimport '../interfaces/IRepayment.sol';\nimport '../interfaces/ISavingsAccount.sol';\nimport '../SavingsAccount/SavingsAccountUtil.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IExtension.sol';\nimport '../interfaces/IVerification.sol';\n\n/**\n * @title Pool contract with Methods related to Pool\n * @notice Implements the functions related to Pool\n * @author Sublime\n */\ncontract Pool is Initializable, ERC20PausableUpgradeable, IPool, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    enum LoanStatus {\n        COLLECTION, //denotes collection period\n        ACTIVE, // denotes the active loan\n        CLOSED, // Loan is repaid and closed\n        CANCELLED, // Cancelled by borrower\n        DEFAULTED, // Repayment defaulted by  borrower\n        TERMINATED // Pool terminated by admin\n    }\n\n    address poolFactory;\n\n    struct LendingDetails {\n        uint256 effectiveInterestWithdrawn;\n        uint256 marginCallEndTime;\n        uint256 extraLiquidityShares;\n    }\n\n    // Pool constants\n    struct PoolConstants {\n        address borrower;\n        uint256 borrowAmountRequested;\n        uint256 loanStartTime;\n        uint256 loanWithdrawalDeadline;\n        address borrowAsset;\n        uint256 idealCollateralRatio;\n        uint256 borrowRate;\n        uint256 noOfRepaymentIntervals;\n        uint256 repaymentInterval;\n        address collateralAsset;\n        address poolSavingsStrategy; // invest contract\n        address lenderVerifier;\n    }\n\n    struct PoolVariables {\n        uint256 baseLiquidityShares;\n        uint256 extraLiquidityShares;\n        LoanStatus loanStatus;\n        uint256 penaltyLiquidityAmount;\n    }\n\n    /**\n     * @notice used to keep track of lenders' details\n     */\n    mapping(address => LendingDetails) public lenders;\n\n    /**\n     * @notice object of type PoolConstants\n     */\n    PoolConstants public poolConstants;\n\n    /**\n     * @notice object of type PoolVariables\n     */\n    PoolVariables public poolVariables;\n\n    /**\n     * @notice checks if the _user is pool's valid borrower\n     * @param _user address of the borrower\n     */\n    modifier onlyBorrower(address _user) {\n        require(_user == poolConstants.borrower, 'OB1');\n        _;\n    }\n\n    /**\n     * @notice checks if the _lender is pool's valid lender\n     * @param _lender address of the lender\n     */\n    modifier isLender(address _lender) {\n        require(balanceOf(_lender) != 0, 'IL1');\n        _;\n    }\n\n    /**\n     * @notice checks if the msg.sender is pool's valid owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == IPoolFactory(poolFactory).owner(), 'OO1');\n        _;\n    }\n\n    /**\n     * @notice checks if the msg.sender is pool's latest repayment implementation\n     */\n    modifier onlyRepaymentImpl() {\n        require(msg.sender == IPoolFactory(poolFactory).repaymentImpl(), 'OR1');\n        _;\n    }\n\n    /**\n     * @notice initializing the pool and adding initial collateral\n     * @param _borrowAmountRequested the amount of borrow asset requested by the borrower\n     * @param _borrower address of the borrower\n     * @param _borrowAsset address of the borrow asset\n     * @param _collateralAsset address of the collateral asset\n     * @param _idealCollateralRatio the ideal collateral ratio of the pool\n     * @param _borrowRate the borrow rate as specified by borrower\n     * @param _repaymentInterval the interval between to repayments\n     * @param _noOfRepaymentIntervals number of repayments to be done by borrower\n     * @param _poolSavingsStrategy address of the savings strategy preferred\n     * @param _collateralAmount amount of collateral to be deposited by the borrower\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     * @param _loanWithdrawalDuration time interval for the borrower to withdraw the lent amount in borrow asset\n     * @param _collectionPeriod time interval where lender lend into the borrow pool\n     */\n    function initialize(\n        uint256 _borrowAmountRequested,\n        uint256 _borrowRate,\n        address _borrower,\n        address _borrowAsset,\n        address _collateralAsset,\n        uint256 _idealCollateralRatio,\n        uint256 _repaymentInterval,\n        uint256 _noOfRepaymentIntervals,\n        address _poolSavingsStrategy,\n        uint256 _collateralAmount,\n        bool _transferFromSavingsAccount,\n        address _lenderVerifier,\n        uint256 _loanWithdrawalDuration,\n        uint256 _collectionPeriod\n    ) external payable initializer {\n        poolFactory = msg.sender;\n        poolConstants.borrowAsset = _borrowAsset;\n        poolConstants.idealCollateralRatio = _idealCollateralRatio;\n        poolConstants.collateralAsset = _collateralAsset;\n        poolConstants.poolSavingsStrategy = _poolSavingsStrategy;\n        poolConstants.borrowAmountRequested = _borrowAmountRequested;\n        _initialDeposit(_borrower, _collateralAmount, _transferFromSavingsAccount);\n        poolConstants.borrower = _borrower;\n        poolConstants.borrowRate = _borrowRate;\n        poolConstants.noOfRepaymentIntervals = _noOfRepaymentIntervals;\n        poolConstants.repaymentInterval = _repaymentInterval;\n        poolConstants.lenderVerifier = _lenderVerifier;\n\n        poolConstants.loanStartTime = block.timestamp.add(_collectionPeriod);\n        poolConstants.loanWithdrawalDeadline = block.timestamp.add(_collectionPeriod).add(_loanWithdrawalDuration);\n        __ERC20_init('Pool Tokens', 'PT');\n        try ERC20Upgradeable(_borrowAsset).decimals() returns(uint8 _decimals) {\n            _setupDecimals(_decimals);\n        } catch(bytes memory) {}\n    }\n\n    /**\n     * @notice add collateral to a pool\n     * @param _amount amount of collateral to be deposited denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     */\n    function depositCollateral(uint256 _amount, bool _transferFromSavingsAccount) external payable override {\n        require(_amount != 0, 'DC1');\n        require(balanceOf(msg.sender) == 0, 'DC2');\n        _depositCollateral(msg.sender, _amount, _transferFromSavingsAccount);\n    }\n\n    /**\n     * @notice called when borrow pool is initialized to make initial collateral deposit\n     * @param _borrower address of the borrower\n     * @param _amount amount of collateral getting deposited denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from msg.sender's savings account, if false, it is transferred from their wallet\n     */\n    function _initialDeposit(\n        address _borrower,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) internal {\n        uint256 _equivalentCollateral = getEquivalentTokens(\n            poolConstants.borrowAsset,\n            poolConstants.collateralAsset,\n            poolConstants.borrowAmountRequested\n        );\n        require(_amount >= poolConstants.idealCollateralRatio.mul(_equivalentCollateral).div(1e30), 'ID1');\n        _depositCollateral(_borrower, _amount, _transferFromSavingsAccount);\n    }\n\n    /**\n     * @notice internal function used to deposit collateral from _borrower to pool\n     * @param _depositor address transferring the collateral\n     * @param _amount amount of collateral to be transferred denominated in collateral asset\n     * @param _transferFromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet\n     */\n    function _depositCollateral(\n        address _depositor,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) internal nonReentrant {\n        uint256 _sharesReceived = _deposit(\n            _transferFromSavingsAccount,\n            true,\n            poolConstants.collateralAsset,\n            _amount,\n            poolConstants.poolSavingsStrategy,\n            _depositor,\n            address(this)\n        );\n        poolVariables.baseLiquidityShares = poolVariables.baseLiquidityShares.add(_sharesReceived);\n        emit CollateralAdded(_depositor, _amount, _sharesReceived);\n    }\n\n    /**\n     * @notice internal function used to get amount of collateral deposited to the pool\n     * @param _fromSavingsAccount if true, collateral is transferred from _sender's savings account, if false, it is transferred from _sender's wallet\n     * @param _toSavingsAccount if true, collateral is transferred to pool's savings account, if false, it is withdrawn from _sender's savings account\n     * @param _asset address of the asset to be deposited\n     * @param _amount amount of tokens to be deposited in the pool\n     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit\n     * @param _depositFrom address which makes the deposit\n     * @param _depositTo address to which the tokens are deposited\n     * @return _sharesReceived number of equivalent shares for given _asset\n     */\n    function _deposit(\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        address _asset,\n        uint256 _amount,\n        address _poolSavingsStrategy,\n        address _depositFrom,\n        address _depositTo\n    ) internal returns (uint256 _sharesReceived) {\n        if (_fromSavingsAccount) {\n            _sharesReceived = SavingsAccountUtil.depositFromSavingsAccount(\n                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n                _depositFrom,\n                _depositTo,\n                _amount,\n                _asset,\n                _poolSavingsStrategy,\n                true,\n                _toSavingsAccount\n            );\n        } else {\n            _sharesReceived = SavingsAccountUtil.directDeposit(\n                ISavingsAccount(IPoolFactory(poolFactory).savingsAccount()),\n                _depositFrom,\n                _depositTo,\n                _amount,\n                _asset,\n                _toSavingsAccount,\n                _poolSavingsStrategy\n            );\n        }\n    }\n\n    /**\n     * @notice used to add extra collateral deposit during margin calls\n     * @param _lender the address of the _lender who has requested for margin call\n     * @param _amount amount of tokens requested for the margin call\n     * @param _transferFromSavingsAccount if true, collateral is transferred from borrower's savings account, if false, it is transferred from borrower's wallet\n     */\n    function addCollateralInMarginCall(\n        address _lender,\n        uint256 _amount,\n        bool _transferFromSavingsAccount\n    ) external payable override nonReentrant {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'ACMC1');\n        require(balanceOf(msg.sender) == 0, 'ACMC2');\n        require(getMarginCallEndTime(_lender) >= block.timestamp, 'ACMC3');\n\n        require(_amount != 0, 'ACMC4');\n\n        uint256 _sharesReceived = _deposit(\n            _transferFromSavingsAccount,\n            true,\n            poolConstants.collateralAsset,\n            _amount,\n            poolConstants.poolSavingsStrategy,\n            msg.sender,\n            address(this)\n        );\n\n        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.add(_sharesReceived);\n\n        lenders[_lender].extraLiquidityShares = lenders[_lender].extraLiquidityShares.add(_sharesReceived);\n\n        if (getCurrentCollateralRatio(_lender) >= poolConstants.idealCollateralRatio) {\n            delete lenders[_lender].marginCallEndTime;\n        }\n\n        emit MarginCallCollateralAdded(msg.sender, _lender, _amount, _sharesReceived);\n    }\n\n    /**\n     * @notice used by the borrower to withdraw tokens from the pool when loan is active\n     */\n    function withdrawBorrowedAmount() external override onlyBorrower(msg.sender) nonReentrant {\n        LoanStatus _poolStatus = poolVariables.loanStatus;\n        uint256 _tokensLent = totalSupply();\n        require(\n            _poolStatus == LoanStatus.COLLECTION &&\n                poolConstants.loanStartTime < block.timestamp &&\n                block.timestamp < poolConstants.loanWithdrawalDeadline,\n            'WBA1'\n        );\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(_tokensLent >= _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30), 'WBA2');\n\n        poolVariables.loanStatus = LoanStatus.ACTIVE;\n        uint256 _currentCollateralRatio = getCurrentCollateralRatio();\n        require(_currentCollateralRatio >= poolConstants.idealCollateralRatio, 'WBA3');\n\n        uint256 _noOfRepaymentIntervals = poolConstants.noOfRepaymentIntervals;\n        uint256 _repaymentInterval = poolConstants.repaymentInterval;\n        IRepayment(_poolFactory.repaymentImpl()).initializeRepayment(\n            _noOfRepaymentIntervals,\n            _repaymentInterval,\n            poolConstants.borrowRate,\n            poolConstants.loanStartTime,\n            poolConstants.borrowAsset\n        );\n        IExtension(_poolFactory.extension()).initializePoolExtension(_repaymentInterval);\n\n        address _borrowAsset = poolConstants.borrowAsset;\n        (uint256 _protocolFeeFraction, address _collector) = _poolFactory.getProtocolFeeData();\n        uint256 _protocolFee = _tokensLent.mul(_protocolFeeFraction).div(10**30);\n        delete poolConstants.loanWithdrawalDeadline;\n\n        uint256 _feeAdjustedWithdrawalAmount = _tokensLent.sub(_protocolFee);\n\n        SavingsAccountUtil.transferTokens(_borrowAsset, _protocolFee, address(this), _collector);\n        SavingsAccountUtil.transferTokens(_borrowAsset, _feeAdjustedWithdrawalAmount, address(this), msg.sender);\n\n        emit AmountBorrowed(_feeAdjustedWithdrawalAmount, _protocolFee);\n    }\n\n    /**\n     * @notice internal function used to withdraw all collateral tokens from the pool (minus penalty)\n     * @param _receiver address which receives all the collateral tokens\n     * @param _penalty amount of penalty incurred by the borrower when pool is cancelled\n     */\n    function _withdrawAllCollateral(address _receiver, uint256 _penalty) internal {\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        address _collateralAsset = poolConstants.collateralAsset;\n        uint256 _collateralShares = 0;\n        if (poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares) > _penalty) {\n            _collateralShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares).sub(_penalty);\n        }\n        // uint256 _collateralTokens = _collateralShares;\n        uint256 _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralShares, _collateralAsset);\n\n        poolVariables.baseLiquidityShares = _penalty;\n        delete poolVariables.extraLiquidityShares;\n\n        uint256 _sharesReceived;\n        if (_collateralShares != 0) {\n            ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());\n            _sharesReceived = SavingsAccountUtil.savingsAccountTransfer(\n                _savingsAccount,\n                address(this),\n                _receiver,\n                _collateralTokens,\n                _collateralAsset,\n                _poolSavingsStrategy\n            );\n        }\n        emit CollateralWithdrawn(_receiver, _sharesReceived);\n    }\n\n    /**\n     * @notice used by lender to supply liquidity to a borrow pool\n     * @param _lender address of the lender\n     * @param _amount amount of liquidity supplied by the _lender\n     * @param _strategy address of strategy from which tokens are lent if done from savings account, \n     *                  in case of direct deposits, zeroAddress should be used\n     */\n    function lend(\n        address _lender,\n        uint256 _amount,\n        address _strategy\n    ) external payable nonReentrant {\n        address _lenderVerifier = poolConstants.lenderVerifier;\n        address _borrower = poolConstants.borrower;\n        require(_lender != _borrower && _borrower != msg.sender, 'L1');\n        if (_lenderVerifier != address(0)) {\n            require(IVerification(IPoolFactory(poolFactory).userRegistry()).isUser(_lender, _lenderVerifier), 'L2');\n        }\n        require(poolVariables.loanStatus == LoanStatus.COLLECTION && block.timestamp < poolConstants.loanStartTime, 'L3');\n        uint256 _borrowAmountNeeded = poolConstants.borrowAmountRequested;\n        uint256 _lentAmount = totalSupply();\n        if (_amount.add(_lentAmount) > _borrowAmountNeeded) {\n            _amount = _borrowAmountNeeded.sub(_lentAmount);\n        }\n\n        address _borrowToken = poolConstants.borrowAsset;\n        bool _fromSavingsAccount;\n        if(_strategy != address(0)) {\n            _fromSavingsAccount = true;\n        }\n        _deposit(\n            _fromSavingsAccount,\n            false,\n            _borrowToken,\n            _amount,\n            _strategy,\n            msg.sender,\n            address(this)\n        );\n        _mint(_lender, _amount);\n        emit LiquiditySupplied(_amount, _lender);\n    }\n\n    /**\n     * @notice used to transfer borrow pool tokens among lenders\n     * @param _from address of the lender who sends the borrow pool tokens\n     * @param _to addres of the lender who receives the borrow pool tokens\n     * @param _amount amount of borrow pool tokens transfered\n     */\n    function _beforeTokenTransfer(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) internal override {\n        if (_to != address(0)) {\n            require(!paused(), 'TT1');\n        }\n        require(_to != poolConstants.borrower, 'TT2');\n\n        if (_from == address(0) || _to == address(0)) {\n            return;\n        }\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        address _lenderVerifier = poolConstants.lenderVerifier;\n        if (_lenderVerifier != address(0)) {\n            require(IVerification(_poolFactory.userRegistry()).isUser(_to, _lenderVerifier), 'TT5');\n        }\n        require(getMarginCallEndTime(_from) == 0, 'TT3');\n        require(getMarginCallEndTime(_to) == 0, 'TT4');\n\n        //Withdraw repayments for user\n\n        //We enforce pending interest withdrawals before the transfers\n        \n        //effectiveInterestWithdrawn stores the interest we assume addresses have withdrawn to simplify future interest withdrawals.\n        // For eg, if _from has 100 pool tokens, _to has 50 pool tokens, and _amount is 50, the effectiveInterestWithdrawn for \n        // _from is done using 50 pool tokens, since future interest repayment withdrawals are done with respect to 50 tokens for _from\n        // Similarly, we use 100 for _to's effectiveInterestWithdrawn calculation since their future interest withdrawals are calculated\n        // based on 100 pool tokens. Refer calculateRepaymentWithdrawable()\n        _withdrawRepayment(_from);\n        _withdrawRepayment(_to);\n        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));\n        uint256 _totalSupply = totalSupply();\n        uint256 _fromBalance = balanceOf(_from);\n        uint256 _toBalance = balanceOf(_to);\n        lenders[_from].effectiveInterestWithdrawn = (_fromBalance.sub(_amount)).mul(_totalRepaidAmount).div(_totalSupply);\n        lenders[_to].effectiveInterestWithdrawn = (_toBalance.add(_amount)).mul(_totalRepaidAmount).div(_totalSupply);\n\n        IExtension(_poolFactory.extension()).removeVotes(_from, _to, _amount);\n\n        //transfer extra liquidity shares\n        uint256 _liquidityShare = lenders[_from].extraLiquidityShares;\n        if (_liquidityShare == 0) return;\n\n        uint256 toTransfer = _liquidityShare;\n        if (_amount != _fromBalance) {\n            toTransfer = (_amount.mul(_liquidityShare)).div(_fromBalance);\n        }\n\n        lenders[_from].extraLiquidityShares = lenders[_from].extraLiquidityShares.sub(toTransfer);\n        lenders[_to].extraLiquidityShares = lenders[_to].extraLiquidityShares.add(toTransfer);\n    }\n\n    function _calculatePenaltyTime(uint256 _loanStartTime, uint256 _loanWithdrawalDeadline) internal view returns (uint256) {\n        uint256 _penaltyTime = poolConstants.repaymentInterval;\n        if (block.timestamp > _loanStartTime) {\n            uint256 _penaltyEndTime = block.timestamp;\n            if (block.timestamp > _loanWithdrawalDeadline) {\n                _penaltyEndTime = _loanWithdrawalDeadline;\n            }\n            _penaltyTime = _penaltyTime.add(_penaltyEndTime.sub(_loanStartTime));\n        }\n        return _penaltyTime;\n    }\n\n    /**\n     * @notice used to cancel pool when the minimum borrow amount is not met\n     */\n    function cancelPool() external {\n        LoanStatus _poolStatus = poolVariables.loanStatus;\n        require(_poolStatus == LoanStatus.COLLECTION, 'CP1');\n        uint256 _loanStartTime = poolConstants.loanStartTime;\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n\n        if (\n            _loanStartTime < block.timestamp &&\n            totalSupply() < _poolFactory.minBorrowFraction().mul(poolConstants.borrowAmountRequested).div(10**30)\n        ) {\n            return _cancelPool(0);\n        }\n\n        uint256 _loanWithdrawalDeadline = poolConstants.loanWithdrawalDeadline;\n\n        if (_loanWithdrawalDeadline > block.timestamp) {\n            require(msg.sender == poolConstants.borrower, 'CP2');\n        }\n        // note: extra liquidity shares are not applicable as the loan never reaches active state\n        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares;\n        uint256 _penaltyTime = _calculatePenaltyTime(_loanStartTime, _loanWithdrawalDeadline);\n        uint256 _cancelPenaltyMultiple = _poolFactory.poolCancelPenaltyMultiple();\n        uint256 penalty = _cancelPenaltyMultiple\n            .mul(poolConstants.borrowRate)\n            .div(10**30)\n            .mul(_collateralLiquidityShare)\n            .div(10**30)\n            .mul(_penaltyTime)\n            .div(365 days);\n        _cancelPool(penalty);\n    }\n\n    /**\n     * @notice internal function to cancel borrow pool\n     * @param _penalty amount to be paid as penalty to cancel pool\n     */\n    function _cancelPool(uint256 _penalty) internal {\n        poolVariables.loanStatus = LoanStatus.CANCELLED;\n        _withdrawAllCollateral(poolConstants.borrower, _penalty);\n        _pause();\n        emit PoolCancelled();\n    }\n\n    /**\n     * @notice used to liquidate the penalty amount when pool is calcelled\n     * @dev _receiveLiquidityShares doesn't matter when _toSavingsAccount is true\n     * @param _toSavingsAccount if true, liquidity transfered to lender's savings account. If false, liquidity transfered to lender's wallet\n     * @param _receiveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidateCancelPenalty(bool _toSavingsAccount, bool _receiveLiquidityShare) external nonReentrant {\n        require(poolVariables.loanStatus == LoanStatus.CANCELLED, 'LCP1');\n        require(poolVariables.penaltyLiquidityAmount == 0, 'LCP2');\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        address _collateralAsset = poolConstants.collateralAsset;\n        // note: extra liquidity shares are not applicable as the loan never reaches active state\n        uint256 _collateralTokens = poolVariables.baseLiquidityShares;\n        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralTokens, _collateralAsset);\n\n        uint256 _liquidationTokens = correspondingBorrowTokens(\n            _collateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n        poolVariables.penaltyLiquidityAmount = _liquidationTokens;\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _liquidationTokens, msg.sender, address(this));\n        _withdraw(\n            _toSavingsAccount,\n            _receiveLiquidityShare,\n            poolConstants.collateralAsset,\n            poolConstants.poolSavingsStrategy,\n            _collateralTokens\n        );\n    }\n\n    /**\n     * @notice used to terminate the pool\n     * @dev kill switch for owner to terminate the pool\n     */\n    function terminatePool() external onlyOwner {\n        _withdrawAllCollateral(msg.sender, 0);\n        _pause();\n        poolVariables.loanStatus = LoanStatus.TERMINATED;\n        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();\n        emit PoolTerminated();\n    }\n\n    /**\n     * @notice called to close the loan after repayment of principal\n     */\n    function closeLoan() external payable override nonReentrant onlyRepaymentImpl {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'CL1');\n\n        poolVariables.loanStatus = LoanStatus.CLOSED;\n\n        IExtension(IPoolFactory(poolFactory).extension()).closePoolExtension();\n        _withdrawAllCollateral(poolConstants.borrower, 0);\n        _pause();\n\n        emit PoolClosed();\n    }\n\n    /**\n     * @notice used to return total remaining repayments along with provided liquidity to the lender\n     * @dev burns all shares and returns total remaining repayments along with provided liquidity\n     */\n    function withdrawLiquidity() external isLender(msg.sender) nonReentrant {\n        LoanStatus _loanStatus = poolVariables.loanStatus;\n\n        require(\n            _loanStatus == LoanStatus.CLOSED ||\n                _loanStatus == LoanStatus.CANCELLED ||\n                _loanStatus == LoanStatus.DEFAULTED ||\n                _loanStatus == LoanStatus.TERMINATED,\n            'WL1'\n        );\n\n        //gets amount through liquidity shares\n        uint256 _actualBalance = balanceOf(msg.sender);\n        uint256 _toTransfer = _actualBalance;\n\n        if (_loanStatus == LoanStatus.DEFAULTED || _loanStatus == LoanStatus.TERMINATED) {\n            uint256 _totalAsset;\n            if (poolConstants.borrowAsset != address(0)) {\n                _totalAsset = IERC20(poolConstants.borrowAsset).balanceOf(address(this));\n            } else {\n                _totalAsset = address(this).balance;\n            }\n            //assuming their will be no tokens in pool in any case except liquidation (to be checked) or we should store the amount in liquidate()\n            _toTransfer = _toTransfer.mul(_totalAsset).div(totalSupply());\n        }\n\n        if (_loanStatus == LoanStatus.CANCELLED) {\n            _toTransfer = _toTransfer.add(_toTransfer.mul(poolVariables.penaltyLiquidityAmount).div(totalSupply()));\n        }\n\n        if (_loanStatus == LoanStatus.CLOSED) {\n            //transfer repayment\n            _withdrawRepayment(msg.sender);\n        }\n        //to add transfer if not included in above (can be transferred with liquidity)\n        _burn(msg.sender, _actualBalance);\n\n        //transfer liquidity provided\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _toTransfer, address(this), msg.sender);\n\n        emit LiquidityWithdrawn(_toTransfer, msg.sender);\n    }\n\n    /**\n     * @notice function is executed by lender to exercise margin call\n     * @dev It will revert in case collateral ratio is not below expected value\n     * or the lender has already called it.\n     */\n\n    function requestMarginCall() external isLender(msg.sender) {\n        require(poolVariables.loanStatus == LoanStatus.ACTIVE, 'RMC1');\n\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(getMarginCallEndTime(msg.sender) == 0, 'RMC2');\n        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(msg.sender), 'RMC3');\n\n        lenders[msg.sender].marginCallEndTime = block.timestamp.add(_poolFactory.marginCallDuration());\n\n        emit MarginCalled(msg.sender);\n    }\n\n    /**\n     * @notice used to get the interest accrued till current time in the current loan duration\n     * @return ineterest accrued till current time\n     */\n    function interestToPay() public view returns (uint256) {\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        (uint256 _loanDurationCovered, uint256 _interestPerSecond) = IRepayment(_poolFactory.repaymentImpl()).getInterestCalculationVars(\n            address(this)\n        );\n        uint256 _currentBlockTime = block.timestamp.mul(10**30);\n        uint256 _loanDurationTillNow = _currentBlockTime.sub(poolConstants.loanStartTime.mul(10**30));\n        if (_loanDurationTillNow <= _loanDurationCovered) {\n            return 0;\n        }\n        uint256 _interestAccrued = _interestPerSecond.mul(_loanDurationTillNow.sub(_loanDurationCovered)).div(10**60);\n\n        return _interestAccrued;\n    }\n\n    /**\n     * @notice used to calculate the collateral ratio\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @param _balance the principal amount lent\n     * @param _liquidityShares amount of collateral tokens available\n     * @return _ratio the collateral ratio\n     */\n    function calculateCollateralRatio(uint256 _balance, uint256 _liquidityShares) public returns (uint256 _ratio) {\n        uint256 _interest = interestToPay().mul(_balance).div(totalSupply());\n        address _collateralAsset = poolConstants.collateralAsset;\n        address _strategy = poolConstants.poolSavingsStrategy;\n        uint256 _currentCollateralTokens = IYield(_strategy).getTokensForShares(_liquidityShares, _collateralAsset);\n\n        uint256 _equivalentCollateral = getEquivalentTokens(_collateralAsset, poolConstants.borrowAsset, _currentCollateralTokens);\n        _ratio = _equivalentCollateral.mul(10**30).div(_balance.add(_interest));\n    }\n\n    /**\n     * @notice used to get the current collateral ratio of the borrow pool\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @return _ratio the current collateral ratio of the borrow pool\n     */\n    function getCurrentCollateralRatio() public returns (uint256 _ratio) {\n        uint256 _liquidityShares = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);\n\n        _ratio = calculateCollateralRatio(totalSupply(), _liquidityShares);\n    }\n\n    /**\n     * @notice used to get the current collateral ratio of a lender\n     * @dev is a view function for the protocol itself, but isn't view because of getTokensForShares which is not view\n     * @return _ratio the current collateral ratio of the lender\n     */\n    function getCurrentCollateralRatio(address _lender) public returns (uint256 _ratio) {\n        uint256 _balanceOfLender = balanceOf(_lender);\n        uint256 _liquidityShares = (poolVariables.baseLiquidityShares.mul(_balanceOfLender).div(totalSupply())).add(\n            lenders[_lender].extraLiquidityShares\n        );\n\n        return (calculateCollateralRatio(_balanceOfLender, _liquidityShares));\n    }\n\n    /**\n     * @notice used to liquidate the pool if the borrower has defaulted\n     * @param _fromSavingsAccount if true, collateral is transferred from sender's savings account, if false, it is transferred from sender's wallet\n     * @param _toSavingsAccount if true, liquidity transfered to sender's savings account. If false, liquidity transfered to sender's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidatePool(\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare\n    ) external payable nonReentrant {\n        LoanStatus _currentPoolStatus = poolVariables.loanStatus;\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        require(_currentPoolStatus == LoanStatus.ACTIVE, 'LP1');\n        require(IRepayment(_poolFactory.repaymentImpl()).didBorrowerDefault(address(this)), 'LP2');\n        poolVariables.loanStatus = LoanStatus.DEFAULTED;\n\n        address _collateralAsset = poolConstants.collateralAsset;\n        address _borrowAsset = poolConstants.borrowAsset;\n        uint256 _collateralLiquidityShare = poolVariables.baseLiquidityShares.add(poolVariables.extraLiquidityShares);\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n\n        uint256 _collateralTokens = _collateralLiquidityShare;\n        _collateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_collateralLiquidityShare, _collateralAsset);\n\n        uint256 _poolBorrowTokens = correspondingBorrowTokens(\n            _collateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n        delete poolVariables.extraLiquidityShares;\n        delete poolVariables.baseLiquidityShares;\n\n        _deposit(_fromSavingsAccount, false, _borrowAsset, _poolBorrowTokens, _poolFactory.noStrategyAddress(), msg.sender, address(this));\n        _withdraw(_toSavingsAccount, _recieveLiquidityShare, _collateralAsset, _poolSavingsStrategy, _collateralTokens);\n        emit PoolLiquidated(msg.sender);\n    }\n\n    /**\n     * @notice internal function used to withdraw tokens\n     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     * @param _asset address of the asset to be withdrawn\n     * @param _poolSavingsStrategy address of the saving strategy used for collateral deposit\n     * @param _amountInTokens amount of tokens to be withdrawn from the pool\n     * @return amount of equivalent shares from given asset\n     */\n    function _withdraw(\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare,\n        address _asset,\n        address _poolSavingsStrategy,\n        uint256 _amountInTokens\n    ) internal returns (uint256) {\n        ISavingsAccount _savingsAccount = ISavingsAccount(IPoolFactory(poolFactory).savingsAccount());\n        return\n            SavingsAccountUtil.depositFromSavingsAccount(\n                _savingsAccount,\n                address(this),\n                msg.sender,\n                _amountInTokens,\n                _asset,\n                _poolSavingsStrategy,\n                _recieveLiquidityShare,\n                _toSavingsAccount\n            );\n    }\n\n    /**\n     * @notice used to ensure if a lender can be liquidated\n     * @param _lender address of the lender to be liquidated\n     */\n    function _canLenderBeLiquidated(address _lender) internal {\n        require((poolVariables.loanStatus == LoanStatus.ACTIVE) && (block.timestamp > poolConstants.loanWithdrawalDeadline), 'CLBL1');\n        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;\n        require(getMarginCallEndTime(_lender) != 0, 'CLBL2');\n        require(_marginCallEndTime < block.timestamp, 'CLBL3');\n\n        require(poolConstants.idealCollateralRatio > getCurrentCollateralRatio(_lender), 'CLBL4');\n        require(balanceOf(_lender) != 0, 'CLBL5');\n    }\n\n    /**\n     * @notice used to add extra liquidity shares to lender's share\n     * @param _lender address of the lender to be liquidated\n     * @return _lenderCollateralLPShare share of the lender in collateral tokens\n     * @return _lenderBalance balance of lender in pool tokens\n     */\n    function _updateLenderSharesDuringLiquidation(address _lender)\n        internal\n        returns (uint256 _lenderCollateralLPShare, uint256 _lenderBalance)\n    {\n        uint256 _poolBaseLPShares = poolVariables.baseLiquidityShares;\n        _lenderBalance = balanceOf(_lender);\n\n        uint256 _lenderBaseLPShares = (_poolBaseLPShares.mul(_lenderBalance)).div(totalSupply());\n        uint256 _lenderExtraLPShares = lenders[_lender].extraLiquidityShares;\n        poolVariables.baseLiquidityShares = _poolBaseLPShares.sub(_lenderBaseLPShares);\n        poolVariables.extraLiquidityShares = poolVariables.extraLiquidityShares.sub(_lenderExtraLPShares);\n\n        _lenderCollateralLPShare = _lenderBaseLPShares.add(_lenderExtraLPShares);\n    }\n\n    /**\n     * @notice internal function to liquidate lender of the borrow pool\n     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet\n     * @param _lender address of the lender to be liquidated\n     * @param _lenderCollateralTokens share of the lender in collateral tokens\n     */\n    function _liquidateForLender(\n        bool _fromSavingsAccount,\n        address _lender,\n        uint256 _lenderCollateralTokens\n    ) internal {\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n\n        IPoolFactory _poolFactory = IPoolFactory(poolFactory);\n        uint256 _lenderLiquidationTokens = correspondingBorrowTokens(\n            _lenderCollateralTokens,\n            _poolFactory.priceOracle(),\n            _poolFactory.liquidatorRewardFraction()\n        );\n\n        address _borrowAsset = poolConstants.borrowAsset;\n        _deposit(_fromSavingsAccount, false, _borrowAsset, _lenderLiquidationTokens, _poolSavingsStrategy, msg.sender, _lender);\n        _withdrawRepayment(_lender);\n    }\n\n    /**\n     * @notice used to liquidate lender and burn lender's shares\n     * @param _lender address of the lender to be liquidated\n     * @param _fromSavingsAccount if true, collateral is transferred from lender's savings account, if false, it is transferred from lender's wallet\n     * @param _toSavingsAccount if true, liquidity transfered to receiver's savings account. If false, liquidity transfered to receiver's wallet\n     * @param _recieveLiquidityShare if true, equivalent liquidity tokens are withdrawn. If false, assets are withdrawn\n     */\n    function liquidateForLender(\n        address _lender,\n        bool _fromSavingsAccount,\n        bool _toSavingsAccount,\n        bool _recieveLiquidityShare\n    ) external payable nonReentrant {\n        _canLenderBeLiquidated(_lender);\n\n        address _poolSavingsStrategy = poolConstants.poolSavingsStrategy;\n        (uint256 _lenderCollateralLPShare, uint256 _lenderBalance) = _updateLenderSharesDuringLiquidation(_lender);\n\n        uint256 _lenderCollateralTokens = _lenderCollateralLPShare;\n        _lenderCollateralTokens = IYield(_poolSavingsStrategy).getTokensForShares(_lenderCollateralLPShare, poolConstants.collateralAsset);\n\n        _liquidateForLender(_fromSavingsAccount, _lender, _lenderCollateralTokens);\n\n        uint256 _amountReceived = _withdraw(\n            _toSavingsAccount,\n            _recieveLiquidityShare,\n            poolConstants.collateralAsset,\n            _poolSavingsStrategy,\n            _lenderCollateralTokens\n        );\n        _burn(_lender, _lenderBalance);\n        delete lenders[_lender];\n        emit LenderLiquidated(msg.sender, _lender, _amountReceived);\n    }\n\n    /**\n     * @notice used to get corresponding borrow tokens for given collateral tokens\n     * @param _totalCollateralTokens amount of collateral tokens\n     * @param _priceOracle address of the pool\n     * @param _fraction Incentivizing fraction for the liquidator\n     * @return corresponding borrow tokens for collateral tokens\n     */\n    function correspondingBorrowTokens(\n        uint256 _totalCollateralTokens,\n        address _priceOracle,\n        uint256 _fraction\n    ) public view returns (uint256) {\n        (uint256 _ratioOfPrices, uint256 _decimals) = IPriceOracle(_priceOracle).getLatestPrice(\n            poolConstants.collateralAsset,\n            poolConstants.borrowAsset\n        );\n        return _totalCollateralTokens.mul(_ratioOfPrices).div(10**_decimals).mul(uint256(10**30).sub(_fraction)).div(10**30);\n    }\n\n    /**\n     * @notice used to get the interest per second on the principal amount\n     * @param _principal amount of principal lent\n     * @return interest accrued on the principal in a second\n     */\n    function interestPerSecond(uint256 _principal) public view returns (uint256) {\n        uint256 _interest = ((_principal).mul(poolConstants.borrowRate)).div(365 days);\n        return _interest;\n    }\n\n    /**\n     * @notice used to get the interest per period on the principal amount\n     * @param _balance amount of principal lent\n     * @return interest accrued on the principal in a period\n     */\n    function interestPerPeriod(uint256 _balance) external view returns (uint256) {\n        return (interestPerSecond(_balance).mul(poolConstants.repaymentInterval));\n    }\n\n    /**\n     * @notice used to get the current repayment period for the borrow pool\n     * @return current repayment period\n     */\n    function calculateCurrentPeriod() external view returns (uint256) {\n        uint256 _currentPeriod = (block.timestamp.sub(poolConstants.loanStartTime, '34')).div(poolConstants.repaymentInterval);\n        return _currentPeriod;\n    }\n\n    /**\n     * @notice internal function used to get the withdrawable amount for a _lender\n     * @param _lender address of the _lender\n     * @return amount of withdrawable token from the borrow pool\n     */\n    function calculateRepaymentWithdrawable(address _lender) public view returns (uint256) {\n        uint256 _totalRepaidAmount = IRepayment(IPoolFactory(poolFactory).repaymentImpl()).getTotalRepaidAmount(address(this));\n\n        uint256 _amountWithdrawable = (balanceOf(_lender).mul(_totalRepaidAmount).div(totalSupply())).sub(\n            lenders[_lender].effectiveInterestWithdrawn\n        );\n\n        return _amountWithdrawable;\n    }\n\n    /**\n     * @notice used to get the withdrawable amount of borrow token for a lender\n     */\n    function withdrawRepayment() external isLender(msg.sender) nonReentrant {\n        _withdrawRepayment(msg.sender);\n    }\n\n    /**\n     * @notice internal function used to withdraw borrow asset from the pool by _lender\n     * @param _lender address of the _lender\n     */\n    function _withdrawRepayment(address _lender) internal {\n        uint256 _amountToWithdraw = calculateRepaymentWithdrawable(_lender);\n\n        if (_amountToWithdraw == 0) {\n            return;\n        }\n        lenders[_lender].effectiveInterestWithdrawn = lenders[_lender].effectiveInterestWithdrawn.add(_amountToWithdraw);\n\n        SavingsAccountUtil.transferTokens(poolConstants.borrowAsset, _amountToWithdraw, address(this), _lender);\n    }\n\n    /**\n     * @notice used to get the end time for a margin call\n     * @param _lender address of the lender who has requested a margin call\n     * @return the time at which the margin call ends\n     */\n    function getMarginCallEndTime(address _lender) public view override returns (uint256) {\n        uint256 _marginCallDuration = IPoolFactory(poolFactory).marginCallDuration();\n        uint256 _marginCallEndTime = lenders[_lender].marginCallEndTime;\n\n        if (block.timestamp > _marginCallEndTime.add(_marginCallDuration.mul(2))) {\n            _marginCallEndTime = 0;\n        }\n        return _marginCallEndTime;\n    }\n\n    /**\n     * @notice used to get the balance details of a _lender\n     * @param _lender address of the _lender\n     * @return amount of pool tokens available with the _lender\n     * @return amount of pool tokens available in the pool\n     */\n    function getBalanceDetails(address _lender) external view override returns (uint256, uint256) {\n        return (balanceOf(_lender), totalSupply());\n    }\n\n    /**\n     * @notice used to get the loan status of the borrow pool\n     * @return integer respresenting loan status\n     */\n    function getLoanStatus() external view override returns (uint256) {\n        return uint256(poolVariables.loanStatus);\n    }\n\n    /**\n     * @notice used to receive ethers from savings accounts\n     */\n    receive() external payable {}\n\n    /**\n     * @notice used to get the equivalent amount of tokens from source to target tokens\n     * @param _source address of the tokens to be converted\n     * @param _target address of target conversion token\n     * @param _amount amount of tokens to be converted\n     * @return the equivalent amount of target tokens for given source tokens\n     */\n    function getEquivalentTokens(\n        address _source,\n        address _target,\n        uint256 _amount\n    ) public view returns (uint256) {\n        (uint256 _price, uint256 _decimals) = IPriceOracle(IPoolFactory(poolFactory).priceOracle()).getLatestPrice(_source, _target);\n        return _amount.mul(_price).div(10**_decimals);\n    }\n\n    /**\n     * @notice used to get the address of the borrower of the pool\n     * @return address of the borrower\n     */\n    function borrower() external view override returns (address) {\n        return poolConstants.borrower;\n    }\n\n    /**\n     * @notice used to total supply of pool tokens for the pool\n     * @return total supply of pool tokens\n     */\n    function totalSupply() public view override(ERC20Upgradeable, IPool) returns (uint256) {\n        return ERC20Upgradeable.totalSupply();\n    }\n}\n\n\n",
        "CodeNames": [
            "Pool.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Pool.sol#depositCollateral()",
                "Type": "Missing check",
                "Description": "Collateral can be deposited in a finished loan because the depositCollateral function does not check the status of the pool.",
                "Repair": "Require loan status to be collection or active"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/proxy/Initializable.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '../interfaces/IPool.sol';\nimport '../interfaces/IPoolFactory.sol';\nimport '../interfaces/IExtension.sol';\nimport '../interfaces/IRepayment.sol';\n\n/**\n * @title Extension contract with methods related to Extension period\n * @notice Implements the functions related to Extension period of the pool\n * @author Sublime\n */\ncontract Extension is Initializable, IExtension {\n    using SafeMath for uint256;\n\n    struct ExtensionVariables {\n        bool hasExtensionPassed;\n        uint256 totalExtensionSupport;\n        uint256 extensionVoteEndTime;\n        uint256 repaymentInterval;\n        mapping(address => uint256) lastVotedExtension;\n    }\n\n    /**\n     * @notice used to keep track of extension details against a pool\n     */\n    mapping(address => ExtensionVariables) public extensions;\n    IPoolFactory poolFactory;\n    /**\n     * @notice used to store voting pass ratio for approving extension\n     */\n    uint256 public votingPassRatio;\n\n    /**\n     * @notice checks if the msg.sender is pool's valid owner\n     */\n    modifier onlyOwner() {\n        require(msg.sender == poolFactory.owner(), 'Not owner');\n        _;\n    }\n\n    /**\n     * @notice checks if the address is pool's valid borrower\n     * @param _pool address of the borrower\n     */\n    modifier onlyBorrower(address _pool) {\n        require(IPool(_pool).borrower() == msg.sender, 'Not Borrower');\n        _;\n    }\n\n    /**\n     * @notice initializing the Pool and the voting pass ratio\n     * @param _poolFactory address of the Pool\n     * @param _votingPassRatio the value of the voting pass ratio\n     */\n    function initialize(address _poolFactory, uint256 _votingPassRatio) external initializer {\n        _updatePoolFactory(_poolFactory);\n        _updateVotingPassRatio(_votingPassRatio);\n    }\n\n    /**\n     * @notice initializing the pool extension for the Pool\n     * @param _repaymentInterval value of the repayment interval\n     */\n    function initializePoolExtension(uint256 _repaymentInterval) external override {\n        IPoolFactory _poolFactory = poolFactory;\n        require(extensions[msg.sender].repaymentInterval == 0, 'Extension::initializePoolExtension - already initialized');\n        require(_poolFactory.poolRegistry(msg.sender), 'Repayments::onlyValidPool - Invalid Pool');\n        extensions[msg.sender].repaymentInterval = _repaymentInterval;\n    }\n\n    /**\n     * @notice used for requesting an extension by a borrower\n     * @param _pool address of the Pool\n     */\n    function requestExtension(address _pool) external onlyBorrower(_pool) {\n        uint256 _repaymentInterval = extensions[_pool].repaymentInterval;\n        require(_repaymentInterval != 0, 'Extension::requestExtension - Uninitialized pool');\n        uint256 _extensionVoteEndTime = extensions[_pool].extensionVoteEndTime;\n        require(block.timestamp > _extensionVoteEndTime, 'Extension::requestExtension - Extension requested already'); // _extensionVoteEndTime is 0 when no extension is active\n\n        // This check is required so that borrower doesn't ask for more extension if previously an extension is already granted\n        require(!extensions[_pool].hasExtensionPassed, 'Extension::requestExtension: Extension already availed');\n\n        extensions[_pool].totalExtensionSupport = 0; // As we can multiple voting every time new voting start we have to make previous votes 0\n        IRepayment _repayment = IRepayment(poolFactory.repaymentImpl());\n        uint256 _nextDueTime = _repayment.getNextInstalmentDeadline(_pool);\n        _extensionVoteEndTime = (_nextDueTime).div(10**30);\n        extensions[_pool].extensionVoteEndTime = _extensionVoteEndTime; // this makes extension request single use\n        emit ExtensionRequested(_extensionVoteEndTime);\n    }\n\n    /**\n     * @notice used to rebalance votes of from and to addresses when pool tokens are transferred\n     * @dev only pool can change its votes\n     * @param _from address of user from whom pool tokens are transferred\n     * @param _to address of user to whom pool tokens are transferred\n     * @param _amount amount of pool tokens transferred\n     */\n    function removeVotes(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) external override {\n        address _pool = msg.sender;\n        if (extensions[_pool].hasExtensionPassed) {\n            return;\n        }\n\n        uint256 _extensionVoteEndTime = extensions[_pool].extensionVoteEndTime;\n\n        if (_extensionVoteEndTime != 0 && _extensionVoteEndTime <= block.timestamp) {\n            if (extensions[_pool].lastVotedExtension[_from] == _extensionVoteEndTime) {\n                extensions[_pool].totalExtensionSupport = extensions[_pool].totalExtensionSupport.sub(_amount);\n            }\n\n            if (extensions[_pool].lastVotedExtension[_to] == _extensionVoteEndTime) {\n                extensions[_pool].totalExtensionSupport = extensions[_pool].totalExtensionSupport.add(_amount);\n            }\n        }\n    }\n\n    /**\n     * @notice used for requesting an extension by a borrower\n     * @param _pool address of the Pool\n     */\n    function voteOnExtension(address _pool) external {\n        uint256 _extensionVoteEndTime = extensions[_pool].extensionVoteEndTime;\n        require(block.timestamp < _extensionVoteEndTime, 'Pool::voteOnExtension - Voting is over');\n\n        (uint256 _balance, uint256 _totalSupply) = IPool(_pool).getBalanceDetails(msg.sender);\n        require(_balance != 0, 'Pool::voteOnExtension - Not a valid lender for pool');\n\n        uint256 _votingPassRatio = votingPassRatio;\n\n        uint256 _lastVotedExtension = extensions[_pool].lastVotedExtension[msg.sender]; //Lender last vote time need to store it as it checks that a lender only votes once\n        require(_lastVotedExtension != _extensionVoteEndTime, 'Pool::voteOnExtension - you have already voted');\n\n        uint256 _extensionSupport = extensions[_pool].totalExtensionSupport;\n        _lastVotedExtension = _extensionVoteEndTime;\n        _extensionSupport = _extensionSupport.add(_balance);\n\n        extensions[_pool].lastVotedExtension[msg.sender] = _lastVotedExtension;\n        emit LenderVoted(msg.sender, _extensionSupport, _lastVotedExtension);\n        extensions[_pool].totalExtensionSupport = _extensionSupport;\n\n        if (((_extensionSupport)) >= (_totalSupply.mul(_votingPassRatio)).div(10**30)) {\n            grantExtension(_pool);\n        }\n    }\n\n    /**\n     * @notice used for granting an extension for the repayment of loan\n     * @param _pool address of the Pool\n     */\n    function grantExtension(address _pool) internal {\n        IPoolFactory _poolFactory = poolFactory;\n        IRepayment _repayment = IRepayment(_poolFactory.repaymentImpl());\n\n        extensions[_pool].hasExtensionPassed = true;\n        extensions[_pool].extensionVoteEndTime = block.timestamp; // voting is over\n\n        _repayment.instalmentDeadlineExtended(_pool);\n\n        emit ExtensionPassed(_pool);\n    }\n\n    /**\n     * @notice used for closing the pool extension\n     */\n    function closePoolExtension() external override {\n        delete extensions[msg.sender];\n    }\n\n    /**\n     * @notice used for updating the voting pass ratio of the Pool\n     * @param _votingPassRatio the value of the new voting pass ratio\n     */\n    function updateVotingPassRatio(uint256 _votingPassRatio) external onlyOwner {\n        _updateVotingPassRatio(_votingPassRatio);\n    }\n\n    function _updateVotingPassRatio(uint256 _votingPassRatio) internal {\n        votingPassRatio = _votingPassRatio;\n        emit VotingPassRatioUpdated(_votingPassRatio);\n    }\n\n    /**\n     * @notice used to update the pool factory contract address\n     * @dev only owner can update\n     * @param _poolFactory updated pool factory contract address\n     */\n    function updatePoolFactory(address _poolFactory) external onlyOwner {\n        _updatePoolFactory(_poolFactory);\n    }\n\n    function _updatePoolFactory(address _poolFactory) internal {\n        require(_poolFactory != address(0), 'Zero address not allowed');\n        poolFactory = IPoolFactory(_poolFactory);\n        emit PoolFactoryUpdated(_poolFactory);\n    }\n}\n\n\n",
        "CodeNames": [
            "Extension.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Extension contract transfer logic",
                "Type": "Missing check",
                "Description": "Extension voting threshold check needs to rerun on each transfer to avoid extensions that should be granted after a token transfer not being granted.",
                "Repair": "Rerun the voting logic in removeVotes"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/math/SafeMath.sol';\n\nimport '../interfaces/IYield.sol';\nimport '../interfaces/Invest/IyVault.sol';\n\n/**\n * @title Yield contract\n * @notice Implements the functions to lock/unlock tokens into YVault\n * @author Sublime\n **/\ncontract YearnYield is IYield, Initializable, OwnableUpgradeable, ReentrancyGuard {\n    using SafeERC20 for IERC20;\n    using SafeMath for uint256;\n\n    /**\n     * @notice stores the address of savings account contract\n     **/\n    address payable public savingsAccount;\n\n    /**\n     * @notice stores the address of liquidity token for a given base token\n     */\n    mapping(address => address) public override liquidityToken;\n\n    /**\n     * @notice emitted when liquidity token address of an asset is updated\n     * @param asset the address of asset\n     * @param protocolToken address of the liquidity token for the asset\n     **/\n    event ProtocolAddressesUpdated(address indexed asset, address indexed protocolToken);\n\n    /**\n     * @notice checks if contract is invoked by savings account\n     **/\n    modifier onlySavingsAccount() {\n        require(_msgSender() == savingsAccount, 'Invest: Only savings account can invoke');\n        _;\n    }\n\n    /**\n     * @notice used to initialize the variables in the contract\n     * @dev can only be called once\n     * @param _owner address of the owner\n     * @param _savingsAccount address of the savings account contract\n     **/\n    function initialize(address _owner, address payable _savingsAccount) external initializer {\n        __Ownable_init();\n        super.transferOwnership(_owner);\n\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update savings account contract address\n     * @dev can only be called by owner\n     * @param _savingsAccount address of updated savings account contract\n     **/\n    function updateSavingsAccount(address payable _savingsAccount) external onlyOwner {\n        _updateSavingsAccount(_savingsAccount);\n    }\n\n    function _updateSavingsAccount(address payable _savingsAccount) internal {\n        require(_savingsAccount != address(0), 'Invest: zero address');\n        savingsAccount = _savingsAccount;\n        emit SavingsAccountUpdated(_savingsAccount);\n    }\n\n    /**\n     * @notice used to update liquidity token for a asset\n     * @dev can only be called by owner\n     * @param _asset address of the token\n     * @param _liquidityToken address of the liquidityToken for the given token\n     **/\n    function updateProtocolAddresses(address _asset, address _liquidityToken) external onlyOwner {\n        liquidityToken[_asset] = _liquidityToken;\n        emit ProtocolAddressesUpdated(_asset, _liquidityToken);\n    }\n\n    /**\n     * @notice used to withdraw all tokens of a type in case of emergencies\n     * @dev only owner can withdraw\n     * @param _asset address of the token being withdrawn\n     * @param _wallet address to which tokens are withdrawn\n     */\n    function emergencyWithdraw(address _asset, address payable _wallet) external onlyOwner nonReentrant returns (uint256 received) {\n        require(_wallet != address(0), 'cant burn');\n        address investedTo = liquidityToken[_asset];\n        uint256 amount = IERC20(investedTo).balanceOf(address(this));\n\n        if (_asset == address(0)) {\n            received = _withdrawETH(investedTo, amount);\n            (bool success, ) = _wallet.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(_asset, investedTo, amount);\n            IERC20(_asset).safeTransfer(_wallet, received);\n        }\n    }\n\n    /**\n     * @notice Used to lock tokens in available protocol\n     * @dev Asset Tokens to be locked must be approved to this contract by user\n     * @param user the address of user\n     * @param asset the address of token to invest\n     * @param amount the amount of asset\n     * @return sharesReceived amount of shares received\n     **/\n    function lockTokens(\n        address user,\n        address asset,\n        uint256 amount\n    ) external payable override onlySavingsAccount nonReentrant returns (uint256 sharesReceived) {\n        require(amount != 0, 'Invest: amount');\n\n        address investedTo = liquidityToken[asset];\n        if (asset == address(0)) {\n            require(msg.value == amount, 'Invest: ETH amount');\n            sharesReceived = _depositETH(investedTo, amount);\n        } else {\n            IERC20(asset).safeTransferFrom(user, address(this), amount);\n            sharesReceived = _depositERC20(asset, investedTo, amount);\n        }\n\n        emit LockedTokens(user, investedTo, sharesReceived);\n    }\n\n    /**\n     * @notice Used to unlock tokens from available protocol\n     * @param asset the address of underlying token\n     * @param amount the amount of asset\n     * @return received amount of tokens received\n     **/\n    function unlockTokens(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256 received) {\n        require(amount != 0, 'Invest: amount');\n        address investedTo = liquidityToken[asset];\n\n        if (asset == address(0)) {\n            received = _withdrawETH(investedTo, amount);\n            (bool success, ) = savingsAccount.call{value: received}('');\n            require(success, 'Transfer failed');\n        } else {\n            received = _withdrawERC(asset, investedTo, amount);\n            IERC20(asset).safeTransfer(savingsAccount, received);\n        }\n\n        emit UnlockedTokens(asset, received);\n    }\n\n    /**\n     * @notice Used to unlock shares\n     * @param asset the address of underlying token\n     * @param amount the amount of shares to unlock\n     * @return received amount of shares received\n     **/\n    function unlockShares(address asset, uint256 amount) external override onlySavingsAccount nonReentrant returns (uint256) {\n        if (amount == 0) {\n            return 0;\n        }\n\n        require(asset != address(0), 'Asset address cannot be address(0)');\n        IERC20(asset).safeTransfer(savingsAccount, amount);\n\n        emit UnlockedShares(asset, amount);\n        return amount;\n    }\n\n    /**\n     * @dev Used to get amount of underlying tokens for current number of shares\n     * @param shares the amount of shares\n     * @return amount amount of underlying tokens\n     **/\n    function getTokensForShares(uint256 shares, address asset) public view override returns (uint256 amount) {\n        if (shares == 0) return 0;\n        amount = IyVault(liquidityToken[asset]).getPricePerFullShare().mul(shares).div(1e18);\n    }\n\n    /**\n     * @notice Used to get number of shares from an amount of underlying tokens\n     * @param amount the amount of tokens\n     * @param asset the address of token\n     * @return shares amount of shares for given tokens\n     **/\n    function getSharesForTokens(uint256 amount, address asset) external view override returns (uint256 shares) {\n        shares = (amount.mul(1e18)).div(getTokensForShares(1e18, asset));\n    }\n\n    function _depositETH(address vault, uint256 amount) internal returns (uint256 sharesReceived) {\n        uint256 initialTokenBalance = IERC20(vault).balanceOf(address(this));\n\n        //mint vault\n        IyVault(vault).depositETH{value: amount}();\n\n        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(initialTokenBalance);\n    }\n\n    function _depositERC20(\n        address asset,\n        address vault,\n        uint256 amount\n    ) internal returns (uint256 sharesReceived) {\n        uint256 sharesBefore = IERC20(vault).balanceOf(address(this));\n\n        //lock collateral in vault\n        IERC20(asset).approve(vault, 0);\n        IERC20(asset).approve(vault, amount);\n        IyVault(vault).deposit(amount);\n\n        sharesReceived = IERC20(vault).balanceOf(address(this)).sub(sharesBefore);\n    }\n\n    function _withdrawETH(address vault, uint256 amount) internal returns (uint256 received) {\n        uint256 ethBalance = address(this).balance;\n\n        IyVault(vault).withdrawETH(amount);\n\n        received = address(this).balance.sub(ethBalance);\n    }\n\n    function _withdrawERC(\n        address asset,\n        address vault,\n        uint256 amount\n    ) internal returns (uint256 tokensReceived) {\n        uint256 initialAssetBalance = IERC20(asset).balanceOf(address(this));\n\n        IyVault(vault).withdraw(amount);\n\n        tokensReceived = IERC20(asset).balanceOf(address(this)).sub(initialAssetBalance);\n    }\n\n    receive() external payable {}\n}\n\n\n",
        "CodeNames": [
            "YearnYield.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "YearnYield.getTokensForShares()",
                "Type": "Decimal issue",
                "Description": "Yearn token <> shares conversion decimal issue leads to too much or too little being paid out, resulting in a loss for either the protocol or user.",
                "Repair": "Divide by 10^vault.decimals() instead of 1e18"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol';\nimport '@openzeppelin/contracts/cryptography/ECDSA.sol';\nimport '../interfaces/IVerification.sol';\n\n/// @title Contract that handles linking identity of user to address\ncontract Verification is Initializable, IVerification, OwnableUpgradeable {\n    struct LinkedAddress {\n        address masterAddress;\n        uint256 activatesAt;\n    }\n\n    /// @notice Delay in seconds after which addresses are activated once registered or linked\n    uint256 public activationDelay;\n\n    /// @notice Tells whether a given verifier is valid\n    /// @dev Mapping that stores valid verifiers as added by admin. verifier -> true/false\n    /// @return boolean that represents if the specified verifier is valid\n    mapping(address => bool) public verifiers;\n\n    /// @notice Maps masterAddress with the verifier that was used to verify it and the time when master address is active\n    /// @dev Mapping is from masterAddress -> verifier -> activationTime\n    /// @return Verifier used to verify the given master address\n    mapping(address => mapping(address => uint256)) public masterAddresses;\n\n    /// @notice Maps linkedAddresses with the master address and activation time\n    /// @dev Mapping is linkedAddress -> (MasterAddress, activationTimestamp)\n    /// @return Returns the master address and activation time for the linkedAddress\n    mapping(address => LinkedAddress) public linkedAddresses;\n\n    /// @notice Maps address to link with the master addres\n    /// @dev Mapping is linkedAddress -> MasterAddress -> isPending\n    /// @return Returns if linkedAddress has a pending request from master address\n    mapping(address => mapping(address => bool)) public pendingLinkAddresses;\n\n    /// @notice Prevents anyone other than a valid verifier from calling a function\n    modifier onlyVerifier() {\n        require(verifiers[msg.sender], 'Invalid verifier');\n        _;\n    }\n\n    /// @notice Initializes the variables of the contract\n    /// @dev Contract follows proxy pattern and this function is used to initialize the variables for the contract in the proxy\n    /// @param _admin Admin of the verification contract who can add verifiers and remove masterAddresses deemed invalid\n    /// @param _activationDelay Delay in seconds after which addresses are registered or linked\n    function initialize(address _admin, uint256 _activationDelay) external initializer {\n        super.__Ownable_init();\n        super.transferOwnership(_admin);\n        _updateActivationDelay(_activationDelay);\n    }\n\n    /// @notice owner can update activation delay\n    /// @param _activationDelay updated value of activation delay for registered/linking addresses in seconds\n    function updateActivationDelay(uint256 _activationDelay) external onlyOwner {\n        _updateActivationDelay(_activationDelay);\n    }\n\n    function _updateActivationDelay(uint256 _activationDelay) internal {\n        activationDelay = _activationDelay;\n        emit ActivationDelayUpdated(_activationDelay);\n    }\n\n    /// @notice owner can add new verifier\n    /// @dev Verifier can add master address or remove addresses added by it\n    /// @param _verifier Address of the verifier contract\n    function addVerifier(address _verifier) external onlyOwner {\n        require(_verifier != address(0), 'V:AV-Verifier cant be 0 address');\n        require(!verifiers[_verifier], 'V:AV-Verifier exists');\n        verifiers[_verifier] = true;\n        emit VerifierAdded(_verifier);\n    }\n\n    /// @notice owner can remove exisiting verifier\n    /// @dev Verifier can add master address or remove addresses added by it\n    /// @param _verifier Address of the verifier contract\n    function removeVerifier(address _verifier) external onlyOwner {\n        require(verifiers[_verifier], 'V:AV-Verifier doesnt exist');\n        delete verifiers[_verifier];\n        emit VerifierRemoved(_verifier);\n    }\n\n    /// @notice Only verifier can add register master address\n    /// @dev Multiple accounts can be linked to master address to act on behalf. Master address can be registered by multiple verifiers\n    /// @param _masterAddress address which is registered as verified\n    /// @param _isMasterLinked boolean which specifies if the masterAddress has to be added as a linked address\n    ///                         _isMasterLinked is used to support users who want to keep the master address as a cold wallet for security\n    function registerMasterAddress(address _masterAddress, bool _isMasterLinked) external override onlyVerifier {\n        require(masterAddresses[_masterAddress][msg.sender] == 0, 'V:RMA-Already registered');\n        uint256 _masterAddressActivatesAt = block.timestamp + activationDelay;\n        masterAddresses[_masterAddress][msg.sender] = _masterAddressActivatesAt;\n        emit UserRegistered(_masterAddress, msg.sender, _masterAddressActivatesAt);\n\n        if (_isMasterLinked) {\n            _linkAddress(_masterAddress, _masterAddress);\n        }\n    }\n\n    /// @notice Master address can be unregistered by registered verifier or owner\n    /// @dev unregistering master address doesn't affect linked addreses mapping to master address, though they would not be verified by this verifier anymore\n    /// @param _masterAddress address which is being unregistered\n    /// @param _verifier verifier address from which master address is unregistered\n    function unregisterMasterAddress(address _masterAddress, address _verifier) external override {\n        if (msg.sender != super.owner()) {\n            require(masterAddresses[_masterAddress][msg.sender] != 0 && msg.sender == _verifier, 'V:UMA-Invalid verifier');\n        }\n        delete masterAddresses[_masterAddress][_verifier];\n        emit UserUnregistered(_masterAddress, _verifier, msg.sender);\n    }\n\n    function _linkAddress(address _linked, address _master) internal {\n        uint256 _linkedAddressActivatesAt = block.timestamp + activationDelay;\n        linkedAddresses[_linked] = LinkedAddress(_master, _linkedAddressActivatesAt);\n        emit AddressLinked(_linked, _master, _linkedAddressActivatesAt);\n    }\n\n    /// @notice Used by master address to request linking another address to it\n    /// @dev only master address can initiate linking of another address\n    /// @param _linkedAddress address which is to be linked\n    function requestAddressLinking(address _linkedAddress) external {\n        require(linkedAddresses[_linkedAddress].masterAddress == address(0), 'V:LA-Address already linked');\n        pendingLinkAddresses[_linkedAddress][msg.sender] = true;\n        emit AddressLinkingRequested(_linkedAddress, msg.sender);\n    }\n\n    /// @notice Used by master address to cancel request linking another address to it\n    /// @param _linkedAddress address which is to be linked\n    function cancelAddressLinkingRequest(address _linkedAddress) external {\n        require(pendingLinkAddresses[_linkedAddress][msg.sender], 'V:CALR-No pending request');\n        delete pendingLinkAddresses[_linkedAddress][msg.sender];\n        emit AddressLinkingRequestCancelled(_linkedAddress, msg.sender);\n    }\n\n    /// @notice Link an address with a master address\n    /// @dev Master address to which the address is being linked need not be verified\n    ///     link address can only accept the request made by a master address, but can't initiate a linking request\n    /// @param _masterAddress master address to link to\n    function linkAddress(address _masterAddress) external {\n        require(linkedAddresses[msg.sender].masterAddress == address(0), 'V:LA-Address already linked');\n        require(pendingLinkAddresses[msg.sender][_masterAddress], 'V:LA-No pending request');\n        _linkAddress(msg.sender, _masterAddress);\n    }\n\n    /// @notice Unlink address with master address\n    /// @dev a single address can be linked to only one master address\n    /// @param _linkedAddress Address that is being unlinked\n    function unlinkAddress(address _linkedAddress) external {\n        address _linkedTo = linkedAddresses[_linkedAddress].masterAddress;\n        require(_linkedTo != address(0), 'V:UA-Address not linked');\n        require(_linkedTo == msg.sender, 'V:UA-Not linked to sender');\n        delete linkedAddresses[_linkedAddress];\n        emit AddressUnlinked(_linkedAddress, _linkedTo);\n    }\n\n    /// @notice User to verify if an address is linked to a master address that is registered with verifier\n    /// @dev view function\n    /// @param _user address which has to be checked if mapped against a verified master address\n    /// @param _verifier verifier with which master address has to be verified\n    /// @return if the user is linke dto a registered master address\n    function isUser(address _user, address _verifier) external view override returns (bool) {\n        LinkedAddress memory _linkedAddress = linkedAddresses[_user];\n        uint256 _masterActivatesAt = masterAddresses[_linkedAddress.masterAddress][_verifier];\n        if (\n            _linkedAddress.masterAddress == address(0) ||\n            _linkedAddress.activatesAt > block.timestamp ||\n            _masterActivatesAt == 0 ||\n            _masterActivatesAt > block.timestamp\n        ) {\n            return false;\n        }\n        return true;\n    }\n}\n\n\n",
        "CodeNames": [
            "Verification.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "linkAddress() function in Verification.sol",
                "Type": "Unlinked address can link immediately again",
                "Description": "After a master calls unlinkAddress() to unlink an address, the address that has just been unlinked can directly link again without permission.",
                "Repair": "Add a line of code to reset pendingLinkAddresses in linkAddress() function"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.7.6;\n\nimport '../interfaces/ISavingsAccount.sol';\nimport '@openzeppelin/contracts/token/ERC20/SafeERC20.sol';\nimport '@openzeppelin/contracts/utils/ReentrancyGuard.sol';\n\nlibrary SavingsAccountUtil {\n    using SafeERC20 for IERC20;\n\n    function depositFromSavingsAccount(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        bool _withdrawShares,\n        bool _toSavingsAccount\n    ) internal returns (uint256) {\n        if (_toSavingsAccount) {\n            return savingsAccountTransfer(_savingsAccount, _from, _to, _amount, _token, _strategy);\n        } else {\n            return withdrawFromSavingsAccount(_savingsAccount, _from, _to, _amount, _token, _strategy, _withdrawShares);\n        }\n    }\n\n    function directDeposit(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        bool _toSavingsAccount,\n        address _strategy\n    ) internal returns (uint256) {\n        if (_toSavingsAccount) {\n            return directSavingsAccountDeposit(_savingsAccount, _from, _to, _amount, _token, _strategy);\n        } else {\n            return transferTokens(_token, _amount, _from, _to);\n        }\n    }\n\n    function directSavingsAccountDeposit(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256 _sharesReceived) {\n        transferTokens(_token, _amount, _from, address(this));\n        uint256 _ethValue;\n        if (_token == address(0)) {\n            _ethValue = _amount;\n        } else {\n            address _approveTo = _strategy;\n            if (_strategy == address(0)) {\n                _approveTo = address(_savingsAccount);\n            }\n            IERC20(_token).safeApprove(_approveTo, _amount);\n        }\n        _sharesReceived = _savingsAccount.deposit{value: _ethValue}(_amount, _token, _strategy, _to);\n    }\n\n    function savingsAccountTransfer(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy\n    ) internal returns (uint256) {\n        if (_from == address(this)) {\n            _savingsAccount.transfer(_amount, _token, _strategy, _to);\n        } else {\n            _savingsAccount.transferFrom(_amount, _token, _strategy, _from, _to);\n        }\n        return _amount;\n    }\n\n    function withdrawFromSavingsAccount(\n        ISavingsAccount _savingsAccount,\n        address _from,\n        address _to,\n        uint256 _amount,\n        address _token,\n        address _strategy,\n        bool _withdrawShares\n    ) internal returns (uint256 _amountReceived) {\n        if (_from == address(this)) {\n            _amountReceived = _savingsAccount.withdraw(_amount, _token, _strategy, payable(_to), _withdrawShares);\n        } else {\n            _amountReceived = _savingsAccount.withdrawFrom(_amount, _token, _strategy, _from, payable(_to), _withdrawShares);\n        }\n    }\n\n    function transferTokens(\n        address _token,\n        uint256 _amount,\n        address _from,\n        address _to\n    ) internal returns (uint256) {\n        if (_amount == 0) {\n            return 0;\n        }\n        if (_token == address(0)) {\n            require(msg.value >= _amount, 'ethers provided should be greater than _amount');\n\n            if (_to != address(this)) {\n                (bool success, ) = payable(_to).call{value: _amount}('');\n                require(success, 'Transfer failed');\n            }\n            if (msg.value > _amount) {\n                (bool success, ) = payable(address(msg.sender)).call{value: msg.value - _amount}('');\n                require(success, 'Transfer failed');\n            }\n            return _amount;\n        }\n        if (_from == address(this)) {\n            IERC20(_token).safeTransfer(_to, _amount);\n        } else {\n            //pool\n            IERC20(_token).safeTransferFrom(_from, _to, _amount);\n        }\n        return _amount;\n    }\n}\n\n\n",
        "CodeNames": [
            "SavingsAccountUtil.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "depositFromSavingsAccount() function in SavingsAccountUtil.sol",
                "Type": "Wrong returns of SavingsAccountUtil.depositFromSavingsAccount() can cause fund loss",
                "Description": "The recorded shares received can be wrong, causing fund loss to the lenders.",
                "Repair": "Change the return value of savingsAccountTransfer() function to return the actual shares received"
            }
        ]
    }
]