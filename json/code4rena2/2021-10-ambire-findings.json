[
    {
        "Code": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.7;\n\nimport \"../Identity.sol\";\nimport \"../interfaces/IERC20.sol\";\n\ncontract QuickAccManager {\n\t// Note: nonces are scoped by identity rather than by accHash - the reason for this is that there's no reason to scope them by accHash,\n\t// we merely need them for replay protection\n\tmapping (address => uint) nonces;\n\tmapping (bytes32 => uint) scheduled;\n\n\tbytes4 immutable CANCEL_PREFIX = 0xc47c3100;\n\n\t// Events\n\t// we only need those for timelocked stuff so we can show scheduled txns to the user; the oens that get executed immediately do not need logs\n\tevent LogScheduled(bytes32 indexed txnHash, bytes32 indexed accHash, address indexed signer, uint nonce, uint time, Identity.Transaction[] txns);\n\tevent LogCancelled(bytes32 indexed txnHash, bytes32 indexed accHash, address indexed signer, uint time);\n\tevent LogExecScheduled(bytes32 indexed txnHash, bytes32 indexed accHash, uint time);\n\n\t// EIP 2612\n\tbytes32 public DOMAIN_SEPARATOR;\n\tconstructor() {\n\t\tDOMAIN_SEPARATOR = keccak256(\n\t\t\tabi.encode(\n\t\t\t\tkeccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n\t\t\t\t// @TODO: maybe we should use a more user friendly name here?\n\t\t\t\tkeccak256(bytes('QuickAccManager')),\n\t\t\t\tkeccak256(bytes('1')),\n\t\t\t\tblock.chainid,\n\t\t\t\taddress(this)\n\t\t\t)\n\t\t);\n\t}\n\n\tstruct QuickAccount {\n\t\tuint timelock;\n\t\taddress one;\n\t\taddress two;\n\t\t// We decided to not allow certain options here such as ability to skip the second sig for send(), but leaving this a struct rather than a tuple\n\t\t// for clarity and to ensure it's future proof\n\t}\n\tstruct DualSig {\n\t\tbool isBothSigned;\n\t\tbytes one;\n\t\tbytes two;\n\t}\n\n\t// NOTE: a single accHash can control multiple identities, as long as those identities set it's hash in privileges[address(this)]\n\t// this is by design\n\n\t// isBothSigned is hashed in so that we don't allow signatures from two-sig txns to be reused for single sig txns,\n\t// ...potentially frontrunning a normal two-sig transaction and making it wait\n\t// WARNING: if the signature of this is changed, we have to change IdentityFactory\n\tfunction send(Identity identity, QuickAccount calldata acc, DualSig calldata sigs, Identity.Transaction[] calldata txns) external {\n\t\tbytes32 accHash = keccak256(abi.encode(acc));\n\t\trequire(identity.privileges(address(this)) == accHash, 'WRONG_ACC_OR_NO_PRIV');\n\t\tuint initialNonce = nonces[address(identity)];\n\t\t// Security: we must also hash in the hash of the QuickAccount, otherwise the sig of one key can be reused across multiple accs\n\t\tbytes32 hash = keccak256(abi.encode(\n\t\t\taddress(this),\n\t\t\tblock.chainid,\n\t\t\taccHash,\n\t\t\tnonces[address(identity)]++,\n\t\t\ttxns,\n\t\t\tsigs.isBothSigned\n\t\t));\n\t\tif (sigs.isBothSigned) {\n\t\t\trequire(acc.one == SignatureValidator.recoverAddr(hash, sigs.one), 'SIG_ONE');\n\t\t\trequire(acc.two == SignatureValidator.recoverAddr(hash, sigs.two), 'SIG_TWO');\n\t\t\tidentity.executeBySender(txns);\n\t\t} else {\n\t\t\taddress signer = SignatureValidator.recoverAddr(hash, sigs.one);\n\t\t\trequire(acc.one == signer || acc.two == signer, 'SIG');\n\t\t\t// no need to check whether `scheduled[hash]` is already set here cause of the incrementing nonce\n\t\t\tscheduled[hash] = block.timestamp + acc.timelock;\n\t\t\temit LogScheduled(hash, accHash, signer, initialNonce, block.timestamp, txns);\n\t\t}\n\t}\n\n\tfunction cancel(Identity identity, QuickAccount calldata acc, uint nonce, bytes calldata sig, Identity.Transaction[] calldata txns) external {\n\t\tbytes32 accHash = keccak256(abi.encode(acc));\n\t\trequire(identity.privileges(address(this)) == accHash, 'WRONG_ACC_OR_NO_PRIV');\n\n\t\tbytes32 hash = keccak256(abi.encode(CANCEL_PREFIX, address(this), block.chainid, accHash, nonce, txns, false));\n\t\taddress signer = SignatureValidator.recoverAddr(hash, sig);\n\t\trequire(signer == acc.one || signer == acc.two, 'INVALID_SIGNATURE');\n\n\t\t// @NOTE: should we allow cancelling even when it's matured? probably not, otherwise there's a minor grief\n\t\t// opportunity: someone wants to cancel post-maturity, and you front them with execScheduled\n\t\tbytes32 hashTx = keccak256(abi.encode(address(this), block.chainid, accHash, nonce, txns));\n\t\trequire(scheduled[hashTx] != 0 && block.timestamp < scheduled[hashTx], 'TOO_LATE');\n\t\tdelete scheduled[hashTx];\n\n\t\temit LogCancelled(hashTx, accHash, signer, block.timestamp);\n\t}\n\n\tfunction execScheduled(Identity identity, bytes32 accHash, uint nonce, Identity.Transaction[] calldata txns) external {\n\t\trequire(identity.privileges(address(this)) == accHash, 'WRONG_ACC_OR_NO_PRIV');\n\n\t\tbytes32 hash = keccak256(abi.encode(address(this), block.chainid, accHash, nonce, txns, false));\n\t\trequire(scheduled[hash] != 0 && block.timestamp >= scheduled[hash], 'NOT_TIME');\n\t\tdelete scheduled[hash];\n\t\tidentity.executeBySender(txns);\n\n\t\temit LogExecScheduled(hash, accHash, block.timestamp);\n\t}\n\n\t// EIP 1271 implementation\n\t// see https://eips.ethereum.org/EIPS/eip-1271\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4) {\n\t\t(address payable id, uint timelock, bytes memory sig1, bytes memory sig2) = abi.decode(signature, (address, uint, bytes, bytes));\n\t\tbytes32 accHash = keccak256(abi.encode(QuickAccount({\n\t\t\ttimelock: timelock,\n\t\t\tone: SignatureValidator.recoverAddr(hash, sig1),\n\t\t\ttwo: SignatureValidator.recoverAddr(hash, sig2)\n\t\t})));\n\t\tif (Identity(id).privileges(address(this)) == accHash) {\n\t\t\t// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n\t\t\treturn 0x1626ba7e;\n\t\t} else {\n\t\t\treturn 0xffffffff;\n\t\t}\n\t}\n\n\t// EIP 712 methods\n\t// all of the following are 2/2 only\n\tbytes32 private TRANSFER_TYPEHASH = keccak256('Transfer(address tokenAddr,address to,uint256 value,uint256 fee,uint256 nonce)');\n\tstruct Transfer { address token; address to; uint amount; uint fee; }\n\t// WARNING: if the signature of this is changed, we have to change IdentityFactory\n\tfunction sendTransfer(Identity identity, QuickAccount calldata acc, bytes calldata sigOne, bytes calldata sigTwo, Transfer calldata t) external {\n\t\trequire(identity.privileges(address(this)) == keccak256(abi.encode(acc)), 'WRONG_ACC_OR_NO_PRIV');\n\n\t\tbytes32 hash = keccak256(abi.encodePacked(\n\t\t\t'\\x19\\x01',\n\t\t\tDOMAIN_SEPARATOR,\n\t\t\tkeccak256(abi.encode(TRANSFER_TYPEHASH, t.token, t.to, t.amount, t.fee, nonces[address(identity)]++))\n\t\t));\n\t\trequire(acc.one == SignatureValidator.recoverAddr(hash, sigOne), 'SIG_ONE');\n\t\trequire(acc.two == SignatureValidator.recoverAddr(hash, sigTwo), 'SIG_TWO');\n\t\tIdentity.Transaction[] memory txns = new Identity.Transaction[](2);\n\t\ttxns[0].to = t.token;\n\t\ttxns[0].data = abi.encodeWithSelector(IERC20.transfer.selector, t.to, t.amount);\n\t\ttxns[1].to = t.token;\n\t\ttxns[1].data = abi.encodeWithSelector(IERC20.transfer.selector, msg.sender, t.fee);\n\t\tidentity.executeBySender(txns);\n\t}\n\n\t// Reference for arrays: https://github.com/sportx-bet/smart-contracts/blob/e36965a0c4748bf73ae15ed3cab5660c9cf722e1/contracts/impl/trading/EIP712FillHasher.sol\n\t// and https://eips.ethereum.org/EIPS/eip-712\n\t// and for signTypedData_v4: https://gist.github.com/danfinlay/750ce1e165a75e1c3387ec38cf452b71\n\tstruct Txn { string description; address to; uint value; bytes data; }\n\tbytes32 private TXNS_TYPEHASH = keccak256('Txn(string description,address to,uint256 value,bytes data)');\n\tbytes32 private BUNDLE_TYPEHASH = keccak256('Bundle(uint256 nonce,Txn[] transactions)');\n\t// WARNING: if the signature of this is changed, we have to change IdentityFactory\n\tfunction sendTxns(Identity identity, QuickAccount calldata acc, bytes calldata sigOne, bytes calldata sigTwo, Txn[] calldata txns) external {\n\t\trequire(identity.privileges(address(this)) == keccak256(abi.encode(acc)), 'WRONG_ACC_OR_NO_PRIV');\n\n\t\t// hashing + prepping args\n\t\tbytes32[] memory txnBytes = new bytes32[](txns.length);\n\t\tIdentity.Transaction[] memory identityTxns = new Identity.Transaction[](txns.length);\n\t\tfor (uint256 i = 0; i < txns.length; i++) {\n\t\t\ttxnBytes[i] = keccak256(abi.encode(TXNS_TYPEHASH, txns[i].description, txns[i].to, txns[i].value, txns[i].data));\n\t\t\tidentityTxns[i].to = txns[i].to;\n\t\t\tidentityTxns[i].value = txns[i].value;\n\t\t\tidentityTxns[i].data = txns[i].data;\n\t\t}\n\t\tbytes32 txnsHash = keccak256(abi.encodePacked(txnBytes));\n\t\tbytes32 hash = keccak256(abi.encodePacked(\n\t\t\t'\\x19\\x01',\n\t\t\tDOMAIN_SEPARATOR,\n\t\t\tkeccak256(abi.encode(BUNDLE_TYPEHASH, nonces[address(identity)]++, txnsHash))\n\t\t));\n\t\trequire(acc.one == SignatureValidator.recoverAddr(hash, sigOne), 'SIG_ONE');\n\t\trequire(acc.two == SignatureValidator.recoverAddr(hash, sigTwo), 'SIG_TWO');\n\t\tidentity.executeBySender(identityTxns);\n\t}\n\n}\n\n\n",
        "CodeNames": [
            "QuickAccManager.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "QuickAccManager Smart Contract",
                "Type": "Smart contract signature verification vulnerability",
                "Description": "The 'QuickAccManager' blindly trusts the values in 'signature', allowing an attacker to create a smart contract mode signature for arbitrary transactions. Any 'Identity' contract using 'QuickAccManager' can be exploited, and funds can be stolen from the wallet.",
                "Repair": "Remove the 'id' from the signature and use 'msg.sender' as the identity instead. If the 'isValidSignature' is called from another contract and wants to verify a signature on a different identity, the 'Identity/SignatureValidator' may not blindly forward the attacker-supplied signature and instead needs to re-encode the parameters with trusted values before calling 'QuickAccManager'."
            },
            {
                "Location": "QuickAccManager.sol",
                "Type": "Signature replay attacks for different identities (nonce on wrong party)",
                "Description": "An attacker can replay transactions on a different identity if two different identities share the same QuickAccount.",
                "Repair": "Include the identity address in the hash and index nonces by accHash instead of identity"
            },
            {
                "Location": "QuickAccManager.sol#cancel()",
                "Type": "Wrong hashTx makes it impossible to cancel a scheduled transaction",
                "Description": "The hashTx to identify the transaction to be canceled is wrong, making it impossible to cancel a scheduled transaction.",
                "Repair": "Include the last parameter in the hashTx calculation"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: agpl-3.0\npragma solidity ^0.8.7;\n\nimport \"./libs/SignatureValidatorV2.sol\";\n\ncontract Identity {\n\tmapping (address => bytes32) public privileges;\n\t// The next allowed nonce\n\tuint public nonce = 0;\n\n\t// Events\n\tevent LogPrivilegeChanged(address indexed addr, bytes32 priv);\n\tevent LogErr(address indexed to, uint value, bytes data, bytes returnData); // only used in tryCatch\n\n\t// Transaction structure\n\t// we handle replay protection separately by requiring (address(this), chainID, nonce) as part of the sig\n\tstruct Transaction {\n\t\taddress to;\n\t\tuint value;\n\t\tbytes data;\n\t}\n\n\tconstructor(address[] memory addrs) {\n\t\tuint len = addrs.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\t// @TODO should we allow setting to any arb value here?\n\t\t\tprivileges[addrs[i]] = bytes32(uint(1));\n\t\t\temit LogPrivilegeChanged(addrs[i], bytes32(uint(1)));\n\t\t}\n\t}\n\n\t// This contract can accept ETH without calldata\n\treceive() external payable {}\n\n\t// This contract can accept ETH with calldata\n\t// However, to support EIP 721 and EIP 1155, we need to respond to those methods with their own method signature\n\tfallback() external payable {\n\t\tbytes4 method = msg.sig;\n\t\tif (\n\t\t\tmethod == 0x150b7a02 // bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))\n\t\t\t\t|| method == 0xf23a6e61 // bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))\n\t\t\t\t|| method == 0xbc197c81 // bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))\n\t\t) {\n\t\t\t// Copy back the method\n\t\t\t// solhint-disable-next-line no-inline-assembly\n\t\t\tassembly {\n\t\t\t\tcalldatacopy(0, 0, 0x04)\n\t\t\t\treturn (0, 0x20)\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setAddrPrivilege(address addr, bytes32 priv)\n\t\texternal\n\t{\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\n\t\t// Anti-bricking measure: if the privileges slot is used for special data (not 0x01),\n\t\t// don't allow to set it to true\n\t\tif (privileges[addr] != bytes32(0) && privileges[addr] != bytes32(uint(1)))\n\t\t\trequire(priv != bytes32(uint(1)), 'UNSETTING_SPECIAL_DATA');\n\t\tprivileges[addr] = priv;\n\t\temit LogPrivilegeChanged(addr, priv);\n\t}\n\n\tfunction tipMiner(uint amount)\n\t\texternal\n\t{\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\n\t\t// See https://docs.flashbots.net/flashbots-auction/searchers/advanced/coinbase-payment/#managing-payments-to-coinbaseaddress-when-it-is-a-contract\n\t\t// generally this contract is reentrancy proof cause of the nonce\n\t\texecuteCall(block.coinbase, amount, new bytes(0));\n\t}\n\n\tfunction tryCatch(address to, uint value, bytes calldata data)\n\t\texternal\n\t{\n\t\trequire(msg.sender == address(this), 'ONLY_IDENTITY_CAN_CALL');\n\t\t(bool success, bytes memory returnData) = to.call{value: value, gas: gasleft()}(data);\n\t\tif (!success) emit LogErr(to, value, data, returnData);\n\t}\n\n\n\t// WARNING: if the signature of this is changed, we have to change IdentityFactory\n\tfunction execute(Transaction[] calldata txns, bytes calldata signature)\n\t\texternal\n\t{\n\t\trequire(txns.length > 0, 'MUST_PASS_TX');\n\t\t// If we use the naive abi.encode(txn) and have a field of type `bytes`,\n\t\t// there is a discrepancy between ethereumjs-abi and solidity\n\t\t// @TODO check if this is resolved\n\t\tuint currentNonce = nonce;\n\t\t// NOTE: abi.encode is safer than abi.encodePacked in terms of collision safety\n\t\tbytes32 hash = keccak256(abi.encode(address(this), block.chainid, currentNonce, txns));\n\t\t// We have to increment before execution cause it protects from reentrancies\n\t\tnonce = currentNonce + 1;\n\n\t\taddress signer = SignatureValidator.recoverAddrImpl(hash, signature, true);\n\t\trequire(privileges[signer] != bytes32(0), 'INSUFFICIENT_PRIVILEGE');\n\t\tuint len = txns.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tTransaction memory txn = txns[i];\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\n\t\t}\n\t\t// The actual anti-bricking mechanism - do not allow a signer to drop their own priviledges\n\t\trequire(privileges[signer] != bytes32(0), 'PRIVILEGE_NOT_DOWNGRADED');\n\t}\n\n\t// no need for nonce management here cause we're not dealing with sigs\n\tfunction executeBySender(Transaction[] calldata txns) external {\n\t\trequire(txns.length > 0, 'MUST_PASS_TX');\n\t\trequire(privileges[msg.sender] != bytes32(0), 'INSUFFICIENT_PRIVILEGE');\n\t\tuint len = txns.length;\n\t\tfor (uint i=0; i<len; i++) {\n\t\t\tTransaction memory txn = txns[i];\n\t\t\texecuteCall(txn.to, txn.value, txn.data);\n\t\t}\n\t\t// again, anti-bricking\n\t\trequire(privileges[msg.sender] != bytes32(0), 'PRIVILEGE_NOT_DOWNGRADED');\n\t}\n\n\t// we shouldn't use address.call(), cause: https://github.com/ethereum/solidity/issues/2884\n\t// copied from https://github.com/uport-project/uport-identity/blob/develop/contracts/Proxy.sol\n\t// there's also\n\t// https://github.com/gnosis/MultiSigWallet/commit/e1b25e8632ca28e9e9e09c81bd20bf33fdb405ce\n\t// https://github.com/austintgriffith/bouncer-proxy/blob/master/BouncerProxy/BouncerProxy.sol\n\t// https://github.com/gnosis/safe-contracts/blob/7e2eeb3328bb2ae85c36bc11ea6afc14baeb663c/contracts/base/Executor.sol\n\tfunction executeCall(address to, uint256 value, bytes memory data)\n\t\tinternal\n\t{\n\t\tassembly {\n\t\t\tlet result := call(gas(), to, value, add(data, 0x20), mload(data), 0, 0)\n\n\t\t\tswitch result case 0 {\n\t\t\t\tlet size := returndatasize()\n\t\t\t\tlet ptr := mload(0x40)\n\t\t\t\treturndatacopy(ptr, 0, size)\n\t\t\t\trevert(ptr, size)\n\t\t\t}\n\t\t\tdefault {}\n\t\t}\n\t\t// A single call consumes around 477 more gas with the pure solidity version, for whatever reason\n\t\t//(bool success, bytes memory returnData) = to.call{value: value, gas: gasleft()}(data);\n\t\t//if (!success) revert(string(data));\n\t}\n\n\t// EIP 1271 implementation\n\t// see https://eips.ethereum.org/EIPS/eip-1271\n\tfunction isValidSignature(bytes32 hash, bytes calldata signature) external view returns (bytes4) {\n\t\tif (privileges[SignatureValidator.recoverAddr(hash, signature)] != bytes32(0)) {\n\t\t\t// bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n\t\t\treturn 0x1626ba7e;\n\t\t} else {\n\t\t\treturn 0xffffffff;\n\t\t}\n\t}\n\n\t// EIP 1155 implementation\n\t// we pretty much only need to signal that we support the interface for 165, but for 1155 we also need the fallback function\n\tfunction supportsInterface(bytes4 interfaceID) external pure returns (bool) {\n\t\treturn\n\t\t\tinterfaceID == 0x01ffc9a7 ||    // ERC-165 support (i.e. `bytes4(keccak256('supportsInterface(bytes4)'))`).\n\t\t\tinterfaceID == 0x4e2312e0;      // ERC-1155 `ERC1155TokenReceiver` support (i.e. `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\")) ^ bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`).\n\t}\n}\n\n\n",
        "CodeNames": [
            "Identity.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Identity.sol#L23-L30, Identity.sol#L97-L98",
                "Type": "Prevent execution with invalid signatures",
                "Description": "An attacker can perform any transaction if an invalid signature is used and the supplied addrs[i] to the constructor of Identity.sol is 0.",
                "Repair": "Add a check in the for loop of the constructor to disallow 0 as an input parameter"
            }
        ]
    }
]