[
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n// external imports\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport {IERC165} from '@openzeppelin/contracts/interfaces/IERC165.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IERC1155} from '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport {IERC20, SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\n// internal imports\nimport {OrderTypes} from '../libs/OrderTypes.sol';\nimport {IComplication} from '../interfaces/IComplication.sol';\nimport {SignatureChecker} from '../libs/SignatureChecker.sol';\n\n/**\n@title InfinityExchange\n@author nneverlander. Twitter @nneverlander\n@notice The main NFT exchange contract that holds state and does asset transfers\n@dev This contract can be extended via 'complications' - strategies that let the exchange execute various types of orders\n      like dutch auctions, reverse dutch auctions, floor price orders, private sales, etc.\n\nNFTNFTNFT...........................................NFTNFTNFT\nNFTNFT                                                 NFTNFT\nNFT                                                       NFT\n.                                                           .\n.                                                           .\n.                                                           .\n.                                                           .\n.               NFTNFTNFT            NFTNFTNFT              .\n.            NFTNFTNFTNFTNFT      NFTNFTNFTNFTNFT           .\n.           NFTNFTNFTNFTNFTNFT   NFTNFTNFTNFTNFTNFT         .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.          NFTNFTNFTNFTNFTNFTN   NFTNFTNFTNFTNFTNFT         .\n.            NFTNFTNFTNFTNFT      NFTNFTNFTNFTNFT           .\n.               NFTNFTNFT            NFTNFTNFT              .\n.                                                           .\n.                                                           .\n.                                                           .\n.                                                           .\nNFT                                                       NFT\nNFTNFT                                                 NFTNFT\nNFTNFTNFT...........................................NFTNFTNFT \n\n*/\ncontract InfinityExchange is ReentrancyGuard, Ownable {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @dev WETH address of a chain; set at deploy time to the WETH address of the chain that this contract is deployed to\n  address public immutable WETH;\n  /// @dev Used in order signing with EIP-712\n  bytes32 public immutable DOMAIN_SEPARATOR;\n  /// @dev This is the adress that is used to send auto sniped orders for execution on chain\n  address public MATCH_EXECUTOR;\n  /// @dev Gas cost for auto sniped orders are paid by the buyers and refunded to this contract in the form of WETH\n  uint32 public WETH_TRANSFER_GAS_UNITS = 50000;\n  /// @notice Exchange fee in basis points (250 bps = 2.5%)\n  uint16 public PROTOCOL_FEE_BPS = 250;\n\n  /**\n   @dev All orders should have a nonce >= to this value. \n        Any orders with nonce value less than this are non-executable. \n        Used for cancelling all outstanding orders.\n  */\n  mapping(address => uint256) public userMinOrderNonce;\n\n  /// @dev This records already executed or cancelled orders to prevent replay attacks.\n  mapping(address => mapping(uint256 => bool)) public isUserOrderNonceExecutedOrCancelled;\n\n  /// @dev Storage variable that keeps track of valid complications (order execution strategies)\n  EnumerableSet.AddressSet private _complications;\n  /// @dev Storate variable that keeps track of valid currencies (tokens)\n  EnumerableSet.AddressSet private _currencies;\n\n  event CancelAllOrders(address user, uint256 newMinNonce);\n  event CancelMultipleOrders(address user, uint256[] orderNonces);\n  event NewWethTransferGasUnits(uint32 wethTransferGasUnits);\n  event NewProtocolFee(uint16 protocolFee);\n\n  event MatchOrderFulfilled(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    address seller,\n    address buyer,\n    address complication, // address of the complication that defines the execution\n    address currency, // token address of the transacting currency\n    uint256 amount // amount spent on the order\n  );\n\n  event TakeOrderFulfilled(\n    bytes32 orderHash,\n    address seller,\n    address buyer,\n    address complication, // address of the complication that defines the execution\n    address currency, // token address of the transacting currency\n    uint256 amount // amount spent on the order\n  );\n\n  constructor(address _WETH, address _matchExecutor) {\n    // Calculate the domain separator\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n        keccak256('InfinityExchange'),\n        keccak256(bytes('1')), // for versionId = 1\n        block.chainid,\n        address(this)\n      )\n    );\n    WETH = _WETH;\n    MATCH_EXECUTOR = _matchExecutor;\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  // =================================================== USER FUNCTIONS =======================================================\n\n  /**\n   @notice Matches orders one to one where each order has 1 NFT. Example: Match 1 specific NFT buy with one specific NFT sell.\n   @dev Can execute orders in batches for gas efficiency. Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n   @param makerOrders1 Maker order 1\n   @param makerOrders2 Maker order 2\n  */\n  function matchOneToOneOrders(\n    OrderTypes.MakerOrder[] calldata makerOrders1,\n    OrderTypes.MakerOrder[] calldata makerOrders2\n  ) external {\n    uint256 startGas = gasleft();\n    uint256 numMakerOrders = makerOrders1.length;\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(numMakerOrders == makerOrders2.length, 'mismatched lengths');\n\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    for (uint256 i = 0; i < numMakerOrders; ) {\n      uint256 startGasPerOrder = gasleft() + ((startGas - gasleft()) / numMakerOrders);\n      require(_complications.contains(makerOrders1[i].execParams[0]), 'invalid complication');\n      (bool canExec, uint256 execPrice) = IComplication(makerOrders1[i].execParams[0]).canExecMatchOneToOne(\n        makerOrders1[i],\n        makerOrders2[i]\n      );\n      require(canExec, 'cannot execute');\n      _matchOneToOneOrders(\n        makerOrders1[i],\n        makerOrders2[i],\n        startGasPerOrder,\n        execPrice,\n        protocolFeeBps,\n        wethTransferGasUnits,\n        weth\n      );\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   @notice Matches one  order to many orders. Example: A buy order with 5 specific NFTs with 5 sell orders with those specific NFTs.\n   @dev Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n   @param makerOrder The one order to match\n   @param manyMakerOrders Array of multiple orders to match the one order against\n  */\n  function matchOneToManyOrders(\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\n  ) external {\n    uint256 startGas = gasleft();\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(_complications.contains(makerOrder.execParams[0]), 'invalid complication');\n    require(\n      IComplication(makerOrder.execParams[0]).canExecMatchOneToMany(makerOrder, manyMakerOrders),\n      'cannot execute'\n    );\n    bytes32 makerOrderHash = _hash(makerOrder);\n    require(isOrderValid(makerOrder, makerOrderHash), 'invalid maker order');\n    uint256 ordersLength = manyMakerOrders.length;\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    if (makerOrder.isSellOrder) {\n      for (uint256 i = 0; i < ordersLength; ) {\n        // 20000 for the SSTORE op that updates maker nonce status from zero to a non zero status\n        uint256 startGasPerOrder = gasleft() + ((startGas + 20000 - gasleft()) / ordersLength);\n        _matchOneMakerSellToManyMakerBuys(\n          makerOrderHash,\n          makerOrder,\n          manyMakerOrders[i],\n          startGasPerOrder,\n          protocolFeeBps,\n          wethTransferGasUnits,\n          weth\n        );\n        unchecked {\n          ++i;\n        }\n      }\n      isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    } else {\n      uint256 protocolFee;\n      for (uint256 i = 0; i < ordersLength; ) {\n        protocolFee += _matchOneMakerBuyToManyMakerSells(\n          makerOrderHash,\n          manyMakerOrders[i],\n          makerOrder,\n          protocolFeeBps\n        );\n        unchecked {\n          ++i;\n        }\n      }\n      isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n      uint256 gasCost = (startGas - gasleft() + WETH_TRANSFER_GAS_UNITS) * tx.gasprice;\n      // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n      // else we need to send the protocol fee separately in the execution currency\n      // since the buyer is common across many sell orders, this part can be executed outside the above for loop\n      // in contrast to the case where if the one order is a sell order, we need to do this in each for loop\n      if (makerOrder.execParams[1] == weth) {\n        IERC20(weth).safeTransferFrom(makerOrder.signer, address(this), protocolFee + gasCost);\n      } else {\n        IERC20(makerOrder.execParams[1]).safeTransferFrom(makerOrder.signer, address(this), protocolFee);\n        IERC20(weth).safeTransferFrom(makerOrder.signer, address(this), gasCost);\n      }\n    }\n  }\n\n  /**\n   @notice Matches orders one to one where no specific NFTs are specified. \n          Example: A collection wide buy order with any 2 NFTs with a sell order that has any 2 NFTs from that collection.\n   @dev Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n        The constructs param specifies the actual NFTs that will be executed since buys and sells need not specify actual NFTs - only \n        a higher level intent.\n   @param sells User signed sell orders\n   @param buys User signed buy orders\n   @param constructs Intersection of the NFTs in the sells and buys. Constructed by an off chain matching engine.\n  */\n  function matchOrders(\n    OrderTypes.MakerOrder[] calldata sells,\n    OrderTypes.MakerOrder[] calldata buys,\n    OrderTypes.OrderItem[][] calldata constructs\n  ) external {\n    uint256 startGas = gasleft();\n    uint256 numSells = sells.length;\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(numSells == buys.length && numSells == constructs.length, 'mismatched lengths');\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    for (uint256 i = 0; i < numSells; ) {\n      uint256 startGasPerOrder = gasleft() + ((startGas - gasleft()) / numSells);\n      (bool executionValid, uint256 execPrice) = IComplication(sells[i].execParams[0]).canExecMatchOrder(\n        sells[i],\n        buys[i],\n        constructs[i]\n      );\n      require(executionValid, 'cannot execute');\n      _matchOrders(\n        sells[i],\n        buys[i],\n        constructs[i],\n        startGasPerOrder,\n        execPrice,\n        protocolFeeBps,\n        wethTransferGasUnits,\n        weth\n      );\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   @notice Batch buys or sells orders with specific `1` NFTs. Transaction initiated by an end user.\n   @param makerOrders The orders to fulfill\n  */\n  function takeMultipleOneOrders(OrderTypes.MakerOrder[] calldata makerOrders) external payable nonReentrant {\n    uint256 numMakerOrders = makerOrders.length;\n    uint256 totalPrice;\n    address currency = makerOrders[0].execParams[1];\n    bool isMakerSeller = makerOrders[0].isSellOrder;\n    if (!isMakerSeller) {\n      require(currency != address(0), 'offers only in ERC20');\n    }\n    for (uint256 i = 0; i < numMakerOrders; ) {\n      bytes32 makerOrderHash = _hash(makerOrders[i]);\n      require(isOrderValid(makerOrders[i], makerOrderHash), 'invalid maker order');\n      bool isTimeValid = makerOrders[i].constraints[3] <= block.timestamp &&\n        makerOrders[i].constraints[4] >= block.timestamp;\n      require(isTimeValid, 'invalid time');\n      require(currency == makerOrders[i].execParams[1], 'cannot mix currencies');\n      require(isMakerSeller == makerOrders[i].isSellOrder, 'cannot mix order sides');\n      uint256 execPrice = _getCurrentPrice(makerOrders[i]);\n      totalPrice += execPrice;\n      _execTakeOneOrder(makerOrderHash, makerOrders[i], isMakerSeller, execPrice);\n      unchecked {\n        ++i;\n      }\n    }\n    // check to ensure that for ETH orders, enough ETH is sent\n    // for non ETH orders, IERC20 safeTransferFrom will throw error if insufficient amount is sent\n    if (isMakerSeller && currency == address(0)) {\n      require(msg.value >= totalPrice, 'invalid total price');\n    }\n  }\n\n  /**\n   @notice Batch buys or sells orders where maker orders can have unspecified NFTs. Transaction initiated by an end user.\n   @param makerOrders The orders to fulfill\n   @param takerNfts The specific NFTs that the taker is willing to take that intersect with the higher order intent of the maker\n   Example: If a makerOrder is 'buy any one of these 2 specific NFTs', then the takerNfts would be 'this one specific NFT'.\n  */\n  function takeOrders(OrderTypes.MakerOrder[] calldata makerOrders, OrderTypes.OrderItem[][] calldata takerNfts)\n    external\n    payable\n    nonReentrant\n  {\n    uint256 ordersLength = makerOrders.length;\n    require(ordersLength == takerNfts.length, 'mismatched lengths');\n    uint256 totalPrice;\n    address currency = makerOrders[0].execParams[1];\n    bool isMakerSeller = makerOrders[0].isSellOrder;\n    if (!isMakerSeller) {\n      require(currency != address(0), 'offers only in ERC20');\n    }\n    for (uint256 i = 0; i < ordersLength; ) {\n      require(currency == makerOrders[i].execParams[1], 'cannot mix currencies');\n      require(isMakerSeller == makerOrders[i].isSellOrder, 'cannot mix order sides');\n      uint256 execPrice = _getCurrentPrice(makerOrders[i]);\n      totalPrice += execPrice;\n      _takeOrders(makerOrders[i], takerNfts[i], execPrice);\n      unchecked {\n        ++i;\n      }\n    }\n    // check to ensure that for ETH orders, enough ETH is sent\n    // for non ETH orders, IERC20 safeTransferFrom will throw error if insufficient amount is sent\n    if (isMakerSeller && currency == address(0)) {\n      require(msg.value >= totalPrice, 'invalid total price');\n    }\n  }\n\n  /**\n   @notice Helper function (non exchange related) to send multiple NFTs in one go\n   @param to The orders to fulfill\n   @param items The specific NFTs to transfer\n  */\n  function transferMultipleNFTs(address to, OrderTypes.OrderItem[] calldata items) external nonReentrant {\n    _transferMultipleNFTs(msg.sender, to, items);\n  }\n\n  /**\n   * @notice Cancel all pending orders\n   * @param minNonce minimum user nonce\n   */\n  function cancelAllOrders(uint256 minNonce) external {\n    require(minNonce > userMinOrderNonce[msg.sender], 'nonce too low');\n    require(minNonce < userMinOrderNonce[msg.sender] + 1000000, 'too many');\n    userMinOrderNonce[msg.sender] = minNonce;\n    emit CancelAllOrders(msg.sender, minNonce);\n  }\n\n  /**\n   * @notice Cancel multiple orders\n   * @param orderNonces array of order nonces\n   */\n  function cancelMultipleOrders(uint256[] calldata orderNonces) external {\n    uint256 numNonces = orderNonces.length;\n    require(numNonces > 0, 'cannot be empty');\n    for (uint256 i = 0; i < numNonces; ) {\n      require(orderNonces[i] >= userMinOrderNonce[msg.sender], 'nonce too low');\n      require(!isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]], 'nonce already executed or cancelled');\n      isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\n      unchecked {\n        ++i;\n      }\n    }\n    emit CancelMultipleOrders(msg.sender, orderNonces);\n  }\n\n  // ====================================================== VIEW FUNCTIONS ======================================================\n\n  /**\n   * @notice Check whether user order nonce is executed or cancelled\n   * @param user address of user\n   * @param nonce nonce of the order\n   * @return whether nonce is valid\n   */\n  function isNonceValid(address user, uint256 nonce) external view returns (bool) {\n    return !isUserOrderNonceExecutedOrCancelled[user][nonce] && nonce > userMinOrderNonce[user];\n  }\n\n  /**\n   * @notice Check whether a user signed order has valid signature\n   * @param order the order to verify\n   * @return whether order has valid signature\n   */\n  function verifyOrderSig(OrderTypes.MakerOrder calldata order) external view returns (bool) {\n    // Verify the validity of the signature\n    (bytes32 r, bytes32 s, uint8 v) = abi.decode(order.sig, (bytes32, bytes32, uint8));\n    return SignatureChecker.verify(_hash(order), order.signer, r, s, v, DOMAIN_SEPARATOR);\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n   * @param sellOrderHash hash of the sell order\n   * @param buyOrderHash hash of the buy order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid\n   */\n  function verifyMatchOneToOneOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      isOrderValid(sell, sellOrderHash) &&\n      isOrderValid(buy, buyOrderHash));\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n   * @param orderHash hash of the order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid\n   */\n  function verifyMatchOneToManyOrders(\n    bytes32 orderHash,\n    bool verifySellOrder,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    bool _orderValid;\n    if (verifySellOrder) {\n      _orderValid = isOrderValid(sell, orderHash);\n    } else {\n      _orderValid = isOrderValid(buy, orderHash);\n    }\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      _orderValid);\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n          Also checks if the given complication can execute this order\n   * @param sellOrderHash hash of the sell order\n   * @param buyOrderHash hash of the buy order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid and the execution price\n   */\n  function verifyMatchOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      isOrderValid(sell, sellOrderHash) &&\n      isOrderValid(buy, buyOrderHash));\n  }\n\n  /**\n   * @notice Verifies the validity of the order\n   * @dev checks whether order nonce was cancelled or already executed, \n          if signature is valid and if the complication and currency are valid\n   * @param order the order\n   * @param orderHash computed hash of the order\n   */\n  function isOrderValid(OrderTypes.MakerOrder calldata order, bytes32 orderHash) public view returns (bool) {\n    bool orderExpired = isUserOrderNonceExecutedOrCancelled[order.signer][order.constraints[5]] ||\n      order.constraints[5] < userMinOrderNonce[order.signer];\n    // Verify the validity of the signature\n    (bytes32 r, bytes32 s, uint8 v) = abi.decode(order.sig, (bytes32, bytes32, uint8));\n    bool sigValid = SignatureChecker.verify(orderHash, order.signer, r, s, v, DOMAIN_SEPARATOR);\n    if (\n      orderExpired ||\n      !sigValid ||\n      order.signer == address(0) ||\n      !_complications.contains(order.execParams[0]) ||\n      !_currencies.contains(order.execParams[1])\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /// @notice returns the number of complications supported by the exchange\n  function numComplications() external view returns (uint256) {\n    return _complications.length();\n  }\n\n  /// @notice returns the complication at the given index\n  function getComplicationAt(uint256 index) external view returns (address) {\n    return _complications.at(index);\n  }\n\n  /// @notice returns whether a given complication is valid\n  function isValidComplication(address complication) external view returns (bool) {\n    return _complications.contains(complication);\n  }\n\n  /// @notice returns the number of currencies supported by the exchange\n  function numCurrencies() external view returns (uint256) {\n    return _currencies.length();\n  }\n\n  /// @notice returns the currency at the given index\n  function getCurrencyAt(uint256 index) external view returns (address) {\n    return _currencies.at(index);\n  }\n\n  /// @notice returns whether a given currency is valid\n  function isValidCurrency(address currency) external view returns (bool) {\n    return _currencies.contains(currency);\n  }\n\n  // ====================================================== INTERNAL FUNCTIONS ================================================\n\n  /**\n   * @notice Internal helper function to match orders one to one\n   * @param makerOrder1 first order\n   * @param makerOrder2 second maker order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOneToOneOrders(\n    OrderTypes.MakerOrder calldata makerOrder1,\n    OrderTypes.MakerOrder calldata makerOrder2,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    OrderTypes.MakerOrder calldata sell = makerOrder1.isSellOrder ? makerOrder1 : makerOrder2;\n    OrderTypes.MakerOrder calldata buy = makerOrder1.isSellOrder ? makerOrder2 : makerOrder1;\n    bytes32 sellOrderHash = _hash(sell);\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOneToOneOrders(sellOrderHash, buyOrderHash, sell, buy), 'order not verified');\n    _execMatchOneToOneOrders(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      startGasPerOrder,\n      execPrice,\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function to match one maker sell order to many maker buys\n   * @param sellOrderHash sell order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOneMakerSellToManyMakerBuys(\n    bytes32 sellOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOneToManyOrders(buyOrderHash, false, sell, buy), 'order not verified');\n    _execMatchOneMakerSellToManyMakerBuys(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      startGasPerOrder,\n      _getCurrentPrice(buy),\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function to match one maker buy order to many maker sells\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param protocolFeeBps exchange fee\n   */\n  function _matchOneMakerBuyToManyMakerSells(\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint16 protocolFeeBps\n  ) internal returns (uint256) {\n    bytes32 sellOrderHash = _hash(sell);\n    require(verifyMatchOneToManyOrders(sellOrderHash, true, sell, buy), 'order not verified');\n    return\n      _execMatchOneMakerBuyToManyMakerSells(\n        sellOrderHash,\n        buyOrderHash,\n        sell,\n        buy,\n        _getCurrentPrice(sell),\n        protocolFeeBps\n      );\n  }\n\n  /**\n   * @notice Internal helper function to match orders specified via a higher order intent\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param constructedNfts the nfts constructed by an off chain matching that are guaranteed to intersect\n            with the user specified signed intents (orders)\n   * @param startGasPerOrder start gas when this order started execution\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOrders(\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    bytes32 sellOrderHash = _hash(sell);\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOrders(sellOrderHash, buyOrderHash, sell, buy), 'order not verified');\n    _execMatchOrders(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      constructedNfts,\n      startGasPerOrder,\n      execPrice,\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one to one orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Also refunds gas expenditure to the contract\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _execMatchOneToOneOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[sell.signer][sell.constraints[5]] = true;\n    isUserOrderNonceExecutedOrCancelled[buy.signer][buy.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _transferMultipleNFTs(sell.signer, buy.signer, sell.nfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, sell.signer, remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one sell to many buy orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Also refunds gas expenditure to the contract\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _execMatchOneMakerSellToManyMakerBuys(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[buy.signer][buy.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOneToManyOrders(sell.signer, buy.signer, buy.nfts, buy.execParams[1], remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one buy to many sell orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Gas expenditure refund is done in the caller\n          since it does not need to be done in a loop\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @return the protocolFee so that the buyer can pay the protocol fee and gas cost in one go\n   */\n  function _execMatchOneMakerBuyToManyMakerSells(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 execPrice,\n    uint16 protocolFeeBps\n  ) internal returns (uint256) {\n    isUserOrderNonceExecutedOrCancelled[sell.signer][sell.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOneToManyOrders(sell.signer, buy.signer, sell.nfts, buy.execParams[1], remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    return protocolFee;\n  }\n\n  /// @dev this helper purely exists to help reduce contract size a bit and avoid any stack too deep errors\n  function _execMatchOneToManyOrders(\n    address seller,\n    address buyer,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    address currency,\n    uint256 amount\n  ) internal {\n    _transferMultipleNFTs(seller, buyer, constructedNfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(currency).safeTransferFrom(buyer, seller, amount);\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match orders\n   * @dev Updates order nonce states, does asset transfers, emits events and does gas refunds\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param constructedNfts the constructed nfts\n   * @param startGasPerOrder gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth weth address\n   */\n  function _execMatchOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOrder(\n      sell.signer,\n      buy.signer,\n      sell.constraints[5],\n      buy.constraints[5],\n      constructedNfts,\n      buy.execParams[1],\n      remainingAmount\n    );\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /// @dev this helper purely exists to help reduce contract size a bit and avoid any stack too deep errors\n  function _execMatchOrder(\n    address seller,\n    address buyer,\n    uint256 sellNonce,\n    uint256 buyNonce,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    address currency,\n    uint256 amount\n  ) internal {\n    // Update order execution status to true (prevents replay)\n    isUserOrderNonceExecutedOrCancelled[seller][sellNonce] = true;\n    isUserOrderNonceExecutedOrCancelled[buyer][buyNonce] = true;\n    _transferMultipleNFTs(seller, buyer, constructedNfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(currency).safeTransferFrom(buyer, seller, amount);\n  }\n\n  function _emitMatchEvent(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    address seller,\n    address buyer,\n    address complication,\n    address currency,\n    uint256 amount\n  ) internal {\n    emit MatchOrderFulfilled(sellOrderHash, buyOrderHash, seller, buyer, complication, currency, amount);\n  }\n\n  /**\n   * @notice Internal helper function to take orders\n   * @dev verifies whether order can be executed\n   * @param makerOrder the maker order\n   * @param takerItems nfts to be transferred\n   * @param execPrice execution price\n   */\n  function _takeOrders(\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.OrderItem[] calldata takerItems,\n    uint256 execPrice\n  ) internal {\n    bytes32 makerOrderHash = _hash(makerOrder);\n    bool makerOrderValid = isOrderValid(makerOrder, makerOrderHash);\n    bool executionValid = IComplication(makerOrder.execParams[0]).canExecTakeOrder(makerOrder, takerItems);\n    require(makerOrderValid && executionValid, 'order not verified');\n    _execTakeOrders(makerOrderHash, makerOrder, takerItems, makerOrder.isSellOrder, execPrice);\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers \n              for take orders specifying a higher order intent\n   * @dev Updates order nonce state, does asset transfers and emits events\n   * @param makerOrderHash maker order hash\n   * @param makerOrder the maker order\n   * @param takerItems nfts to be transferred\n   * @param isMakerSeller is the maker order a sell order\n   * @param execPrice execution price\n   */\n  function _execTakeOrders(\n    bytes32 makerOrderHash,\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.OrderItem[] calldata takerItems,\n    bool isMakerSeller,\n    uint256 execPrice\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    if (isMakerSeller) {\n      _transferNFTsAndFees(makerOrder.signer, msg.sender, takerItems, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, makerOrder.signer, msg.sender, makerOrder, execPrice);\n    } else {\n      _transferNFTsAndFees(msg.sender, makerOrder.signer, takerItems, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, msg.sender, makerOrder.signer, makerOrder, execPrice);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers \n              for simple take orders\n   * @dev Updates order nonce state, does asset transfers and emits events\n   * @param makerOrderHash maker order hash\n   * @param makerOrder the maker order\n   * @param isMakerSeller is the maker order a sell order\n   * @param execPrice execution price\n   */\n  function _execTakeOneOrder(\n    bytes32 makerOrderHash,\n    OrderTypes.MakerOrder calldata makerOrder,\n    bool isMakerSeller,\n    uint256 execPrice\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    if (isMakerSeller) {\n      _transferNFTsAndFees(makerOrder.signer, msg.sender, makerOrder.nfts, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, makerOrder.signer, msg.sender, makerOrder, execPrice);\n    } else {\n      _transferNFTsAndFees(msg.sender, makerOrder.signer, makerOrder.nfts, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, msg.sender, makerOrder.signer, makerOrder, execPrice);\n    }\n  }\n\n  function _emitTakerEvent(\n    bytes32 orderHash,\n    address seller,\n    address buyer,\n    OrderTypes.MakerOrder calldata order,\n    uint256 amount\n  ) internal {\n    emit TakeOrderFulfilled(orderHash, seller, buyer, order.execParams[0], order.execParams[1], amount);\n  }\n\n  /**\n   * @notice Transfers NFTs and fees\n   * @param seller the seller\n   * @param buyer the buyer\n   * @param nfts nfts to transfer\n   * @param amount amount to transfer\n   * @param currency currency of the transfer\n   */\n  function _transferNFTsAndFees(\n    address seller,\n    address buyer,\n    OrderTypes.OrderItem[] calldata nfts,\n    uint256 amount,\n    address currency\n  ) internal {\n    // transfer NFTs\n    _transferMultipleNFTs(seller, buyer, nfts);\n    // transfer fees\n    _transferFees(seller, buyer, amount, currency);\n  }\n\n  /**\n   * @notice Transfers multiple NFTs in a loop and ERC1155s in a batch\n   * @param from the from address\n   * @param to the to address\n   * @param nfts nfts to transfer\n   */\n  function _transferMultipleNFTs(\n    address from,\n    address to,\n    OrderTypes.OrderItem[] calldata nfts\n  ) internal {\n    uint256 numNfts = nfts.length;\n    for (uint256 i = 0; i < numNfts; ) {\n      _transferNFTs(from, to, nfts[i]);\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Transfer NFTs\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferNFTs(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    if (IERC165(item.collection).supportsInterface(0x80ac58cd)) {\n      _transferERC721s(from, to, item);\n    } else if (IERC165(item.collection).supportsInterface(0xd9b67a26)) {\n      _transferERC1155s(from, to, item);\n    }\n  }\n\n  /**\n   * @notice Transfer ERC721s\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferERC721s(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    uint256 numTokens = item.tokens.length;\n    for (uint256 i = 0; i < numTokens; ) {\n      IERC721(item.collection).safeTransferFrom(from, to, item.tokens[i].tokenId);\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Transfer ERC1155s\n   * @dev uses the ERC1155 batchTransfer function for efficient transfers\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferERC1155s(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    uint256 numNfts = item.tokens.length;\n    uint256[] memory tokenIdsArr = new uint256[](numNfts);\n    uint256[] memory numTokensPerTokenIdArr = new uint256[](numNfts);\n    for (uint256 i = 0; i < numNfts; ) {\n      tokenIdsArr[i] = item.tokens[i].tokenId;\n      numTokensPerTokenIdArr[i] = item.tokens[i].numTokens;\n      unchecked {\n        ++i;\n      }\n    }\n    IERC1155(item.collection).safeBatchTransferFrom(from, to, tokenIdsArr, numTokensPerTokenIdArr, '0x0');\n  }\n\n  /**\n   * @notice Transfer fees. Fees are always transferred from buyer to the seller and the exchange although seller is \n            the one that actually 'pays' the fees\n   * @dev if the currency ETH, no additional transfer is needed to pay exchange fees since the contract is 'payable'\n   * @param seller the seller\n   * @param buyer the buyer\n   * @param amount amount to transfer\n   * @param currency currency of the transfer\n   */\n  function _transferFees(\n    address seller,\n    address buyer,\n    uint256 amount,\n    address currency\n  ) internal {\n    // protocol fee\n    uint256 protocolFee = (PROTOCOL_FEE_BPS * amount) / 10000;\n    uint256 remainingAmount = amount - protocolFee;\n    // ETH\n    if (currency == address(0)) {\n      // transfer amount to seller\n      (bool sent, ) = seller.call{value: remainingAmount}('');\n      require(sent, 'failed to send ether to seller');\n    } else {\n      // transfer final amount (post-fees) to seller\n      IERC20(currency).safeTransferFrom(buyer, seller, remainingAmount);\n      // send fee to protocol\n      IERC20(currency).safeTransferFrom(buyer, address(this), protocolFee);\n    }\n  }\n\n  // =================================================== UTILS ==================================================================\n\n  /// @dev Gets current order price for orders that vary in price over time (dutch and reverse dutch auctions)\n  function _getCurrentPrice(OrderTypes.MakerOrder calldata order) internal view returns (uint256) {\n    (uint256 startPrice, uint256 endPrice) = (order.constraints[1], order.constraints[2]);\n    uint256 duration = order.constraints[4] - order.constraints[3];\n    uint256 priceDiff = startPrice > endPrice ? startPrice - endPrice : endPrice - startPrice;\n    if (priceDiff == 0 || duration == 0) {\n      return startPrice;\n    }\n    uint256 elapsedTime = block.timestamp - order.constraints[3];\n    uint256 PRECISION = 10**4; // precision for division; similar to bps\n    uint256 portionBps = elapsedTime > duration ? PRECISION : ((elapsedTime * PRECISION) / duration);\n    priceDiff = (priceDiff * portionBps) / PRECISION;\n    return startPrice > endPrice ? startPrice - priceDiff : startPrice + priceDiff;\n  }\n\n  /// @dev hashes the given order with the help of _nftsHash and _tokensHash\n  function _hash(OrderTypes.MakerOrder calldata order) internal pure returns (bytes32) {\n    // keccak256('Order(bool isSellOrder,address signer,uint256[] constraints,OrderItem[] nfts,address[] execParams,bytes extraParams)OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 ORDER_HASH = 0x7bcfb5a29031e6b8d34ca1a14dd0a1f5cb11b20f755bb2a31ee3c4b143477e4a;\n    return\n      keccak256(\n        abi.encode(\n          ORDER_HASH,\n          order.isSellOrder,\n          order.signer,\n          keccak256(abi.encodePacked(order.constraints)),\n          _nftsHash(order.nfts),\n          keccak256(abi.encodePacked(order.execParams)),\n          keccak256(order.extraParams)\n        )\n      );\n  }\n\n  function _nftsHash(OrderTypes.OrderItem[] calldata nfts) internal pure returns (bytes32) {\n    // keccak256('OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 ORDER_ITEM_HASH = 0xf73f37e9f570369ceaab59cef16249ae1c0ad1afd592d656afac0be6f63b87e0;\n    uint256 numNfts = nfts.length;\n    bytes32[] memory hashes = new bytes32[](numNfts);\n    for (uint256 i = 0; i < numNfts; ) {\n      bytes32 hash = keccak256(abi.encode(ORDER_ITEM_HASH, nfts[i].collection, _tokensHash(nfts[i].tokens)));\n      hashes[i] = hash;\n      unchecked {\n        ++i;\n      }\n    }\n    bytes32 nftsHash = keccak256(abi.encodePacked(hashes));\n    return nftsHash;\n  }\n\n  function _tokensHash(OrderTypes.TokenInfo[] calldata tokens) internal pure returns (bytes32) {\n    // keccak256('TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 TOKEN_INFO_HASH = 0x88f0bd19d14f8b5d22c0605a15d9fffc285ebc8c86fb21139456d305982906f1;\n    uint256 numTokens = tokens.length;\n    bytes32[] memory hashes = new bytes32[](numTokens);\n    for (uint256 i = 0; i < numTokens; ) {\n      bytes32 hash = keccak256(abi.encode(TOKEN_INFO_HASH, tokens[i].tokenId, tokens[i].numTokens));\n      hashes[i] = hash;\n      unchecked {\n        ++i;\n      }\n    }\n    bytes32 tokensHash = keccak256(abi.encodePacked(hashes));\n    return tokensHash;\n  }\n\n  // ====================================================== ADMIN FUNCTIONS ======================================================\n\n  /// @dev used for rescuing exchange fees paid to the contract in tokens\n  function rescueTokens(\n    address destination,\n    address currency,\n    uint256 amount\n  ) external onlyOwner {\n    IERC20(currency).safeTransfer(destination, amount);\n  }\n\n  /// @dev used for rescuing exchange fees paid to the contract in ETH\n  function rescueETH(address destination) external payable onlyOwner {\n    (bool sent, ) = destination.call{value: msg.value}('');\n    require(sent, 'failed');\n  }\n\n  /// @dev adds a new transaction currency to the exchange\n  function addCurrency(address _currency) external onlyOwner {\n    _currencies.add(_currency);\n  }\n\n  /// @dev adds a new complication to the exchange\n  function addComplication(address _complication) external onlyOwner {\n    _complications.add(_complication);\n  }\n\n  /// @dev removes a transaction currency from the exchange\n  function removeCurrency(address _currency) external onlyOwner {\n    _currencies.remove(_currency);\n  }\n\n  /// @dev removes a complication from the exchange\n  function removeComplication(address _complication) external onlyOwner {\n    _complications.remove(_complication);\n  }\n\n  /// @dev updates auto snipe executor\n  function updateMatchExecutor(address _matchExecutor) external onlyOwner {\n    MATCH_EXECUTOR = _matchExecutor;\n  }\n\n  /// @dev updates the gas units required for WETH transfers\n  function updateWethTranferGas(uint32 _wethTransferGasUnits) external onlyOwner {\n    WETH_TRANSFER_GAS_UNITS = _wethTransferGasUnits;\n    emit NewWethTransferGasUnits(_wethTransferGasUnits);\n  }\n\n  /// @dev updates exchange fees\n  function setProtocolFee(uint16 _protocolFeeBps) external onlyOwner {\n    PROTOCOL_FEE_BPS = _protocolFeeBps;\n    emit NewProtocolFee(_protocolFeeBps);\n  }\n}\n\n\n",
        "CodeNames": [
            "InfinityExchange.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "takeOrders() and takeMultipleOneOrders() functions in InfinityExchange.sol",
                "Type": "Permanent Fund Freeze",
                "Description": "ETH funds of a user will be permanently lost if ETH is mistakenly sent over with ERC20 based takeOrders and takeMultipleOneOrders calls.",
                "Repair": "Add a check for msg.value to be zero for cases when it is not utilized"
            },
            {
                "Location": "MatchOneToManyOrders and matchOrders functions in InfinityExchange.sol",
                "Type": "Malicious Sell Order",
                "Description": "The MatchOneToManyOrders function does not check whether a given sell order is malicious, i.e., containing no NFT tokens but still requiring payment, which may cause the sellers to maliciously profit.",
                "Repair": "Ban empty NFT transfers by requiring numNfts to be bigger than zero and ensuring ERC1155 transfers at least 1 item"
            },
            {
                "Location": "updateWethTranferGas function in InfinityExchange.sol",
                "Type": "Malicious governance can steal WETH from buyers",
                "Description": "Malicious governance can use updateWethTranferGas to steal WETH from buyers.",
                "Repair": "Set a sanity check in updateWethTranferGas so governance can't set it to unreasonable value. Consider using timelock for setting governance settings."
            },
            {
                "Location": "startGasPerOrder variable in InfinityExchange.sol",
                "Type": "Gas refunds computed in a way where the first order's buyer pays less than the later ones",
                "Description": "InfinityExchange computes gas refunds in a way where the first order's buyer pays less than the later ones.",
                "Repair": "Initialize startGasPerOrder outside the for-loop."
            },
            {
                "Location": "gasCost computation in InfinityExchange.sol",
                "Type": "Maker order buyer is forced to reimburse the gas cost at any tx.gasprice",
                "Description": "Maker order buyer is forced to reimburse the gas cost at any tx.gasprice.",
                "Repair": "Consider adding a new parameter to maker buy orders, maxGasCost, to allow the buyer to limit the max gas they agreed to pay."
            },
            {
                "Location": "rescueETH() function in InfinityExchange.sol",
                "Type": "Accumulated ETH fees cannot be retrieved",
                "Description": "ETH fees accumulated from takeOrders() and takeMultipleOneOrders() operations are permanently frozen within the contract as there is only one way designed to retrieve them, a rescueETH() function, and it will work as intended, not being able to access ETH balance of the contract.",
                "Repair": "Add contract balance to the funds transferred in rescueETH() function"
            },
            {
                "Location": "takeMultipleOneOrders() function in InfinityExchange.sol",
                "Type": "Missing Complication check in takeMultipleOneOrders",
                "Description": "An order's type and its rules are defined in its Complication. Not checking it would allow anyone to take any orders regardless of their Complication's rule, causing unexpected execution for order makers.",
                "Repair": "Add canExecTakeOneOrder function in IComplication.sol and implement it in InfinityOrderBookComplication (and future Complications) to support takeMultipleOneOrders operation, then modify takeMultipleOneOrders to use the check"
            },
            {
                "Location": "_transferNFTs() function in InfinityExchange.sol",
                "Type": "_transferNFTs() succeeds even if no transfer is performed",
                "Description": "If an NFT is sold that does not specify support for the ERC-721 or ERC-1155 standard interface, the sale will still succeed. In doing so, the seller will receive funds from the buyer, but the buyer will not receive any NFT from the seller.",
                "Repair": "If neither the ERC-721 nor the ERC-1155 interface is supported the function should revert. An alternative approach would be to attempt a transferFrom and check the balance before and after to ensure that it succeeded"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function matchOneToOneOrders",
                "Type": "Arbitrary WETH transfer",
                "Description": "The function matchOneToOneOrders transfers an arbitrary amount of WETH from the user, buy.signer, in its inner call to _execMatchOneToOneOrders. The amount charged to the user is calculated dynamically based off of the gas consumption consumed during the trace. Notably, this amount is controlled by the seller since the seller's token can be malicious and purposefully consume a large amount of gas to grief the buyer.",
                "Repair": "Allow users to input a maximum fee/gas cost they are willing to spend on each order. Pulling an arbitrary amount from a user's wallet without any restriction is a dangerous practice given that many users give large/infinite approval to contracts."
            },
            {
                "Location": "function canExecTakeOrder",
                "Type": "Order matching logic",
                "Description": "When any user provides a sellOrder and they are trying to sell multiple tokens from *n* (n > 1) different ERC1155 collections in a single order, hackers can get the tokens of most expensive collections (with n times of the original amount) by paying the same price. The logic of canExecTakeOrder and canExecMatchOneToMany is not correct. The problem comes when there are duplicated items in takerItems. The aggregated number would be correct and all taker's Items are indeed in the order. However, it does not mean takerItems exactly matches all items in makerOrder, which means violation of the order.",
                "Repair": "Hash all the items and put them into a list. Then check whether the lists match."
            },
            {
                "Location": "function _transferNFTs",
                "Type": "ERC721/ERC1155 interoperability issue",
                "Description": "Many real-world NFT tokens may support both ERC721 and ERC1155 standards, which may break InfinityExchange::_transferNFTs, i.e., transferring less tokens than expected.",
                "Repair": "Reorder the checks to prioritize ERC1155 interface over ERC721 interface"
            },
            {
                "Location": "function setProtocolFee",
                "Type": "Arbitrary modification of protocol fee rate",
                "Description": "Protocol fee rate can be arbitrarily modified by the owner and the new rate will apply to all existing orders.",
                "Repair": "Consider making the protocol fee rate a constant, or changing to the protocol fee always be paid by the taker, or changing to the new protocol fee only applies to the orders created after the rate updated"
            },
            {
                "Location": "function matchOneToManyOrders",
                "Type": "Reentrancy",
                "Description": "Reentrancy from matchOneToManyOrders. matchOneToManyOrders doesn't conform to Checks-Effects-Interactions pattern, and updates the maker order nonce only after the NFTs and payment have been sent.",
                "Repair": "Conform to CEI and set the nonce to true before executing external calls"
            },
            {
                "Location": "_updateUserStakedAmounts() function",
                "Type": "Locked Funds",
                "Description": "Calling unstake() can cause locked funds.",
                "Repair": "Do not set userstakedAmounts.amount to 0 if none of its tokens are removed (vestedAmount == 0)"
            },
            {
                "Location": "takeOrders() and takeMultipleOneOrders() functions",
                "Type": "Overpayment",
                "Description": "Overpayment of native ETH is not refunded to buyer.",
                "Repair": "Calculate and refund overpayment amounts to callers"
            },
            {
                "Location": "areNumItemsValid() and matchOrders() functions",
                "Type": "NFT Loss",
                "Description": "Sellers may lose NFTs when orders are matched with matchOrders().",
                "Repair": "Replace check buy.constraints[0] <= sell.constraints[0] with numConstructedItems <= sell.constraints[0] and remove doItemsIntersect(sell.nfts, buy.nfts)"
            },
            {
                "Location": "canExecMatchOrder() and doItemsIntersect() functions",
                "Type": "Invalid Order",
                "Description": "Incorrect condition marks valid order as invalid.",
                "Repair": "Remove doItemsIntersect(sell.nfts, buy.nfts) from canExecMatchOrder() function"
            },
            {
                "Location": "",
                "Type": "None",
                "Description": "No vulnerability mentioned in this section.",
                "Repair": ""
            },
            {
                "Location": "Functions matchOneToOneOrders(), matchOneToManyOrders(), matchOrders(), takeMultipleOneOrders(), takeOrders()",
                "Type": "Wrong Order Matching",
                "Description": "Functions for order matching and execution do not check if seller and buyer are different, which can result in fund loss or griefing.",
                "Repair": "Add checks to ensure that seller != buyer"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\n// external imports\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\nimport {ReentrancyGuard} from '@openzeppelin/contracts/security/ReentrancyGuard.sol';\nimport {IERC165} from '@openzeppelin/contracts/interfaces/IERC165.sol';\nimport {IERC721} from '@openzeppelin/contracts/token/ERC721/IERC721.sol';\nimport {IERC1155} from '@openzeppelin/contracts/token/ERC1155/IERC1155.sol';\nimport {IERC20, SafeERC20} from '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\nimport {EnumerableSet} from '@openzeppelin/contracts/utils/structs/EnumerableSet.sol';\n\n// internal imports\nimport {OrderTypes} from '../libs/OrderTypes.sol';\nimport {IComplication} from '../interfaces/IComplication.sol';\nimport {SignatureChecker} from '../libs/SignatureChecker.sol';\n\n/**\n@title InfinityExchange\n@author nneverlander. Twitter @nneverlander\n@notice The main NFT exchange contract that holds state and does asset transfers\n@dev This contract can be extended via 'complications' - strategies that let the exchange execute various types of orders\n      like dutch auctions, reverse dutch auctions, floor price orders, private sales, etc.\n\nNFTNFTNFT...........................................NFTNFTNFT\nNFTNFT                                                 NFTNFT\nNFT                                                       NFT\n.                                                           .\n.                                                           .\n.                                                           .\n.                                                           .\n.               NFTNFTNFT            NFTNFTNFT              .\n.            NFTNFTNFTNFTNFT      NFTNFTNFTNFTNFT           .\n.           NFTNFTNFTNFTNFTNFT   NFTNFTNFTNFTNFTNFT         .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.         NFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFTNFT        .\n.          NFTNFTNFTNFTNFTNFTN   NFTNFTNFTNFTNFTNFT         .\n.            NFTNFTNFTNFTNFT      NFTNFTNFTNFTNFT           .\n.               NFTNFTNFT            NFTNFTNFT              .\n.                                                           .\n.                                                           .\n.                                                           .\n.                                                           .\nNFT                                                       NFT\nNFTNFT                                                 NFTNFT\nNFTNFTNFT...........................................NFTNFTNFT \n\n*/\ncontract InfinityExchange is ReentrancyGuard, Ownable {\n  using SafeERC20 for IERC20;\n  using EnumerableSet for EnumerableSet.AddressSet;\n\n  /// @dev WETH address of a chain; set at deploy time to the WETH address of the chain that this contract is deployed to\n  address public immutable WETH;\n  /// @dev Used in order signing with EIP-712\n  bytes32 public immutable DOMAIN_SEPARATOR;\n  /// @dev This is the adress that is used to send auto sniped orders for execution on chain\n  address public MATCH_EXECUTOR;\n  /// @dev Gas cost for auto sniped orders are paid by the buyers and refunded to this contract in the form of WETH\n  uint32 public WETH_TRANSFER_GAS_UNITS = 50000;\n  /// @notice Exchange fee in basis points (250 bps = 2.5%)\n  uint16 public PROTOCOL_FEE_BPS = 250;\n\n  /**\n   @dev All orders should have a nonce >= to this value. \n        Any orders with nonce value less than this are non-executable. \n        Used for cancelling all outstanding orders.\n  */\n  mapping(address => uint256) public userMinOrderNonce;\n\n  /// @dev This records already executed or cancelled orders to prevent replay attacks.\n  mapping(address => mapping(uint256 => bool)) public isUserOrderNonceExecutedOrCancelled;\n\n  /// @dev Storage variable that keeps track of valid complications (order execution strategies)\n  EnumerableSet.AddressSet private _complications;\n  /// @dev Storate variable that keeps track of valid currencies (tokens)\n  EnumerableSet.AddressSet private _currencies;\n\n  event CancelAllOrders(address user, uint256 newMinNonce);\n  event CancelMultipleOrders(address user, uint256[] orderNonces);\n  event NewWethTransferGasUnits(uint32 wethTransferGasUnits);\n  event NewProtocolFee(uint16 protocolFee);\n\n  event MatchOrderFulfilled(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    address seller,\n    address buyer,\n    address complication, // address of the complication that defines the execution\n    address currency, // token address of the transacting currency\n    uint256 amount // amount spent on the order\n  );\n\n  event TakeOrderFulfilled(\n    bytes32 orderHash,\n    address seller,\n    address buyer,\n    address complication, // address of the complication that defines the execution\n    address currency, // token address of the transacting currency\n    uint256 amount // amount spent on the order\n  );\n\n  constructor(address _WETH, address _matchExecutor) {\n    // Calculate the domain separator\n    DOMAIN_SEPARATOR = keccak256(\n      abi.encode(\n        keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)'),\n        keccak256('InfinityExchange'),\n        keccak256(bytes('1')), // for versionId = 1\n        block.chainid,\n        address(this)\n      )\n    );\n    WETH = _WETH;\n    MATCH_EXECUTOR = _matchExecutor;\n  }\n\n  fallback() external payable {}\n\n  receive() external payable {}\n\n  // =================================================== USER FUNCTIONS =======================================================\n\n  /**\n   @notice Matches orders one to one where each order has 1 NFT. Example: Match 1 specific NFT buy with one specific NFT sell.\n   @dev Can execute orders in batches for gas efficiency. Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n   @param makerOrders1 Maker order 1\n   @param makerOrders2 Maker order 2\n  */\n  function matchOneToOneOrders(\n    OrderTypes.MakerOrder[] calldata makerOrders1,\n    OrderTypes.MakerOrder[] calldata makerOrders2\n  ) external {\n    uint256 startGas = gasleft();\n    uint256 numMakerOrders = makerOrders1.length;\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(numMakerOrders == makerOrders2.length, 'mismatched lengths');\n\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    for (uint256 i = 0; i < numMakerOrders; ) {\n      uint256 startGasPerOrder = gasleft() + ((startGas - gasleft()) / numMakerOrders);\n      require(_complications.contains(makerOrders1[i].execParams[0]), 'invalid complication');\n      (bool canExec, uint256 execPrice) = IComplication(makerOrders1[i].execParams[0]).canExecMatchOneToOne(\n        makerOrders1[i],\n        makerOrders2[i]\n      );\n      require(canExec, 'cannot execute');\n      _matchOneToOneOrders(\n        makerOrders1[i],\n        makerOrders2[i],\n        startGasPerOrder,\n        execPrice,\n        protocolFeeBps,\n        wethTransferGasUnits,\n        weth\n      );\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   @notice Matches one  order to many orders. Example: A buy order with 5 specific NFTs with 5 sell orders with those specific NFTs.\n   @dev Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n   @param makerOrder The one order to match\n   @param manyMakerOrders Array of multiple orders to match the one order against\n  */\n  function matchOneToManyOrders(\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\n  ) external {\n    uint256 startGas = gasleft();\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(_complications.contains(makerOrder.execParams[0]), 'invalid complication');\n    require(\n      IComplication(makerOrder.execParams[0]).canExecMatchOneToMany(makerOrder, manyMakerOrders),\n      'cannot execute'\n    );\n    bytes32 makerOrderHash = _hash(makerOrder);\n    require(isOrderValid(makerOrder, makerOrderHash), 'invalid maker order');\n    uint256 ordersLength = manyMakerOrders.length;\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    if (makerOrder.isSellOrder) {\n      for (uint256 i = 0; i < ordersLength; ) {\n        // 20000 for the SSTORE op that updates maker nonce status from zero to a non zero status\n        uint256 startGasPerOrder = gasleft() + ((startGas + 20000 - gasleft()) / ordersLength);\n        _matchOneMakerSellToManyMakerBuys(\n          makerOrderHash,\n          makerOrder,\n          manyMakerOrders[i],\n          startGasPerOrder,\n          protocolFeeBps,\n          wethTransferGasUnits,\n          weth\n        );\n        unchecked {\n          ++i;\n        }\n      }\n      isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    } else {\n      uint256 protocolFee;\n      for (uint256 i = 0; i < ordersLength; ) {\n        protocolFee += _matchOneMakerBuyToManyMakerSells(\n          makerOrderHash,\n          manyMakerOrders[i],\n          makerOrder,\n          protocolFeeBps\n        );\n        unchecked {\n          ++i;\n        }\n      }\n      isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n      uint256 gasCost = (startGas - gasleft() + WETH_TRANSFER_GAS_UNITS) * tx.gasprice;\n      // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n      // else we need to send the protocol fee separately in the execution currency\n      // since the buyer is common across many sell orders, this part can be executed outside the above for loop\n      // in contrast to the case where if the one order is a sell order, we need to do this in each for loop\n      if (makerOrder.execParams[1] == weth) {\n        IERC20(weth).safeTransferFrom(makerOrder.signer, address(this), protocolFee + gasCost);\n      } else {\n        IERC20(makerOrder.execParams[1]).safeTransferFrom(makerOrder.signer, address(this), protocolFee);\n        IERC20(weth).safeTransferFrom(makerOrder.signer, address(this), gasCost);\n      }\n    }\n  }\n\n  /**\n   @notice Matches orders one to one where no specific NFTs are specified. \n          Example: A collection wide buy order with any 2 NFTs with a sell order that has any 2 NFTs from that collection.\n   @dev Can only be called by the match executor. Refunds gas cost incurred by the\n        match executor to this contract. Checks whether the given complication can execute the match.\n        The constructs param specifies the actual NFTs that will be executed since buys and sells need not specify actual NFTs - only \n        a higher level intent.\n   @param sells User signed sell orders\n   @param buys User signed buy orders\n   @param constructs Intersection of the NFTs in the sells and buys. Constructed by an off chain matching engine.\n  */\n  function matchOrders(\n    OrderTypes.MakerOrder[] calldata sells,\n    OrderTypes.MakerOrder[] calldata buys,\n    OrderTypes.OrderItem[][] calldata constructs\n  ) external {\n    uint256 startGas = gasleft();\n    uint256 numSells = sells.length;\n    require(msg.sender == MATCH_EXECUTOR, 'OME');\n    require(numSells == buys.length && numSells == constructs.length, 'mismatched lengths');\n    // the below 3 variables are copied to memory once to save on gas\n    // an SLOAD costs minimum 100 gas where an MLOAD only costs minimum 3 gas\n    // since these values won't change during function execution, we can save on gas by copying them to memory once\n    // instead of SLOADing once for each loop iteration\n    uint16 protocolFeeBps = PROTOCOL_FEE_BPS;\n    uint32 wethTransferGasUnits = WETH_TRANSFER_GAS_UNITS;\n    address weth = WETH;\n    for (uint256 i = 0; i < numSells; ) {\n      uint256 startGasPerOrder = gasleft() + ((startGas - gasleft()) / numSells);\n      (bool executionValid, uint256 execPrice) = IComplication(sells[i].execParams[0]).canExecMatchOrder(\n        sells[i],\n        buys[i],\n        constructs[i]\n      );\n      require(executionValid, 'cannot execute');\n      _matchOrders(\n        sells[i],\n        buys[i],\n        constructs[i],\n        startGasPerOrder,\n        execPrice,\n        protocolFeeBps,\n        wethTransferGasUnits,\n        weth\n      );\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   @notice Batch buys or sells orders with specific `1` NFTs. Transaction initiated by an end user.\n   @param makerOrders The orders to fulfill\n  */\n  function takeMultipleOneOrders(OrderTypes.MakerOrder[] calldata makerOrders) external payable nonReentrant {\n    uint256 numMakerOrders = makerOrders.length;\n    uint256 totalPrice;\n    address currency = makerOrders[0].execParams[1];\n    bool isMakerSeller = makerOrders[0].isSellOrder;\n    if (!isMakerSeller) {\n      require(currency != address(0), 'offers only in ERC20');\n    }\n    for (uint256 i = 0; i < numMakerOrders; ) {\n      bytes32 makerOrderHash = _hash(makerOrders[i]);\n      require(isOrderValid(makerOrders[i], makerOrderHash), 'invalid maker order');\n      bool isTimeValid = makerOrders[i].constraints[3] <= block.timestamp &&\n        makerOrders[i].constraints[4] >= block.timestamp;\n      require(isTimeValid, 'invalid time');\n      require(currency == makerOrders[i].execParams[1], 'cannot mix currencies');\n      require(isMakerSeller == makerOrders[i].isSellOrder, 'cannot mix order sides');\n      uint256 execPrice = _getCurrentPrice(makerOrders[i]);\n      totalPrice += execPrice;\n      _execTakeOneOrder(makerOrderHash, makerOrders[i], isMakerSeller, execPrice);\n      unchecked {\n        ++i;\n      }\n    }\n    // check to ensure that for ETH orders, enough ETH is sent\n    // for non ETH orders, IERC20 safeTransferFrom will throw error if insufficient amount is sent\n    if (isMakerSeller && currency == address(0)) {\n      require(msg.value >= totalPrice, 'invalid total price');\n    }\n  }\n\n  /**\n   @notice Batch buys or sells orders where maker orders can have unspecified NFTs. Transaction initiated by an end user.\n   @param makerOrders The orders to fulfill\n   @param takerNfts The specific NFTs that the taker is willing to take that intersect with the higher order intent of the maker\n   Example: If a makerOrder is 'buy any one of these 2 specific NFTs', then the takerNfts would be 'this one specific NFT'.\n  */\n  function takeOrders(OrderTypes.MakerOrder[] calldata makerOrders, OrderTypes.OrderItem[][] calldata takerNfts)\n    external\n    payable\n    nonReentrant\n  {\n    uint256 ordersLength = makerOrders.length;\n    require(ordersLength == takerNfts.length, 'mismatched lengths');\n    uint256 totalPrice;\n    address currency = makerOrders[0].execParams[1];\n    bool isMakerSeller = makerOrders[0].isSellOrder;\n    if (!isMakerSeller) {\n      require(currency != address(0), 'offers only in ERC20');\n    }\n    for (uint256 i = 0; i < ordersLength; ) {\n      require(currency == makerOrders[i].execParams[1], 'cannot mix currencies');\n      require(isMakerSeller == makerOrders[i].isSellOrder, 'cannot mix order sides');\n      uint256 execPrice = _getCurrentPrice(makerOrders[i]);\n      totalPrice += execPrice;\n      _takeOrders(makerOrders[i], takerNfts[i], execPrice);\n      unchecked {\n        ++i;\n      }\n    }\n    // check to ensure that for ETH orders, enough ETH is sent\n    // for non ETH orders, IERC20 safeTransferFrom will throw error if insufficient amount is sent\n    if (isMakerSeller && currency == address(0)) {\n      require(msg.value >= totalPrice, 'invalid total price');\n    }\n  }\n\n  /**\n   @notice Helper function (non exchange related) to send multiple NFTs in one go\n   @param to The orders to fulfill\n   @param items The specific NFTs to transfer\n  */\n  function transferMultipleNFTs(address to, OrderTypes.OrderItem[] calldata items) external nonReentrant {\n    _transferMultipleNFTs(msg.sender, to, items);\n  }\n\n  /**\n   * @notice Cancel all pending orders\n   * @param minNonce minimum user nonce\n   */\n  function cancelAllOrders(uint256 minNonce) external {\n    require(minNonce > userMinOrderNonce[msg.sender], 'nonce too low');\n    require(minNonce < userMinOrderNonce[msg.sender] + 1000000, 'too many');\n    userMinOrderNonce[msg.sender] = minNonce;\n    emit CancelAllOrders(msg.sender, minNonce);\n  }\n\n  /**\n   * @notice Cancel multiple orders\n   * @param orderNonces array of order nonces\n   */\n  function cancelMultipleOrders(uint256[] calldata orderNonces) external {\n    uint256 numNonces = orderNonces.length;\n    require(numNonces > 0, 'cannot be empty');\n    for (uint256 i = 0; i < numNonces; ) {\n      require(orderNonces[i] >= userMinOrderNonce[msg.sender], 'nonce too low');\n      require(!isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]], 'nonce already executed or cancelled');\n      isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\n      unchecked {\n        ++i;\n      }\n    }\n    emit CancelMultipleOrders(msg.sender, orderNonces);\n  }\n\n  // ====================================================== VIEW FUNCTIONS ======================================================\n\n  /**\n   * @notice Check whether user order nonce is executed or cancelled\n   * @param user address of user\n   * @param nonce nonce of the order\n   * @return whether nonce is valid\n   */\n  function isNonceValid(address user, uint256 nonce) external view returns (bool) {\n    return !isUserOrderNonceExecutedOrCancelled[user][nonce] && nonce > userMinOrderNonce[user];\n  }\n\n  /**\n   * @notice Check whether a user signed order has valid signature\n   * @param order the order to verify\n   * @return whether order has valid signature\n   */\n  function verifyOrderSig(OrderTypes.MakerOrder calldata order) external view returns (bool) {\n    // Verify the validity of the signature\n    (bytes32 r, bytes32 s, uint8 v) = abi.decode(order.sig, (bytes32, bytes32, uint8));\n    return SignatureChecker.verify(_hash(order), order.signer, r, s, v, DOMAIN_SEPARATOR);\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n   * @param sellOrderHash hash of the sell order\n   * @param buyOrderHash hash of the buy order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid\n   */\n  function verifyMatchOneToOneOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      isOrderValid(sell, sellOrderHash) &&\n      isOrderValid(buy, buyOrderHash));\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n   * @param orderHash hash of the order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid\n   */\n  function verifyMatchOneToManyOrders(\n    bytes32 orderHash,\n    bool verifySellOrder,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    bool _orderValid;\n    if (verifySellOrder) {\n      _orderValid = isOrderValid(sell, orderHash);\n    } else {\n      _orderValid = isOrderValid(buy, orderHash);\n    }\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      _orderValid);\n  }\n\n  /**\n   * @notice Checks whether orders are valid\n   * @dev Checks whether currencies match, sides match, complications match and if each order is valid (see isOrderValid)\n          Also checks if the given complication can execute this order\n   * @param sellOrderHash hash of the sell order\n   * @param buyOrderHash hash of the buy order\n   * @param sell the sell order\n   * @param buy the buy order\n   * @return whether orders are valid and the execution price\n   */\n  function verifyMatchOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy\n  ) public view returns (bool) {\n    bool currenciesMatch = sell.execParams[1] == buy.execParams[1] ||\n      (sell.execParams[1] == address(0) && buy.execParams[1] == WETH);\n    return (sell.isSellOrder &&\n      !buy.isSellOrder &&\n      sell.execParams[0] == buy.execParams[0] &&\n      currenciesMatch &&\n      isOrderValid(sell, sellOrderHash) &&\n      isOrderValid(buy, buyOrderHash));\n  }\n\n  /**\n   * @notice Verifies the validity of the order\n   * @dev checks whether order nonce was cancelled or already executed, \n          if signature is valid and if the complication and currency are valid\n   * @param order the order\n   * @param orderHash computed hash of the order\n   */\n  function isOrderValid(OrderTypes.MakerOrder calldata order, bytes32 orderHash) public view returns (bool) {\n    bool orderExpired = isUserOrderNonceExecutedOrCancelled[order.signer][order.constraints[5]] ||\n      order.constraints[5] < userMinOrderNonce[order.signer];\n    // Verify the validity of the signature\n    (bytes32 r, bytes32 s, uint8 v) = abi.decode(order.sig, (bytes32, bytes32, uint8));\n    bool sigValid = SignatureChecker.verify(orderHash, order.signer, r, s, v, DOMAIN_SEPARATOR);\n    if (\n      orderExpired ||\n      !sigValid ||\n      order.signer == address(0) ||\n      !_complications.contains(order.execParams[0]) ||\n      !_currencies.contains(order.execParams[1])\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  /// @notice returns the number of complications supported by the exchange\n  function numComplications() external view returns (uint256) {\n    return _complications.length();\n  }\n\n  /// @notice returns the complication at the given index\n  function getComplicationAt(uint256 index) external view returns (address) {\n    return _complications.at(index);\n  }\n\n  /// @notice returns whether a given complication is valid\n  function isValidComplication(address complication) external view returns (bool) {\n    return _complications.contains(complication);\n  }\n\n  /// @notice returns the number of currencies supported by the exchange\n  function numCurrencies() external view returns (uint256) {\n    return _currencies.length();\n  }\n\n  /// @notice returns the currency at the given index\n  function getCurrencyAt(uint256 index) external view returns (address) {\n    return _currencies.at(index);\n  }\n\n  /// @notice returns whether a given currency is valid\n  function isValidCurrency(address currency) external view returns (bool) {\n    return _currencies.contains(currency);\n  }\n\n  // ====================================================== INTERNAL FUNCTIONS ================================================\n\n  /**\n   * @notice Internal helper function to match orders one to one\n   * @param makerOrder1 first order\n   * @param makerOrder2 second maker order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOneToOneOrders(\n    OrderTypes.MakerOrder calldata makerOrder1,\n    OrderTypes.MakerOrder calldata makerOrder2,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    OrderTypes.MakerOrder calldata sell = makerOrder1.isSellOrder ? makerOrder1 : makerOrder2;\n    OrderTypes.MakerOrder calldata buy = makerOrder1.isSellOrder ? makerOrder2 : makerOrder1;\n    bytes32 sellOrderHash = _hash(sell);\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOneToOneOrders(sellOrderHash, buyOrderHash, sell, buy), 'order not verified');\n    _execMatchOneToOneOrders(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      startGasPerOrder,\n      execPrice,\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function to match one maker sell order to many maker buys\n   * @param sellOrderHash sell order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOneMakerSellToManyMakerBuys(\n    bytes32 sellOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOneToManyOrders(buyOrderHash, false, sell, buy), 'order not verified');\n    _execMatchOneMakerSellToManyMakerBuys(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      startGasPerOrder,\n      _getCurrentPrice(buy),\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function to match one maker buy order to many maker sells\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param protocolFeeBps exchange fee\n   */\n  function _matchOneMakerBuyToManyMakerSells(\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint16 protocolFeeBps\n  ) internal returns (uint256) {\n    bytes32 sellOrderHash = _hash(sell);\n    require(verifyMatchOneToManyOrders(sellOrderHash, true, sell, buy), 'order not verified');\n    return\n      _execMatchOneMakerBuyToManyMakerSells(\n        sellOrderHash,\n        buyOrderHash,\n        sell,\n        buy,\n        _getCurrentPrice(sell),\n        protocolFeeBps\n      );\n  }\n\n  /**\n   * @notice Internal helper function to match orders specified via a higher order intent\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param constructedNfts the nfts constructed by an off chain matching that are guaranteed to intersect\n            with the user specified signed intents (orders)\n   * @param startGasPerOrder start gas when this order started execution\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _matchOrders(\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    bytes32 sellOrderHash = _hash(sell);\n    bytes32 buyOrderHash = _hash(buy);\n    require(verifyMatchOrders(sellOrderHash, buyOrderHash, sell, buy), 'order not verified');\n    _execMatchOrders(\n      sellOrderHash,\n      buyOrderHash,\n      sell,\n      buy,\n      constructedNfts,\n      startGasPerOrder,\n      execPrice,\n      protocolFeeBps,\n      wethTransferGasUnits,\n      weth\n    );\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one to one orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Also refunds gas expenditure to the contract\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _execMatchOneToOneOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[sell.signer][sell.constraints[5]] = true;\n    isUserOrderNonceExecutedOrCancelled[buy.signer][buy.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _transferMultipleNFTs(sell.signer, buy.signer, sell.nfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, sell.signer, remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one sell to many buy orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Also refunds gas expenditure to the contract\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param startGasPerOrder start gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth WETH address\n   */\n  function _execMatchOneMakerSellToManyMakerBuys(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[buy.signer][buy.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOneToManyOrders(sell.signer, buy.signer, buy.nfts, buy.execParams[1], remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match one buy to many sell orders\n   * @dev Updates order nonce states, does asset transfers and emits events. Gas expenditure refund is done in the caller\n          since it does not need to be done in a loop\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @return the protocolFee so that the buyer can pay the protocol fee and gas cost in one go\n   */\n  function _execMatchOneMakerBuyToManyMakerSells(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    uint256 execPrice,\n    uint16 protocolFeeBps\n  ) internal returns (uint256) {\n    isUserOrderNonceExecutedOrCancelled[sell.signer][sell.constraints[5]] = true;\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOneToManyOrders(sell.signer, buy.signer, sell.nfts, buy.execParams[1], remainingAmount);\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    return protocolFee;\n  }\n\n  /// @dev this helper purely exists to help reduce contract size a bit and avoid any stack too deep errors\n  function _execMatchOneToManyOrders(\n    address seller,\n    address buyer,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    address currency,\n    uint256 amount\n  ) internal {\n    _transferMultipleNFTs(seller, buyer, constructedNfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(currency).safeTransferFrom(buyer, seller, amount);\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers for match orders\n   * @dev Updates order nonce states, does asset transfers, emits events and does gas refunds\n   * @param sellOrderHash sell order hash\n   * @param buyOrderHash buy order hash\n   * @param sell the sell order\n   * @param buy the buy order\n   * @param constructedNfts the constructed nfts\n   * @param startGasPerOrder gas when this order started execution\n   * @param execPrice execution price\n   * @param protocolFeeBps exchange fee\n   * @param wethTransferGasUnits gas units that a WETH transfer will use\n   * @param weth weth address\n   */\n  function _execMatchOrders(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    uint256 startGasPerOrder,\n    uint256 execPrice,\n    uint16 protocolFeeBps,\n    uint32 wethTransferGasUnits,\n    address weth\n  ) internal {\n    uint256 protocolFee = (protocolFeeBps * execPrice) / 10000;\n    uint256 remainingAmount = execPrice - protocolFee;\n    _execMatchOrder(\n      sell.signer,\n      buy.signer,\n      sell.constraints[5],\n      buy.constraints[5],\n      constructedNfts,\n      buy.execParams[1],\n      remainingAmount\n    );\n    _emitMatchEvent(\n      sellOrderHash,\n      buyOrderHash,\n      sell.signer,\n      buy.signer,\n      buy.execParams[0],\n      buy.execParams[1],\n      execPrice\n    );\n    uint256 gasCost = (startGasPerOrder - gasleft() + wethTransferGasUnits) * tx.gasprice;\n    // if the execution currency is weth, we can send the protocol fee and gas cost in one transfer to save gas\n    // else we need to send the protocol fee separately in the execution currency\n    if (buy.execParams[1] == weth) {\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), protocolFee + gasCost);\n    } else {\n      IERC20(buy.execParams[1]).safeTransferFrom(buy.signer, address(this), protocolFee);\n      IERC20(weth).safeTransferFrom(buy.signer, address(this), gasCost);\n    }\n  }\n\n  /// @dev this helper purely exists to help reduce contract size a bit and avoid any stack too deep errors\n  function _execMatchOrder(\n    address seller,\n    address buyer,\n    uint256 sellNonce,\n    uint256 buyNonce,\n    OrderTypes.OrderItem[] calldata constructedNfts,\n    address currency,\n    uint256 amount\n  ) internal {\n    // Update order execution status to true (prevents replay)\n    isUserOrderNonceExecutedOrCancelled[seller][sellNonce] = true;\n    isUserOrderNonceExecutedOrCancelled[buyer][buyNonce] = true;\n    _transferMultipleNFTs(seller, buyer, constructedNfts);\n    // transfer final amount (post-fees) to seller\n    IERC20(currency).safeTransferFrom(buyer, seller, amount);\n  }\n\n  function _emitMatchEvent(\n    bytes32 sellOrderHash,\n    bytes32 buyOrderHash,\n    address seller,\n    address buyer,\n    address complication,\n    address currency,\n    uint256 amount\n  ) internal {\n    emit MatchOrderFulfilled(sellOrderHash, buyOrderHash, seller, buyer, complication, currency, amount);\n  }\n\n  /**\n   * @notice Internal helper function to take orders\n   * @dev verifies whether order can be executed\n   * @param makerOrder the maker order\n   * @param takerItems nfts to be transferred\n   * @param execPrice execution price\n   */\n  function _takeOrders(\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.OrderItem[] calldata takerItems,\n    uint256 execPrice\n  ) internal {\n    bytes32 makerOrderHash = _hash(makerOrder);\n    bool makerOrderValid = isOrderValid(makerOrder, makerOrderHash);\n    bool executionValid = IComplication(makerOrder.execParams[0]).canExecTakeOrder(makerOrder, takerItems);\n    require(makerOrderValid && executionValid, 'order not verified');\n    _execTakeOrders(makerOrderHash, makerOrder, takerItems, makerOrder.isSellOrder, execPrice);\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers \n              for take orders specifying a higher order intent\n   * @dev Updates order nonce state, does asset transfers and emits events\n   * @param makerOrderHash maker order hash\n   * @param makerOrder the maker order\n   * @param takerItems nfts to be transferred\n   * @param isMakerSeller is the maker order a sell order\n   * @param execPrice execution price\n   */\n  function _execTakeOrders(\n    bytes32 makerOrderHash,\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.OrderItem[] calldata takerItems,\n    bool isMakerSeller,\n    uint256 execPrice\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    if (isMakerSeller) {\n      _transferNFTsAndFees(makerOrder.signer, msg.sender, takerItems, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, makerOrder.signer, msg.sender, makerOrder, execPrice);\n    } else {\n      _transferNFTsAndFees(msg.sender, makerOrder.signer, takerItems, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, msg.sender, makerOrder.signer, makerOrder, execPrice);\n    }\n  }\n\n  /**\n   * @notice Internal helper function that executes contract state changes and does asset transfers \n              for simple take orders\n   * @dev Updates order nonce state, does asset transfers and emits events\n   * @param makerOrderHash maker order hash\n   * @param makerOrder the maker order\n   * @param isMakerSeller is the maker order a sell order\n   * @param execPrice execution price\n   */\n  function _execTakeOneOrder(\n    bytes32 makerOrderHash,\n    OrderTypes.MakerOrder calldata makerOrder,\n    bool isMakerSeller,\n    uint256 execPrice\n  ) internal {\n    isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.constraints[5]] = true;\n    if (isMakerSeller) {\n      _transferNFTsAndFees(makerOrder.signer, msg.sender, makerOrder.nfts, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, makerOrder.signer, msg.sender, makerOrder, execPrice);\n    } else {\n      _transferNFTsAndFees(msg.sender, makerOrder.signer, makerOrder.nfts, execPrice, makerOrder.execParams[1]);\n      _emitTakerEvent(makerOrderHash, msg.sender, makerOrder.signer, makerOrder, execPrice);\n    }\n  }\n\n  function _emitTakerEvent(\n    bytes32 orderHash,\n    address seller,\n    address buyer,\n    OrderTypes.MakerOrder calldata order,\n    uint256 amount\n  ) internal {\n    emit TakeOrderFulfilled(orderHash, seller, buyer, order.execParams[0], order.execParams[1], amount);\n  }\n\n  /**\n   * @notice Transfers NFTs and fees\n   * @param seller the seller\n   * @param buyer the buyer\n   * @param nfts nfts to transfer\n   * @param amount amount to transfer\n   * @param currency currency of the transfer\n   */\n  function _transferNFTsAndFees(\n    address seller,\n    address buyer,\n    OrderTypes.OrderItem[] calldata nfts,\n    uint256 amount,\n    address currency\n  ) internal {\n    // transfer NFTs\n    _transferMultipleNFTs(seller, buyer, nfts);\n    // transfer fees\n    _transferFees(seller, buyer, amount, currency);\n  }\n\n  /**\n   * @notice Transfers multiple NFTs in a loop and ERC1155s in a batch\n   * @param from the from address\n   * @param to the to address\n   * @param nfts nfts to transfer\n   */\n  function _transferMultipleNFTs(\n    address from,\n    address to,\n    OrderTypes.OrderItem[] calldata nfts\n  ) internal {\n    uint256 numNfts = nfts.length;\n    for (uint256 i = 0; i < numNfts; ) {\n      _transferNFTs(from, to, nfts[i]);\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Transfer NFTs\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferNFTs(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    if (IERC165(item.collection).supportsInterface(0x80ac58cd)) {\n      _transferERC721s(from, to, item);\n    } else if (IERC165(item.collection).supportsInterface(0xd9b67a26)) {\n      _transferERC1155s(from, to, item);\n    }\n  }\n\n  /**\n   * @notice Transfer ERC721s\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferERC721s(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    uint256 numTokens = item.tokens.length;\n    for (uint256 i = 0; i < numTokens; ) {\n      IERC721(item.collection).safeTransferFrom(from, to, item.tokens[i].tokenId);\n      unchecked {\n        ++i;\n      }\n    }\n  }\n\n  /**\n   * @notice Transfer ERC1155s\n   * @dev uses the ERC1155 batchTransfer function for efficient transfers\n   * @param from address of the sender\n   * @param to address of the recipient\n   * @param item item to transfer\n   */\n  function _transferERC1155s(\n    address from,\n    address to,\n    OrderTypes.OrderItem calldata item\n  ) internal {\n    uint256 numNfts = item.tokens.length;\n    uint256[] memory tokenIdsArr = new uint256[](numNfts);\n    uint256[] memory numTokensPerTokenIdArr = new uint256[](numNfts);\n    for (uint256 i = 0; i < numNfts; ) {\n      tokenIdsArr[i] = item.tokens[i].tokenId;\n      numTokensPerTokenIdArr[i] = item.tokens[i].numTokens;\n      unchecked {\n        ++i;\n      }\n    }\n    IERC1155(item.collection).safeBatchTransferFrom(from, to, tokenIdsArr, numTokensPerTokenIdArr, '0x0');\n  }\n\n  /**\n   * @notice Transfer fees. Fees are always transferred from buyer to the seller and the exchange although seller is \n            the one that actually 'pays' the fees\n   * @dev if the currency ETH, no additional transfer is needed to pay exchange fees since the contract is 'payable'\n   * @param seller the seller\n   * @param buyer the buyer\n   * @param amount amount to transfer\n   * @param currency currency of the transfer\n   */\n  function _transferFees(\n    address seller,\n    address buyer,\n    uint256 amount,\n    address currency\n  ) internal {\n    // protocol fee\n    uint256 protocolFee = (PROTOCOL_FEE_BPS * amount) / 10000;\n    uint256 remainingAmount = amount - protocolFee;\n    // ETH\n    if (currency == address(0)) {\n      // transfer amount to seller\n      (bool sent, ) = seller.call{value: remainingAmount}('');\n      require(sent, 'failed to send ether to seller');\n    } else {\n      // transfer final amount (post-fees) to seller\n      IERC20(currency).safeTransferFrom(buyer, seller, remainingAmount);\n      // send fee to protocol\n      IERC20(currency).safeTransferFrom(buyer, address(this), protocolFee);\n    }\n  }\n\n  // =================================================== UTILS ==================================================================\n\n  /// @dev Gets current order price for orders that vary in price over time (dutch and reverse dutch auctions)\n  function _getCurrentPrice(OrderTypes.MakerOrder calldata order) internal view returns (uint256) {\n    (uint256 startPrice, uint256 endPrice) = (order.constraints[1], order.constraints[2]);\n    uint256 duration = order.constraints[4] - order.constraints[3];\n    uint256 priceDiff = startPrice > endPrice ? startPrice - endPrice : endPrice - startPrice;\n    if (priceDiff == 0 || duration == 0) {\n      return startPrice;\n    }\n    uint256 elapsedTime = block.timestamp - order.constraints[3];\n    uint256 PRECISION = 10**4; // precision for division; similar to bps\n    uint256 portionBps = elapsedTime > duration ? PRECISION : ((elapsedTime * PRECISION) / duration);\n    priceDiff = (priceDiff * portionBps) / PRECISION;\n    return startPrice > endPrice ? startPrice - priceDiff : startPrice + priceDiff;\n  }\n\n  /// @dev hashes the given order with the help of _nftsHash and _tokensHash\n  function _hash(OrderTypes.MakerOrder calldata order) internal pure returns (bytes32) {\n    // keccak256('Order(bool isSellOrder,address signer,uint256[] constraints,OrderItem[] nfts,address[] execParams,bytes extraParams)OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 ORDER_HASH = 0x7bcfb5a29031e6b8d34ca1a14dd0a1f5cb11b20f755bb2a31ee3c4b143477e4a;\n    return\n      keccak256(\n        abi.encode(\n          ORDER_HASH,\n          order.isSellOrder,\n          order.signer,\n          keccak256(abi.encodePacked(order.constraints)),\n          _nftsHash(order.nfts),\n          keccak256(abi.encodePacked(order.execParams)),\n          keccak256(order.extraParams)\n        )\n      );\n  }\n\n  function _nftsHash(OrderTypes.OrderItem[] calldata nfts) internal pure returns (bytes32) {\n    // keccak256('OrderItem(address collection,TokenInfo[] tokens)TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 ORDER_ITEM_HASH = 0xf73f37e9f570369ceaab59cef16249ae1c0ad1afd592d656afac0be6f63b87e0;\n    uint256 numNfts = nfts.length;\n    bytes32[] memory hashes = new bytes32[](numNfts);\n    for (uint256 i = 0; i < numNfts; ) {\n      bytes32 hash = keccak256(abi.encode(ORDER_ITEM_HASH, nfts[i].collection, _tokensHash(nfts[i].tokens)));\n      hashes[i] = hash;\n      unchecked {\n        ++i;\n      }\n    }\n    bytes32 nftsHash = keccak256(abi.encodePacked(hashes));\n    return nftsHash;\n  }\n\n  function _tokensHash(OrderTypes.TokenInfo[] calldata tokens) internal pure returns (bytes32) {\n    // keccak256('TokenInfo(uint256 tokenId,uint256 numTokens)')\n    bytes32 TOKEN_INFO_HASH = 0x88f0bd19d14f8b5d22c0605a15d9fffc285ebc8c86fb21139456d305982906f1;\n    uint256 numTokens = tokens.length;\n    bytes32[] memory hashes = new bytes32[](numTokens);\n    for (uint256 i = 0; i < numTokens; ) {\n      bytes32 hash = keccak256(abi.encode(TOKEN_INFO_HASH, tokens[i].tokenId, tokens[i].numTokens));\n      hashes[i] = hash;\n      unchecked {\n        ++i;\n      }\n    }\n    bytes32 tokensHash = keccak256(abi.encodePacked(hashes));\n    return tokensHash;\n  }\n\n  // ====================================================== ADMIN FUNCTIONS ======================================================\n\n  /// @dev used for rescuing exchange fees paid to the contract in tokens\n  function rescueTokens(\n    address destination,\n    address currency,\n    uint256 amount\n  ) external onlyOwner {\n    IERC20(currency).safeTransfer(destination, amount);\n  }\n\n  /// @dev used for rescuing exchange fees paid to the contract in ETH\n  function rescueETH(address destination) external payable onlyOwner {\n    (bool sent, ) = destination.call{value: msg.value}('');\n    require(sent, 'failed');\n  }\n\n  /// @dev adds a new transaction currency to the exchange\n  function addCurrency(address _currency) external onlyOwner {\n    _currencies.add(_currency);\n  }\n\n  /// @dev adds a new complication to the exchange\n  function addComplication(address _complication) external onlyOwner {\n    _complications.add(_complication);\n  }\n\n  /// @dev removes a transaction currency from the exchange\n  function removeCurrency(address _currency) external onlyOwner {\n    _currencies.remove(_currency);\n  }\n\n  /// @dev removes a complication from the exchange\n  function removeComplication(address _complication) external onlyOwner {\n    _complications.remove(_complication);\n  }\n\n  /// @dev updates auto snipe executor\n  function updateMatchExecutor(address _matchExecutor) external onlyOwner {\n    MATCH_EXECUTOR = _matchExecutor;\n  }\n\n  /// @dev updates the gas units required for WETH transfers\n  function updateWethTranferGas(uint32 _wethTransferGasUnits) external onlyOwner {\n    WETH_TRANSFER_GAS_UNITS = _wethTransferGasUnits;\n    emit NewWethTransferGasUnits(_wethTransferGasUnits);\n  }\n\n  /// @dev updates exchange fees\n  function setProtocolFee(uint16 _protocolFeeBps) external onlyOwner {\n    PROTOCOL_FEE_BPS = _protocolFeeBps;\n    emit NewProtocolFee(_protocolFeeBps);\n  }\n}\n\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.14;\n\nimport {Ownable} from '@openzeppelin/contracts/access/Ownable.sol';\n\nimport {OrderTypes} from '../libs/OrderTypes.sol';\nimport {IComplication} from '../interfaces/IComplication.sol';\n\n/**\n * @title InfinityOrderBookComplication\n * @author nneverlander. Twitter @nneverlander\n * @notice Complication to execute orderbook orders\n */\ncontract InfinityOrderBookComplication is IComplication, Ownable {\n  // ======================================================= EXTERNAL FUNCTIONS ==================================================\n\n  /**\n   * @notice Checks whether one to one matches can be executed\n   * @dev This function is called by the main exchange to check whether one to one matches can be executed.\n          It checks whether orders have the right constraints - i.e they have one NFT only, whether time is still valid,\n          prices are valid and whether the nfts intersect\n   * @param makerOrder1 first makerOrder\n   * @param makerOrder2 second makerOrder\n   * @return returns whether the order can be executed and the execution price\n   */\n  function canExecMatchOneToOne(OrderTypes.MakerOrder calldata makerOrder1, OrderTypes.MakerOrder calldata makerOrder2)\n    external\n    view\n    override\n    returns (bool, uint256)\n  {\n    bool numItemsValid = makerOrder2.constraints[0] == makerOrder1.constraints[0] &&\n      makerOrder2.constraints[0] == 1 &&\n      makerOrder2.nfts.length == 1 &&\n      makerOrder2.nfts[0].tokens.length == 1 &&\n      makerOrder1.nfts.length == 1 &&\n      makerOrder1.nfts[0].tokens.length == 1;\n    bool _isTimeValid = makerOrder2.constraints[3] <= block.timestamp &&\n      makerOrder2.constraints[4] >= block.timestamp &&\n      makerOrder1.constraints[3] <= block.timestamp &&\n      makerOrder1.constraints[4] >= block.timestamp;\n    bool _isPriceValid = false;\n    uint256 makerOrder1Price = _getCurrentPrice(makerOrder1);\n    uint256 makerOrder2Price = _getCurrentPrice(makerOrder2);\n    uint256 execPrice;\n    if (makerOrder1.isSellOrder) {\n      _isPriceValid = makerOrder2Price >= makerOrder1Price;\n      execPrice = makerOrder1Price;\n    } else {\n      _isPriceValid = makerOrder1Price >= makerOrder2Price;\n      execPrice = makerOrder2Price;\n    }\n    return (\n      numItemsValid && _isTimeValid && doItemsIntersect(makerOrder1.nfts, makerOrder2.nfts) && _isPriceValid,\n      execPrice\n    );\n  }\n\n  /**\n   * @notice Checks whether one to matches matches can be executed\n   * @dev This function is called by the main exchange to check whether one to many matches can be executed.\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid,\n          prices are valid and whether the nfts intersect\n   * @param makerOrder the one makerOrder\n   * @param manyMakerOrders many maker orders\n   * @return returns whether the order can be executed\n   */\n  function canExecMatchOneToMany(\n    OrderTypes.MakerOrder calldata makerOrder,\n    OrderTypes.MakerOrder[] calldata manyMakerOrders\n  ) external view override returns (bool) {\n    uint256 numItems;\n    bool isOrdersTimeValid = true;\n    bool itemsIntersect = true;\n    uint256 ordersLength = manyMakerOrders.length;\n    for (uint256 i = 0; i < ordersLength; ) {\n      if (!isOrdersTimeValid || !itemsIntersect) {\n        return false; // short circuit\n      }\n\n      uint256 nftsLength = manyMakerOrders[i].nfts.length;\n      for (uint256 j = 0; j < nftsLength; ) {\n        numItems += manyMakerOrders[i].nfts[j].tokens.length;\n        unchecked {\n          ++j;\n        }\n      }\n\n      isOrdersTimeValid =\n        isOrdersTimeValid &&\n        manyMakerOrders[i].constraints[3] <= block.timestamp &&\n        manyMakerOrders[i].constraints[4] >= block.timestamp;\n\n      itemsIntersect = itemsIntersect && doItemsIntersect(makerOrder.nfts, manyMakerOrders[i].nfts);\n\n      unchecked {\n        ++i;\n      }\n    }\n\n    bool _isTimeValid = isOrdersTimeValid &&\n      makerOrder.constraints[3] <= block.timestamp &&\n      makerOrder.constraints[4] >= block.timestamp;\n\n    uint256 currentMakerOrderPrice = _getCurrentPrice(makerOrder);\n    uint256 sumCurrentOrderPrices = _sumCurrentPrices(manyMakerOrders);\n\n    bool _isPriceValid = false;\n    if (makerOrder.isSellOrder) {\n      _isPriceValid = sumCurrentOrderPrices >= currentMakerOrderPrice;\n    } else {\n      _isPriceValid = sumCurrentOrderPrices <= currentMakerOrderPrice;\n    }\n\n    return (numItems == makerOrder.constraints[0]) && _isTimeValid && itemsIntersect && _isPriceValid;\n  }\n\n  /**\n   * @notice Checks whether match orders with a higher order intent can be executed\n   * @dev This function is called by the main exchange to check whether one to one matches can be executed.\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid,\n          prices are valid and whether the nfts intersect\n   * @param sell sell order\n   * @param buy buy order\n   * @param constructedNfts - nfts constructed by the off chain matching engine\n   * @return returns whether the order can be executed and the execution price\n   */\n  function canExecMatchOrder(\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts\n  ) external view override returns (bool, uint256) {\n    (bool _isPriceValid, uint256 execPrice) = isPriceValid(sell, buy);\n    return (\n      isTimeValid(sell, buy) &&\n        _isPriceValid &&\n        areNumItemsValid(sell, buy, constructedNfts) &&\n        doItemsIntersect(sell.nfts, constructedNfts) &&\n        doItemsIntersect(buy.nfts, constructedNfts) &&\n        doItemsIntersect(sell.nfts, buy.nfts),\n      execPrice\n    );\n  }\n\n  /**\n   * @notice Checks whether take orders with a higher order intent can be executed\n   * @dev This function is called by the main exchange to check whether take orders with a higher order intent can be executed.\n          It checks whether orders have the right constraints - i.e they have the right number of items, whether time is still valid\n          and whether the nfts intersect\n   * @param makerOrder the maker order\n   * @param takerItems the taker items specified by the taker\n   * @return returns whether order can be executed\n   */\n  function canExecTakeOrder(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.OrderItem[] calldata takerItems)\n    external\n    view\n    override\n    returns (bool)\n  {\n    return (makerOrder.constraints[3] <= block.timestamp &&\n      makerOrder.constraints[4] >= block.timestamp &&\n      areTakerNumItemsValid(makerOrder, takerItems) &&\n      doItemsIntersect(makerOrder.nfts, takerItems));\n  }\n\n  // ======================================================= PUBLIC FUNCTIONS ==================================================\n\n  /// @dev checks whether the orders are active and not expired\n  function isTimeValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\n    public\n    view\n    returns (bool)\n  {\n    return\n      sell.constraints[3] <= block.timestamp &&\n      sell.constraints[4] >= block.timestamp &&\n      buy.constraints[3] <= block.timestamp &&\n      buy.constraints[4] >= block.timestamp;\n  }\n\n  /// @dev checks whether the price is valid; a buy order should always have a higher price than a sell order\n  function isPriceValid(OrderTypes.MakerOrder calldata sell, OrderTypes.MakerOrder calldata buy)\n    public\n    view\n    returns (bool, uint256)\n  {\n    (uint256 currentSellPrice, uint256 currentBuyPrice) = (_getCurrentPrice(sell), _getCurrentPrice(buy));\n    return (currentBuyPrice >= currentSellPrice, currentSellPrice);\n  }\n\n  /// @dev sanity check to make sure the constructed nfts conform to the user signed constraints\n  function areNumItemsValid(\n    OrderTypes.MakerOrder calldata sell,\n    OrderTypes.MakerOrder calldata buy,\n    OrderTypes.OrderItem[] calldata constructedNfts\n  ) public pure returns (bool) {\n    uint256 numConstructedItems = 0;\n    uint256 nftsLength = constructedNfts.length;\n    for (uint256 i = 0; i < nftsLength; ) {\n      unchecked {\n        numConstructedItems += constructedNfts[i].tokens.length;\n        ++i;\n      }\n    }\n    return numConstructedItems >= buy.constraints[0] && buy.constraints[0] <= sell.constraints[0];\n  }\n\n  /// @dev sanity check to make sure that a taker is specifying the right number of items\n  function areTakerNumItemsValid(OrderTypes.MakerOrder calldata makerOrder, OrderTypes.OrderItem[] calldata takerItems)\n    public\n    pure\n    returns (bool)\n  {\n    uint256 numTakerItems = 0;\n    uint256 nftsLength = takerItems.length;\n    for (uint256 i = 0; i < nftsLength; ) {\n      unchecked {\n        numTakerItems += takerItems[i].tokens.length;\n        ++i;\n      }\n    }\n    return makerOrder.constraints[0] == numTakerItems;\n  }\n\n  /**\n   * @notice Checks whether nfts intersect\n   * @dev This function checks whether there are intersecting nfts between two orders\n   * @param order1Nfts nfts in the first order\n   * @param order2Nfts nfts in the second order\n   * @return returns whether items intersect\n   */\n  function doItemsIntersect(OrderTypes.OrderItem[] calldata order1Nfts, OrderTypes.OrderItem[] calldata order2Nfts)\n    public\n    pure\n    returns (bool)\n  {\n    uint256 order1NftsLength = order1Nfts.length;\n    uint256 order2NftsLength = order2Nfts.length;\n    // case where maker/taker didn't specify any items\n    if (order1NftsLength == 0 || order2NftsLength == 0) {\n      return true;\n    }\n\n    uint256 numCollsMatched = 0;\n    // check if taker has all items in maker\n    for (uint256 i = 0; i < order2NftsLength; ) {\n      for (uint256 j = 0; j < order1NftsLength; ) {\n        if (order1Nfts[j].collection == order2Nfts[i].collection) {\n          // increment numCollsMatched\n          unchecked {\n            ++numCollsMatched;\n          }\n          // check if tokenIds intersect\n          bool tokenIdsIntersect = doTokenIdsIntersect(order1Nfts[j], order2Nfts[i]);\n          require(tokenIdsIntersect, 'tokenIds dont intersect');\n          // short circuit\n          break;\n        }\n        unchecked {\n          ++j;\n        }\n      }\n      unchecked {\n        ++i;\n      }\n    }\n\n    return numCollsMatched == order2NftsLength;\n  }\n\n  /**\n   * @notice Checks whether tokenIds intersect\n   * @dev This function checks whether there are intersecting tokenIds between two order items\n   * @param item1 first item\n   * @param item2 second item\n   * @return returns whether tokenIds intersect\n   */\n  function doTokenIdsIntersect(OrderTypes.OrderItem calldata item1, OrderTypes.OrderItem calldata item2)\n    public\n    pure\n    returns (bool)\n  {\n    uint256 item1TokensLength = item1.tokens.length;\n    uint256 item2TokensLength = item2.tokens.length;\n    // case where maker/taker didn't specify any tokenIds for this collection\n    if (item1TokensLength == 0 || item2TokensLength == 0) {\n      return true;\n    }\n    uint256 numTokenIdsPerCollMatched = 0;\n    for (uint256 k = 0; k < item2TokensLength; ) {\n      for (uint256 l = 0; l < item1TokensLength; ) {\n        if (\n          item1.tokens[l].tokenId == item2.tokens[k].tokenId && item1.tokens[l].numTokens == item2.tokens[k].numTokens\n        ) {\n          // increment numTokenIdsPerCollMatched\n          unchecked {\n            ++numTokenIdsPerCollMatched;\n          }\n          // short circuit\n          break;\n        }\n        unchecked {\n          ++l;\n        }\n      }\n      unchecked {\n        ++k;\n      }\n    }\n\n    return numTokenIdsPerCollMatched == item2TokensLength;\n  }\n\n  // ======================================================= UTILS ============================================================\n\n  /// @dev returns the sum of current order prices; used in match one to many orders\n  function _sumCurrentPrices(OrderTypes.MakerOrder[] calldata orders) internal view returns (uint256) {\n    uint256 sum = 0;\n    uint256 ordersLength = orders.length;\n    for (uint256 i = 0; i < ordersLength; ) {\n      sum += _getCurrentPrice(orders[i]);\n      unchecked {\n        ++i;\n      }\n    }\n    return sum;\n  }\n\n  /// @dev Gets current order price for orders that vary in price over time (dutch and reverse dutch auctions)\n  function _getCurrentPrice(OrderTypes.MakerOrder calldata order) internal view returns (uint256) {\n    (uint256 startPrice, uint256 endPrice) = (order.constraints[1], order.constraints[2]);\n    uint256 duration = order.constraints[4] - order.constraints[3];\n    uint256 priceDiff = startPrice > endPrice ? startPrice - endPrice : endPrice - startPrice;\n    if (priceDiff == 0 || duration == 0) {\n      return startPrice;\n    }\n    uint256 elapsedTime = block.timestamp - order.constraints[3];\n    uint256 PRECISION = 10**4; // precision for division; similar to bps\n    uint256 portionBps = elapsedTime > duration ? PRECISION : ((elapsedTime * PRECISION) / duration);\n    priceDiff = (priceDiff * portionBps) / PRECISION;\n    return startPrice > endPrice ? startPrice - priceDiff : startPrice + priceDiff;\n  }\n}\n\n\n",
        "CodeNames": [
            "InfinityExchange.sol",
            "InfinityOrderBookComplication.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "matchOneToManyOrders(), takeOrders(), and matchOrders() functions in InfinityOrderBookComplication.sol and InfinityExchange.sol contracts",
                "Type": "Loss of funds",
                "Description": "The code doesn't check that different ids in one collection are different, so it's possible to sell one id multiple times instead of selling multiple id one time in one collection of order, leading to loss of funds for ERC1155 tokens.",
                "Repair": "Add checks to ensure that an order's one collection's token ids are not duplicates in doTokenIdsIntersect() function"
            },
            {
                "Location": "matchOneToManyOrders() function in InfinityOrderBookComplication.sol and _execMatchOneMakerSellToManyMakerBuys() function in InfinityExchange.sol",
                "Type": "Missing input validation",
                "Description": "A maker buy order with no specified NFT tokenIds may get fulfilled in matchOneToManyOrders without receiving any NFT, allowing a buyer to pay full price and receive nothing in return.",
                "Repair": "Add input validation to ensure that buy orders with empty tokenIds cannot be matched with sell orders unless there are no other buy orders with specified tokenIds that match the sell order's tokenIds"
            }
        ]
    }
]