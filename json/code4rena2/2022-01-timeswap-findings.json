[
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\n\nlibrary NFTSVG {\n\n    struct SVGParams {\n        string tokenId;\n        string svgTitle;\n        string assetInfo;\n        string collateralInfo;\n        string debtRequired;\n        string collateralLocked;\n        string maturityDate;\n        string maturityTimestampString;\n        string tokenColors;\n        bool isMatured;\n    }\n\n    function constructSVG(SVGParams memory params) public pure returns (string memory) {\n\n\n        string memory colorScheme = params.isMatured ? \".G{stop-color:#3C3C3C}.H{fill:#959595}.I{stop-color:#000000}.J{stop-color:#FFFFFF}\" : \".G{stop-color:#20087E}.H{fill:#5457D7}.I{stop-color:#61F6FF}.J{stop-color:#3C43FF}\";\n\n        string memory svg = string(abi.encodePacked('<svg width=\"290\" height=\"500\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\"><style type=\"text/css\" ><![CDATA[.B{fill-rule:evenodd}', params.tokenColors, colorScheme, ']]></style><g clip-path=\"url(#mainclip)\"><rect width=\"290\" height=\"500\" fill=\"url(\\'#background\\')\"/><rect y=\"409\" width=\"290\" height=\"90\" fill=\"#141330\" fill-opacity=\"0.4\"/><rect y=\"408\" width=\"290\" height=\"2\" fill=\"url(#divider)\"/></g><text y=\"70px\" x=\"145\" fill=\"white\" font-family=\"arial\" font-weight=\"500\" font-size=\"24px\" text-anchor=\"middle\">'));\n\n        svg = string(abi.encodePacked(svg, params.svgTitle, '</text><text y=\"95px\" x=\"145\" fill=\"white\" font-family=\"arial\" font-weight=\"400\" font-size=\"12px\" text-anchor=\"middle\">', params.maturityDate, '</text>'));\n\n        \n        if (!params.isMatured) {\n            string memory maturityInfo = string(abi.encodePacked('MATURITY: ', params.maturityTimestampString));\n            svg = string(abi.encodePacked(svg, '<text y=\"115px\" x=\"145\" fill=\"white\" font-family=\"arial\" font-weight=\"300\" font-size=\"10px\" text-anchor=\"middle\" opacity=\"50%\">', maturityInfo, '</text>'));\n        } else {\n            svg = string(abi.encodePacked(svg, '<rect width=\"74\" height=\"22\" rx=\"13\" y=\"110\" x=\"107\" text-anchor=\"middle\" fill=\"#FFFFFF\" /><text y=\"125px\" x=\"145\" fill=\"black\" font-family=\"arial\" font-weight=\"600\" font-size=\"10px\" letter-spacing=\"1\" text-anchor=\"middle\">MATURED</text>'));\n        }\n\n        svg = string(abi.encodePacked(svg, '<text text-rendering=\"optimizeSpeed\"><textPath startOffset=\"-100%\" fill=\"white\" font-family=\"\\'Courier New\\', monospace\" font-size=\"10px\" xlink:href=\"#text-path-a\">', params.assetInfo, '<animate additive=\"sum\" attributeName=\"startOffset\" from=\"0%\" to=\"100%\" begin=\"0s\" dur=\"30s\" repeatCount=\"indefinite\" /></textPath><textPath startOffset=\"0%\" fill=\"white\" font-family=\"\\'Courier New\\', monospace\" font-size=\"10px\" xlink:href=\"#text-path-a\">', params.assetInfo, '<animate additive=\"sum\" attributeName=\"startOffset\" from=\"0%\" to=\"100%\" begin=\"0s\" dur=\"30s\" repeatCount=\"indefinite\" /></textPath><textPath startOffset=\"50%\" fill=\"white\" font-family=\"\\'Courier New\\', monospace\" font-size=\"10px\" xlink:href=\"#text-path-a\">'));\n        svg = string(abi.encodePacked(svg, params.collateralInfo, '<animate additive=\"sum\" attributeName=\"startOffset\" from=\"0%\" to=\"100%\" begin=\"0s\" dur=\"30s\" repeatCount=\"indefinite\" /></textPath><textPath startOffset=\"-50%\" fill=\"white\" font-family=\"\\'Courier New\\', monospace\" font-size=\"10px\" xlink:href=\"#text-path-a\">', params.collateralInfo, '<animate additive=\"sum\" attributeName=\"startOffset\" from=\"0%\" to=\"100%\" begin=\"0s\" dur=\"30s\" repeatCount=\"indefinite\" /></textPath></text><text y=\"435px\" x=\"12\" fill=\"white\" font-family=\"arial\" font-weight=\"400\" font-size=\"13px\" opacity=\"60%\">ID:</text><text y=\"435px\" x=\"278\" fill=\"white\" font-family=\"arial\" font-weight=\"500\" font-size=\"13px\" text-anchor=\"end\">'));\n        svg = string(abi.encodePacked(svg, params.tokenId, '</text><text y=\"460px\" x=\"12\" fill=\"white\" font-family=\"arial\" font-weight=\"400\" font-size=\"13px\" opacity=\"60%\">Debt required:</text><text y=\"460px\" x=\"278\" fill=\"white\" font-family=\"arial\" font-weight=\"500\" font-size=\"13px\" text-anchor=\"end\">', params.debtRequired, '</text><text y=\"484px\" x=\"12\" fill=\"white\" font-family=\"arial\" font-weight=\"400\" font-size=\"13px\" opacity=\"60%\">Collateral locked:</text><text y=\"484px\" x=\"278\" fill=\"white\" font-family=\"arial\" font-weight=\"500\" font-size=\"13px\" text-anchor=\"end\">', params.collateralLocked, '</text><g filter=\"url(#filter0_f)\"><path d=\"M253 319.5C253 346.838 204.871 369 145.5 369C86.1294 369 38 346.838 38 319.5C38 292.162 86.1294 270 145.5 270C204.871 270 253 292.162 253 319.5Z\" class=\"H\"/></g>'));\n        svg = string(abi.encodePacked(svg, '<path d=\"M144.235 272.663h4.147v11.255h-4.147zm62.092 19.456l2.074 2.089-16.76 5.627-2.074-2.089zm-26.564-14.565l3.591 1.206-9.676 9.747-3.591-1.206zm37.046 34.903v2.412h-19.353v-2.412zm-33.454 36.11l-3.591 1.206-9.676-9.747 3.591-1.206zm25.046-15.448l-2.074 2.089-16.76-5.627 2.074-2.089zm-64.165 10.289h4.147v11.255h-4.147zm-43.258-15.916l2.074 2.089-16.76 5.627-2.074-2.089zm17.962 11.328l3.591 1.206-9.676 9.747-3.591-1.206zm-25.778-26.157v2.412H73.809v-2.412zm28.915-26.253l-3.591 1.206-9.676-9.747 3.591-1.206zm-20.434 10.881l-2.074 2.089-16.76-5.627 2.074-2.089z\" fill=\"#6fa4d4\"/><path d=\"M198.383 344.249C211.892 336.376 220 325.646 220 314s-8.108-22.376-21.617-30.249C184.898 275.893 166.204 271 145.5 271s-39.398 4.893-52.883 12.751C79.108 291.624 71 302.354 71 314s8.108 22.376 21.617 30.249C106.102 352.107 124.796 357 145.5 357s39.398-4.893 52.883-12.751zM145.5 358c41.698 0 75.5-19.699 75.5-44s-33.802-44-75.5-44S70 289.699 70 314s33.803 44 75.5 44zm56.402-10.206C216.307 339.026 225 327.049 225 314s-8.693-25.026-23.098-33.794C187.516 271.449 167.577 266 145.5 266s-42.016 5.449-56.402 14.206C74.694 288.974 66 300.951 66 314s8.694 25.026 23.098 33.794C103.484 356.551 123.423 362 145.5 362s42.016-5.449 56.402-14.206zM145.5 363c44.459 0 80.5-21.938 80.5-49s-36.041-49-80.5-49S65 286.938 65 314s36.041 49 80.5 49z\" fill-rule=\"evenodd\" fill=\"#6fa4d5\"/><path d=\"M189.764 303.604c0 14.364-19.951 26.008-44.562 26.008-24.343 0-44.127-11.392-44.555-25.54v6.92.363c0 14.38 19.951 26.022 44.562 26.022s44.562-11.642 44.562-26.022v-.363-7.574h-.008l.001.186z\" fill=\"#7fc2e2\"/><path d=\"M145.202 326.408c21.834 0 39.533-10.256 39.533-22.906s-17.699-22.906-39.533-22.906-39.533 10.255-39.533 22.906 17.7 22.906 39.533 22.906z\" fill=\"#020136\"/><path d=\"M189.764 303.604c0 14.364-19.951 26.008-44.562 26.008s-44.562-11.644-44.562-26.008 19.951-26.008 44.562-26.008 44.562 11.644 44.562 26.008zm-5.029-.102c0 12.65-17.699 22.906-39.533 22.906s-39.533-10.255-39.533-22.906 17.699-22.906 39.533-22.906 39.533 10.256 39.533 22.906z\" fill=\"#4f95b8\" class=\"B\"/><path d=\"M184.753 303.84v-5.406c0-18.859-10.806-36.185-28.114-45.047l-3.987-2.053a2.31 2.31 0 0 1-.975-.848 2.46 2.46 0 0 1-.39-1.259 2.47 2.47 0 0 1 .316-1.282c.216-.384.536-.699.924-.908l6.693-3.887c15.85-9.252 25.533-25.798 25.533-43.637V184h-78.996v15.095c0 18.065 9.925 34.782 26.098 43.959l6.772 3.846a2.34 2.34 0 0 1 .937.911c.223.39.334.839.321 1.293s-.15.894-.395 1.27-.588.671-.988.851l-4.105 2.053c-17.598 8.772-28.64 26.249-28.64 45.32v4.948c-.624 6.062 3.212 12.255 11.581 16.901 15.515 8.616 40.595 8.664 56.011.096 8.238-4.584 12.008-10.688 11.404-16.703h0z\" fill=\"#fff\" fill-opacity=\".3\"/><path d=\"M154.382 238.266c3.037-5.261 3.007-10.965-.062-12.737l2.734 1.579c3.069 1.772 3.098 7.476.061 12.737s-7.992 8.088-11.061 6.316l-2.734-1.579c3.069 1.772 8.025-1.055 11.062-6.315v-.001z\" class=\"D\"/><path d=\"M154.382 238.266c3.037-5.261 3.007-10.965-.062-12.737s-8.024 1.055-11.061 6.316-3.008 10.965.061 12.737 8.025-1.055 11.062-6.315v-.001zm-1.402-.809c2.27-3.932 2.252-8.2-.045-9.526s-6.004.792-8.274 4.724-2.247 8.192.051 9.519 5.998-.784 8.268-4.716v-.001z\" class=\"B C\"/><path d=\"M152.935 227.929c2.297 1.326 2.315 5.595.045 9.526s-5.971 6.042-8.268 4.716-2.321-5.587-.051-9.519 5.975-6.051 8.273-4.724l.001.001z\" class=\"D\"/><path d=\"M148.854 232.173l1.827-2.157c.303-.364.664-.269.607.154l-.349 2.545c-.021.163.023.302.121.349l1.488.806c.241.139.107.695-.237.951l-2.028 1.534a.91.91 0 0 0-.316.438l-.91 2.656c-.155.449-.597.692-.75.437l-.938-1.578c-.031-.052-.08-.09-.139-.107s-.121-.01-.174.019l-2.043.841c-.35.139-.475-.274-.238-.686l1.458-2.525a.81.81 0 0 0 .118-.492l-.345-2.136a.8.8 0 0 1 .142-.539.81.81 0 0 1 .457-.318l1.85.033a.56.56 0 0 0 .223-.071.57.57 0 0 0 .176-.155v.001z\" class=\"C\"/><path d=\"M166.548 230.55c4.318-4.272 5.796-9.782 3.303-12.302l2.221 2.245c2.492 2.519 1.014 8.029-3.304 12.301s-9.844 5.691-12.336 3.171l-2.221-2.245c2.492 2.52 8.018 1.102 12.337-3.17z\" class=\"D\"/><path d=\"M166.548 230.549c4.318-4.272 5.796-9.782 3.303-12.302s-8.017-1.101-12.336 3.171-5.797 9.782-3.304 12.301 8.018 1.102 12.337-3.17zm-1.139-1.151c3.228-3.193 4.338-7.314 2.472-9.2s-6-.821-9.227 2.371-4.33 7.308-2.464 9.194 5.993.827 9.22-2.366l-.001.001z\" class=\"B C\"/><path d=\"M167.881 220.199c1.866 1.886.755 6.008-2.472 9.2s-7.354 4.252-9.22 2.366-.763-6.002 2.464-9.194 7.36-4.258 9.227-2.371l.001-.001z\" class=\"D\"/><path d=\"M162.824 223.215l2.332-1.599c.388-.271.711-.084.545.308l-1.008 2.363c-.064.152-.057.298.024.369l1.222 1.17c.196.198-.08.699-.48.854l-2.361.944c-.172.067-.318.186-.421.339l-1.579 2.321c-.268.392-.758.51-.839.224l-.488-1.77c-.015-.059-.052-.109-.104-.141s-.115-.04-.174-.026l-2.193.271c-.375.042-.386-.39-.048-.725l2.072-2.05a.81.81 0 0 0 .244-.443l.231-2.151a.81.81 0 0 1 .28-.483c.148-.123.333-.188.524-.186l1.776.52c.078.013.158.01.234-.009a.56.56 0 0 0 .211-.103v.003z\" class=\"C\"/><path d=\"M131.352 236.907c4.692 3.858 10.325 4.762 12.576 2.024l-2.005 2.439c-2.251 2.738-7.883 1.832-12.575-2.025s-6.67-9.208-4.419-11.946l2.005-2.439c-2.251 2.738-.274 8.089 4.419 11.947h-.001z\" class=\"D\"/><path d=\"M131.352 236.907c4.692 3.858 10.325 4.762 12.576 2.024s.273-8.088-4.419-11.946-10.324-4.763-12.575-2.025-.274 8.089 4.419 11.947h-.001zm1.028-1.251c3.507 2.883 7.721 3.564 9.405 1.515s.202-6.052-3.305-8.935-7.714-3.558-9.399-1.508-.208 6.046 3.299 8.929v-.001z\" class=\"B C\"/><path d=\"M141.785 237.172c-1.685 2.049-5.898 1.368-9.405-1.515s-4.983-6.879-3.299-8.929 5.892-1.374 9.399 1.509 4.991 6.885 3.305 8.935z\" class=\"D\"/><path d=\"M138.267 232.451l1.829 2.156c.309.359.156.699-.251.574l-2.454-.76c-.157-.048-.302-.026-.364.062l-1.039 1.335c-.177.215-.703-.008-.899-.39l-1.181-2.252c-.084-.164-.217-.298-.381-.384l-2.471-1.333c-.417-.227-.585-.702-.309-.812l1.71-.667c.057-.021.103-.064.128-.12s.03-.117.009-.174l-.495-2.153c-.08-.368.349-.424.716-.122l2.252 1.851a.81.81 0 0 0 .466.197l2.164.009a.81.81 0 0 1 .509.228c.138.134.221.312.239.503l-.336 1.82a.59.59 0 0 0 .033.232c.026.074.069.142.124.2h.001z\" class=\"C\"/><path d=\"M119.071 225.508c3.876 4.677 9.235 6.633 11.964 4.372l-2.431 2.015c-2.729 2.261-8.087.305-11.963-4.373s-4.803-10.306-2.074-12.567l2.431-2.015c-2.729 2.261-1.802 7.89 2.073 12.568z\" class=\"D\"/><path d=\"M119.071 225.508c3.876 4.677 9.235 6.633 11.964 4.372s1.802-7.89-2.074-12.567-9.234-6.634-11.963-4.373-1.802 7.89 2.073 12.568zm1.247-1.033c2.897 3.496 6.905 4.964 8.947 3.271s1.346-5.904-1.551-9.4-6.9-4.956-8.942-3.263-1.351 5.896 1.546 9.392h0z\" class=\"B C\"/><path d=\"M129.265 227.745c-2.043 1.693-6.051.225-8.947-3.271s-3.589-7.699-1.546-9.392 6.045-.233 8.942 3.263 3.595 7.707 1.551 9.4h0z\" class=\"D\"/><path d=\"M126.705 222.444l1.387 2.463c.235.411.021.716-.355.516l-2.265-1.212c-.145-.077-.292-.083-.369-.008l-1.273 1.114c-.214.177-.689-.141-.809-.553l-.733-2.435a.9.9 0 0 0-.301-.449l-2.173-1.777c-.367-.302-.441-.8-.149-.856l1.806-.331c.06-.01.114-.043.15-.092s.05-.111.041-.171l-.078-2.208c-.009-.377.423-.35.726.016l1.86 2.245a.81.81 0 0 0 .42.282l2.123.419c.186.049.347.163.456.32s.158.349.139.539l-.674 1.723c-.02.077-.023.156-.012.234s.041.152.084.219l-.001.002z\" class=\"C\"/><path d=\"M140.196 225.21c5.607 2.338 11.261 1.576 12.624-1.695l-1.215 2.914c-1.364 3.271-7.017 4.031-12.624 1.694s-9.046-6.888-7.682-10.16l1.215-2.914c-1.364 3.271 2.075 7.823 7.682 10.161h0z\" class=\"D\"/><path d=\"M140.196 225.211c5.607 2.337 11.261 1.576 12.624-1.695s-2.075-7.822-7.682-10.16-11.26-1.577-12.624 1.694 2.075 7.823 7.682 10.161h0zm.623-1.494c4.19 1.747 8.421 1.182 9.442-1.266s-1.555-5.853-5.746-7.599-8.413-1.178-9.434 1.271 1.547 5.848 5.737 7.595l.001-.001z\" class=\"B C\"/><path d=\"M150.261 222.449c-1.021 2.449-5.252 3.013-9.442 1.266s-6.758-5.146-5.737-7.595 5.243-3.018 9.434-1.271 6.767 5.15 5.746 7.6h-.001z\" class=\"D\"/><path d=\"M145.528 218.948l2.374 1.535c.4.254.352.624-.074.622l-2.569-.019c-.165 0-.297.062-.331.164l-.609 1.579c-.107.257-.675.196-.973-.114l-1.781-1.815a.9.9 0 0 0-.475-.257l-2.751-.562c-.465-.097-.763-.503-.53-.688l1.445-1.133c.048-.037.079-.091.088-.151s-.006-.121-.041-.17l-1.096-1.919c-.183-.329.211-.507.65-.324l2.691 1.122c.157.071.334.09.503.054l2.074-.616c.187-.043.383-.017.553.072a.81.81 0 0 1 .374.412l.205 1.839c.018.077.052.149.099.213a.57.57 0 0 0 .176.155h0l-.002.001z\" class=\"C\"/><path d=\"M147.623 266.948c3.037-5.26 3.007-10.965-.062-12.737l2.734 1.579c3.069 1.772 3.098 7.476.061 12.737s-7.992 8.087-11.061 6.315l-2.734-1.579c3.069 1.772 8.025-1.054 11.062-6.315h0z\" class=\"F\"/><path d=\"M147.623 266.948c3.037-5.26 3.007-10.965-.062-12.737s-8.024 1.055-11.061 6.315-3.008 10.965.061 12.737 8.025-1.054 11.062-6.315zm-1.402-.809c2.27-3.932 2.252-8.2-.045-9.526s-6.004.791-8.274 4.723-2.247 8.192.051 9.519 5.998-.785 8.268-4.716h0z\" class=\"B E\"/><path d=\"M146.176 256.612c2.297 1.327 2.315 5.595.045 9.527s-5.971 6.042-8.268 4.716-2.321-5.587-.051-9.519 5.975-6.051 8.273-4.724h.001z\" class=\"F\"/><path d=\"M142.095 260.856l1.827-2.157c.303-.364.664-.269.607.153l-.349 2.546c-.021.163.023.302.121.349l1.488.806c.241.139.107.695-.237.951l-2.028 1.534c-.148.11-.258.263-.316.438l-.91 2.656c-.155.449-.597.692-.75.437l-.938-1.578c-.031-.052-.08-.091-.139-.107a.23.23 0 0 0-.174.02l-2.043.84c-.35.14-.475-.274-.238-.686l1.458-2.525a.81.81 0 0 0 .118-.492l-.345-2.136c-.019-.191.032-.381.142-.539a.81.81 0 0 1 .457-.318l1.85.034c.078-.009.154-.033.223-.071s.129-.091.176-.155h0z\" class=\"E\"/><use xlink:href=\"#B\" class=\"F\"/><path d=\"M124 306.844c6.075 0 11-2.879 11-6.423S130.075 294 124 294s-11 2.877-11 6.421 4.926 6.423 11 6.423zm0-1.619c4.54 0 8.228-2.15 8.228-4.803s-3.688-4.803-8.228-4.803-8.218 2.151-8.218 4.803 3.678 4.803 8.218 4.803z\" class=\"B E\"/><use xlink:href=\"#C\" class=\"F\"/><use xlink:href=\"#D\" class=\"E\"/><use xlink:href=\"#B\" x=\"6\" y=\"9\" class=\"F\"/><path d=\"M130 315.844c6.075 0 11-2.879 11-6.423S136.075 303 130 303s-11 2.877-11 6.421 4.926 6.423 11 6.423zm0-1.619c4.54 0 8.228-2.15 8.228-4.803s-3.688-4.803-8.228-4.803-8.218 2.151-8.218 4.803 3.678 4.803 8.218 4.803z\" class=\"B E\"/><use xlink:href=\"#C\" x=\"6\" y=\"9\" class=\"F\"/><use xlink:href=\"#D\" x=\"6\" y=\"9\" class=\"E\"/><use xlink:href=\"#B\" x=\"29\" y=\"12\" class=\"F\"/><path d=\"M153 318.844c6.075 0 11-2.879 11-6.423S159.075 306 153 306s-11 2.877-11 6.421 4.926 6.423 11 6.423zm0-1.619c4.54 0 8.228-2.15 8.228-4.803s-3.688-4.803-8.228-4.803-8.218 2.151-8.218 4.803 3.678 4.803 8.218 4.803z\" class=\"B E\"/><use xlink:href=\"#C\" x=\"29\" y=\"12\" class=\"F\"/><use xlink:href=\"#D\" x=\"29\" y=\"12\" class=\"E\"/><use xlink:href=\"#E\" class=\"F\"/><path d=\"M165 304.844c6.074 0 11-2.879 11-6.423S171.074 292 165 292s-11 2.877-11 6.421 4.926 6.423 11 6.423zm0-1.619c4.54 0 8.227-2.15 8.227-4.803s-3.687-4.803-8.227-4.803-8.218 2.151-8.218 4.803 3.678 4.803 8.218 4.803z\" class=\"B E\"/><use xlink:href=\"#F\" class=\"F\"/><path d=\"M167.512 297.01l2.781.504c.467.081.565.44.171.603l-2.378.97c-.152.064-.251.172-.242.28l.045 1.691c0 .278-.548.44-.942.27l-2.342-.99c-.17-.073-.357-.092-.538-.054l-2.755.539c-.466.09-.898-.17-.754-.431l.898-1.601c.03-.053.038-.115.023-.174a.23.23 0 0 0-.104-.141l-1.75-1.349c-.295-.233 0-.549.476-.549h2.915c.173.005.343-.045.485-.143l1.678-1.367a.8.8 0 0 1 .537-.147.81.81 0 0 1 .504.237l.897 1.619c.046.064.105.118.172.158a.56.56 0 0 0 .223.075h0z\" class=\"E\"/><use xlink:href=\"#E\" x=\"-6\" y=\"7\" class=\"F\"/><path d=\"M159 311.844c6.074 0 11-2.879 11-6.423S165.074 299 159 299s-11 2.877-11 6.421 4.926 6.423 11 6.423zm0-1.619c4.54 0 8.227-2.15 8.227-4.803s-3.687-4.803-8.227-4.803-8.218 2.151-8.218 4.803 3.678 4.803 8.218 4.803z\" class=\"B E\"/><use xlink:href=\"#F\" x=\"-6\" y=\"7\" class=\"F\"/><path d=\"M161.512 304.01l2.781.504c.467.081.565.44.171.603l-2.378.97c-.152.064-.251.172-.242.28l.045 1.691c0 .278-.548.44-.942.27l-2.342-.99c-.17-.073-.357-.092-.538-.054l-2.755.539c-.466.09-.898-.17-.754-.431l.898-1.601c.03-.053.038-.115.023-.174s-.052-.11-.103-.141l-1.75-1.349c-.296-.233 0-.549.476-.549h2.915c.173.005.343-.045.485-.143l1.678-1.367a.8.8 0 0 1 .537-.147.81.81 0 0 1 .504.237l.897 1.619c.046.064.105.118.172.158a.56.56 0 0 0 .223.075h-.001z\" class=\"E\"/><path d=\"M189.764 174.008c0 14.364-19.951 26.008-44.562 26.008-24.343 0-44.127-11.392-44.555-25.54v6.928.356c0 14.38 19.951 26.022 44.562 26.022s44.562-11.641 44.562-26.022v-.356-7.581h-.008l.001.185z\" fill=\"#2f2be1\" class=\"B\"/><path d=\"M144.5 194c19.054 0 34.5-8.954 34.5-20s-15.446-20-34.5-20-34.5 8.954-34.5 20 15.446 20 34.5 20z\" fill=\"#232277\"/><path d=\"M189.764 174.008c0 14.364-19.951 26.008-44.562 26.008s-44.562-11.644-44.562-26.008S120.591 148 145.202 148s44.562 11.644 44.562 26.008zM179 174c0 11.046-15.446 20-34.5 20s-34.5-8.954-34.5-20 15.446-20 34.5-20 34.5 8.954 34.5 20z\" fill=\"#504df7\" class=\"B\"/><path d=\"M155.683 172.788l-12.188 3.486c-1.635.467-3.657-.207-3.774-1.258l-.864-7.836c-.103-.91.257-1.804 1.034-2.582l.602-.601c.55-.55 1.813-.725 2.816-.39l15.507 5.168c1.007.336 1.373 1.053.823 1.604l-.601.601c-.778.777-1.939 1.404-3.355 1.808z\" fill=\"#7b78ff\"/><path d=\"M133.955 172.081l12.187-3.485c1.635-.467 3.657.207 3.774 1.258l.865 7.835c.103.91-.258 1.805-1.036 2.583l-.601.601c-.55.55-1.813.725-2.817.39l-15.507-5.168c-1.006-.336-1.373-1.054-.823-1.604l.602-.601c.777-.777 1.939-1.404 3.356-1.809z\" fill=\"#9fd2eb\"/><path d=\"M149.915 169.853c-.116-1.051-2.138-1.725-3.773-1.258l-6.91 1.977.492 4.444c.117 1.051 2.139 1.725 3.774 1.258l6.91-1.977-.493-4.444z\" fill=\"#11429f\"/><defs><filter id=\"filter0_f\" x=\"-32\" y=\"200\" width=\"355\" height=\"239\" filterUnits=\"userSpaceOnUse\" color-interpolation-filters=\"sRGB\"><feFlood flood-opacity=\"0\" result=\"BackgroundImageFix\"/><feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\"/><feGaussianBlur stdDeviation=\"35\" result=\"effect1_foregroundBlur\"/></filter><linearGradient id=\"background\" x1=\"273.47\" y1=\"-13.2813\" x2=\"415.619\" y2=\"339.655\" gradientUnits=\"userSpaceOnUse\"><stop stop-color=\"#0B0B16\"/><stop offset=\"1\" class=\"G\"/></linearGradient><linearGradient id=\"divider\" x1=\"1.47345e-06\" y1=\"409\" x2=\"298.995\" y2=\"410.864\" gradientUnits=\"userSpaceOnUse\"><stop class=\"I\"/><stop offset=\"0.5\" class=\"J\"/><stop offset=\"1\" class=\"I\"/></linearGradient><clipPath id=\"mainclip\"><rect width=\"290\" height=\"500\" rx=\"20\" fill=\"white\"/></clipPath><path id=\"text-path-a\" d=\"M40 10 h228 a12,12 0 0 1 12 12 v364 a12,12 0 0 1 -12 12 h-246 a12 12 0 0 1 -12 -12 v-364 a12 12 0 0 1 12 -12 z\" /><path id=\"B\" d=\"M124 306.844c6.075 0 11-2.879 11-6.423v3.158c0 3.544-4.925 6.421-11 6.421s-11-2.877-11-6.421v-3.158c0 3.544 4.926 6.423 11 6.423z\"/><path id=\"C\" d=\"M132.227 300.422c0 2.653-3.688 4.803-8.228 4.803s-8.218-2.15-8.218-4.803 3.678-4.803 8.218-4.803 8.228 2.15 8.228 4.803z\"/><path id=\"D\" d=\"M126.512 299.01l2.782.504c.466.081.565.44.171.603l-2.379.97c-.152.064-.25.172-.242.28l.046 1.691c0 .278-.548.44-.942.27l-2.342-.99c-.169-.073-.357-.092-.538-.054l-2.755.539c-.466.09-.898-.17-.754-.431l.898-1.601c.03-.053.038-.115.023-.174s-.052-.11-.103-.141l-1.75-1.349c-.296-.233 0-.549.476-.549h2.915c.173.005.342-.045.485-.143l1.677-1.367a.8.8 0 0 1 .538-.147.81.81 0 0 1 .504.237l.897 1.619a.57.57 0 0 0 .395.233h-.002z\"/><path id=\"E\" d=\"M165 304.844c6.074 0 11-2.879 11-6.423v3.158c0 3.544-4.926 6.421-11 6.421s-11-2.877-11-6.421v-3.158c0 3.544 4.926 6.423 11 6.423z\"/><path id=\"F\" d=\"M173.227 298.422c0 2.653-3.687 4.803-8.227 4.803s-8.218-2.15-8.218-4.803 3.678-4.803 8.218-4.803 8.227 2.15 8.227 4.803z\"/></defs></svg>'));\n\n        return svg;        \n    }\n}\n\n",
        "CodeNames": [
            "NFTSVG.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NFTTokenURIScaffold#constructTokenURI function and NFTSVG.constructSVG function",
                "Type": "Cross-site scripting (XSS)",
                "Description": "If a malicious user is able to inject malicious Javascript into a SVG file, then any user who views the SVG on a website will be susceptible to XSS. This can lead stolen cookies, Denial of Service attacks, and more.",
                "Repair": "Sanitize any potential user-input that goes into generating the SVG file or remove all user-input data from the SVG file or not generate the SVG at all"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IPair} from './interfaces/IPair.sol';\nimport {IFactory} from './interfaces/IFactory.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {MintMath} from './libraries/MintMath.sol';\nimport {BurnMath} from './libraries/BurnMath.sol';\nimport {LendMath} from './libraries/LendMath.sol';\nimport {WithdrawMath} from './libraries/WithdrawMath.sol';\nimport {BorrowMath} from './libraries/BorrowMath.sol';\nimport {PayMath} from './libraries/PayMath.sol';\nimport {SafeTransfer} from './libraries/SafeTransfer.sol';\nimport {Array} from './libraries/Array.sol';\nimport {Callback} from './libraries/Callback.sol';\nimport {BlockNumber} from './libraries/BlockNumber.sol';\n\n/// @title Timeswap Pair\n/// @author Timeswap Labs\n/// @notice It is recommnded to use Timeswap Convenience to interact with this contract.\n/// @notice All error messages are coded and can be found in the documentation.\ncontract TimeswapPair is IPair {\n    using SafeTransfer for IERC20;\n    using Array for Due[];\n\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IPair\n    IFactory public immutable override factory;\n    /// @inheritdoc IPair\n    IERC20 public immutable override asset;\n    /// @inheritdoc IPair\n    IERC20 public immutable override collateral;\n    /// @inheritdoc IPair\n    uint16 public immutable override fee;\n    /// @inheritdoc IPair\n    uint16 public immutable override protocolFee;\n\n    /// @dev Stores the individual states of each Pool.\n    mapping(uint256 => Pool) private pools;\n\n    /// @dev Stores the access state for reentrancy guard.\n    uint256 private locked;\n\n    /* ===== VIEW =====*/\n\n    /// @inheritdoc IPair\n    function constantProduct(uint256 maturity)\n        external\n        view\n        override\n        returns (\n            uint112 x,\n            uint112 y,\n            uint112 z\n        )\n    {\n        State memory state = pools[maturity].state;\n        return (state.x, state.y, state.z);\n    }\n\n    /// @inheritdoc IPair\n    function totalReserves(uint256 maturity) external view override returns (Tokens memory) {\n        return pools[maturity].state.reserves;\n    }\n\n    /// @inheritdoc IPair\n    function totalLiquidity(uint256 maturity) external view override returns (uint256) {\n        return pools[maturity].state.totalLiquidity;\n    }\n\n    /// @inheritdoc IPair\n    function liquidityOf(uint256 maturity, address owner) external view override returns (uint256) {\n        return pools[maturity].liquidities[owner];\n    }\n\n    /// @inheritdoc IPair\n    function totalClaims(uint256 maturity) external view override returns (Claims memory) {\n        return pools[maturity].state.totalClaims;\n    }\n\n    /// @inheritdoc IPair\n    function claimsOf(uint256 maturity, address owner) external view override returns (Claims memory) {\n        return pools[maturity].claims[owner];\n    }\n\n    /// @inheritdoc IPair\n    function totalDebtCreated(uint256 maturity) external view override returns (uint120) {\n        return pools[maturity].state.totalDebtCreated;\n    }\n\n    /// @inheritdoc IPair\n    function dueOf(uint256 maturity, address owner, uint256 id) external view override returns (Due memory) {\n        return pools[maturity].dues[owner][id];\n    }\n\n    /* ===== INIT ===== */\n\n    /// @dev Initializes the Pair contract.\n    /// @dev Called by the Timeswap factory contract.\n    /// @param _asset The address of the ERC20 being lent and borrowed.\n    /// @param _collateral The address of the ERC20 as the collateral.\n    /// @param _fee The chosen fee rate.\n    /// @param _protocolFee The chosen protocol fee rate.\n    constructor(\n        IERC20 _asset,\n        IERC20 _collateral,\n        uint16 _fee,\n        uint16 _protocolFee\n    ) {\n        factory = IFactory(msg.sender);\n        asset = _asset;\n        collateral = _collateral;\n        fee = _fee;\n        protocolFee = _protocolFee;\n    }\n\n    /* ===== MODIFIER ===== */\n\n    /// @dev The modifier for reentrancy guard.\n    modifier lock() {\n        require(locked == 0, 'E211');\n        locked = 1;\n        _;\n        locked = 0;\n    }\n\n    /* ===== UPDATE ===== */\n\n    /// @inheritdoc IPair\n    function mint(\n        uint256 maturity,\n        address liquidityTo,\n        address dueTo,\n        uint112 xIncrease,\n        uint112 yIncrease,\n        uint112 zIncrease,\n        bytes calldata data\n    )\n        external\n        override\n        lock\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            Due memory dueOut\n        )\n    {\n        require(block.timestamp < maturity, 'E202');\n        require(maturity - block.timestamp < 0x100000000, 'E208');\n        require(liquidityTo != address(0) && dueTo != address(0), 'E201');\n        require(liquidityTo != address(this) && dueTo != address(this), 'E204');\n        require(xIncrease > 0 && yIncrease > 0 && zIncrease > 0, 'E205');\n        \n        Pool storage pool = pools[maturity];\n\n        if (pool.state.totalLiquidity == 0) {\n            uint256 liquidityTotal = MintMath.getLiquidityTotal(xIncrease);\n            liquidityOut = MintMath.getLiquidity(maturity, liquidityTotal, protocolFee);\n\n            pool.state.totalLiquidity += liquidityTotal;\n            pool.liquidities[factory.owner()] += liquidityTotal - liquidityOut;\n        } else {\n            uint256 liquidityTotal = MintMath.getLiquidityTotal(pool.state, xIncrease, yIncrease, zIncrease);\n            liquidityOut = MintMath.getLiquidity(maturity, liquidityTotal, protocolFee);\n\n            pool.state.totalLiquidity += liquidityTotal;\n            pool.liquidities[factory.owner()] += liquidityTotal - liquidityOut;\n        }\n        require(liquidityOut > 0, 'E212');\n        pool.liquidities[liquidityTo] += liquidityOut;\n\n        dueOut.debt = MintMath.getDebt(maturity, xIncrease, yIncrease);\n        dueOut.collateral = MintMath.getCollateral(maturity, zIncrease);\n        dueOut.startBlock = BlockNumber.get();\n\n        Callback.mint(asset, collateral, xIncrease, dueOut.collateral, data);\n\n        id = pool.dues[dueTo].insert(dueOut);\n\n        pool.state.reserves.asset += xIncrease;\n        pool.state.reserves.collateral += dueOut.collateral;\n        pool.state.totalDebtCreated += dueOut.debt;\n\n        pool.state.x += xIncrease;\n        pool.state.y += yIncrease;\n        pool.state.z += zIncrease;\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Mint(maturity, msg.sender, liquidityTo, dueTo, xIncrease, liquidityOut, id, dueOut);\n    }\n\n    /// @inheritdoc IPair\n    function burn(\n        uint256 maturity,\n        address assetTo,\n        address collateralTo,\n        uint256 liquidityIn\n    ) external override lock returns (Tokens memory tokensOut) {\n        require(block.timestamp >= maturity, 'E203');\n        require(assetTo != address(0) && collateralTo != address(0), 'E201');\n        require(assetTo != address(this) && collateralTo != address(this), 'E204');\n        require(liquidityIn > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n\n        tokensOut.asset = BurnMath.getAsset(pool.state, liquidityIn);\n        tokensOut.collateral = BurnMath.getCollateral(pool.state, liquidityIn);\n\n        pool.state.totalLiquidity -= liquidityIn;\n\n        pool.liquidities[msg.sender] -= liquidityIn;\n\n        pool.state.reserves.asset -= tokensOut.asset;\n        pool.state.reserves.collateral -= tokensOut.collateral;\n\n        if (tokensOut.asset > 0) asset.safeTransfer(assetTo, tokensOut.asset);\n        if (tokensOut.collateral > 0) collateral.safeTransfer(collateralTo, tokensOut.collateral);\n\n        emit Burn(maturity, msg.sender, assetTo, collateralTo, liquidityIn, tokensOut);\n    }\n\n    /// @inheritdoc IPair\n    function lend(\n        uint256 maturity,\n        address bondTo,\n        address insuranceTo,\n        uint112 xIncrease,\n        uint112 yDecrease,\n        uint112 zDecrease,\n        bytes calldata data\n    ) external override lock returns (Claims memory claimsOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(bondTo != address(0) && insuranceTo != address(0), 'E201');\n        require(bondTo != address(this) && insuranceTo != address(this), 'E204');\n        require(xIncrease > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n        require(pool.state.totalLiquidity > 0, 'E206');\n\n        LendMath.check(pool.state, xIncrease, yDecrease, zDecrease, fee);\n\n        claimsOut.bond = LendMath.getBond(maturity, xIncrease, yDecrease);\n        claimsOut.insurance = LendMath.getInsurance(maturity, pool.state, xIncrease, zDecrease);\n\n        Callback.lend(asset, xIncrease, data);\n\n        pool.state.totalClaims.bond += claimsOut.bond;\n        pool.state.totalClaims.insurance += claimsOut.insurance;\n\n        pool.claims[bondTo].bond += claimsOut.bond;\n        pool.claims[insuranceTo].insurance += claimsOut.insurance;\n\n        pool.state.reserves.asset += xIncrease;\n\n        pool.state.x += xIncrease;\n        pool.state.y -= yDecrease;\n        pool.state.z -= zDecrease;\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Lend(maturity, msg.sender, bondTo, insuranceTo, xIncrease, claimsOut);\n    }\n\n    /// @inheritdoc IPair\n    function withdraw(\n        uint256 maturity,\n        address assetTo,\n        address collateralTo,\n        Claims memory claimsIn\n    ) external override lock returns (Tokens memory tokensOut) {\n        require(block.timestamp >= maturity, 'E203');\n        require(assetTo != address(0) && collateralTo != address(0), 'E201');\n        require(assetTo != address(this) && collateralTo != address(this), 'E204');\n        require(claimsIn.bond > 0 || claimsIn.insurance > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n\n        tokensOut.asset = WithdrawMath.getAsset(pool.state, claimsIn.bond);\n        tokensOut.collateral = WithdrawMath.getCollateral(pool.state, claimsIn.insurance);\n\n        pool.state.totalClaims.bond -= claimsIn.bond;\n        pool.state.totalClaims.insurance -= claimsIn.insurance;\n\n        Claims storage sender = pool.claims[msg.sender];\n\n        sender.bond -= claimsIn.bond;\n        sender.insurance -= claimsIn.insurance;\n\n        pool.state.reserves.asset -= tokensOut.asset;\n        pool.state.reserves.collateral -= tokensOut.collateral;\n\n        if (tokensOut.asset > 0) asset.safeTransfer(assetTo, tokensOut.asset);\n        if (tokensOut.collateral > 0) collateral.safeTransfer(collateralTo, tokensOut.collateral);\n\n        emit Withdraw(maturity, msg.sender, assetTo, collateralTo, claimsIn, tokensOut);\n    }\n\n    /// @inheritdoc IPair\n    function borrow(\n        uint256 maturity,\n        address assetTo,\n        address dueTo,\n        uint112 xDecrease,\n        uint112 yIncrease,\n        uint112 zIncrease,\n        bytes calldata data\n    ) external override lock returns (uint256 id, Due memory dueOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(assetTo != address(0) && dueTo != address(0), 'E201');\n        require(assetTo != address(this) && dueTo != address(this), 'E204');\n        require(xDecrease > 0, 'E205');\n\n        Pool storage pool = pools[maturity];\n        require(pool.state.totalLiquidity > 0, 'E206');\n\n        BorrowMath.check(pool.state, xDecrease, yIncrease, zIncrease, fee);\n\n        dueOut.debt = BorrowMath.getDebt(maturity, xDecrease, yIncrease);\n        dueOut.collateral = BorrowMath.getCollateral(maturity, pool.state, xDecrease, zIncrease);\n        dueOut.startBlock = BlockNumber.get();\n\n        Callback.borrow(collateral, dueOut.collateral, data);\n\n        id = pool.dues[dueTo].insert(dueOut);\n\n        pool.state.reserves.asset -= xDecrease;\n        pool.state.reserves.collateral += dueOut.collateral;\n        pool.state.totalDebtCreated += dueOut.debt;\n\n        pool.state.x -= xDecrease;\n        pool.state.y += yIncrease;\n        pool.state.z += zIncrease;\n\n        asset.safeTransfer(assetTo, xDecrease);\n\n        emit Sync(maturity, pool.state.x, pool.state.y, pool.state.z);\n        emit Borrow(maturity, msg.sender, assetTo, dueTo, xDecrease, id, dueOut);\n    }\n\n    /// @inheritdoc IPair\n    function pay(\n        uint256 maturity,\n        address to,\n        address owner,\n        uint256[] memory ids,\n        uint112[] memory assetsIn,\n        uint112[] memory collateralsOut,\n        bytes calldata data\n    ) external override lock returns (uint128 assetIn, uint128 collateralOut) {\n        require(block.timestamp < maturity, 'E202');\n        require(ids.length == assetsIn.length && ids.length == collateralsOut.length, 'E205');\n        require(to != address(0), 'E201');\n        require(to != address(this), 'E204');\n\n        Pool storage pool = pools[maturity];\n\n        Due[] storage dues = pool.dues[owner];\n\n        for (uint256 i; i < ids.length; i++) {\n            Due storage due = dues[ids[i]];\n            require(due.startBlock != BlockNumber.get(), 'E207');\n            if (owner != msg.sender) require(collateralsOut[i] == 0, 'E213');\n            PayMath.checkProportional(assetsIn[i], collateralsOut[i], due);\n            due.debt -= assetsIn[i];\n            due.collateral -= collateralsOut[i];\n            assetIn += assetsIn[i];\n            collateralOut += collateralsOut[i];\n        }\n        if (assetIn > 0) Callback.pay(asset, assetIn, data);\n\n        pool.state.reserves.asset += assetIn;\n        pool.state.reserves.collateral -= collateralOut;\n\n        if (collateralOut > 0) collateral.safeTransfer(to, collateralOut);\n\n        emit Pay(maturity, msg.sender, to, owner, ids, assetsIn, collateralsOut, assetIn, collateralOut);\n    }\n}\n\n\n",
        "CodeNames": [
            "TimeswapPair.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "TimeswapPair.sol#mint function",
                "Type": "Arbitrary Interest Rate Manipulation",
                "Description": "Due to lack of constraints on user input in the TimeswapPair.sol#mint function, an attacker can arbitrarily modify the interest rate while only paying a minimal amount of Asset Token and Collateral Token.",
                "Repair": "Add constraints on user input to prevent arbitrary interest rate manipulation"
            },
            {
                "Location": "TimeswapPair.sol#mint()",
                "Type": "Malicious minting",
                "Description": "Malicious user/attacker can mint new liquidity with an extremely small amount of yIncrease and malfunction the pair with the maturity.",
                "Repair": "Add validation of minimal state.y for new liquidity"
            },
            {
                "Location": "TimeswapPair.sol#mint()",
                "Type": "State updates after callback",
                "Description": "Important state updates are made after the callback in the mint() function.",
                "Repair": "Place the callback at the end of the function after all state updates have taken place"
            },
            {
                "Location": "TimeswapPair.sol#lend()",
                "Type": "State updates after callback",
                "Description": "In the lend() function state updates are made after the callback.",
                "Repair": "Place the callback at the end of the function after all state updates have taken place"
            },
            {
                "Location": "TimeswapPair.sol#borrow()",
                "Type": "State updates after callback",
                "Description": "In the borrow() function state updates are made after a callback to msg.sender.",
                "Repair": "Place the callback at the end of the function after all state updates have taken place"
            },
            {
                "Location": "TimeswapPair.sol#borrow()",
                "Type": "Improper input validation",
                "Description": "The attacker can increase pool.state.z to a large value by providing a dust amount xDecrease and a large zIncrease value, and then pay back the dust amount to get back the collateral added. This can be exploited to get a large portion of the collateral assets from the defaulted loans.",
                "Repair": "Make pair.borrow() onlyConvenience, so that zIncrease will be a computed value (based on xDecrease and current state) rather than a user input value"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Convenience contract's callback function",
                "Type": "Convenience contract fails to function if asset or collateral is an ERC20 token with fees",
                "Description": "If the asset or collateral used in a pair is an ERC20 token that collects fees with each transfer, the Convenience contract fails to function.",
                "Repair": "Create a new convenience contract to interact with Timeswap V1 Core if someone wants to utilize tokens with fees"
            },
            {
                "Location": "pay() function",
                "Type": "DOS pay function",
                "Description": "An attacker can frontrun to repay a single token for a user's debt, causing the line 'due.debt -= assetsIn[i];' to revert due to underflow.",
                "Repair": "If assetsIn[i] is bigger than due.debt, set assetsIn[i]=due.debt and due.debt=0"
            },
            {
                "Location": "safeName() function",
                "Type": "safeName() can revert causing DoS",
                "Description": "The safeName() function assumes the return type of any ERC20 token to be a string, causing abi.decode() to revert if the return value is not a string.",
                "Repair": "Use the BoringCrypto safeName() function code to handle the case of a bytes32 return value"
            },
            {
                "Location": "pay() function",
                "Type": "pay() function has callback to msg.sender before important state updates",
                "Description": "The callback before important state changes violates the Checks Effects Interactions best practices and can be extremely dangerous, especially with regard to composability/interacting with other protocols and contracts.",
                "Repair": "Place the callback at the end of the pay() function after all state updates have taken place"
            },
            {
                "Location": "safeSymbol() function",
                "Type": "safeSymbol() can revert causing DoS",
                "Description": "The safeSymbol() function assumes the return type of any ERC20 token to be a string, causing abi.decode() to revert if the return value is not a string.",
                "Repair": "Use the BoringCrypto safeSymbol() function code with the returnDataToString() parsing function to handle the case of a bytes32 return value"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IConvenience} from '../interfaces/IConvenience.sol';\nimport {IFactory} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IFactory.sol';\nimport {IWETH} from '../interfaces/IWETH.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {IMint} from '../interfaces/IMint.sol';\nimport {MintMath} from './MintMath.sol';\nimport {Deploy} from './Deploy.sol';\nimport {MsgValue} from './MsgValue.sol';\nimport {ETH} from './ETH.sol';\n\nlibrary Mint {\n    using MintMath for IPair;\n    using Deploy for IConvenience.Native;\n\n    function newLiquidity(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint.NewLiquidity calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = _newLiquidity(\n            natives,\n            convenience,\n            factory,\n            IMint._NewLiquidity(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.debtIn,\n                params.collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function newLiquidityETHAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.NewLiquidityETHAsset calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 assetIn = MsgValue.getUint112();\n\n        (liquidityOut, id, dueOut) = _newLiquidity(\n            natives,\n            convenience,\n            factory,\n            IMint._NewLiquidity(\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                assetIn,\n                params.debtIn,\n                params.collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function newLiquidityETHCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.NewLiquidityETHCollateral calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 collateralIn = MsgValue.getUint112();\n\n        (liquidityOut, id, dueOut) = _newLiquidity(\n            natives,\n            convenience,\n            factory,\n            IMint._NewLiquidity(\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.debtIn,\n                collateralIn,\n                params.deadline\n            )\n        );\n    }\n\n    function _newLiquidity(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint._NewLiquidity memory params\n    )\n        private\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        require(params.debtIn > params.assetIn, 'E516');\n\n        IPair pair = factory.getPair(params.asset, params.collateral);\n\n        if (address(pair) == address(0)) pair = factory.createPair(params.asset, params.collateral);\n\n        require(pair.totalLiquidity(params.maturity) == 0, 'E506');\n\n        (uint112 yIncrease, uint112 zIncrease) = MintMath.givenNew(\n            params.maturity,\n            params.assetIn,\n            params.debtIn,\n            params.collateralIn\n        );\n        (liquidityOut, id, dueOut) = _mint(\n            natives,\n            convenience,\n            pair,\n            IMint._Mint(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint.LiquidityGivenAsset calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenAsset(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.minLiquidity,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAssetETHAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenAssetETHAsset calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 assetIn = MsgValue.getUint112();\n\n        (liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenAsset(\n                weth,\n                params.collateral,\n                params.maturity,\n                address(this),\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                assetIn,\n                params.minLiquidity,\n                params.maxDebt,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenAssetETHCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenAssetETHCollateral calldata params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 maxCollateral = MsgValue.getUint112();\n\n        (liquidityOut, id, dueOut) = _liquidityGivenAsset(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenAsset(\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                address(this),\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                params.minLiquidity,\n                params.maxDebt,\n                maxCollateral,\n                params.deadline\n            )\n        );\n\n        if (maxCollateral > dueOut.collateral) ETH.transfer(payable(msg.sender), maxCollateral - dueOut.collateral);\n    }\n\n    function _liquidityGivenAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint._LiquidityGivenAsset memory params\n    )\n        private\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        IPair pair = factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), 'E501');\n        require(pair.totalLiquidity(params.maturity) > 0, 'E507');\n\n        (uint112 yIncrease, uint112 zIncrease) = pair.givenAsset(params.maturity, params.assetIn);\n\n        (liquidityOut, id, dueOut) = _mint(\n            natives,\n            convenience,\n            pair,\n            IMint._Mint(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                params.assetIn,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n\n        require(liquidityOut >= params.minLiquidity, 'E511');\n        require(dueOut.debt <= params.maxDebt, 'E512');\n        require(dueOut.collateral <= params.maxCollateral, 'E513');\n    }\n\n    function liquidityGivenDebt(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint.LiquidityGivenDebt memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenDebt(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenDebt(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.debtIn,\n                params.minLiquidity,\n                params.maxAsset,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenDebtETHAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenDebtETHAsset memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 maxAsset = MsgValue.getUint112();\n\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenDebt(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenDebt(\n                weth,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.debtIn,\n                params.minLiquidity,\n                maxAsset,\n                params.maxCollateral,\n                params.deadline\n            )\n        );\n\n        if (maxAsset > assetIn) ETH.transfer(payable(msg.sender), maxAsset - assetIn);\n    }\n\n    function liquidityGivenDebtETHCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenDebtETHCollateral memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 maxCollateral = MsgValue.getUint112();\n\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenDebt(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenDebt(\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.debtIn,\n                params.minLiquidity,\n                params.maxAsset,\n                maxCollateral,\n                params.deadline\n            )\n        );\n\n        if (maxCollateral > dueOut.collateral) ETH.transfer(payable(msg.sender), maxCollateral - dueOut.collateral);\n    }\n\n    function _liquidityGivenDebt(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint._LiquidityGivenDebt memory params\n    )\n        private\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        IPair pair = factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), 'E501');\n        require(pair.totalLiquidity(params.maturity) > 0, 'E507');\n\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenDebt(params.maturity, params.debtIn);\n\n        assetIn = xIncrease;\n\n        (liquidityOut, id, dueOut) = _mint(\n            natives,\n            convenience,\n            pair,\n            IMint._Mint(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                assetIn,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n\n        require(liquidityOut >= params.minLiquidity, 'E511');\n        require(xIncrease <= params.maxAsset, 'E513');\n        require(dueOut.collateral <= params.maxCollateral, 'E512');\n    }\n\n    function liquidityGivenCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint.LiquidityGivenCollateral memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenCollateral(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenCollateral(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.collateralIn,\n                params.minLiquidity,\n                params.maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n    }\n\n    function liquidityGivenCollateralETHAsset(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenCollateralETHAsset memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 maxAsset = MsgValue.getUint112();\n\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenCollateral(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenCollateral(\n                weth,\n                params.collateral,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                params.collateralIn,\n                params.minLiquidity,\n                maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n\n        if (maxAsset > assetIn) ETH.transfer(payable(msg.sender), maxAsset - assetIn);\n    }\n\n    function liquidityGivenCollateralETHCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IWETH weth,\n        IMint.LiquidityGivenCollateralETHCollateral memory params\n    )\n        external\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        uint112 collateralIn = MsgValue.getUint112();\n\n        (liquidityOut, assetIn, id, dueOut) = _liquidityGivenCollateral(\n            natives,\n            convenience,\n            factory,\n            IMint._LiquidityGivenCollateral(\n                params.asset,\n                weth,\n                params.maturity,\n                msg.sender,\n                msg.sender,\n                params.liquidityTo,\n                params.dueTo,\n                collateralIn,\n                params.minLiquidity,\n                params.maxAsset,\n                params.maxDebt,\n                params.deadline\n            )\n        );\n    }\n\n    function _liquidityGivenCollateral(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IFactory factory,\n        IMint._LiquidityGivenCollateral memory params\n    )\n        private\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        IPair pair = factory.getPair(params.asset, params.collateral);\n        require(address(pair) != address(0), 'E501');\n        require(pair.totalLiquidity(params.maturity) > 0, 'E507');\n\n        (uint112 xIncrease, uint112 yIncrease, uint112 zIncrease) = pair.givenCollateral(\n            params.maturity,\n            params.collateralIn\n        );\n\n        assetIn = xIncrease;\n\n        (liquidityOut, id, dueOut) = _mint(\n            natives,\n            convenience,\n            pair,\n            IMint._Mint(\n                params.asset,\n                params.collateral,\n                params.maturity,\n                params.assetFrom,\n                params.collateralFrom,\n                params.liquidityTo,\n                params.dueTo,\n                assetIn,\n                yIncrease,\n                zIncrease,\n                params.deadline\n            )\n        );\n\n        require(liquidityOut >= params.minLiquidity, 'E511');\n        require(xIncrease <= params.maxAsset, 'E513');\n        require(dueOut.debt <= params.maxDebt, 'E512');\n    }\n\n    function _mint(\n        mapping(IERC20 => mapping(IERC20 => mapping(uint256 => IConvenience.Native))) storage natives,\n        IConvenience convenience,\n        IPair pair,\n        IMint._Mint memory params\n    )\n        private\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        require(params.deadline >= block.timestamp, 'E504');\n        require(params.maturity > block.timestamp, 'E508');\n\n        IConvenience.Native storage native = natives[params.asset][params.collateral][params.maturity];\n        if (address(native.liquidity) == address(0)) {\n            native.deploy(convenience, pair, params.asset, params.collateral, params.maturity);\n        }\n        (liquidityOut, id, dueOut) = pair.mint(\n            params.maturity,\n            address(native.liquidity),\n            address(native.collateralizedDebt),\n            params.xIncrease,\n            params.yIncrease,\n            params.zIncrease,\n            bytes(abi.encode(params.asset, params.collateral, params.assetFrom, params.collateralFrom))\n        );\n        native.liquidity.mint(params.liquidityTo, liquidityOut);\n        native.collateralizedDebt.mint(params.dueTo, id);\n    }\n}\n\n\n",
        "CodeNames": [
            "Mint.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Mint.sol contract",
                "Type": "users might pay enormous amounts of gas",
                "Description": "If a user tries to mint liquidity on a pair that doesn't exist, they will end up paying thousands of dollars to deploy it.",
                "Repair": "If the pair doesn't exist, revert instead of deploying it"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IDue} from './interfaces/IDue.sol';\nimport {IERC721Receiver} from '@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol';\nimport {IConvenience} from './interfaces/IConvenience.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {ERC721Permit} from './base/ERC721Permit.sol';\nimport {SafeMetadata} from './libraries/SafeMetadata.sol';\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\nimport {NFTTokenURIScaffold} from './libraries/NFTTokenURIScaffold.sol';\n\ncontract CollateralizedDebt is IDue, ERC721Permit {\n    using Strings for uint256;\n    using SafeMetadata for IERC20;\n\n    IConvenience public immutable override convenience;\n    IPair public immutable override pair;\n    uint256 public immutable override maturity;\n\n    function name() external view override returns (string memory) {\n        string memory assetName = pair.asset().safeName();\n        string memory collateralName = pair.collateral().safeName();\n        return\n            string(\n                abi.encodePacked(\n                    'Timeswap Collateralized Debt - ',\n                    assetName,\n                    ' - ',\n                    collateralName,\n                    ' - ',\n                    maturity.toString()\n                )\n            );\n    }\n\n    function symbol() external view override returns (string memory) {\n        string memory assetSymbol = pair.asset().safeSymbol();\n        string memory collateralSymbol = pair.collateral().safeSymbol();\n        return string(abi.encodePacked('TS-CDT-', assetSymbol, '-', collateralSymbol, '-', maturity.toString()));\n    }\n\n    function tokenURI(uint256 id) external view override returns (string memory) {\n        require(ownerOf[id] != address(0), 'E404');\n        return NFTTokenURIScaffold.tokenURI(id, pair, dueOf(id), maturity);\n    }\n\n    function assetDecimals() external view override returns (uint8) {\n        return pair.asset().safeDecimals();\n    }\n\n    function collateralDecimals() external view override returns (uint8) {\n        return pair.collateral().safeDecimals();\n    }\n\n    function dueOf(uint256 id) public view override returns (IPair.Due memory) {\n        return pair.dueOf(maturity, address(this), id);\n    }\n\n    constructor(\n        IConvenience _convenience,\n        IPair _pair,\n        uint256 _maturity\n    ) ERC721Permit('Timeswap Collateralized Debt') {\n        convenience = _convenience;\n        pair = _pair;\n        maturity = _maturity;\n    }\n\n    modifier onlyConvenience() {\n        require(msg.sender == address(convenience), 'E403');\n        _;\n    }\n\n    function mint(address to, uint256 id) external override onlyConvenience {\n        _safeMint(to, id);\n    }\n\n    function burn(\n        address to,\n        uint256[] memory ids,\n        uint112[] memory assetsIn,\n        uint112[] memory collateralsOut,\n        bytes calldata data\n    ) external override onlyConvenience returns (uint128 assetIn, uint128 collateralOut) {\n        (assetIn, collateralOut) = pair.pay(maturity, to, address(this), ids, assetsIn, collateralsOut, data);\n    }\n\n    function timeswapPayCallback(uint128 assetIn, bytes calldata data) external override {\n        require(msg.sender == address(pair), 'E401');\n\n        convenience.collateralizedDebtCallback(pair, maturity, assetIn, data);\n    }\n}\n\n\n",
        "CodeNames": [
            "CollateralizedDebt.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "CollateralizedDebt.sol#mint()",
                "Type": "Missing reentrancy guard",
                "Description": "Functions with callbacks should have reentrancy guards in place for protection against possible malicious actors both from inside and outside the protocol.",
                "Repair": "Add a reentrancy guard modifier on the mint() function"
            },
            {
                "Location": "CollateralizedDebt.sol#burn()",
                "Type": "Missing ERC721 _burn()",
                "Description": "The burn() function in CollateralizedDebt.sol should reverse the actions of mint() by burning the ERC721 token, but the ERC721 _burn() function is never called.",
                "Repair": "Include the following line in the burn() function: _burn(id)"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {IERC20Metadata} from '@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol';\n\nlibrary SafeMetadata {\n    function safeName(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.name.selector)\n        );\n        if (success) return abi.decode(data, (string));\n        return 'Token';\n    }\n\n    function safeSymbol(IERC20 token) internal view returns (string memory) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.symbol.selector)\n        );\n        if (success) return abi.decode(data, (string));\n        return 'TKN';\n    }\n\n    function safeDecimals(IERC20 token) internal view returns (uint8) {\n        (bool success, bytes memory data) = address(token).staticcall(\n            abi.encodeWithSelector(IERC20Metadata.decimals.selector)\n        );\n        if (success && data.length >= 32) return abi.decode(data, (uint8));\n        return 18;\n    }\n}\n\n\n",
        "CodeNames": [
            "SafeMetadata.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "SafeMetadata.sol#safeDecimals()",
                "Type": "DoS",
                "Description": "The safeDecimals function attempts to use abi.decode to return a uint8 when data.length = 32. However, a data.length value greater than 32 will cause abi.decode to revert.",
                "Repair": "Modify the safeDecimals() function to change = 32 to == 32"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\npragma solidity =0.8.4;\n\nimport {IConvenience} from './interfaces/IConvenience.sol';\nimport {IFactory} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IFactory.sol';\nimport {IWETH} from './interfaces/IWETH.sol';\nimport {IDue} from './interfaces/IDue.sol';\nimport {IPair} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/IPair.sol';\nimport {IERC20} from '@openzeppelin/contracts/token/ERC20/IERC20.sol';\nimport {ITimeswapMintCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapMintCallback.sol';\nimport {ITimeswapLendCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapLendCallback.sol';\nimport {ITimeswapBorrowCallback} from '@timeswap-labs/timeswap-v1-core/contracts/interfaces/callback/ITimeswapBorrowCallback.sol';\nimport {Mint} from './libraries/Mint.sol';\nimport {Burn} from './libraries/Burn.sol';\nimport {Lend} from './libraries/Lend.sol';\nimport {Withdraw} from './libraries/Withdraw.sol';\nimport {Borrow} from './libraries/Borrow.sol';\nimport {Pay} from './libraries/Pay.sol';\nimport {SafeTransfer} from './libraries/SafeTransfer.sol';\nimport {DeployNative} from './libraries/DeployNative.sol';\n\n/// @title Timeswap Convenience\n/// @author Timeswap Labs\n/// @notice It is recommnded to use this contract to interact with Timeswap Core contract.\n/// @notice All error messages are abbreviated and can be found in the documentation.\ncontract TimeswapConvenience is IConvenience {\n    using SafeTransfer for IERC20;\n    using Mint for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Burn for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Lend for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Withdraw for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Borrow for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using Pay for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n    using DeployNative for mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native)));\n\n    /* ===== MODEL ===== */\n\n    /// @inheritdoc IConvenience\n    IFactory public immutable override factory;\n    /// @inheritdoc IConvenience\n    IWETH public immutable override weth;\n\n    /// @dev Stores the addresses of the Liquidty, Bond, Insurance, Collateralized Debt token contracts.\n    mapping(IERC20 => mapping(IERC20 => mapping(uint256 => Native))) private natives;\n\n    /* ===== VIEW ===== */\n\n    /// @inheritdoc IConvenience\n    function getNative(\n        IERC20 asset,\n        IERC20 collateral,\n        uint256 maturity\n    ) external view override returns (Native memory) {\n        return natives[asset][collateral][maturity];\n    }\n\n    /* ===== INIT ===== */\n\n    /// @dev Initializes the Convenience contract.\n    /// @param _factory The address of factory contract used by this contract.\n    /// @param _weth The address of the Wrapped ETH contract.\n    constructor(IFactory _factory, IWETH _weth) {\n        factory = _factory;\n        weth = _weth;\n    }\n\n    /* ===== UPDATE ===== */\n\n    receive() external payable {}\n\n    /// @inheritdoc IConvenience\n    function newLiquidity(NewLiquidity calldata params)\n        external\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.newLiquidity(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function newLiquidityETHAsset(NewLiquidityETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.newLiquidityETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function newLiquidityETHCollateral(NewLiquidityETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.newLiquidityETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAsset(LiquidityGivenAsset calldata params)\n        external\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.liquidityGivenAsset(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAssetETHAsset(LiquidityGivenAssetETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.liquidityGivenAssetETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenAssetETHCollateral(LiquidityGivenAssetETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, id, dueOut) = natives.liquidityGivenAssetETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebt(LiquidityGivenDebt calldata params)\n        external\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenDebt(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebtETHAsset(LiquidityGivenDebtETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenDebtETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenDebtETHCollateral(LiquidityGivenDebtETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenDebtETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateral(LiquidityGivenCollateral calldata params)\n        external\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenCollateral(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateralETHAsset(LiquidityGivenCollateralETHAsset calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenCollateralETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function liquidityGivenCollateralETHCollateral(LiquidityGivenCollateralETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (\n            uint256 liquidityOut,\n            uint112 assetIn,\n            uint256 id,\n            IPair.Due memory dueOut\n        )\n    {\n        (liquidityOut, assetIn, id, dueOut) = natives.liquidityGivenCollateralETHCollateral(\n            this,\n            factory,\n            weth,\n            params\n        );\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidity(RemoveLiquidity calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.removeLiquidity(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidityETHAsset(RemoveLiquidityETHAsset calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.removeLiquidityETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function removeLiquidityETHCollateral(RemoveLiquidityETHCollateral calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.removeLiquidityETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBond(LendGivenBond calldata params) external override returns (IPair.Claims memory claimsOut) {\n        claimsOut = natives.lendGivenBond(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBondETHAsset(LendGivenBondETHAsset calldata params)\n        external\n        payable\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenBondETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenBondETHCollateral(LendGivenBondETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenBondETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsurance(LendGivenInsurance calldata params)\n        external\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenInsurance(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsuranceETHAsset(LendGivenInsuranceETHAsset calldata params)\n        external\n        payable\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenInsuranceETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenInsuranceETHCollateral(LendGivenInsuranceETHCollateral calldata params)\n        external\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenInsuranceETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercent(LendGivenPercent calldata params)\n        external\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenPercent(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercentETHAsset(LendGivenPercentETHAsset calldata params)\n        external\n        payable\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenPercentETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function lendGivenPercentETHCollateral(LendGivenPercentETHCollateral calldata params)\n        external\n        override\n        returns (IPair.Claims memory claimsOut)\n    {\n        claimsOut = natives.lendGivenPercentETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collect(Collect calldata params) external override returns (IPair.Tokens memory tokensOut) {\n        tokensOut = natives.collect(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collectETHAsset(CollectETHAsset calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.collectETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function collectETHCollateral(CollectETHCollateral calldata params)\n        external\n        override\n        returns (IPair.Tokens memory tokensOut)\n    {\n        tokensOut = natives.collectETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebt(BorrowGivenDebt calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenDebt(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebtETHAsset(BorrowGivenDebtETHAsset calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenDebtETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenDebtETHCollateral(BorrowGivenDebtETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenDebtETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateral(BorrowGivenCollateral calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenCollateral(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateralETHAsset(BorrowGivenCollateralETHAsset calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenCollateralETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenCollateralETHCollateral(BorrowGivenCollateralETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenCollateralETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercent(BorrowGivenPercent calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenPercent(this, factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercentETHAsset(BorrowGivenPercentETHAsset calldata params)\n        external\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenPercentETHAsset(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function borrowGivenPercentETHCollateral(BorrowGivenPercentETHCollateral calldata params)\n        external\n        payable\n        override\n        returns (uint256 id, IPair.Due memory dueOut)\n    {\n        (id, dueOut) = natives.borrowGivenPercentETHCollateral(this, factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repay(Repay memory params) external override returns (uint128 assetIn, uint128 collateralOut) {\n        (assetIn, collateralOut) = natives.pay(factory, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repayETHAsset(RepayETHAsset memory params)\n        external\n        payable\n        override\n        returns (uint128 assetIn, uint128 collateralOut)\n    {\n        (assetIn, collateralOut) = natives.payETHAsset(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function repayETHCollateral(RepayETHCollateral memory params)\n        external\n        override\n        returns (uint128 assetIn, uint128 collateralOut)\n    {\n        (assetIn, collateralOut) = natives.payETHCollateral(factory, weth, params);\n    }\n\n    /// @inheritdoc IConvenience\n    function deployNative(Deploy memory params) external override {\n        natives.deploy(this, factory, params);\n    }\n\n    /// @inheritdoc ITimeswapMintCallback\n    function timeswapMintCallback(\n        uint112 assetIn,\n        uint112 collateralIn,\n        bytes calldata data\n    ) external override {\n        (IERC20 asset, IERC20 collateral, address assetFrom, address collateralFrom) = abi.decode(\n            data,\n            (IERC20, IERC20, address, address)\n        );\n        IPair pair = factory.getPair(asset, collateral);\n\n        require(msg.sender == address(pair), 'E701');\n\n        if (assetFrom == address(this)) {\n            weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(assetFrom, pair, assetIn);\n        }\n\n        if (collateralFrom == address(this)) {\n            weth.deposit{value: collateralIn}();\n            collateral.safeTransfer(pair, collateralIn);\n        } else {\n            collateral.safeTransferFrom(collateralFrom, pair, collateralIn);\n        }\n    }\n\n    /// @inheritdoc ITimeswapLendCallback\n    function timeswapLendCallback(uint112 assetIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = factory.getPair(asset, collateral);\n\n        require(msg.sender == address(pair), 'E701');\n\n        if (from == address(this)) {\n            weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(from, pair, assetIn);\n        }\n    }\n\n    /// @inheritdoc ITimeswapBorrowCallback\n    function timeswapBorrowCallback(uint112 collateralIn, bytes calldata data) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n        IPair pair = factory.getPair(asset, collateral);\n        require(msg.sender == address(pair), 'E701');\n        if (from == address(this)) {\n            weth.deposit{value: collateralIn}();\n            collateral.safeTransfer(pair, collateralIn);\n        } else {\n            collateral.safeTransferFrom(from, pair, collateralIn);\n        }\n    }\n\n    /// @inheritdoc IConvenience\n    function collateralizedDebtCallback(\n        IPair pair,\n        uint256 maturity,\n        uint128 assetIn,\n        bytes calldata data\n    ) external override {\n        (IERC20 asset, IERC20 collateral, address from) = abi.decode(data, (IERC20, IERC20, address));\n\n        IDue collateralizedDebt = natives[asset][collateral][maturity].collateralizedDebt;\n\n        require(msg.sender == address(collateralizedDebt), 'E701');\n\n        if (from == address(this)) {\n            weth.deposit{value: assetIn}();\n            asset.safeTransfer(pair, assetIn);\n        } else {\n            asset.safeTransferFrom(from, pair, assetIn);\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "TimeswapConvenience.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "TimeswapConvenience.sol#borrowGivenDebt()",
                "Type": "Manipulation of state.y",
                "Description": "Attacker can increase state.y to an extremely large value with a dust amount of assetOut.",
                "Repair": "Remove the function or remove the ability for the caller to specify the interest they want to pay"
            }
        ]
    }
]