[
    {
        "Code": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXSimpleFeeDistributor.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/ITimelockRewardDistributionToken.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./testing/IERC721.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\nimport \"./token/IERC20Upgradeable.sol\";\nimport \"./token/ERC721HolderUpgradeable.sol\";\nimport \"./token/ERC1155HolderUpgradeable.sol\";\nimport \"./util/OwnableUpgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXStakingZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\n  IWETH public immutable WETH; \n  INFTXLPStaking public immutable lpStaking;\n  INFTXInventoryStaking public immutable inventoryStaking;\n  INFTXVaultFactory public immutable nftxFactory;\n  IUniswapV2Router01 public immutable sushiRouter;\n\n  uint256 public lpLockTime = 48 hours; \n  uint256 public inventoryLockTime = 7 days; \n  uint256 constant BASE = 10**18;\n\n  event UserStaked(uint256 vaultId, uint256 count, uint256 lpBalance, uint256 timelockUntil, address sender);\n\n  constructor(address _nftxFactory, address _sushiRouter) Ownable() ReentrancyGuard() {\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n    lpStaking = INFTXLPStaking(INFTXSimpleFeeDistributor(INFTXVaultFactory(_nftxFactory).feeDistributor()).lpStaking());\n    inventoryStaking = INFTXInventoryStaking(INFTXSimpleFeeDistributor(INFTXVaultFactory(_nftxFactory).feeDistributor()).inventoryStaking());\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n    IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH())).approve(_sushiRouter, type(uint256).max);\n  }\n\n  function setLPLockTime(uint256 newLPLockTime) external onlyOwner {\n    require(newLPLockTime <= 7 days, \"Lock too long\");\n    lpLockTime = newLPLockTime;\n  } \n\n  function setInventoryLockTime(uint256 newInventoryLockTime) external onlyOwner {\n    require(newInventoryLockTime <= 14 days, \"Lock too long\");\n    inventoryLockTime = newInventoryLockTime;\n  }\n\n  function provideInventory721(uint256 vaultId, uint256[] memory tokenIds) public {\n    uint256 count = tokenIds.length;\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 xTokensMinted = inventoryStaking.timelockMintFor(vaultId, count*BASE, msg.sender, inventoryLockTime);\n    address xToken = inventoryStaking.vaultXToken(vaultId);\n    uint256 oldBal = IERC20Upgradeable(vault).balanceOf(xToken);\n    uint256[] memory amounts = new uint256[](0);\n    address assetAddress = vault.assetAddress();\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      transferFromERC721(assetAddress, tokenIds[i], address(vault));\n      approveERC721(assetAddress, address(vault), tokenIds[i]);\n    }\n    vault.mintTo(tokenIds, amounts, address(xToken));\n    uint256 newBal = IERC20Upgradeable(vault).balanceOf(xToken);\n    require(newBal == oldBal + count*BASE, \"Incorrect vtokens minted\");\n  }\n\n  function provideInventory1155(uint256 vaultId, uint256[] memory tokenIds, uint256[] memory amounts) public {\n    uint256 count;\n    for (uint256 i = 0; i < tokenIds.length; i++) {\n      count += amounts[i];\n    }\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 xTokensMinted = inventoryStaking.timelockMintFor(vaultId, count*BASE, msg.sender, inventoryLockTime);\n    address xToken = inventoryStaking.vaultXToken(vaultId);\n    uint256 oldBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n    IERC1155Upgradeable nft = IERC1155Upgradeable(vault.assetAddress());\n    nft.safeBatchTransferFrom(msg.sender, address(this), tokenIds, amounts, \"\");\n    nft.setApprovalForAll(address(vault), true);\n    vault.mintTo(tokenIds, amounts, address(xToken));\n    uint256 newBal = IERC20Upgradeable(vault).balanceOf(address(xToken));\n    require(newBal == oldBal + count*BASE, \"Incorrect vtokens minted\");\n  }\n\n  function addLiquidity721ETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethIn\n  ) public payable returns (uint256) {\n    return addLiquidity721ETHTo(vaultId, ids, minWethIn, msg.sender);\n  }\n\n  function addLiquidity721ETHTo(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethIn,\n    address to\n  ) public payable nonReentrant returns (uint256) {\n    WETH.deposit{value: msg.value}();\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(vaultId, ids, minWethIn, msg.value, to);\n\n    // Return extras.\n    if (amountEth < msg.value) {\n      WETH.withdraw(msg.value-amountEth);\n      payable(to).call{value: msg.value-amountEth};\n    }\n\n    return liquidity;\n  }\n\n  function addLiquidity1155ETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minEthIn\n  ) public payable returns (uint256) {\n    return addLiquidity1155ETHTo(vaultId, ids, amounts, minEthIn, msg.sender);\n  }\n\n  function addLiquidity1155ETHTo(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minEthIn,\n    address to\n  ) public payable nonReentrant returns (uint256) {\n    WETH.deposit{value: msg.value}();\n    // Finish this.\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(vaultId, ids, amounts, minEthIn, msg.value, to);\n\n    // Return extras.\n    if (amountEth < msg.value) {\n      WETH.withdraw(msg.value-amountEth);\n      payable(to).call{value: msg.value-amountEth};\n    }\n\n    return liquidity;\n  }\n\n  function addLiquidity721(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethIn,\n    uint256 wethIn\n  ) public returns (uint256) {\n    return addLiquidity721To(vaultId, ids, minWethIn, wethIn, msg.sender);\n  }\n\n  function addLiquidity721To(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethIn,\n    uint256 wethIn,\n    address to\n  ) public nonReentrant returns (uint256) {\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), wethIn);\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity721WETH(vaultId, ids, minWethIn, wethIn, to);\n\n    // Return extras.\n    if (amountEth < wethIn) {\n      WETH.transfer(to, wethIn-amountEth);\n    }\n\n    return liquidity;\n  }\n\n  function addLiquidity1155(\n    uint256 vaultId, \n    uint256[] memory ids,\n    uint256[] memory amounts,\n    uint256 minWethIn,\n    uint256 wethIn\n  ) public returns (uint256) {\n    return addLiquidity1155To(vaultId, ids, amounts, minWethIn, wethIn, msg.sender);\n  }\n\n  function addLiquidity1155To(\n    uint256 vaultId, \n    uint256[] memory ids,\n    uint256[] memory amounts,\n    uint256 minWethIn,\n    uint256 wethIn,\n    address to\n  ) public nonReentrant returns (uint256) {\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), wethIn);\n    (, uint256 amountEth, uint256 liquidity) = _addLiquidity1155WETH(vaultId, ids, amounts, minWethIn, wethIn, to);\n\n    // Return extras.\n    if (amountEth < wethIn) {\n      WETH.transfer(to, wethIn-amountEth);\n    }\n\n    return liquidity;\n  }\n\n  function _addLiquidity721WETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethIn,\n    uint256 wethIn,\n    address to\n  ) internal returns (uint256, uint256, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    for (uint256 i = 0; i < ids.length; i++) {\n      transferFromERC721(assetAddress, ids[i], vault);\n      approveERC721(assetAddress, vault, ids[i]);\n    }\n    uint256[] memory emptyIds;\n    uint256 count = INFTXVault(vault).mint(ids, emptyIds);\n    uint256 balance = (count * BASE); // We should not be experiencing fees.\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return _addLiquidityAndLock(vaultId, vault, balance, minWethIn, wethIn, to);\n  }\n\n  function _addLiquidity1155WETH(\n    uint256 vaultId, \n    uint256[] memory ids,\n    uint256[] memory amounts,\n    uint256 minWethIn,\n    uint256 wethIn,\n    address to\n  ) internal returns (uint256, uint256, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n    uint256 count = INFTXVault(vault).mint(ids, amounts);\n    uint256 balance = (count * BASE); // We should not be experiencing fees.\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return _addLiquidityAndLock(vaultId, vault, balance, minWethIn, wethIn, to);\n  }\n\n  function _addLiquidityAndLock(\n    uint256 vaultId, \n    address vault, \n    uint256 minTokenIn, \n    uint256 minWethIn, \n    uint256 wethIn,\n    address to\n  ) internal returns (uint256, uint256, uint256) {\n    // Provide liquidity.\n    IERC20Upgradeable(vault).approve(address(sushiRouter), minTokenIn);\n    (uint256 amountToken, uint256 amountEth, uint256 liquidity) = sushiRouter.addLiquidity(\n      address(vault), \n      sushiRouter.WETH(),\n      minTokenIn, \n      wethIn, \n      minTokenIn,\n      minWethIn,\n      address(this), \n      block.timestamp\n    );\n\n    // Stake in LP rewards contract \n    address lpToken = pairFor(vault, address(WETH));\n    IERC20Upgradeable(lpToken).approve(address(lpStaking), liquidity);\n    lpStaking.timelockDepositFor(vaultId, to, liquidity, lpLockTime);\n    \n    if (amountToken < minTokenIn) {\n      IERC20Upgradeable(vault).transfer(to, minTokenIn-amountToken);\n    }\n\n    uint256 lockEndTime = block.timestamp + lpLockTime;\n    emit UserStaked(vaultId, minTokenIn, liquidity, lockEndTime, to);\n    return (amountToken, amountEth, liquidity);\n  }\n\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        // Fix here for frontrun attack. Added in v1.0.2.\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n        (address owner) = abi.decode(result, (address));\n        require(checkSuccess && owner == msg.sender, \"Not the owner\");\n        data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n        // Default.\n        // We push to the vault to avoid an unneeded transfer.\n        data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\n    } else {\n      // No longer needed to approve with pushing.\n      return;\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouter.factory(),\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n  receive() external payable {\n\n  }\n\n  function rescue(address token) external onlyOwner {\n    IERC20Upgradeable(token).transfer(msg.sender, IERC20Upgradeable(token).balanceOf(address(this)));\n  }\n}\n\n\n// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/ITimelockRewardDistributionToken.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./testing/IERC721.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\nimport \"./token/IERC20Upgradeable.sol\";\nimport \"./token/ERC721HolderUpgradeable.sol\";\nimport \"./token/ERC1155HolderUpgradeable.sol\";\nimport \"./util/OwnableUpgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXMarketplaceZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\n  IWETH public immutable WETH; \n  INFTXLPStaking public immutable lpStaking;\n  INFTXVaultFactory public immutable nftxFactory;\n  IUniswapV2Router01 public immutable sushiRouter;\n\n  uint256 constant BASE = 10**18;\n\n  event Buy(uint256 count, uint256 ethSpent, address to);\n  event Sell(uint256 count, uint256 ethReceived, address to);\n  event Swap(uint256 count, uint256 ethSpent, address to);\n\n  constructor(address _nftxFactory, address _sushiRouter) Ownable() ReentrancyGuard() {\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n    lpStaking = INFTXLPStaking(INFTXFeeDistributor(INFTXVaultFactory(_nftxFactory).feeDistributor()).lpStaking());\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n    IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH())).approve(_sushiRouter, type(uint256).max);\n  }\n\n  function mintAndSell721(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n    uint256[] memory amounts = _sellVaultTokenETH(vault, minWethOut, vaultBalance, path, to);\n    emit Sell(ids.length, amounts[1], to);\n  }\n\n  function mintAndSell721WETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n    uint256[] memory amounts = _sellVaultTokenWETH(vault, minWethOut, vaultBalance, path, to);\n    emit Sell(ids.length, amounts[1], to);\n  }\n\n  function buyAndSwap721(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    WETH.deposit{value: msg.value}();\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap721(vaultId, idsIn, specificIds, to);\n\n    emit Swap(idsIn.length, amounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndSwap721WETH(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\n    _swap721(vaultId, idsIn, specificIds, to);\n\n    emit Swap(idsIn.length, amounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function buyAndSwap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory amounts, \n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    WETH.deposit{value: msg.value}();\n    uint256 count;\n    for (uint256 i = 0; i < idsIn.length; i++) {\n        uint256 amount = amounts[i];\n        require(amount > 0, \"Transferring < 1\");\n        count += amount;\n    }\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (count - specificIds.length)\n    );\n    uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n    emit Swap(count, swapAmounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndSwap1155WETH(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory amounts, \n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    uint256 count;\n    for (uint256 i = 0; i < idsIn.length; i++) {\n        uint256 amount = amounts[i];\n        require(amount > 0, \"Transferring < 1\");\n        count += amount;\n    }\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (count - specificIds.length)\n    );\n    uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n    emit Swap(count, swapAmounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function buyAndRedeem(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(amount != 0);\n    WETH.deposit{value: msg.value}();\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\n        vault.randomRedeemFee() * (amount - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE)+totalFee, msg.value, path);\n    _redeem(vaultId, amount, specificIds, to);\n\n    emit Buy(amount, amounts[0], to);\n\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndRedeemWETH(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(amount != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\n        vault.randomRedeemFee() * (amount - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE) + totalFee, maxWethIn, path);\n    _redeem(vaultId, amount, specificIds, to);\n\n    emit Buy(amount, amounts[0], to);\n\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function mintAndSell1155(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\n    uint256[] memory amounts = _sellVaultTokenETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n    uint256 count;\n    for (uint256 i = 0; i < ids.length; i++) {\n        count += amounts[i];\n    }\n    emit Sell(count, amounts[1], to);\n  }\n\n  function mintAndSell1155WETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\n    _sellVaultTokenWETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n    uint256 count;\n    for (uint256 i = 0; i < ids.length; i++) {\n        count += amounts[i];\n    }\n    emit Sell(count, amounts[1], to);\n  }\n\n  function _mint721(\n    uint256 vaultId, \n    uint256[] memory ids\n  ) internal returns (address, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    for (uint256 i = 0; i < ids.length; i++) {\n      transferFromERC721(assetAddress, ids[i], vault);\n      approveERC721(assetAddress, vault, ids[i]);\n    }\n    uint256[] memory emptyIds;\n    uint256 count = INFTXVault(vault).mint(ids, emptyIds);\n    uint256 balance = (count * BASE) - (count * INFTXVault(vault).mintFee()); \n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return (vault, balance);\n  }\n\n  function _swap721(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    for (uint256 i = 0; i < idsIn.length; i++) {\n      transferFromERC721(assetAddress, idsIn[i], vault);\n      approveERC721(assetAddress, vault, idsIn[i]);\n    }\n    uint256[] memory emptyIds;\n    INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n    \n    return (vault);\n  }\n\n  function _swap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory amounts,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \"\");\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n    INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n    \n    return (vault);\n  }\n\n  function _redeem(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds,\n    address to\n  ) internal {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n    INFTXVault(vault).redeemTo(amount, specificIds, to);\n  }\n\n  function _mint1155(\n    uint256 vaultId, \n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) internal returns (address, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n    uint256 count = INFTXVault(vault).mint(ids, amounts);\n    uint256 balance = (count * BASE) - INFTXVault(vault).mintFee()*count;\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return (vault, balance);\n  }\n\n  function _buyVaultToken(\n    address vault, \n    uint256 minTokenOut, \n    uint256 maxWethIn, \n    address[] calldata path\n  ) internal returns (uint256[] memory) {\n    uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\n      minTokenOut,\n      maxWethIn,\n      path, \n      address(this),\n      block.timestamp\n    );\n\n    return amounts;\n  }\n  function _sellVaultTokenWETH(\n    address vault, \n    uint256 minWethOut, \n    uint256 maxTokenIn, \n    address[] calldata path,\n    address to\n  ) internal returns (uint256[] memory) {\n    IERC20Upgradeable(vault).approve(address(sushiRouter), maxTokenIn);\n    uint256[] memory amounts = sushiRouter.swapExactTokensForTokens(\n      maxTokenIn,\n      minWethOut,\n      path, \n      to,\n      block.timestamp\n    );\n\n    return amounts;\n  }\n\n  function _sellVaultTokenETH(\n    address vault, \n    uint256 minWethOut, \n    uint256 maxTokenIn, \n    address[] calldata path,\n    address to\n  ) internal returns (uint256[] memory) {\n    IERC20Upgradeable(vault).approve(address(sushiRouter), maxTokenIn);\n    uint256[] memory amounts = sushiRouter.swapExactTokensForETH(\n      maxTokenIn,\n      minWethOut,\n      path, \n      to,\n      block.timestamp\n    );\n\n    return amounts;\n  }\n\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        // Fix here for frontrun attack. Added in v1.0.2.\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n        (address owner) = abi.decode(result, (address));\n        require(checkSuccess && owner == msg.sender, \"Not the owner\");\n        data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n        // Default.\n        // We push to the vault to avoid an unneeded transfer.\n        data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\n    } else {\n      // No longer needed to approve with pushing.\n      return;\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouter.factory(),\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n  receive() external payable {\n\n  }\n}\n\n\n",
        "CodeNames": [
            "NFTXStakingZap.sol",
            "NFTXMarketplaceZap.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NFTXMarketplaceZap.sol and NFTXStakingZap.sol",
                "Type": "Vault locking",
                "Description": "A malicious user could transfer any amount of a vault's vToken to the marketplace (or staking) zap contracts, thus making the vault functionality unavailable for every user on the marketplace.",
                "Repair": "Remove the locking logic from the marketplace and staking zap contracts, and add it to the vaults (if necessary)"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Multiple functions in various contracts",
                "Type": "Missing non-reentrancy modifier",
                "Description": "Reentrancy represents a real and significant risk and should be protected against regardless of if you can foresee the external event that causes lack of protection to be an issue.",
                "Repair": "Add nonReentrant modifier to the functions"
            },
            {
                "Location": "Multiple functions in various contracts",
                "Type": "Ignoring transfer return value",
                "Description": "The transfer return value has to be checked as there are popular tokens, such as USDT that transfer/transferFrom method doesn\u2019t return anything.",
                "Repair": "Use safeTransfer instead of transfer and check the transfer return value"
            },
            {
                "Location": "NFTXVaultFactory",
                "Type": "Contract replacement",
                "Description": "NFTXVaultFactoryUpgradeable implementation can be replaced in production breaking the system.",
                "Repair": "Restrict the ability to change the factory implementation to pre-production stages or make nftxVaultFactory immutable by allowing changing it only once. If the implementation upgrades in production is desired, the factory data migration logic should be implemented and then used atomically together with the implementation switch in all affected contracts."
            },
            {
                "Location": "NFTXSimpleFeeDistributor#addReceiver",
                "Type": "Failure to check for existing receiver",
                "Description": "The addReceiver() function fails to check if the _receiver already exists. This could lead to the same receiver being added multiple times, which results in erroneous fee distributions.",
                "Repair": "Add a mapping address = bool isReceiver that will update whenever receivers are added, modified to a new address or removed."
            },
            {
                "Location": "_sendForReceiver function",
                "Type": "Return variable can remain unassigned",
                "Description": "The _sendForReceiver() function only sets a return function in the 'if' code block, not the 'else' case. If the 'else' case is true, no value is returned.",
                "Repair": "Add a return value to the else block of the _sendForReceiver() function. Alternatively, if isContract should never be set to False, the code should be designed to prevent a receiver from being added with this value."
            },
            {
                "Location": "_sendForReceiver function",
                "Type": "Return value of the _sendForReceiver function is not set",
                "Description": "In the _sendForReceiver function, when _receiver is not a contract, no value is returned. By default, this will return false. This will make the distribute function think that the fee sending has failed, and will send more fees next time.",
                "Repair": "Add a return value to the else block of the _sendForReceiver() function."
            },
            {
                "Location": "_sendForReceiver function",
                "Type": "Double spending of fees",
                "Description": "As _sendForReceiver doesn't return success for completed transfer when receiver isn't a contract, the corresponding fee amount is sent out twice, to the current and to the next fee receiver in the list.",
                "Repair": "Add a return value to the else block of the _sendForReceiver() function."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXSimpleFeeDistributor.sol\";\nimport \"./interface/INFTXInventoryStaking.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./token/IERC20Upgradeable.sol\";\nimport \"./util/SafeERC20Upgradeable.sol\";\nimport \"./util/SafeMathUpgradeable.sol\";\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./util/ReentrancyGuardUpgradeable.sol\";\n\ncontract NFTXSimpleFeeDistributor is INFTXSimpleFeeDistributor, ReentrancyGuardUpgradeable, PausableUpgradeable {\n  using SafeERC20Upgradeable for IERC20Upgradeable;\n\n  bool public distributionPaused;\n\n  address public override nftxVaultFactory;\n  address public override lpStaking;\n  address public override treasury;\n\n  // Total allocation points per vault. \n  uint256 public override allocTotal;\n  FeeReceiver[] public feeReceivers;\n\n  address public override inventoryStaking;\n\n  event UpdateTreasuryAddress(address newTreasury);\n  event UpdateLPStakingAddress(address newLPStaking);\n  event UpdateInventoryStakingAddress(address newInventoryStaking);\n  event UpdateNFTXVaultFactory(address factory);\n  event PauseDistribution(bool paused); \n\n  event AddFeeReceiver(address receiver, uint256 allocPoint);\n  event UpdateFeeReceiverAlloc(address receiver, uint256 allocPoint);\n  event UpdateFeeReceiverAddress(address oldReceiver, address newReceiver);\n  event RemoveFeeReceiver(address receiver);\n  \n  function __SimpleFeeDistributor__init__(address _lpStaking, address _treasury) public override initializer {\n    __Pausable_init();\n    setTreasuryAddress(_treasury);\n    setLPStakingAddress(_lpStaking);\n\n    _addReceiver(0.8 ether, lpStaking, true);\n  }\n\n  function distribute(uint256 vaultId) external override virtual nonReentrant {\n    require(nftxVaultFactory != address(0));\n    address _vault = INFTXVaultFactory(nftxVaultFactory).vault(vaultId);\n\n    uint256 tokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n\n    if (distributionPaused || allocTotal == 0) {\n      IERC20Upgradeable(_vault).safeTransfer(treasury, tokenBalance);\n      return;\n    } \n\n    uint256 length = feeReceivers.length;\n    uint256 leftover;\n    for (uint256 i = 0; i < length; i++) {\n      FeeReceiver memory _feeReceiver = feeReceivers[i];\n      uint256 amountToSend = leftover + ((tokenBalance * _feeReceiver.allocPoint) / allocTotal);\n      uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n      amountToSend = amountToSend > currentTokenBalance ? currentTokenBalance : amountToSend;\n      bool complete = _sendForReceiver(_feeReceiver, vaultId, _vault, amountToSend);\n      if (!complete) {\n        leftover = amountToSend;\n      } else {\n        leftover = 0;\n      }\n    }\n\n    if (leftover > 0) {\n      uint256 currentTokenBalance = IERC20Upgradeable(_vault).balanceOf(address(this));\n      IERC20Upgradeable(_vault).safeTransfer(treasury, currentTokenBalance);\n    }\n  }\n\n  function addReceiver(uint256 _allocPoint, address _receiver, bool _isContract) external override virtual onlyOwner  {\n    _addReceiver(_allocPoint, _receiver, _isContract);\n  }\n\n  function initializeVaultReceivers(uint256 _vaultId) external override {\n    require(msg.sender == nftxVaultFactory, \"FeeReceiver: not factory\");\n    INFTXLPStaking(lpStaking).addPoolForVault(_vaultId);\n    if (inventoryStaking != address(0))\n      INFTXInventoryStaking(inventoryStaking).deployXTokenForVault(_vaultId);\n  }\n\n  function changeReceiverAlloc(uint256 _receiverIdx, uint256 _allocPoint) public override virtual onlyOwner {\n    FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n    allocTotal -= feeReceiver.allocPoint;\n    feeReceiver.allocPoint = _allocPoint;\n    allocTotal += _allocPoint;\n    emit UpdateFeeReceiverAlloc(feeReceiver.receiver, _allocPoint);\n  }\n\n  function changeReceiverAddress(uint256 _receiverIdx, address _address, bool _isContract) public override virtual onlyOwner {\n    FeeReceiver storage feeReceiver = feeReceivers[_receiverIdx];\n    address oldReceiver = feeReceiver.receiver;\n    feeReceiver.receiver = _address;\n    feeReceiver.isContract = _isContract;\n    emit UpdateFeeReceiverAddress(oldReceiver, _address);\n  }\n\n  function removeReceiver(uint256 _receiverIdx) external override virtual onlyOwner {\n    uint256 arrLength = feeReceivers.length;\n    require(_receiverIdx < arrLength, \"FeeDistributor: Out of bounds\");\n    emit RemoveFeeReceiver(feeReceivers[_receiverIdx].receiver);\n    allocTotal -= feeReceivers[_receiverIdx].allocPoint;\n    // Copy the last element to what is being removed and remove the last element.\n    feeReceivers[_receiverIdx] = feeReceivers[arrLength-1];\n    feeReceivers.pop();\n  }\n\n  function setTreasuryAddress(address _treasury) public override onlyOwner {\n    require(_treasury != address(0), \"Treasury != address(0)\");\n    treasury = _treasury;\n    emit UpdateTreasuryAddress(_treasury);\n  }\n\n  function setLPStakingAddress(address _lpStaking) public override onlyOwner {\n    require(_lpStaking != address(0), \"LPStaking != address(0)\");\n    lpStaking = _lpStaking;\n    emit UpdateLPStakingAddress(_lpStaking);\n  }\n\n  function setInventoryStakingAddress(address _inventoryStaking) public override onlyOwner {\n    inventoryStaking = _inventoryStaking;\n    emit UpdateInventoryStakingAddress(_inventoryStaking);\n  }\n\n  function setNFTXVaultFactory(address _factory) external override onlyOwner {\n    nftxVaultFactory = _factory;\n    emit UpdateNFTXVaultFactory(_factory);\n  }\n\n  function pauseFeeDistribution(bool pause) external onlyOwner {\n    distributionPaused = pause;\n    emit PauseDistribution(pause);\n  }\n\n  function rescueTokens(address _address) external override onlyOwner {\n    uint256 balance = IERC20Upgradeable(_address).balanceOf(address(this));\n    IERC20Upgradeable(_address).safeTransfer(msg.sender, balance);\n  }\n\n  function _addReceiver(uint256 _allocPoint, address _receiver, bool _isContract) internal virtual {\n    FeeReceiver memory _feeReceiver = FeeReceiver(_allocPoint, _receiver, _isContract);\n    feeReceivers.push(_feeReceiver);\n    allocTotal += _allocPoint;\n    emit AddFeeReceiver(_receiver, _allocPoint);\n  }\n\n  function _sendForReceiver(FeeReceiver memory _receiver, uint256 _vaultId, address _vault, uint256 amountToSend) internal virtual returns (bool) {\n    if (_receiver.isContract) {\n      IERC20Upgradeable(_vault).approve(_receiver.receiver, amountToSend);\n      // If the receive is not properly processed, send it to the treasury instead.\n       \n      bytes memory payload = abi.encodeWithSelector(INFTXLPStaking.receiveRewards.selector, _vaultId, amountToSend);\n      (bool success, ) = address(_receiver.receiver).call(payload);\n\n      // If the allowance has not been spent, it means we can pass it forward to next.\n      return success && IERC20Upgradeable(_vault).allowance(address(this), _receiver.receiver) == 0;\n    } else {\n      IERC20Upgradeable(_vault).safeTransfer(_receiver.receiver, amountToSend);\n    }\n  }\n} \n\n",
        "CodeNames": [
            "NFTXSimpleFeeDistributor.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NFTXSimpleFeeDistributor.sol",
                "Type": "Denial of Service",
                "Description": "If the receiver is malicious, it can execute revert() in the receiveRewards function, resulting in DOS.",
                "Repair": "The contract can store the fee sent to the receiver in a state variable, and then the receiver can take it out by calling a function"
            },
            {
                "Location": "NFTXInventoryStaking, NFTXSimpleFeeDistributor",
                "Type": "Siphoning rewards",
                "Description": "Dishonest stakers can siphon rewards from xToken holders through the deposit function in NFTXInventoryStaking.",
                "Repair": "Add a delay to users token deposits into the XTokenUpgradeable such that miners cannot feasibly censor a transaction for the specified time interval and users cannot frontrun a transaction to distribute rewards. The interval should be chosen such that enough time is provided for the transaction to be included in a block, given poor network conditions. Alternatively, implement a Time-Weighted-Average-Balance (TWAB) implementation. Additionally, restrict the distribute function in NFTXSimpleFeeDistributor to a given role."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./proxy/ClonesUpgradeable.sol\";\nimport \"./proxy/BeaconProxy.sol\";\nimport \"./proxy/UpgradeableBeacon.sol\";\nimport \"./util/PausableUpgradeable.sol\";\nimport \"./NFTXVaultUpgradeable.sol\";\n\n// Authors: @0xKiwi_ and @alexgausman.\n\ncontract NFTXVaultFactoryUpgradeable is\n    PausableUpgradeable,\n    UpgradeableBeacon,\n    INFTXVaultFactory\n{\n    uint256 private NOT_USED1; // Removed, no longer needed.\n    address public override zapContract;\n    address public override feeDistributor;\n    address public override eligibilityManager;\n\n    mapping(uint256 => address) private NOT_USED2; // Removed, no longer needed.\n    mapping(address => address[]) _vaultsForAsset;\n    \n    address[] internal vaults;\n\n    // v1.0.1\n    mapping(address => bool) public override excludedFromFees;\n\n    // v1.0.2\n    struct VaultFees {\n        bool active;\n        uint64 mintFee;\n        uint64 randomRedeemFee;\n        uint64 targetRedeemFee;\n        uint64 randomSwapFee;\n        uint64 targetSwapFee;\n    }\n    mapping(uint256 => VaultFees) private _vaultFees;\n    uint64 public override factoryMintFee;\n    uint64 public override factoryRandomRedeemFee;\n    uint64 public override factoryTargetRedeemFee;\n    uint64 public override factoryRandomSwapFee;\n    uint64 public override factoryTargetSwapFee;\n\n    function __NFTXVaultFactory_init(address _vaultImpl, address _feeDistributor) public override initializer {\n        __Pausable_init();\n        // We use a beacon proxy so that every child contract follows the same implementation code.\n        __UpgradeableBeacon__init(_vaultImpl);\n        setFeeDistributor(_feeDistributor);\n        setFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\n    }\n\n    function assignFees() public {\n        require(factoryMintFee == 0 && factoryTargetRedeemFee == 0, \"Assigned\");\n        factoryMintFee = uint64(0.1 ether);\n        factoryRandomRedeemFee = uint64(0.05 ether);\n        factoryTargetRedeemFee = uint64(0.1 ether);\n        factoryRandomSwapFee = uint64(0.05 ether);\n        factoryTargetSwapFee = uint64(0.1 ether);\n\n        emit UpdateFactoryFees(0.1 ether, 0.05 ether, 0.1 ether, 0.05 ether, 0.1 ether);\n    }\n\n    function createVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) external virtual override returns (uint256) {\n        onlyOwnerIfPaused(0);\n        require(feeDistributor != address(0), \"NFTX: Fee receiver unset\");\n        require(childImplementation() != address(0), \"NFTX: Vault implementation unset\");\n        address vaultAddr = deployVault(name, symbol, _assetAddress, is1155, allowAllItems);\n        uint256 _vaultId = vaults.length;\n        _vaultsForAsset[_assetAddress].push(vaultAddr);\n        vaults.push(vaultAddr);\n        INFTXFeeDistributor(feeDistributor).initializeVaultReceivers(_vaultId);\n        emit NewVault(_vaultId, vaultAddr, _assetAddress);\n        return _vaultId;\n    }\n\n    function setFactoryFees(\n        uint256 mintFee, \n        uint256 randomRedeemFee, \n        uint256 targetRedeemFee,\n        uint256 randomSwapFee, \n        uint256 targetSwapFee\n    ) public onlyOwner virtual override {\n        require(mintFee <= 1 ether, \"Cannot > 1 ether\");\n        require(randomRedeemFee <= 1 ether, \"Cannot > 1 ether\");\n        require(targetRedeemFee <= 1 ether, \"Cannot > 1 ether\");\n        require(randomSwapFee <= 1 ether, \"Cannot > 1 ether\");\n        require(targetSwapFee <= 1 ether, \"Cannot > 1 ether\");\n\n        factoryMintFee = uint64(mintFee);\n        factoryRandomRedeemFee = uint64(randomRedeemFee);\n        factoryTargetRedeemFee = uint64(targetRedeemFee);\n        factoryRandomSwapFee = uint64(randomSwapFee);\n        factoryTargetSwapFee = uint64(targetSwapFee);\n\n        emit UpdateFactoryFees(mintFee, randomRedeemFee, targetRedeemFee, randomSwapFee, targetSwapFee);\n    }\n\n    function setVaultFees(\n        uint256 vaultId, \n        uint256 mintFee, \n        uint256 randomRedeemFee, \n        uint256 targetRedeemFee,\n        uint256 randomSwapFee, \n        uint256 targetSwapFee\n    ) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not from vault\");\n        }\n        require(mintFee <= 1 ether, \"Cannot > 1 ether\");\n        require(randomRedeemFee <= 1 ether, \"Cannot > 1 ether\");\n        require(targetRedeemFee <= 1 ether, \"Cannot > 1 ether\");\n        require(randomSwapFee <= 1 ether, \"Cannot > 1 ether\");\n        require(targetSwapFee <= 1 ether, \"Cannot > 1 ether\");\n\n        _vaultFees[vaultId] = VaultFees(\n            true, \n            uint64(mintFee),\n            uint64(randomRedeemFee),\n            uint64(targetRedeemFee),\n            uint64(randomSwapFee), \n            uint64(targetSwapFee)\n        );\n        emit UpdateVaultFees(vaultId, mintFee, randomRedeemFee, targetRedeemFee, randomSwapFee, targetSwapFee);\n    }\n\n    function disableVaultFees(uint256 vaultId) public virtual override {\n        if (msg.sender != owner()) {\n            address vaultAddr = vaults[vaultId];\n            require(msg.sender == vaultAddr, \"Not vault\");\n        }\n        delete _vaultFees[vaultId];\n        emit DisableVaultFees(vaultId);\n    }\n\n    function setFeeDistributor(address _feeDistributor) public onlyOwner virtual override {\n        require(_feeDistributor != address(0));\n        emit NewFeeDistributor(feeDistributor, _feeDistributor);\n        feeDistributor = _feeDistributor;\n    }\n\n    function setZapContract(address _zapContract) public onlyOwner virtual override {\n        emit NewZapContract(zapContract, _zapContract);\n        zapContract = _zapContract;\n    }\n\n    function setFeeExclusion(address _excludedAddr, bool excluded) public onlyOwner virtual override {\n        emit FeeExclusion(_excludedAddr, excluded);\n        excludedFromFees[_excludedAddr] = excluded;\n    }\n\n    function setEligibilityManager(address _eligibilityManager) external onlyOwner virtual override {\n        emit NewEligibilityManager(eligibilityManager, _eligibilityManager);\n        eligibilityManager = _eligibilityManager;\n    }\n\n    function vaultFees(uint256 vaultId) external view virtual override returns (uint256, uint256, uint256, uint256, uint256) {\n        VaultFees memory fees = _vaultFees[vaultId];\n        if (fees.active) {\n            return (\n                uint256(fees.mintFee), \n                uint256(fees.randomRedeemFee), \n                uint256(fees.targetRedeemFee), \n                uint256(fees.randomSwapFee), \n                uint256(fees.targetSwapFee)\n            );\n        }\n        \n        return (uint256(factoryMintFee), uint256(factoryRandomRedeemFee), uint256(factoryTargetRedeemFee), uint256(factoryRandomSwapFee), uint256(factoryTargetSwapFee));\n    }\n\n    function isLocked(uint256 lockId) external view override virtual returns (bool) {\n        return isPaused[lockId];\n    }\n\n    function vaultsForAsset(address assetAddress) external view override virtual returns (address[] memory) {\n        return _vaultsForAsset[assetAddress];\n    }\n\n    function vault(uint256 vaultId) external view override virtual returns (address) {\n        return vaults[vaultId];\n    }\n\n    function allVaults() external view override virtual returns (address[] memory) {\n        return vaults;\n    }\n\n    function numVaults() external view override virtual returns (uint256) {\n        return vaults.length;\n    }\n    \n    function deployVault(\n        string memory name,\n        string memory symbol,\n        address _assetAddress,\n        bool is1155,\n        bool allowAllItems\n    ) internal returns (address) {\n        address newBeaconProxy = address(new BeaconProxy(address(this), \"\"));\n        NFTXVaultUpgradeable(newBeaconProxy).__NFTXVault_init(name, symbol, _assetAddress, is1155, allowAllItems);\n        // Manager for configuration.\n        NFTXVaultUpgradeable(newBeaconProxy).setManager(msg.sender);\n        // Owner for administrative functions.\n        NFTXVaultUpgradeable(newBeaconProxy).transferOwnership(owner());\n        return newBeaconProxy;\n    }\n}\n\n\n",
        "CodeNames": [
            "NFTXVaultFactoryUpgradeable.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NFTXVaultFactoryUpgradeable",
                "Type": "Frontrunning fees",
                "Description": "Pool Manager can frontrun entry fee to 100% and users could lose all their deposits.",
                "Repair": "Add a timelock to change fees. In that way, frontrunning wouldn't be possible and users would know the fees they are agreeing with."
            },
            {
                "Location": "assignFees() function in NFTXVaultFactoryUpgradeable contract",
                "Type": "No access control",
                "Description": "The assignFees() function in NFTXVaultFactoryUpgradeable contract has no access control, allowing any user to update all fees to zero.",
                "Repair": "Remove the assignFees() function"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./interface/INFTXVault.sol\";\nimport \"./interface/INFTXVaultFactory.sol\";\nimport \"./interface/INFTXFeeDistributor.sol\";\nimport \"./interface/INFTXLPStaking.sol\";\nimport \"./interface/ITimelockRewardDistributionToken.sol\";\nimport \"./interface/IUniswapV2Router01.sol\";\nimport \"./testing/IERC721.sol\";\nimport \"./token/IERC1155Upgradeable.sol\";\nimport \"./token/IERC20Upgradeable.sol\";\nimport \"./token/ERC721HolderUpgradeable.sol\";\nimport \"./token/ERC1155HolderUpgradeable.sol\";\nimport \"./util/OwnableUpgradeable.sol\";\n\n// Authors: @0xKiwi_.\n\ninterface IWETH {\n  function deposit() external payable;\n  function transfer(address to, uint value) external returns (bool);\n  function withdraw(uint) external;\n  function balanceOf(address to) external view returns (uint256);\n}\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(msg.sender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract NFTXMarketplaceZap is Ownable, ReentrancyGuard, ERC721HolderUpgradeable, ERC1155HolderUpgradeable {\n  IWETH public immutable WETH; \n  INFTXLPStaking public immutable lpStaking;\n  INFTXVaultFactory public immutable nftxFactory;\n  IUniswapV2Router01 public immutable sushiRouter;\n\n  uint256 constant BASE = 10**18;\n\n  event Buy(uint256 count, uint256 ethSpent, address to);\n  event Sell(uint256 count, uint256 ethReceived, address to);\n  event Swap(uint256 count, uint256 ethSpent, address to);\n\n  constructor(address _nftxFactory, address _sushiRouter) Ownable() ReentrancyGuard() {\n    nftxFactory = INFTXVaultFactory(_nftxFactory);\n    lpStaking = INFTXLPStaking(INFTXFeeDistributor(INFTXVaultFactory(_nftxFactory).feeDistributor()).lpStaking());\n    sushiRouter = IUniswapV2Router01(_sushiRouter);\n    WETH = IWETH(IUniswapV2Router01(_sushiRouter).WETH());\n    IERC20Upgradeable(address(IUniswapV2Router01(_sushiRouter).WETH())).approve(_sushiRouter, type(uint256).max);\n  }\n\n  function mintAndSell721(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n    uint256[] memory amounts = _sellVaultTokenETH(vault, minWethOut, vaultBalance, path, to);\n    emit Sell(ids.length, amounts[1], to);\n  }\n\n  function mintAndSell721WETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultBalance) = _mint721(vaultId, ids);\n    uint256[] memory amounts = _sellVaultTokenWETH(vault, minWethOut, vaultBalance, path, to);\n    emit Sell(ids.length, amounts[1], to);\n  }\n\n  function buyAndSwap721(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    WETH.deposit{value: msg.value}();\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap721(vaultId, idsIn, specificIds, to);\n\n    emit Swap(idsIn.length, amounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndSwap721WETH(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (idsIn.length - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), redeemFees, maxWethIn, path);\n    _swap721(vaultId, idsIn, specificIds, to);\n\n    emit Swap(idsIn.length, amounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function buyAndSwap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory amounts, \n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    WETH.deposit{value: msg.value}();\n    uint256 count;\n    for (uint256 i = 0; i < idsIn.length; i++) {\n        uint256 amount = amounts[i];\n        require(amount > 0, \"Transferring < 1\");\n        count += amount;\n    }\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (count - specificIds.length)\n    );\n    uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n    emit Swap(count, swapAmounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndSwap1155WETH(\n    uint256 vaultId, \n    uint256[] memory idsIn, \n    uint256[] memory amounts, \n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(idsIn.length != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    uint256 count;\n    for (uint256 i = 0; i < idsIn.length; i++) {\n        uint256 amount = amounts[i];\n        require(amount > 0, \"Transferring < 1\");\n        count += amount;\n    }\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 redeemFees = (vault.targetSwapFee() * specificIds.length) + (\n        vault.randomSwapFee() * (count - specificIds.length)\n    );\n    uint256[] memory swapAmounts = _buyVaultToken(address(vault), redeemFees, msg.value, path);\n    _swap1155(vaultId, idsIn, amounts, specificIds, to);\n\n    emit Swap(count, swapAmounts[0], to);\n\n    // Return extras.\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function buyAndRedeem(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds, \n    address[] calldata path,\n    address to\n  ) public payable nonReentrant {\n    require(to != address(0));\n    require(amount != 0);\n    WETH.deposit{value: msg.value}();\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\n        vault.randomRedeemFee() * (amount - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE)+totalFee, msg.value, path);\n    _redeem(vaultId, amount, specificIds, to);\n\n    emit Buy(amount, amounts[0], to);\n\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.withdraw(remaining);\n    (bool success, ) = payable(to).call{value: remaining}(\"\");\n    require(success, \"Address: unable to send value, recipient may have reverted\");\n  }\n\n  function buyAndRedeemWETH(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds, \n    uint256 maxWethIn, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(amount != 0);\n    IERC20Upgradeable(address(WETH)).transferFrom(msg.sender, address(this), maxWethIn);\n    INFTXVault vault = INFTXVault(nftxFactory.vault(vaultId));\n    uint256 totalFee = (vault.targetRedeemFee() * specificIds.length) + (\n        vault.randomRedeemFee() * (amount - specificIds.length)\n    );\n    uint256[] memory amounts = _buyVaultToken(address(vault), (amount*BASE) + totalFee, maxWethIn, path);\n    _redeem(vaultId, amount, specificIds, to);\n\n    emit Buy(amount, amounts[0], to);\n\n    uint256 remaining = WETH.balanceOf(address(this));\n    WETH.transfer(to, remaining);\n  }\n\n  function mintAndSell1155(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\n    uint256[] memory amounts = _sellVaultTokenETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n    uint256 count;\n    for (uint256 i = 0; i < ids.length; i++) {\n        count += amounts[i];\n    }\n    emit Sell(count, amounts[1], to);\n  }\n\n  function mintAndSell1155WETH(\n    uint256 vaultId, \n    uint256[] memory ids, \n    uint256[] memory amounts,\n    uint256 minWethOut, \n    address[] calldata path,\n    address to\n  ) public nonReentrant {\n    require(to != address(0));\n    require(ids.length != 0);\n    (address vault, uint256 vaultTokenBalance) = _mint1155(vaultId, ids, amounts);\n    _sellVaultTokenWETH(vault, minWethOut, vaultTokenBalance, path, to);\n\n    uint256 count;\n    for (uint256 i = 0; i < ids.length; i++) {\n        count += amounts[i];\n    }\n    emit Sell(count, amounts[1], to);\n  }\n\n  function _mint721(\n    uint256 vaultId, \n    uint256[] memory ids\n  ) internal returns (address, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    for (uint256 i = 0; i < ids.length; i++) {\n      transferFromERC721(assetAddress, ids[i], vault);\n      approveERC721(assetAddress, vault, ids[i]);\n    }\n    uint256[] memory emptyIds;\n    uint256 count = INFTXVault(vault).mint(ids, emptyIds);\n    uint256 balance = (count * BASE) - (count * INFTXVault(vault).mintFee()); \n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return (vault, balance);\n  }\n\n  function _swap721(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    for (uint256 i = 0; i < idsIn.length; i++) {\n      transferFromERC721(assetAddress, idsIn[i], vault);\n      approveERC721(assetAddress, vault, idsIn[i]);\n    }\n    uint256[] memory emptyIds;\n    INFTXVault(vault).swapTo(idsIn, emptyIds, idsOut, to);\n    \n    return (vault);\n  }\n\n  function _swap1155(\n    uint256 vaultId, \n    uint256[] memory idsIn,\n    uint256[] memory amounts,\n    uint256[] memory idsOut,\n    address to\n  ) internal returns (address) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), idsIn, amounts, \"\");\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n    INFTXVault(vault).swapTo(idsIn, amounts, idsOut, to);\n    \n    return (vault);\n  }\n\n  function _redeem(\n    uint256 vaultId, \n    uint256 amount,\n    uint256[] memory specificIds,\n    address to\n  ) internal {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n    INFTXVault(vault).redeemTo(amount, specificIds, to);\n  }\n\n  function _mint1155(\n    uint256 vaultId, \n    uint256[] memory ids,\n    uint256[] memory amounts\n  ) internal returns (address, uint256) {\n    address vault = nftxFactory.vault(vaultId);\n    require(vault != address(0), \"NFTXZap: Vault does not exist\");\n\n    // Transfer tokens to zap and mint to NFTX.\n    address assetAddress = INFTXVault(vault).assetAddress();\n    IERC1155Upgradeable(assetAddress).safeBatchTransferFrom(msg.sender, address(this), ids, amounts, \"\");\n    IERC1155Upgradeable(assetAddress).setApprovalForAll(vault, true);\n    uint256 count = INFTXVault(vault).mint(ids, amounts);\n    uint256 balance = (count * BASE) - INFTXVault(vault).mintFee()*count;\n    require(balance == IERC20Upgradeable(vault).balanceOf(address(this)), \"Did not receive expected balance\");\n    \n    return (vault, balance);\n  }\n\n  function _buyVaultToken(\n    address vault, \n    uint256 minTokenOut, \n    uint256 maxWethIn, \n    address[] calldata path\n  ) internal returns (uint256[] memory) {\n    uint256[] memory amounts = sushiRouter.swapTokensForExactTokens(\n      minTokenOut,\n      maxWethIn,\n      path, \n      address(this),\n      block.timestamp\n    );\n\n    return amounts;\n  }\n  function _sellVaultTokenWETH(\n    address vault, \n    uint256 minWethOut, \n    uint256 maxTokenIn, \n    address[] calldata path,\n    address to\n  ) internal returns (uint256[] memory) {\n    IERC20Upgradeable(vault).approve(address(sushiRouter), maxTokenIn);\n    uint256[] memory amounts = sushiRouter.swapExactTokensForTokens(\n      maxTokenIn,\n      minWethOut,\n      path, \n      to,\n      block.timestamp\n    );\n\n    return amounts;\n  }\n\n  function _sellVaultTokenETH(\n    address vault, \n    uint256 minWethOut, \n    uint256 maxTokenIn, \n    address[] calldata path,\n    address to\n  ) internal returns (uint256[] memory) {\n    IERC20Upgradeable(vault).approve(address(sushiRouter), maxTokenIn);\n    uint256[] memory amounts = sushiRouter.swapExactTokensForETH(\n      maxTokenIn,\n      minWethOut,\n      path, \n      to,\n      block.timestamp\n    );\n\n    return amounts;\n  }\n\n  function transferFromERC721(address assetAddr, uint256 tokenId, address to) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"transferFrom(address,address,uint256)\", msg.sender, address(this), tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        // Fix here for frontrun attack. Added in v1.0.2.\n        bytes memory punkIndexToAddress = abi.encodeWithSignature(\"punkIndexToAddress(uint256)\", tokenId);\n        (bool checkSuccess, bytes memory result) = address(assetAddr).staticcall(punkIndexToAddress);\n        (address owner) = abi.decode(result, (address));\n        require(checkSuccess && owner == msg.sender, \"Not the owner\");\n        data = abi.encodeWithSignature(\"buyPunk(uint256)\", tokenId);\n    } else {\n        // Default.\n        // We push to the vault to avoid an unneeded transfer.\n        data = abi.encodeWithSignature(\"safeTransferFrom(address,address,uint256)\", msg.sender, to, tokenId);\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  function approveERC721(address assetAddr, address to, uint256 tokenId) internal virtual {\n    address kitties = 0x06012c8cf97BEaD5deAe237070F9587f8E7A266d;\n    address punks = 0xb47e3cd837dDF8e4c57F05d70Ab865de6e193BBB;\n    bytes memory data;\n    if (assetAddr == kitties) {\n        // Cryptokitties.\n        data = abi.encodeWithSignature(\"approve(address,uint256)\", to, tokenId);\n    } else if (assetAddr == punks) {\n        // CryptoPunks.\n        data = abi.encodeWithSignature(\"offerPunkForSaleToAddress(uint256,uint256,address)\", tokenId, 0, to);\n    } else {\n      // No longer needed to approve with pushing.\n      return;\n    }\n    (bool success, bytes memory resultData) = address(assetAddr).call(data);\n    require(success, string(resultData));\n  }\n\n  // calculates the CREATE2 address for a pair without making any external calls\n  function pairFor(address tokenA, address tokenB) internal view returns (address pair) {\n    (address token0, address token1) = sortTokens(tokenA, tokenB);\n    pair = address(uint160(uint256(keccak256(abi.encodePacked(\n      hex'ff',\n      sushiRouter.factory(),\n      keccak256(abi.encodePacked(token0, token1)),\n      hex'e18a34eb0e04b04f7a0ac29a6e80748dca96319b42c54d679cb821dca90c6303' // init code hash\n    )))));\n  }\n\n  // returns sorted token addresses, used to handle return values from pairs sorted in this order\n  function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\n      require(tokenA != tokenB, 'UniswapV2Library: IDENTICAL_ADDRESSES');\n      (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n      require(token0 != address(0), 'UniswapV2Library: ZERO_ADDRESS');\n  }\n\n  receive() external payable {\n\n  }\n}\n\n\n",
        "CodeNames": [
            "NFTXMarketplaceZap.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "NFTXStakingZap, NFTXMarketplaceZap",
                "Type": "Incorrect transfer",
                "Description": "NFTXStakingZap and NFTXMarketplaceZap's transferFromERC721 transfer Cryptokitties to the wrong address.",
                "Repair": "Fix the address in transferFromERC721 function to transfer to the correct address."
            },
            {
                "Location": "buyAndSwap1155WETH() function in NFTXMarketplaceZap.sol contract",
                "Type": "Loss of user assets",
                "Description": "The buyAndSwap1155WETH function may cause loss of user assets as it uses msg.value instead of maxWethIn when executing the _buyVaultToken method.",
                "Repair": "Update the buyAndSwap1155WETH function to use maxWethIn instead of msg.value when executing the _buyVaultToken method"
            },
            {
                "Location": "buyAndSwap721WETH() function in NFTXMarketplaceZap.sol contract",
                "Type": "Loss of funds",
                "Description": "The buyAndSwap721WETH function in NFTXMarketplaceZap.sol contract does not return unused WETH/ETH back to msg.sender, causing loss of funds if the user sends the wrong amount.",
                "Repair": "Update the buyAndSwap721WETH function to return unused WETH/ETH back to msg.sender instead of 'to'"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./ERC20Upgradeable.sol\";\nimport \"../util/OwnableUpgradeable.sol\";\n// import \"../interface/INFTXVaultFactory.sol\";\n\n// interface INFTXInventoryStaking {\n//     function nftxVaultFactory() external view returns (INFTXVaultFactory);\n// }\n\n// SushiBar is the coolest bar in town. You come in with some Sushi, and leave with more! The longer you stay, the more Sushi you get.\n//\n// This contract handles swapping to and from xSushi, SushiSwap's staking token.\ncontract XTokenUpgradeable is OwnableUpgradeable, ERC20Upgradeable {\n    IERC20Upgradeable public baseToken;\n    mapping(address => uint256) internal timelock;\n\n    event Timelocked(address user, uint256 until);\n\n    function __XToken_init(address _baseToken, string memory name, string memory symbol) public initializer {\n        __Ownable_init();\n        // string memory _name = INFTXInventoryStaking(msg.sender).nftxVaultFactory().vault();\n        __ERC20_init(name, symbol);\n        baseToken = IERC20Upgradeable(_baseToken);\n    }\n\n    // Needs to be called BEFORE new base tokens are deposited.\n    function mintXTokens(address account, uint256 _amount, uint256 timelockLength) external onlyOwner returns (uint256) {\n        // Gets the amount of Base Token locked in the contract\n        uint256 totalBaseToken = baseToken.balanceOf(address(this));\n        // Gets the amount of xTokens in existence\n        uint256 totalShares = totalSupply();\n        // If no xTokens exist, mint it 1:1 to the amount put in\n        if (totalShares == 0 || totalBaseToken == 0) {\n            _timelockMint(account, _amount, timelockLength);\n            return _amount;\n        }\n        // Calculate and mint the amount of xTokens the base tokens are worth. The ratio will change overtime, as xTokens are burned/minted and base tokens deposited + gained from fees / withdrawn.\n        else {\n            uint256 what = (_amount * totalShares) / totalBaseToken;\n            _timelockMint(account, what, timelockLength);\n            return what;\n        }\n    }\n\n    function burnXTokens(address who, uint256 _share) external onlyOwner returns (uint256) {\n        // Gets the amount of xToken in existence\n        uint256 totalShares = totalSupply();\n        // Calculates the amount of base tokens the xToken is worth\n        uint256 what = (_share * baseToken.balanceOf(address(this))) / totalShares;\n        _burn(who, _share);\n        baseToken.transfer(who, what);\n        return what;\n    }\n\n    function timelockAccount(address account , uint256 timelockLength) public onlyOwner virtual {\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        timelock[account] = timelockFinish;\n        emit Timelocked(account, timelockFinish);\n    }\n\n    function _burn(address who, uint256 amount) internal override {\n        require(block.timestamp > timelock[who], \"User locked\");\n        super._burn(who, amount);\n    }\n\n    function timelockUntil(address account) public view returns (uint256) {\n        return timelock[account];\n    }\n\n    function _timelockMint(address account, uint256 amount, uint256 timelockLength) internal virtual {\n        uint256 timelockFinish = block.timestamp + timelockLength;\n        timelock[account] = timelockFinish;\n        emit Timelocked(account, timelockFinish);\n        _mint(account, amount);\n    }\n    \n    function _transfer(address from, address to, uint256 value) internal override {\n        require(block.timestamp > timelock[from], \"User locked\");\n        super._transfer(from, to, value);\n    }\n}\n\n",
        "CodeNames": [
            "XTokenUpgradeable.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "approve() function in XTokenUpgradeable contract",
                "Type": "Token approval",
                "Description": "The approve() function in XTokenUpgradeable contract uses xToken shares instead of the equivalent rebalanced amount, allowing the approved spender to spend more tokens than desired.",
                "Repair": "Override the approve() function and track rebalanced amounts in the _allowances field"
            }
        ]
    }
]