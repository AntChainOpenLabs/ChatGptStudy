[
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./CrossMarginAccounts.sol\";\n\n/** \n@title Handles liquidation of accounts below maintenance threshold\n@notice Liquidation can be called by the authorized staker, \nas determined in the Admin contract.\nIf the authorized staker is delinquent, other participants can jump\nin and attack, taking their fees and potentially even their stake,\ndepending how delinquent the responsible authorized staker is.\n*/\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\n    event LiquidationShortfall(uint256 amount);\n    event AccountLiquidated(address account);\n\n    struct Liquidation {\n        uint256 buy;\n        uint256 sell;\n        uint256 blockNum;\n    }\n\n    /// record kept around until a stake attacker can claim their reward\n    struct AccountLiqRecord {\n        uint256 blockNum;\n        address loser;\n        uint256 amount;\n        address stakeAttacker;\n    }\n\n    mapping(address => Liquidation) liquidationAmounts;\n    address[] internal sellTokens;\n    address[] internal buyTokens;\n    address[] internal tradersToLiquidate;\n\n    mapping(address => uint256) public maintenanceFailures;\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\n    uint256 public avgLiquidationPerCall = 10;\n\n    uint256 public liqStakeAttackWindow = 5;\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\n\n    uint256 public failureThreshold = 10;\n\n    /// Set failure threshold\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\n        failureThreshold = threshFactor;\n    }\n\n    /// Set liquidity stake attack window\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\n        liqStakeAttackWindow = window;\n    }\n\n    /// Set maintainer's percent cut\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\n        MAINTAINER_CUT_PERCENT = cut;\n    }\n\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\n    /// and some of them are not straightforward.\n    /// First of all it aggregates liquidation amounts,\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\n    /// exist in memory.\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\n    /// (i.e. current caller is authorized). Also see context below.\n    function calcLiquidationAmounts(\n        address[] memory liquidationCandidates,\n        bool isAuthorized\n    ) internal returns (uint256 attackReturns) {\n        sellTokens = new address[](0);\n        buyTokens = new address[](0);\n        tradersToLiquidate = new address[](0);\n\n        for (\n            uint256 traderIndex = 0;\n            liquidationCandidates.length > traderIndex;\n            traderIndex++\n        ) {\n            address traderAddress = liquidationCandidates[traderIndex];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n            if (belowMaintenanceThreshold(account)) {\n                tradersToLiquidate.push(traderAddress);\n                for (\n                    uint256 sellIdx = 0;\n                    account.holdingTokens.length > sellIdx;\n                    sellIdx++\n                ) {\n                    address token = account.holdingTokens[sellIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = account.holdings[token];\n                        liquidation.buy = 0;\n                        liquidation.blockNum = block.number;\n                        sellTokens.push(token);\n                    } else {\n                        liquidation.sell += account.holdings[token];\n                    }\n                }\n                for (\n                    uint256 buyIdx = 0;\n                    account.borrowTokens.length > buyIdx;\n                    buyIdx++\n                ) {\n                    address token = account.borrowTokens[buyIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    uint256 loanAmount =\n                        Lending(lending()).applyBorrowInterest(\n                            account.borrowed[token],\n                            token,\n                            account.borrowedYieldQuotientsFP[token]\n                        );\n\n                    Lending(lending()).payOff(token, loanAmount);\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = 0;\n                        liquidation.buy = loanAmount;\n                        liquidation.blockNum = block.number;\n                        buyTokens.push(token);\n                    } else {\n                        liquidation.buy += loanAmount;\n                    }\n                }\n            }\n\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[traderAddress];\n            if (isAuthorized) {\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\n            }\n        }\n    }\n\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\n        internal\n        returns (uint256 returnAmount)\n    {\n        if (liqAttackRecord.amount > 0) {\n            // validate attack records, if any\n            uint256 blockDiff =\n                min(\n                    block.number - liqAttackRecord.blockNum,\n                    liqStakeAttackWindow\n                );\n\n            uint256 attackerCut =\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\n\n            Fund(fund()).withdraw(\n                PriceAware.peg,\n                liqAttackRecord.stakeAttacker,\n                attackerCut\n            );\n\n            Admin a = Admin(admin());\n            uint256 penalty =\n                (a.maintenanceStakePerBlock() * attackerCut) /\n                    avgLiquidationPerCall;\n            a.penalizeMaintenanceStake(\n                liqAttackRecord.loser,\n                penalty,\n                liqAttackRecord.stakeAttacker\n            );\n\n            // return remainder, after cut was taken to authorized stakekr\n            returnAmount = liqAttackRecord.amount - attackerCut;\n        }\n    }\n\n    /// Disburse liquidity stake attacks\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\n        external\n    {\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\n            address liqAccount = liquidatedAccounts[i];\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[liqAccount];\n            if (\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\n            ) {\n                _disburseLiqAttack(liqAttackRecord);\n                delete stakeAttackRecords[liqAccount];\n            }\n        }\n    }\n\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\n            address buyToken = buyTokens[tokenIdx];\n            Liquidation storage liq = liquidationAmounts[buyToken];\n            if (liq.buy > liq.sell) {\n                pegAmount += PriceAware.liquidateFromPeg(\n                    buyToken,\n                    liq.buy - liq.sell\n                );\n                delete liquidationAmounts[buyToken];\n            }\n        }\n        delete buyTokens;\n    }\n\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\n        for (\n            uint256 tokenIndex = 0;\n            sellTokens.length > tokenIndex;\n            tokenIndex++\n        ) {\n            address token = sellTokens[tokenIndex];\n            Liquidation storage liq = liquidationAmounts[token];\n            if (liq.sell > liq.buy) {\n                uint256 sellAmount = liq.sell - liq.buy;\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\n                delete liquidationAmounts[token];\n            }\n        }\n        delete sellTokens;\n    }\n\n    function maintainerIsFailing() internal view returns (bool) {\n        (address currentMaintainer, ) =\n            Admin(admin()).viewCurrentMaintenanceStaker();\n        return\n            maintenanceFailures[currentMaintainer] >\n            failureThreshold * avgLiquidationPerCall;\n    }\n\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\n    function liquidate(address[] memory liquidationCandidates)\n        external\n        noIntermediary\n        returns (uint256 maintainerCut)\n    {\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\n\n        // calcLiquidationAmounts does a lot of the work here\n        // * aggregates both sell and buy side targets to be liquidated\n        // * returns attacker cuts to them\n        // * aggregates any returned fees from unauthorized (attacking) attempts\n        maintainerCut = calcLiquidationAmounts(\n            liquidationCandidates,\n            isAuthorized\n        );\n\n        uint256 sale2pegAmount = liquidateToPeg();\n        uint256 peg2targetCost = liquidateFromPeg();\n\n        // this may be a bit imprecise, since individual shortfalls may be obscured\n        // by overall returns and the maintainer cut is taken out of the net total,\n        // but it gives us the general picture\n        if (\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\n            sale2pegAmount\n        ) {\n            emit LiquidationShortfall(\n                (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) /\n                    100 -\n                    sale2pegAmount\n            );\n        }\n\n        address loser = address(0);\n        if (!canTakeNow) {\n            // whoever is the current responsible maintenance staker\n            // and liable to lose their stake\n            loser = Admin(admin()).getUpdatedCurrentStaker();\n        }\n\n        // iterate over traders and send back their money\n        // as well as giving attackers their due, in case caller isn't authorized\n        for (\n            uint256 traderIdx = 0;\n            tradersToLiquidate.length > traderIdx;\n            traderIdx++\n        ) {\n            address traderAddress = tradersToLiquidate[traderIdx];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n\n            uint256 holdingsValue = holdingsInPeg(account, true);\n            uint256 borrowValue = loanInPeg(account, true);\n            // 5% of value borrowed\n            uint256 maintainerCut4Account =\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\n            maintainerCut += maintainerCut4Account;\n\n            if (!canTakeNow) {\n                // This could theoretically lead to a previous attackers\n                // record being overwritten, but only if the trader restarts\n                // their account and goes back into the red within the short time window\n                // which would be a costly attack requiring collusion without upside\n                AccountLiqRecord storage liqAttackRecord =\n                    stakeAttackRecords[traderAddress];\n                liqAttackRecord.amount = maintainerCut4Account;\n                liqAttackRecord.stakeAttacker = msg.sender;\n                liqAttackRecord.blockNum = block.number;\n                liqAttackRecord.loser = loser;\n            }\n\n            // send back trader money\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\n                // send remaining funds back to trader\n                Fund(fund()).withdraw(\n                    PriceAware.peg,\n                    traderAddress,\n                    holdingsValue - borrowValue - maintainerCut4Account\n                );\n            }\n\n            emit AccountLiquidated(traderAddress);\n            deleteAccount(account);\n        }\n\n        avgLiquidationPerCall =\n            (avgLiquidationPerCall * 99 + maintainerCut) /\n            100;\n\n        if (canTakeNow) {\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\n        }\n\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\n        if (isAuthorized) {\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\n            } else {\n                maintenanceFailures[currentMaintainer] = 0;\n            }\n        } else {\n            maintenanceFailures[currentMaintainer] += maintainerCut;\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./IsolatedMarginAccounts.sol\";\n\n/** \n@title Handles liquidation of accounts below maintenance threshold\n@notice Liquidation can be called by the authorized staker, \nas determined in the Admin contract.\nIf the authorized staker is delinquent, other participants can jump\nin and attack, taking their fees and potentially even their stake,\ndepending how delinquent the responsible authorized staker is.\n*/\nabstract contract IsolatedMarginLiquidation is Ownable, IsolatedMarginAccounts {\n    event LiquidationShortfall(uint256 amount);\n    event AccountLiquidated(address account);\n\n    /// record kept around until a stake attacker can claim their reward\n    struct AccountLiqRecord {\n        uint256 blockNum;\n        address loser;\n        uint256 amount;\n        address stakeAttacker;\n    }\n\n    address[] internal tradersToLiquidate;\n\n    mapping(address => uint256) public maintenanceFailures;\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\n    uint256 public avgLiquidationPerCall = 10;\n\n    uint256 public liqStakeAttackWindow = 5;\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\n\n    uint256 public failureThreshold = 10;\n\n    /// Set failure threshold\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\n        failureThreshold = threshFactor;\n    }\n\n    /// Set liquidity stake attack window\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\n        liqStakeAttackWindow = window;\n    }\n\n    /// Set maintainer's percent cut\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\n        MAINTAINER_CUT_PERCENT = cut;\n    }\n\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\n    /// and some of them are not straightforward.\n    /// First of all it aggregates the total amount to sell\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\n    /// exist in memory.\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\n    /// (i.e. current caller is authorized). Also see context below.\n    function calcLiquidationAmounts(\n        address[] memory liquidationCandidates,\n        bool isAuthorized\n    )\n        internal\n        returns (\n            uint256 attackReturns,\n            uint256 sellAmount,\n            uint256 buyTarget\n        )\n    {\n        tradersToLiquidate = new address[](0);\n\n        for (\n            uint256 traderIndex = 0;\n            liquidationCandidates.length > traderIndex;\n            traderIndex++\n        ) {\n            address traderAddress = liquidationCandidates[traderIndex];\n            IsolatedMarginAccount storage account =\n                marginAccounts[traderAddress];\n\n            if (belowMaintenanceThreshold(account)) {\n                tradersToLiquidate.push(traderAddress);\n\n                sellAmount += account.holding;\n\n                updateLoan(account);\n                buyTarget += account.borrowed;\n\n                // TODO pay off / extinguish that loan\n            }\n\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[traderAddress];\n            if (isAuthorized) {\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\n            }\n        }\n    }\n\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\n        internal\n        returns (uint256 returnAmount)\n    {\n        if (liqAttackRecord.amount > 0) {\n            // validate attack records, if any\n            uint256 blockDiff =\n                min(\n                    block.number - liqAttackRecord.blockNum,\n                    liqStakeAttackWindow\n                );\n\n            uint256 attackerCut =\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\n\n            Fund(fund()).withdraw(\n                borrowToken,\n                liqAttackRecord.stakeAttacker,\n                attackerCut\n            );\n\n            Admin a = Admin(admin());\n            uint256 penalty =\n                (a.maintenanceStakePerBlock() * attackerCut) /\n                    avgLiquidationPerCall;\n            a.penalizeMaintenanceStake(\n                liqAttackRecord.loser,\n                penalty,\n                liqAttackRecord.stakeAttacker\n            );\n\n            // return remainder, after cut was taken to authorized stakekr\n            returnAmount = liqAttackRecord.amount - attackerCut;\n        }\n    }\n\n    /// Disburse liquidity stake attacks\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\n        external\n    {\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\n            address liqAccount = liquidatedAccounts[i];\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[liqAccount];\n            if (\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\n            ) {\n                _disburseLiqAttack(liqAttackRecord);\n                delete stakeAttackRecords[liqAccount];\n            }\n        }\n    }\n\n    function maintainerIsFailing() internal view returns (bool) {\n        (address currentMaintainer, ) =\n            Admin(admin()).viewCurrentMaintenanceStaker();\n        return\n            maintenanceFailures[currentMaintainer] >\n            failureThreshold * avgLiquidationPerCall;\n    }\n\n    function liquidateToBorrow(uint256 sellAmount) internal returns (uint256) {\n        uint256[] memory amounts =\n            MarginRouter(router()).authorizedSwapExactT4T(\n                sellAmount,\n                0,\n                liquidationPairs,\n                liquidationTokens\n            );\n\n        uint256 outAmount = amounts[amounts.length - 1];\n\n        return outAmount;\n    }\n\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\n    function liquidate(address[] memory liquidationCandidates)\n        external\n        noIntermediary\n        returns (uint256 maintainerCut)\n    {\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\n\n        // calcLiquidationAmounts does a lot of the work here\n        // * aggregates both sell and buy side targets to be liquidated\n        // * returns attacker cuts to them\n        // * aggregates any returned fees from unauthorized (attacking) attempts\n        uint256 sellAmount;\n        uint256 liquidationTarget;\n        (maintainerCut, sellAmount, liquidationTarget) = calcLiquidationAmounts(\n            liquidationCandidates,\n            isAuthorized\n        );\n\n        uint256 liquidationReturns = liquidateToBorrow(sellAmount);\n\n        // this may be a bit imprecise, since individual shortfalls may be obscured\n        // by overall returns and the maintainer cut is taken out of the net total,\n        // but it gives us the general picture\n        liquidationTarget *= (100 + MAINTAINER_CUT_PERCENT) / 100;\n        if (liquidationTarget > liquidationReturns) {\n            emit LiquidationShortfall(liquidationTarget - liquidationReturns);\n\n            Lending(lending()).haircut(liquidationTarget - liquidationReturns);\n        }\n\n        address loser = address(0);\n        if (!canTakeNow) {\n            // whoever is the current responsible maintenance staker\n            // and liable to lose their stake\n            loser = Admin(admin()).getUpdatedCurrentStaker();\n        }\n\n        // iterate over traders and send back their money\n        // as well as giving attackers their due, in case caller isn't authorized\n        for (\n            uint256 traderIdx = 0;\n            tradersToLiquidate.length > traderIdx;\n            traderIdx++\n        ) {\n            address traderAddress = tradersToLiquidate[traderIdx];\n            IsolatedMarginAccount storage account =\n                marginAccounts[traderAddress];\n\n            // 5% of value borrowed\n            uint256 maintainerCut4Account =\n                (account.borrowed * MAINTAINER_CUT_PERCENT) / 100;\n            maintainerCut += maintainerCut4Account;\n\n            if (!canTakeNow) {\n                // This could theoretically lead to a previous attackers\n                // record being overwritten, but only if the trader restarts\n                // their account and goes back into the red within the short time window\n                // which would be a costly attack requiring collusion without upside\n                AccountLiqRecord storage liqAttackRecord =\n                    stakeAttackRecords[traderAddress];\n                liqAttackRecord.amount = maintainerCut4Account;\n                liqAttackRecord.stakeAttacker = msg.sender;\n                liqAttackRecord.blockNum = block.number;\n                liqAttackRecord.loser = loser;\n            }\n\n            uint256 holdingsValue =\n                (account.holding * liquidationReturns) / sellAmount;\n\n            // send back trader money\n            if (holdingsValue >= maintainerCut4Account + account.borrowed) {\n                // send remaining funds back to trader\n                Fund(fund()).withdraw(\n                    borrowToken,\n                    traderAddress,\n                    holdingsValue - account.borrowed - maintainerCut4Account\n                );\n            }\n\n            emit AccountLiquidated(traderAddress);\n            delete marginAccounts[traderAddress];\n        }\n\n        avgLiquidationPerCall =\n            (avgLiquidationPerCall * 99 + maintainerCut) /\n            100;\n\n        if (canTakeNow) {\n            Fund(fund()).withdraw(borrowToken, msg.sender, maintainerCut);\n        }\n\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\n        if (isAuthorized) {\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\n            } else {\n                maintenanceFailures[currentMaintainer] = 0;\n            }\n        } else {\n            maintenanceFailures[currentMaintainer] += maintainerCut;\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./Fund.sol\";\nimport \"./HourlyBondSubscriptionLending.sol\";\nimport \"./BondLending.sol\";\nimport \"./IncentivizedHolder.sol\";\n\n// TODO activate bonds for lending\n\n// TODO disburse token if isolated bond issuer\n// and if isolated issuer, allow for haircuts\n\n/// @title Manage lending for a variety of bond issuers\ncontract Lending is\n    RoleAware,\n    BaseLending,\n    HourlyBondSubscriptionLending,\n    BondLending,\n    IncentivizedHolder\n{\n    /// @dev IDs for all bonds held by an address\n    mapping(address => uint256[]) public bondIds;\n\n    /// mapping issuers to tokens\n    /// (in crossmargin, the issuers are tokens  themselves)\n    mapping(address => address) public issuerTokens;\n\n    /// In case of shortfall, adjust debt\n    mapping(address => uint256) public haircuts;\n\n    /// map of available issuers\n    mapping(address => bool) public activeIssuers;\n\n    constructor(address _roles) RoleAware(_roles) Ownable() {\n        uint256 APR = 899;\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\n\n        uint256 aprChangePerMil = 3;\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\n    }\n\n    /// Make a issuer available for protocol\n    function activateIssuer(address issuer) external {\n        activateIssuer(issuer, issuer);\n    }\n\n    /// Make issuer != token available for protocol (isol. margin)\n    function activateIssuer(address issuer, address token) public {\n        require(\n            isTokenActivator(msg.sender),\n            \"Address not authorized to activate issuers\"\n        );\n        activeIssuers[issuer] = true;\n        issuerTokens[issuer] = token;\n    }\n\n    /// Remove a issuer from trading availability\n    function deactivateIssuer(address issuer) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Address not authorized to activate issuers\"\n        );\n        activeIssuers[issuer] = false;\n    }\n\n    /// Set lending cap\n    function setLendingCap(address issuer, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"not authorized to set lending cap\"\n        );\n        lendingMeta[issuer].lendingCap = cap;\n    }\n\n    /// Set lending buffer\n    function setLendingBuffer(address issuer, uint256 buffer) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"not autorized to set lending buffer\"\n        );\n        lendingMeta[issuer].lendingBuffer = buffer;\n    }\n\n    /// Set hourly yield APR for issuer\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"not authorized to set hourly yield\"\n        );\n\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\n\n        if (bondMeta.yieldAccumulator.accumulatorFP == 0) {\n            bondMeta.yieldAccumulator = YieldAccumulator({\n                accumulatorFP: FP32,\n                lastUpdated: block.timestamp,\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\n            });\n            bondMeta.buyingSpeed = 1;\n            bondMeta.withdrawingSpeed = 1;\n            bondMeta.lastBought = block.timestamp;\n            bondMeta.lastWithdrawn = block.timestamp;\n        } else {\n            YieldAccumulator storage yA =\n                getUpdatedHourlyYield(issuer, bondMeta);\n            yA.hourlyYieldFP = (FP32 * (100 + aprPercent)) / 100 / (24 * 365);\n        }\n    }\n\n    /// Set runtime weights in floating point\n    function setRuntimeWeights(address issuer, uint256[] memory weights)\n        external\n    {\n        require(\n            isTokenActivator(msg.sender),\n            \"not autorized to set runtime weights\"\n        );\n\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\n\n        if (bondMetas.length == 0) {\n            // we are initializing\n\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\n\n            for (uint256 i; weights.length > i; i++) {\n                uint256 runtime = minRuntime + bucketSize * i;\n                bondMetas.push(\n                    BondBucketMetadata({\n                        runtimeYieldFP: (hourlyYieldFP * runtime) / (1 hours),\n                        lastBought: block.timestamp,\n                        lastWithdrawn: block.timestamp,\n                        yieldLastUpdated: block.timestamp,\n                        buyingSpeed: 1,\n                        withdrawingSpeed: 1,\n                        runtimeWeight: weights[i],\n                        totalLending: 0\n                    })\n                );\n            }\n        } else {\n            require(\n                weights.length == bondMetas.length,\n                \"Weights don't match buckets\"\n            );\n            for (uint256 i; weights.length > i; i++) {\n                bondMetas[i].runtimeWeight = weights[i];\n            }\n        }\n    }\n\n    /// @dev how much interest has accrued to a borrowed balance over time\n    function applyBorrowInterest(\n        uint256 balance,\n        address issuer,\n        uint256 yieldQuotientFP\n    ) external returns (uint256 balanceWithInterest) {\n        require(isBorrower(msg.sender), \"Not an approved borrower\");\n\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\n        balanceWithInterest = applyInterest(\n            balance,\n            yA.accumulatorFP,\n            yieldQuotientFP\n        );\n\n        uint256 deltaAmount = balanceWithInterest - balance;\n        LendingMetadata storage meta = lendingMeta[issuer];\n        meta.totalBorrowed += deltaAmount;\n    }\n\n    /// @dev view function to get current borrowing interest\n    function viewBorrowInterest(\n        uint256 balance,\n        address issuer,\n        uint256 yieldQuotientFP\n    ) external view returns (uint256) {\n        uint256 accumulatorFP =\n            viewCumulativeYieldFP(\n                borrowYieldAccumulators[issuer],\n                block.timestamp\n            );\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\n    }\n\n    /// @dev gets called by router to register if a trader borrows issuers\n    function registerBorrow(address issuer, uint256 amount) external {\n        require(isBorrower(msg.sender), \"Not an approved borrower\");\n        require(activeIssuers[issuer], \"Not an approved issuer\");\n\n        LendingMetadata storage meta = lendingMeta[issuer];\n        meta.totalBorrowed += amount;\n        require(\n            meta.totalLending >= meta.totalBorrowed,\n            \"Insufficient capital to lend, try again later!\"\n        );\n    }\n\n    /// @dev gets called by router if loan is extinguished\n    function payOff(address issuer, uint256 amount) external {\n        require(isBorrower(msg.sender), \"Not an approved borrower\");\n        lendingMeta[issuer].totalBorrowed -= amount;\n    }\n\n    /// @dev get the borrow yield\n    function viewBorrowingYieldFP(address issuer)\n        external\n        view\n        returns (uint256)\n    {\n        return\n            viewCumulativeYieldFP(\n                borrowYieldAccumulators[issuer],\n                block.timestamp\n            );\n    }\n\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\n    function _makeFallbackBond(\n        address issuer,\n        address holder,\n        uint256 amount\n    ) internal override {\n        _makeHourlyBond(issuer, holder, amount);\n    }\n\n    /// @dev withdraw an hour bond\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\n        // apply all interest\n        updateHourlyBondAmount(issuer, bond);\n        super._withdrawHourlyBond(issuer, bond, amount);\n\n        if (bond.amount == 0) {\n            delete hourlyBondAccounts[issuer][msg.sender];\n        }\n\n        disburse(issuer, msg.sender, amount);\n\n        withdrawClaim(msg.sender, issuer, amount);\n    }\n\n    /// Shut down hourly bond account for `issuer`\n    function closeHourlyBondAccount(address issuer) external {\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\n        // apply all interest\n        updateHourlyBondAmount(issuer, bond);\n\n        uint256 amount = bond.amount;\n        super._withdrawHourlyBond(issuer, bond, amount);\n\n        disburse(issuer, msg.sender, amount);\n\n        delete hourlyBondAccounts[issuer][msg.sender];\n\n        withdrawClaim(msg.sender, issuer, amount);\n    }\n\n    /// @dev buy hourly bond subscription\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\n        external\n    {\n        require(activeIssuers[issuer], \"Not an approved issuer\");\n\n        LendingMetadata storage meta = lendingMeta[issuer];\n        if (lendingTarget(meta) >= meta.totalLending + amount) {\n            collectToken(issuer, msg.sender, amount);\n\n            super._makeHourlyBond(issuer, msg.sender, amount);\n\n            stakeClaim(msg.sender, issuer, amount);\n        }\n    }\n\n    /// @dev buy fixed term bond that does not renew\n    function buyBond(\n        address issuer,\n        uint256 runtime,\n        uint256 amount,\n        uint256 minReturn\n    ) external returns (uint256 bondIndex) {\n        require(activeIssuers[issuer], \"Not an approved issuer\");\n\n        LendingMetadata storage meta = lendingMeta[issuer];\n        if (\n            lendingTarget(meta) >= meta.totalLending + amount &&\n            maxRuntime >= runtime &&\n            runtime >= minRuntime\n        ) {\n            bondIndex = super._makeBond(\n                msg.sender,\n                issuer,\n                runtime,\n                amount,\n                minReturn\n            );\n            if (bondIndex > 0) {\n                Fund(fund()).depositFor(msg.sender, issuer, amount);\n                bondIds[msg.sender].push(bondIndex);\n\n                collectToken(issuer, msg.sender, amount);\n                stakeClaim(msg.sender, issuer, amount);\n            }\n        }\n    }\n\n    /// @dev send back funds of bond after maturity\n    function withdrawBond(uint256 bondId) external {\n        Bond storage bond = bonds[bondId];\n        require(msg.sender == bond.holder, \"Not holder of bond\");\n        require(\n            block.timestamp > bond.maturityTimestamp,\n            \"bond is still immature\"\n        );\n        // in case of a shortfall, governance can step in to provide\n        // additonal compensation beyond the usual incentive which\n        // gets withdrawn here\n        withdrawClaim(msg.sender, bond.issuer, bond.originalPrice);\n\n        uint256 withdrawAmount = super._withdrawBond(bondId, bond);\n        disburse(bond.issuer, msg.sender, withdrawAmount);\n    }\n\n    function initBorrowYieldAccumulator(address issuer) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"not autorized to init yield accumulator\"\n        );\n        require(\n            borrowYieldAccumulators[issuer].accumulatorFP == 0,\n            \"trying to re-initialize yield accumulator\"\n        );\n\n        borrowYieldAccumulators[issuer].accumulatorFP = FP32;\n    }\n\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\n        external\n        onlyOwner\n    {\n        borrowingFactorPercent = borrowingFactor;\n    }\n\n    function issuanceBalance(address issuer)\n        internal\n        view\n        override\n        returns (uint256)\n    {\n        address token = issuerTokens[issuer];\n        if (token == issuer) {\n            // cross margin\n            return IERC20(token).balanceOf(fund());\n        } else {\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\n        }\n    }\n\n    function disburse(\n        address issuer,\n        address recipient,\n        uint256 amount\n    ) internal {\n        uint256 haircutAmount = haircuts[issuer];\n        if (haircutAmount > 0 && amount > 0) {\n            uint256 totalLending = lendingMeta[issuer].totalLending;\n            uint256 adjustment =\n                (amount * min(totalLending, haircutAmount)) / totalLending;\n            amount = amount - adjustment;\n            haircuts[issuer] -= adjustment;\n        }\n\n        address token = issuerTokens[issuer];\n        Fund(fund()).withdraw(token, recipient, amount);\n    }\n\n    function collectToken(\n        address issuer,\n        address source,\n        uint256 amount\n    ) internal {\n        Fund(fund()).depositFor(source, issuer, amount);\n    }\n\n    function haircut(uint256 amount) external {\n        haircuts[msg.sender] += amount;\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IncentiveDistribution.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"./CrossMarginTrading.sol\";\n\n/** \n@title Here we support staking for MFI incentives as well as\nstaking to perform the maintenance role.\n*/\ncontract Admin is RoleAware, Ownable {\n    /// Marginswap (MFI) token address\n    address public immutable MFI;\n    mapping(address => uint256) public stakes;\n    uint256 public totalStakes;\n\n    uint256 public maintenanceStakePerBlock = 10 ether;\n    mapping(address => address) public nextMaintenanceStaker;\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\n    address public currentMaintenanceStaker;\n    address public prevMaintenanceStaker;\n    uint256 public currentMaintenanceStakerStartBlock;\n    address public immutable lockedMFI;\n\n    constructor(\n        address _MFI,\n        address _lockedMFI,\n        address lockedMFIDelegate,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        maintenanceStakePerBlock = 1 ether;\n        lockedMFI = _lockedMFI;\n\n        // for initialization purposes and to ensure availability of service\n        // the team's locked MFI participate in maintenance staking only\n        // (not in the incentive staking part)\n        // this implies some trust of the team to execute, which we deem reasonable\n        // since the locked stake is temporary and diminishing as well as the fact\n        // that the team is heavily invested in the protocol and incentivized\n        // by fees like any other maintainer\n        // furthermore others could step in to liquidate via the attacker route\n        // and take away the team fees if they were delinquent\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\n        currentMaintenanceStaker = _lockedMFI;\n        prevMaintenanceStaker = _lockedMFI;\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\n        currentMaintenanceStakerStartBlock = block.number;\n    }\n\n    /// Maintence stake setter\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\n        maintenanceStakePerBlock = amount;\n    }\n\n    function _stake(address holder, uint256 amount) internal {\n        Fund(fund()).depositFor(holder, MFI, amount);\n\n        stakes[holder] += amount;\n        totalStakes += amount;\n\n        IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Deposit a stake for sender\n    function depositStake(uint256 amount) external {\n        _stake(msg.sender, amount);\n    }\n\n    function _withdrawStake(\n        address holder,\n        uint256 amount,\n        address recipient\n    ) internal {\n        // overflow failure desirable\n        stakes[holder] -= amount;\n        totalStakes -= amount;\n        Fund(fund()).withdraw(MFI, recipient, amount);\n\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Withdraw stake for sender\n    function withdrawStake(uint256 amount) external {\n        require(\n            !isAuthorizedStaker(msg.sender),\n            \"You can't withdraw while you're authorized staker\"\n        );\n        _withdrawStake(msg.sender, amount, msg.sender);\n    }\n\n    /// Deposit maintenance stake\n    function depositMaintenanceStake(uint256 amount) external {\n        require(\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\n            \"Insufficient stake to call even one block\"\n        );\n        _stake(msg.sender, amount);\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\n        }\n    }\n\n    function getMaintenanceStakerStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        if (staker == lockedMFI) {\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\n        } else {\n            return stakes[staker];\n        }\n    }\n\n    function getUpdatedCurrentStaker() public returns (address) {\n        uint256 currentStake =\n            getMaintenanceStakerStake(currentMaintenanceStaker);\n        while (\n            (block.number - currentMaintenanceStakerStartBlock) *\n                maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // delete current from daisy chain\n                address nextOne =\n                    nextMaintenanceStaker[currentMaintenanceStaker];\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\n\n                currentMaintenanceStaker = nextOne;\n            } else {\n                currentMaintenanceStakerStartBlock +=\n                    currentStake /\n                    maintenanceStakePerBlock;\n\n                prevMaintenanceStaker = currentMaintenanceStaker;\n                currentMaintenanceStaker = nextMaintenanceStaker[\n                    currentMaintenanceStaker\n                ];\n            }\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\n        }\n        return currentMaintenanceStaker;\n    }\n\n    function viewCurrentMaintenanceStaker()\n        public\n        view\n        returns (address staker, uint256 startBlock)\n    {\n        staker = currentMaintenanceStaker;\n        uint256 currentStake = getMaintenanceStakerStake(staker);\n        startBlock = currentMaintenanceStakerStartBlock;\n        while (\n            (block.number - startBlock) * maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // skip\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            } else {\n                startBlock += currentStake / maintenanceStakePerBlock;\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            }\n        }\n    }\n\n    /// Add a delegate for staker\n    function addDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = true;\n    }\n\n    /// Remove a delegate for staker\n    function removeDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = false;\n    }\n\n    function isAuthorizedStaker(address caller)\n        public\n        returns (bool isAuthorized)\n    {\n        address currentStaker = getUpdatedCurrentStaker();\n        isAuthorized =\n            currentStaker == caller ||\n            maintenanceDelegateTo[currentStaker][caller];\n    }\n\n    /// Penalize a staker\n    function penalizeMaintenanceStake(\n        address maintainer,\n        uint256 penalty,\n        address recipient\n    ) external returns (uint256 stakeTaken) {\n        require(\n            isStakePenalizer(msg.sender),\n            \"msg.sender not authorized to penalize stakers\"\n        );\n        if (penalty > stakes[maintainer]) {\n            stakeTaken = stakes[maintainer];\n        } else {\n            stakeTaken = penalty;\n        }\n        _withdrawStake(maintainer, stakeTaken, recipient);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\n/// Stores how many of token you could get for 1k of peg\nstruct TokenPrice {\n    uint256 blockLastUpdated;\n    uint256 tokenPer1k;\n    address[] liquidationPairs;\n    address[] inverseLiquidationPairs;\n    address[] liquidationTokens;\n    address[] inverseLiquidationTokens;\n}\n\n/// @title The protocol features several mechanisms to prevent vulnerability to\n/// price manipulation:\n/// 1) global exposure caps on all tokens which need to be raised gradually\n///    during the process of introducing a new token, making attacks unprofitable\n///    due to lack  of scale\n/// 2) Exponential moving average with cautious price update. Prices for estimating\n///    how much a trader can borrow need not be extremely current and precise, mainly\n///    they must be resilient against extreme manipulation\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\n///    of front-running and other price manipulation.\nabstract contract PriceAware is Ownable, RoleAware {\n    address public immutable peg;\n    mapping(address => TokenPrice) public tokenPrices;\n    /// update window in blocks\n    uint16 public priceUpdateWindow = 8;\n    uint256 public UPDATE_RATE_PERMIL = 80;\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\n\n    constructor(address _peg) Ownable() {\n        peg = _peg;\n    }\n\n    /// Set window for price updates\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\n        priceUpdateWindow = window;\n    }\n\n    /// Set rate for updates\n    function setUpdateRate(uint256 rate) external onlyOwner {\n        UPDATE_RATE_PERMIL = rate;\n    }\n\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MAX_PEG_AMOUNT = amount;\n    }\n\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MIN_PEG_AMOUNT = amount;\n    }\n\n    /// Get current price of token in peg\n    function getCurrentPriceInPeg(\n        address token,\n        uint256 inAmount,\n        bool forceCurBlock\n    ) public returns (uint256) {\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        if (forceCurBlock) {\n            if (\n                block.number - tokenPrice.blockLastUpdated > priceUpdateWindow\n            ) {\n                // update the currently cached price\n                return getPriceFromAMM(token, inAmount);\n            } else {\n                // just get the current price from AMM\n                return viewCurrentPriceInPeg(token, inAmount);\n            }\n        } else if (tokenPrice.tokenPer1k == 0) {\n            // do the best we can if it's at zero\n            return getPriceFromAMM(token, inAmount);\n        }\n\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\n            // update the price somewhat\n            getPriceFromAMM(token, inAmount);\n        }\n\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\n    }\n\n    /// Get view of current price of token in peg\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\n        public\n        view\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n            return outAmount;\n        }\n    }\n\n    /// @dev retrieves the price from the AMM\n    function getPriceFromAMM(address token, uint256 inAmount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n\n            if (\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\n                outAmount < UPDATE_MAX_PEG_AMOUNT\n            ) {\n                setPriceVal(tokenPrice, inAmount, outAmount);\n            }\n\n            return outAmount;\n        }\n    }\n\n    function setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        _setPriceVal(tokenPrice, inAmount, outAmount, UPDATE_RATE_PERMIL);\n        tokenPrice.blockLastUpdated = block.number;\n    }\n\n    function _setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount,\n        uint256 weightPerMil\n    ) internal {\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\n        tokenPrice.tokenPer1k =\n            (tokenPrice.tokenPer1k *\n                (1000 - weightPerMil) +\n                updatePer1k *\n                weightPerMil) /\n            1000;\n    }\n\n    /// add path from token to current liquidation peg\n    function setLiquidationPath(address[] memory path, address[] memory tokens)\n        external\n    {\n        require(\n            isTokenActivator(msg.sender),\n            \"not authorized to set lending cap\"\n        );\n\n        address token = tokens[0];\n\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        tokenPrice.liquidationPairs = new address[](path.length);\n        tokenPrice.inverseLiquidationPairs = new address[](path.length);\n        tokenPrice.liquidationTokens = new address[](tokens.length);\n        tokenPrice.inverseLiquidationTokens = new address[](tokens.length);\n\n        for (uint256 i = 0; path.length > i; i++) {\n            tokenPrice.liquidationPairs[i] = path[i];\n            tokenPrice.inverseLiquidationPairs[i] = path[path.length - i - 1];\n        }\n\n        for (uint256 i = 0; tokens.length > i; i++) {\n            tokenPrice.liquidationTokens[i] = tokens[i];\n            tokenPrice.inverseLiquidationTokens[i] = tokens[\n                tokens.length - i - 1\n            ];\n        }\n\n        uint256[] memory pathAmounts =\n            UniswapStyleLib.getAmountsIn(1000 ether, path, tokens);\n        uint256 inAmount = pathAmounts[0];\n        _setPriceVal(tokenPrice, inAmount, 1000 ether, 1000);\n    }\n\n    function liquidateToPeg(address token, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return amount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapExactT4T(\n                    amount,\n                    0,\n                    tP.liquidationPairs,\n                    tP.liquidationTokens\n                );\n\n            uint256 outAmount = amounts[amounts.length - 1];\n\n            return outAmount;\n        }\n    }\n\n    function liquidateFromPeg(address token, uint256 targetAmount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return targetAmount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapT4ExactT(\n                    targetAmount,\n                    type(uint256).max,\n                    tP.inverseLiquidationPairs,\n                    tP.inverseLiquidationTokens\n                );\n\n            return amounts[0];\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginLiquidation.sol",
            "IsolatedMarginLiquidation.sol",
            "Lending.sol",
            "Admin.sol",
            "PriceAware.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "Several functions in withdrawHourlyBond Lending.sol, closeHourlyBondAccount Lending.sol, haircut Lending.sol, addDelegate(own adress...) Admin.sol, removeDelegate(own adress...) Admin.sol, depositStake Admin.sol, disburseLiqStakeAttacks CrossMarginLiquidation.sol, disburseLiqStakeAttacks IsolatedMarginLiquidation.sol, getCurrentPriceInPeg PriceAware.sol",
                "Type": "No entry check",
                "Description": "By manipulating the input values, an attacker might be able to disturb the internal administration of the contract, thus perhaps locking function or giving wrong rates.",
                "Repair": "Check the functions to see if they are completely risk-free and add entry checks if they are not, and add a comment to notify the function is meant to be called by everyone."
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function addHolding(CrossMarginAccount storage account, address token, uint256 depositAmount) internal",
                "Type": "Missing map update",
                "Description": "Deposits of the same token keep being pushed to the account.holdingTokens array but the sum is correctly updated in account.holdings[token]. This leads to the same token being counted several times in the getHoldingAmounts function.",
                "Repair": "Correctly set the account.holdsToken map in addHolding."
            },
            {
                "Location": "Isolated margin contracts",
                "Type": "Declared but not set value",
                "Description": "Isolated margin contracts declare but do not set the value of liquidationThresholdPercent.",
                "Repair": "Set the initial value for the liquidationThresholdPercent in Isolated margin contracts. This makes function belowMaintenanceThreshold to always return true unless a value is set via function setLiquidationThresholdPercent. Comments indicate that the value should also be set to 110."
            },
            {
                "Location": "function belowMaintenanceThreshold(CrossMarginAccount storage account)",
                "Type": "Incorrect logic",
                "Description": "The inequality in the last equation is wrong because it says the higher the holdings (margin + loan) compared to the loan, the higher the chance of being liquidated. The inverse equality was probably intended.",
                "Repair": "Change the inequality in the last equation to return 100 * holdings <= liquidationThresholdPercent * loan;"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"../interfaces/IMarginTrading.sol\";\nimport \"./Lending.sol\";\nimport \"./Admin.sol\";\nimport \"./IncentivizedHolder.sol\";\n\n/// @title Top level transaction controller\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\n    /// @notice wrapped ETH ERC20 contract\n    address public immutable WETH;\n    uint256 public constant mswapFeesPer10k = 10;\n\n    /// emitted when a trader depoits on cross margin\n    event CrossDeposit(\n        address trader,\n        address depositToken,\n        uint256 depositAmount\n    );\n    /// emitted whenever a trade happens\n    event CrossTrade(\n        address trader,\n        address inToken,\n        uint256 inTokenAmount,\n        uint256 inTokenBorrow,\n        address outToken,\n        uint256 outTokenAmount,\n        uint256 outTokenExtinguish\n    );\n    /// emitted when a trader withdraws funds\n    event CrossWithdraw(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    );\n    /// emitted upon sucessfully borrowing\n    event CrossBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    );\n\n    /// emmited on deposit-borrow-withdraw\n    event CrossOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    );\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Trade has expired\");\n        _;\n    }\n\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\n        WETH = _WETH;\n    }\n\n    /// @notice traders call this to deposit funds on cross margin\n    function crossDeposit(address depositToken, uint256 depositAmount)\n        external\n    {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                depositToken,\n                depositAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(depositToken, extinguishAmount);\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\n    }\n\n    /// @notice deposit wrapped ehtereum into cross margin account\n    function crossDepositETH() external payable {\n        Fund(fund()).depositToWETH{value: msg.value}();\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                WETH,\n                msg.value\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(WETH, extinguishAmount);\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, WETH, msg.value);\n    }\n\n    /// @notice withdraw deposits/earnings from cross margin account\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\n        external\n    {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            withdrawToken,\n            withdrawAmount\n        );\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\n    }\n\n    /// @notice withdraw ethereum from cross margin account\n    function crossWithdrawETH(uint256 withdrawAmount) external {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            WETH,\n            withdrawAmount\n        );\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\n    }\n\n    /// @notice borrow into cross margin trading account\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\n        IMarginTrading(marginTrading()).registerBorrow(\n            msg.sender,\n            borrowToken,\n            borrowAmount\n        );\n\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\n    }\n\n    /// @notice convenience function to perform overcollateralized borrowing\n    /// against a cross margin account.\n    /// @dev caution: the account still has to have a positive balaance at the end\n    /// of the withdraw. So an underwater account may not be able to withdraw\n    function crossOvercollateralizedBorrow(\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        Lending(lending()).registerBorrow(borrowToken, withdrawAmount);\n        IMarginTrading(marginTrading()).registerOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n\n        Fund(fund()).withdraw(borrowToken, msg.sender, withdrawAmount);\n        stakeClaim(msg.sender, borrowToken, withdrawAmount);\n        emit CrossOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n    }\n\n    /// @notice close an account that is no longer borrowing and return gains\n    function crossCloseAccount() external {\n        (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\n            IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\n\n        // requires all debts paid off\n        IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\n\n        for (uint256 i; holdingTokens.length > i; i++) {\n            Fund(fund()).withdraw(\n                holdingTokens[i],\n                msg.sender,\n                holdingAmounts[i]\n            );\n        }\n    }\n\n    // **** SWAP ****\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory pairs,\n        address[] memory tokens,\n        address _to\n    ) internal virtual {\n        address outToken = tokens[tokens.length - 1];\n        uint256 startingBalance = IERC20(outToken).balanceOf(_to);\n        for (uint256 i; i < pairs.length; i++) {\n            (address input, address output) = (tokens[i], tokens[i + 1]);\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\n\n            uint256 amountOut = amounts[i + 1];\n\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0\n                    ? (uint256(0), amountOut)\n                    : (amountOut, uint256(0));\n\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n\n        uint256 endingBalance = IERC20(outToken).balanceOf(_to);\n        require(\n            endingBalance >= startingBalance + amounts[amounts.length - 1],\n            \"Defective AMM route; balances don't match\"\n        );\n    }\n\n    /// @dev internal helper swapping exact token for token on AMM\n    function _swapExactT4T(\n        uint256[] memory amounts,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    /// @notice make swaps on AMM using protocol funds, only for authorized contracts\n    function authorizedSwapExactT4T(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsOut(amountIn, pairs, tokens);\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    // @dev internal helper swapping exact token for token on on AMM\n    function _swapT4ExactT(\n        uint256[] memory amounts,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        // TODO minimum trade?\n        require(\n            amounts[0] <= amountInMax,\n            \"MarginRouter: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    //// @notice swap protocol funds on AMM, only for authorized\n    function authorizedSwapT4ExactT(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // calc fees\n        uint256 fees = takeFeesFromInput(amountIn);\n\n        // swap\n        amounts = UniswapStyleLib.getAmountsOut(amountIn - fees, pairs, tokens);\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amountIn,\n            amounts[amounts.length - 1]\n        );\n\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // swap\n        amounts = UniswapStyleLib.getAmountsIn(\n            amountOut + takeFeesFromOutput(amountOut),\n            pairs,\n            tokens\n        );\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amounts[0],\n            amountOut\n        );\n\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @dev helper function does all the work of telling other contracts\n    /// about a trade\n    function registerTrade(\n        address trader,\n        address inToken,\n        address outToken,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        (uint256 extinguishAmount, uint256 borrowAmount) =\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\n                trader,\n                inToken,\n                outToken,\n                inAmount,\n                outAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(outToken, extinguishAmount);\n            withdrawClaim(trader, outToken, extinguishAmount);\n        }\n        if (borrowAmount > 0) {\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\n            stakeClaim(trader, inToken, borrowAmount);\n        }\n\n        emit CrossTrade(\n            trader,\n            inToken,\n            inAmount,\n            borrowAmount,\n            outToken,\n            outAmount,\n            extinguishAmount\n        );\n    }\n\n    function getAmountsOut(\n        uint256 inAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsOut(inAmount, pairs, tokens);\n    }\n\n    function getAmountsIn(\n        uint256 outAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsIn(outAmount, pairs, tokens);\n    }\n\n    function takeFeesFromOutput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / 10_000;\n    }\n\n    function takeFeesFromInput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\n    }\n}\n\n\n",
        "CodeNames": [
            "MarginRouter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function MarginRouter.crossSwapExactTokensForTokens",
                "Type": "Re-entrancy bug",
                "Description": "An attacker can be credited multiples of the actual swap result. This can be repeated many times and finally, all tokens can be stolen.",
                "Repair": "Add re-entrancy guards (from OpenZeppelin) to all external functions of MarginRouter. Consider removing the estimation and only doing the actual trade first, then calling registerTrade with the actual trade amounts returned."
            },
            {
                "Location": "function _swapExactT4T() and function _swap() in MarginRouter.sol",
                "Type": "Missing check",
                "Description": "An attacker can call MarginRouter.crossSwapExactTokensForTokens with a fake pair and the same token[0] == token[1].",
                "Repair": "Move the fund withdrawal to the first pair after the startingBalance assignment. Check fromToken != toToken as cyclical trades (arbitrages) are likely not what margin traders are after. Consider if the same check is required for registerTradeAndBorrow / adjustAmounts functions."
            },
            {
                "Location": "crossSwapTokensForExactTokens and crossSwapExactTokensForTokens functions in MarginRouter.sol",
                "Type": "Missing input validation",
                "Description": "The functions crossSwapTokensForExactTokens and crossSwapExactTokensForTokens of MarginRouter.sol do not check who is calling the function. They also do not check the contents of pairs and tokens nor do they check if the size of pairs and tokens is the same.",
                "Repair": "Limit who can call the functions, whitelist contents of pairs and tokens, and check the size of pairs and tokens is the same."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./IsolatedMarginLiquidation.sol\";\n\ncontract IsolatedMarginTrading is IsolatedMarginLiquidation {\n    constructor(address _roles) RoleAware(_roles) Ownable() {}\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeveragePercent(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm trader taking position\n    function registerPosition(\n        address trader,\n        uint256 borrowed,\n        uint256 holdingsAdded\n    ) external {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        account.holding += holdingsAdded;\n        borrow(account, borrowed);\n    }\n\n    /// @dev gets called by router to affirm unwinding of position\n    function registerUnwind(\n        address trader,\n        uint256 extinguished,\n        uint256 holdingsSold\n    ) external {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        account.holding -= holdingsSold;\n        extinguishDebt(account, extinguished);\n    }\n\n    /// @dev gets called by router to close account\n    function registerCloseAccount(address trader)\n        external\n        returns (uint256 holdingAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        require(account.borrowed == 0, \"Can't close account that's borrowing\");\n\n        holdingAmount = account.holding;\n\n        delete marginAccounts[trader];\n    }\n}\n\n\n",
        "CodeNames": [
            "IsolatedMarginTrading.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "IsolatedMarginTrading contract",
                "Type": "No default liquidationThresholdPercent",
                "Description": "The belowMaintenanceThreshold function uses the liquidationThresholdPercent value and anyone could be liquidated due to 100 * holdings = liquidationThresholdPercent * loan = 0 being always true.",
                "Repair": "Set a default liquidation threshold like in CrossMarginTrading contracts."
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./CrossMarginAccounts.sol\";\n\n/** \n@title Handles liquidation of accounts below maintenance threshold\n@notice Liquidation can be called by the authorized staker, \nas determined in the Admin contract.\nIf the authorized staker is delinquent, other participants can jump\nin and attack, taking their fees and potentially even their stake,\ndepending how delinquent the responsible authorized staker is.\n*/\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\n    event LiquidationShortfall(uint256 amount);\n    event AccountLiquidated(address account);\n\n    struct Liquidation {\n        uint256 buy;\n        uint256 sell;\n        uint256 blockNum;\n    }\n\n    /// record kept around until a stake attacker can claim their reward\n    struct AccountLiqRecord {\n        uint256 blockNum;\n        address loser;\n        uint256 amount;\n        address stakeAttacker;\n    }\n\n    mapping(address => Liquidation) liquidationAmounts;\n    address[] internal sellTokens;\n    address[] internal buyTokens;\n    address[] internal tradersToLiquidate;\n\n    mapping(address => uint256) public maintenanceFailures;\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\n    uint256 public avgLiquidationPerCall = 10;\n\n    uint256 public liqStakeAttackWindow = 5;\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\n\n    uint256 public failureThreshold = 10;\n\n    /// Set failure threshold\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\n        failureThreshold = threshFactor;\n    }\n\n    /// Set liquidity stake attack window\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\n        liqStakeAttackWindow = window;\n    }\n\n    /// Set maintainer's percent cut\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\n        MAINTAINER_CUT_PERCENT = cut;\n    }\n\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\n    /// and some of them are not straightforward.\n    /// First of all it aggregates liquidation amounts,\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\n    /// exist in memory.\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\n    /// (i.e. current caller is authorized). Also see context below.\n    function calcLiquidationAmounts(\n        address[] memory liquidationCandidates,\n        bool isAuthorized\n    ) internal returns (uint256 attackReturns) {\n        sellTokens = new address[](0);\n        buyTokens = new address[](0);\n        tradersToLiquidate = new address[](0);\n\n        for (\n            uint256 traderIndex = 0;\n            liquidationCandidates.length > traderIndex;\n            traderIndex++\n        ) {\n            address traderAddress = liquidationCandidates[traderIndex];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n            if (belowMaintenanceThreshold(account)) {\n                tradersToLiquidate.push(traderAddress);\n                for (\n                    uint256 sellIdx = 0;\n                    account.holdingTokens.length > sellIdx;\n                    sellIdx++\n                ) {\n                    address token = account.holdingTokens[sellIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = account.holdings[token];\n                        liquidation.buy = 0;\n                        liquidation.blockNum = block.number;\n                        sellTokens.push(token);\n                    } else {\n                        liquidation.sell += account.holdings[token];\n                    }\n                }\n                for (\n                    uint256 buyIdx = 0;\n                    account.borrowTokens.length > buyIdx;\n                    buyIdx++\n                ) {\n                    address token = account.borrowTokens[buyIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    uint256 loanAmount =\n                        Lending(lending()).applyBorrowInterest(\n                            account.borrowed[token],\n                            token,\n                            account.borrowedYieldQuotientsFP[token]\n                        );\n\n                    Lending(lending()).payOff(token, loanAmount);\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = 0;\n                        liquidation.buy = loanAmount;\n                        liquidation.blockNum = block.number;\n                        buyTokens.push(token);\n                    } else {\n                        liquidation.buy += loanAmount;\n                    }\n                }\n            }\n\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[traderAddress];\n            if (isAuthorized) {\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\n            }\n        }\n    }\n\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\n        internal\n        returns (uint256 returnAmount)\n    {\n        if (liqAttackRecord.amount > 0) {\n            // validate attack records, if any\n            uint256 blockDiff =\n                min(\n                    block.number - liqAttackRecord.blockNum,\n                    liqStakeAttackWindow\n                );\n\n            uint256 attackerCut =\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\n\n            Fund(fund()).withdraw(\n                PriceAware.peg,\n                liqAttackRecord.stakeAttacker,\n                attackerCut\n            );\n\n            Admin a = Admin(admin());\n            uint256 penalty =\n                (a.maintenanceStakePerBlock() * attackerCut) /\n                    avgLiquidationPerCall;\n            a.penalizeMaintenanceStake(\n                liqAttackRecord.loser,\n                penalty,\n                liqAttackRecord.stakeAttacker\n            );\n\n            // return remainder, after cut was taken to authorized stakekr\n            returnAmount = liqAttackRecord.amount - attackerCut;\n        }\n    }\n\n    /// Disburse liquidity stake attacks\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\n        external\n    {\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\n            address liqAccount = liquidatedAccounts[i];\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[liqAccount];\n            if (\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\n            ) {\n                _disburseLiqAttack(liqAttackRecord);\n                delete stakeAttackRecords[liqAccount];\n            }\n        }\n    }\n\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\n            address buyToken = buyTokens[tokenIdx];\n            Liquidation storage liq = liquidationAmounts[buyToken];\n            if (liq.buy > liq.sell) {\n                pegAmount += PriceAware.liquidateFromPeg(\n                    buyToken,\n                    liq.buy - liq.sell\n                );\n                delete liquidationAmounts[buyToken];\n            }\n        }\n        delete buyTokens;\n    }\n\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\n        for (\n            uint256 tokenIndex = 0;\n            sellTokens.length > tokenIndex;\n            tokenIndex++\n        ) {\n            address token = sellTokens[tokenIndex];\n            Liquidation storage liq = liquidationAmounts[token];\n            if (liq.sell > liq.buy) {\n                uint256 sellAmount = liq.sell - liq.buy;\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\n                delete liquidationAmounts[token];\n            }\n        }\n        delete sellTokens;\n    }\n\n    function maintainerIsFailing() internal view returns (bool) {\n        (address currentMaintainer, ) =\n            Admin(admin()).viewCurrentMaintenanceStaker();\n        return\n            maintenanceFailures[currentMaintainer] >\n            failureThreshold * avgLiquidationPerCall;\n    }\n\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\n    function liquidate(address[] memory liquidationCandidates)\n        external\n        noIntermediary\n        returns (uint256 maintainerCut)\n    {\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\n\n        // calcLiquidationAmounts does a lot of the work here\n        // * aggregates both sell and buy side targets to be liquidated\n        // * returns attacker cuts to them\n        // * aggregates any returned fees from unauthorized (attacking) attempts\n        maintainerCut = calcLiquidationAmounts(\n            liquidationCandidates,\n            isAuthorized\n        );\n\n        uint256 sale2pegAmount = liquidateToPeg();\n        uint256 peg2targetCost = liquidateFromPeg();\n\n        // this may be a bit imprecise, since individual shortfalls may be obscured\n        // by overall returns and the maintainer cut is taken out of the net total,\n        // but it gives us the general picture\n        if (\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\n            sale2pegAmount\n        ) {\n            emit LiquidationShortfall(\n                (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) /\n                    100 -\n                    sale2pegAmount\n            );\n        }\n\n        address loser = address(0);\n        if (!canTakeNow) {\n            // whoever is the current responsible maintenance staker\n            // and liable to lose their stake\n            loser = Admin(admin()).getUpdatedCurrentStaker();\n        }\n\n        // iterate over traders and send back their money\n        // as well as giving attackers their due, in case caller isn't authorized\n        for (\n            uint256 traderIdx = 0;\n            tradersToLiquidate.length > traderIdx;\n            traderIdx++\n        ) {\n            address traderAddress = tradersToLiquidate[traderIdx];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n\n            uint256 holdingsValue = holdingsInPeg(account, true);\n            uint256 borrowValue = loanInPeg(account, true);\n            // 5% of value borrowed\n            uint256 maintainerCut4Account =\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\n            maintainerCut += maintainerCut4Account;\n\n            if (!canTakeNow) {\n                // This could theoretically lead to a previous attackers\n                // record being overwritten, but only if the trader restarts\n                // their account and goes back into the red within the short time window\n                // which would be a costly attack requiring collusion without upside\n                AccountLiqRecord storage liqAttackRecord =\n                    stakeAttackRecords[traderAddress];\n                liqAttackRecord.amount = maintainerCut4Account;\n                liqAttackRecord.stakeAttacker = msg.sender;\n                liqAttackRecord.blockNum = block.number;\n                liqAttackRecord.loser = loser;\n            }\n\n            // send back trader money\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\n                // send remaining funds back to trader\n                Fund(fund()).withdraw(\n                    PriceAware.peg,\n                    traderAddress,\n                    holdingsValue - borrowValue - maintainerCut4Account\n                );\n            }\n\n            emit AccountLiquidated(traderAddress);\n            deleteAccount(account);\n        }\n\n        avgLiquidationPerCall =\n            (avgLiquidationPerCall * 99 + maintainerCut) /\n            100;\n\n        if (canTakeNow) {\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\n        }\n\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\n        if (isAuthorized) {\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\n            } else {\n                maintenanceFailures[currentMaintainer] = 0;\n            }\n        } else {\n            maintenanceFailures[currentMaintainer] += maintainerCut;\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./IsolatedMarginAccounts.sol\";\n\n/** \n@title Handles liquidation of accounts below maintenance threshold\n@notice Liquidation can be called by the authorized staker, \nas determined in the Admin contract.\nIf the authorized staker is delinquent, other participants can jump\nin and attack, taking their fees and potentially even their stake,\ndepending how delinquent the responsible authorized staker is.\n*/\nabstract contract IsolatedMarginLiquidation is Ownable, IsolatedMarginAccounts {\n    event LiquidationShortfall(uint256 amount);\n    event AccountLiquidated(address account);\n\n    /// record kept around until a stake attacker can claim their reward\n    struct AccountLiqRecord {\n        uint256 blockNum;\n        address loser;\n        uint256 amount;\n        address stakeAttacker;\n    }\n\n    address[] internal tradersToLiquidate;\n\n    mapping(address => uint256) public maintenanceFailures;\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\n    uint256 public avgLiquidationPerCall = 10;\n\n    uint256 public liqStakeAttackWindow = 5;\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\n\n    uint256 public failureThreshold = 10;\n\n    /// Set failure threshold\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\n        failureThreshold = threshFactor;\n    }\n\n    /// Set liquidity stake attack window\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\n        liqStakeAttackWindow = window;\n    }\n\n    /// Set maintainer's percent cut\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\n        MAINTAINER_CUT_PERCENT = cut;\n    }\n\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\n    /// and some of them are not straightforward.\n    /// First of all it aggregates the total amount to sell\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\n    /// exist in memory.\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\n    /// (i.e. current caller is authorized). Also see context below.\n    function calcLiquidationAmounts(\n        address[] memory liquidationCandidates,\n        bool isAuthorized\n    )\n        internal\n        returns (\n            uint256 attackReturns,\n            uint256 sellAmount,\n            uint256 buyTarget\n        )\n    {\n        tradersToLiquidate = new address[](0);\n\n        for (\n            uint256 traderIndex = 0;\n            liquidationCandidates.length > traderIndex;\n            traderIndex++\n        ) {\n            address traderAddress = liquidationCandidates[traderIndex];\n            IsolatedMarginAccount storage account =\n                marginAccounts[traderAddress];\n\n            if (belowMaintenanceThreshold(account)) {\n                tradersToLiquidate.push(traderAddress);\n\n                sellAmount += account.holding;\n\n                updateLoan(account);\n                buyTarget += account.borrowed;\n\n                // TODO pay off / extinguish that loan\n            }\n\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[traderAddress];\n            if (isAuthorized) {\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\n            }\n        }\n    }\n\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\n        internal\n        returns (uint256 returnAmount)\n    {\n        if (liqAttackRecord.amount > 0) {\n            // validate attack records, if any\n            uint256 blockDiff =\n                min(\n                    block.number - liqAttackRecord.blockNum,\n                    liqStakeAttackWindow\n                );\n\n            uint256 attackerCut =\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\n\n            Fund(fund()).withdraw(\n                borrowToken,\n                liqAttackRecord.stakeAttacker,\n                attackerCut\n            );\n\n            Admin a = Admin(admin());\n            uint256 penalty =\n                (a.maintenanceStakePerBlock() * attackerCut) /\n                    avgLiquidationPerCall;\n            a.penalizeMaintenanceStake(\n                liqAttackRecord.loser,\n                penalty,\n                liqAttackRecord.stakeAttacker\n            );\n\n            // return remainder, after cut was taken to authorized stakekr\n            returnAmount = liqAttackRecord.amount - attackerCut;\n        }\n    }\n\n    /// Disburse liquidity stake attacks\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\n        external\n    {\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\n            address liqAccount = liquidatedAccounts[i];\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[liqAccount];\n            if (\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\n            ) {\n                _disburseLiqAttack(liqAttackRecord);\n                delete stakeAttackRecords[liqAccount];\n            }\n        }\n    }\n\n    function maintainerIsFailing() internal view returns (bool) {\n        (address currentMaintainer, ) =\n            Admin(admin()).viewCurrentMaintenanceStaker();\n        return\n            maintenanceFailures[currentMaintainer] >\n            failureThreshold * avgLiquidationPerCall;\n    }\n\n    function liquidateToBorrow(uint256 sellAmount) internal returns (uint256) {\n        uint256[] memory amounts =\n            MarginRouter(router()).authorizedSwapExactT4T(\n                sellAmount,\n                0,\n                liquidationPairs,\n                liquidationTokens\n            );\n\n        uint256 outAmount = amounts[amounts.length - 1];\n\n        return outAmount;\n    }\n\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\n    function liquidate(address[] memory liquidationCandidates)\n        external\n        noIntermediary\n        returns (uint256 maintainerCut)\n    {\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\n\n        // calcLiquidationAmounts does a lot of the work here\n        // * aggregates both sell and buy side targets to be liquidated\n        // * returns attacker cuts to them\n        // * aggregates any returned fees from unauthorized (attacking) attempts\n        uint256 sellAmount;\n        uint256 liquidationTarget;\n        (maintainerCut, sellAmount, liquidationTarget) = calcLiquidationAmounts(\n            liquidationCandidates,\n            isAuthorized\n        );\n\n        uint256 liquidationReturns = liquidateToBorrow(sellAmount);\n\n        // this may be a bit imprecise, since individual shortfalls may be obscured\n        // by overall returns and the maintainer cut is taken out of the net total,\n        // but it gives us the general picture\n        liquidationTarget *= (100 + MAINTAINER_CUT_PERCENT) / 100;\n        if (liquidationTarget > liquidationReturns) {\n            emit LiquidationShortfall(liquidationTarget - liquidationReturns);\n\n            Lending(lending()).haircut(liquidationTarget - liquidationReturns);\n        }\n\n        address loser = address(0);\n        if (!canTakeNow) {\n            // whoever is the current responsible maintenance staker\n            // and liable to lose their stake\n            loser = Admin(admin()).getUpdatedCurrentStaker();\n        }\n\n        // iterate over traders and send back their money\n        // as well as giving attackers their due, in case caller isn't authorized\n        for (\n            uint256 traderIdx = 0;\n            tradersToLiquidate.length > traderIdx;\n            traderIdx++\n        ) {\n            address traderAddress = tradersToLiquidate[traderIdx];\n            IsolatedMarginAccount storage account =\n                marginAccounts[traderAddress];\n\n            // 5% of value borrowed\n            uint256 maintainerCut4Account =\n                (account.borrowed * MAINTAINER_CUT_PERCENT) / 100;\n            maintainerCut += maintainerCut4Account;\n\n            if (!canTakeNow) {\n                // This could theoretically lead to a previous attackers\n                // record being overwritten, but only if the trader restarts\n                // their account and goes back into the red within the short time window\n                // which would be a costly attack requiring collusion without upside\n                AccountLiqRecord storage liqAttackRecord =\n                    stakeAttackRecords[traderAddress];\n                liqAttackRecord.amount = maintainerCut4Account;\n                liqAttackRecord.stakeAttacker = msg.sender;\n                liqAttackRecord.blockNum = block.number;\n                liqAttackRecord.loser = loser;\n            }\n\n            uint256 holdingsValue =\n                (account.holding * liquidationReturns) / sellAmount;\n\n            // send back trader money\n            if (holdingsValue >= maintainerCut4Account + account.borrowed) {\n                // send remaining funds back to trader\n                Fund(fund()).withdraw(\n                    borrowToken,\n                    traderAddress,\n                    holdingsValue - account.borrowed - maintainerCut4Account\n                );\n            }\n\n            emit AccountLiquidated(traderAddress);\n            delete marginAccounts[traderAddress];\n        }\n\n        avgLiquidationPerCall =\n            (avgLiquidationPerCall * 99 + maintainerCut) /\n            100;\n\n        if (canTakeNow) {\n            Fund(fund()).withdraw(borrowToken, msg.sender, maintainerCut);\n        }\n\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\n        if (isAuthorized) {\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\n            } else {\n                maintenanceFailures[currentMaintainer] = 0;\n            }\n        } else {\n            maintenanceFailures[currentMaintainer] += maintainerCut;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginLiquidation.sol",
            "IsolatedMarginLiquidation.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function liquidate in both CrossMarginLiquidation.sol and IsolatedMarginLiquidation.sol",
                "Type": "Maintainer punishment scheme",
                "Description": "An attacker can push out a maintainer and take over the liquidation revenues.",
                "Repair": "Put authorization on who can call the liquidate function, review the maintainer punishment scheme."
            }
        ]
    }
]