[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "L1Migrator contract",
                "Type": "Missing receive/fallback function",
                "Description": "The L1Migrator contract is unable to receive ETH because it does not have a receive() or fallback() function, causing all ETH held by the BridgeMinter to get stuck in the contract.",
                "Repair": "Add receive() external payable function to L1Migrator contract"
            },
            {
                "Location": "outboundTransfer function in L1LPTGateway contract",
                "Type": "Loss of funds due to insufficient call value",
                "Description": "Fund can be lost if the L1 call value provided is insufficient to cover _maxSubmissionCost, or stuck if insufficient to cover _maxSubmissionCost + (_maxGas * _gasPriceBid).",
                "Repair": "Add a check to ensure that the call value is sufficient to cover _maxSubmissionCost and _maxGas * _gasPriceBid"
            },
            {
                "Location": "mint function in L2LivepeerToken contract",
                "Type": "Ability to mint arbitrary amount of tokens",
                "Description": "An address with MINTER_ROLE can burn an arbitrary amount of tokens, posing a serious centralization risk.",
                "Repair": "Remove MINTER_ROLE and make the L2LivepeerToken only mintable by the owner, which is the L2Minter contract"
            },
            {
                "Location": "migrateLPT function in L1Migrator contract",
                "Type": "Fund loss due to failed RetryableTicket creation",
                "Description": "The L1Migrator.migrateLPT() function can be called by anyone and if the creation of the RetryableTicket on L2 fails due to insufficient funds, the LPT sits in the L1Migrator contract with no way of moving it to L2 or anywhere else, effectively causing the funds to be lost.",
                "Repair": "Use the balance of the L1Migrator contract instead of the amount returned by IBridgeMinter(bridgeMinterAddr).withdrawLPTToL1Migrator(), and limit access to the function"
            },
            {
                "Location": "sendTxToL2() function in L1Migrator.sol",
                "Type": "lack of funds",
                "Description": "The ETH transferred to L2 does not include any funds from bridgeMinter, resulting in all the ETH from bridgeMinter being frozen in the contract.",
                "Repair": "Add the amount withdrawn from BridgeMinter to the msg.value parameter in sendTxToL2() function"
            },
            {
                "Location": "approve() function in L1Escrow.sol",
                "Type": "admin privilege abuse",
                "Description": "The admin can approve an arbitrary spender with an arbitrary amount, leading to a rug vector and reputation risk.",
                "Repair": "Restrict the power of the approve() function by only allowing approvals to other trusted protocol contracts"
            },
            {
                "Location": "burn() function in L2LivepeerToken.sol",
                "Type": "centralization risk",
                "Description": "An address with BURNER_ROLE can burn an arbitrary amount of tokens from any address, posing a serious centralization risk.",
                "Repair": "Remove the BURNER_ROLE and change burn() function to only allow burning tokens from the caller's address"
            },
            {
                "Location": "outboundTransfer() function in L2LPTGateway.sol",
                "Type": "withdrawal issue",
                "Description": "The desired feature to withdraw LPT from L2 to L1 via Arbitrum Router will not work properly due to the missing interface on L2LPTGateway.",
                "Repair": "Implement the outboundTransfer() function with the same signature as the one used by the Arbitrum Router"
            },
            {
                "Location": "approve() function in L1Escrow.sol",
                "Type": "admin privilege abuse",
                "Description": "An address with DEFAULT_ADMIN_ROLE can approve an arbitrary amount of tokens to any address, posing a serious centralization risk.",
                "Repair": "Remove the approve() function and approve l1LPT to l1Gateway in the constructor"
            }
        ]
    }
]