[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "function claimRewards(address _to) external onlyManagerOrOwner",
                "Type": "Owner or Manager can rug rewards",
                "Description": "A malicious owner or manager can steal all Aave rewards that are meant for PoolTogether users.",
                "Repair": "Use a poolAddressesProviderRegistry-like contract to determine where the rewards should go, instead of letting an address be passed in"
            },
            {
                "Location": "function supplyTokenTo(uint256 _depositAmount, address _to)",
                "Type": "Loss of funds due to rounding",
                "Description": "When user uses supplyTokenTo() to deposit tokens and get share in FieldSource, because of rounding in division, the user gets a lower amount of share.",
                "Repair": "Only take the correct amount of user tokens to prevent loss due to rounding"
            },
            {
                "Location": "RewardsController contract",
                "Type": "Emission Manager can authorize users to claim rewards on behalf of the contract",
                "Description": "Authorized claimers can claim rewards on behalf of the AaveV3YieldSource contract, effectively bypassing any restrictions put in place by this proprietary contract and its claimRewards() function.",
                "Repair": "Ensure that the RewardsController contract is owned by PoolTogether's multisig"
            },
            {
                "Location": "function supplyTokenTo(uint256 _depositAmount, address _to)",
                "Type": "Deposit amount requires to be updated to contract balance increase",
                "Description": "Every time transferFrom or transfer function in ERC20 standard is called, there is a possibility that the underlying smart contract did not transfer the exact amount entered.",
                "Repair": "Find out contract balance increase/decrease after the transfer to prevent re-entrancy attack vector"
            },
            {
                "Location": "AaveV3YieldSource.sol",
                "Type": "Price manipulation",
                "Description": "A malicious early user/attacker can manipulate the vault's pricePerShare to take an unfair share of future users' deposits.",
                "Repair": "Require a minimal amount of share tokens to be minted for the first minter, and send a portion of the initial mints as a reserve to the DAO address so that the pricePerShare can be more resistant to manipulation. Also, consider adding require(_shares > 0, \"AaveV3YS/shares-gt-zero\"); before _burn(msg.sender, _shares);"
            },
            {
                "Location": "AaveV3YieldSource.sol",
                "Type": "Incorrect share conversions",
                "Description": "Yield source does not correctly calculate share conversions. Incorrect share conversions lead to incorrect pricing of assets and loss of principal.",
                "Repair": "One share must always equal one token. Consider removing the conversion function and ensuring that the share token is always equal to the underlying asset token."
            }
        ]
    }
]