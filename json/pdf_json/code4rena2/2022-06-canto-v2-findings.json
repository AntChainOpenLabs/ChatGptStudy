[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Location": "CNote.sol and Note.sol contracts",
                "Type": "No cap on borrowing Note",
                "Description": "The fact that there is no cap on the amount of Note that can be borrowed makes the Oracle Extractable Value unlimited. An attacker could borrow Note without limit, and empty all pools related to Note and all Note-related value, instantly killing the stablecoin.",
                "Repair": "Add a cap on how many Notes can be borrowed or add an hourly borrowing limit"
            },
            {
                "Location": "ERC20.sol contract",
                "Type": "Incorrect total supply in ERC20",
                "Description": "If _totalSupply is initialized to something different than 0, it could lead to an inaccurate total supply, and could easily break integrations, computations of market cap, etc.",
                "Repair": "Set _initialSupply to 0 and remove the assignment from the constructor"
            },
            {
                "Location": "Comptroller.sol contract",
                "Type": "Admin can break functionality through WETH address",
                "Description": "If the admin is set to WETH address mistakenly, user could not claim through Comptroller.sol#L1381. Admin can break the protocol.",
                "Repair": "Set WETH address through initializer or change it through governance"
            },
            {
                "Location": "CNote.sol contract",
                "Type": "Denial of service in CNote.doTransferOut",
                "Description": "The doTransferOut method is susceptible to denial of service. Anyone, via a simple transfer of underlying can deny the functionality of doTransferOut. Because the function is used in multiple functions inherited from CToken, and the griefing can be easily run by anyone.",
                "Repair": "Use balance differences instead of the 0 check"
            },
            {
                "Location": "NoteInterest.sol contract",
                "Type": "Multiple initialization in NoteInterest",
                "Description": "The initialize method of the contract NoteInterest can be initialized multiple times. Nothing prevents it from being initialized again and altering the initial values of the contract. This allows the government, unnecessarily, to be able to perform attacks such as altering the logic of the updateBaseRate method.",
                "Repair": "Add a require to check that was not already initialized"
            },
            {
                "Location": "lending-market-v2/contracts/Stableswap/BaseV1-periphery.sol",
                "Type": "LP pair price manipulation",
                "Description": "The underlying price for LP pool pair can be manipulated, which may lead to the exploit of the pool by a malicious user.",
                "Repair": "Use a different approach to calculate the LP price or follow the guide linked in the report"
            },
            {
                "Location": "contracts/Accountant/AccountantDelegate.sol",
                "Type": "Missing zero address check",
                "Description": "There is potential to call initialize() on AccountantDelegate.sol more than once because the require statement only checks if the state variables != address(0)",
                "Repair": "Check if the parameters != zero address or use openzepplen initializable"
            },
            {
                "Location": "lending-market-v2/contracts/Stableswap/BaseV1-core.sol",
                "Type": "TWAP oracle manipulation",
                "Description": "TWAP oracle easily manipulated. periodSize is set to 0 meaning that the oracle will take a new observation every single block, which would allow an attacker to easily flood the TWAP oracle and manipulate the price.",
                "Repair": "Increase periodSize to be greater than 0, 1800 is typically standard"
            },
            {
                "Location": "lending-market-v2/contracts/Stableswap/BaseV1-periphery.sol",
                "Type": "Deadline not working",
                "Description": "The ensure modifier is commented, so deadlines will not work when passing orders, breaking this functionality.",
                "Repair": "Uncomment the ensure modifier"
            },
            {
                "Location": "contracts/CErc20Delegator.sol",
                "Type": "Non-view function called with staticcall",
                "Description": "When using CToken implementation with CErc20Delegator, the functions borrowRatePerBlock and supplyRatePerBlock will revert when the underlying functions try to update some states.",
                "Repair": "Instead of using delegateToViewImplementation use delegateToImplementation. Alternatively, implement view functions to query these rates in NoteInterest.sol and CToken.sol"
            },
            {
                "Location": "BaseV1-periphery.sol",
                "Type": "Inaccurate price oracle",
                "Description": "Underlying asset price oracle for CToken in BaseV1-periphery is inaccurate.",
                "Repair": "Return the correct value of 10**18 instead of 1"
            },
            {
                "Location": "AccountantDelegate.sol",
                "Type": "Denial of Service",
                "Description": "The sweepInterest function sweeps an incorrect number of cnote.",
                "Repair": "Use the correct variable cNoteToSweep instead of amtToSweep"
            },
            {
                "Location": "NoteInterest.sol and CToken.sol",
                "Type": "Incorrect interest rate calculation",
                "Description": "getBorrowRate returns rate per year instead of per block.",
                "Repair": "Return the correct value of baseRatePerBlock instead of baseRatePerYear"
            },
            {
                "Location": "AccountantDelegate.sol",
                "Type": "Incorrect number of cnote swept",
                "Description": "AccountantDelegate: The sweepInterest function sweeps an incorrect number of cnote.",
                "Repair": "Use the correct variable cNoteToSweep instead of amtToSweep"
            }
        ]
    }
]