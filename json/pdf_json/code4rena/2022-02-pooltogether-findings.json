[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-01",
                "Location": [
                    "//solidity\nfunction _multicall(bytes[] calldata _data) internal virtual returns (bytes[] memory results) {\n  results = new bytes[(_data.length);\n  for (uint256 i = 0; i < _data.length; i++) {\n    results[i] = Address.functionDelegateCall(address(this), _data[i]);\n  }\n  return results;\n}\n",
                    "//solidity\nfunction _permitAndMulticall(\n  IERC20Permit _permitToken,\n  address _from,\n  uint256 _amount,\n  Signature calldata _permitSignature,\n  bytes[] calldata _data\n) internal {\n  _permitToken.permit(\n    _from,\n    address(this),\n    _amount,\n    _permitSignature.deadline,\n    _permitSignature.v,\n    _permitSignature.r,\n    _permitSignature.s\n  );\n\n  _multicall(_data);\n}\n"
                ],
                "Type": "  permitAndMulticall()  May Be Used to Steal Funds Or as a Denial Of Service if  _from  Is Not The Message Sender",
                "Description": "\n\nPermitAndMulticall.sol#L46-L64(https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/PermitAndMulticall.sol#L46-L64)<br\nPermitAndMulticall.sol#L31-L37(https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/PermitAndMulticall.sol#L31-L37)<br\nTWABDelegator.sol#L438-L445(https://github.com/pooltogether/v4-twab-delegator/blob/2b6d42506187dd7096043e2dfec65fa06ab18577/contracts/TWABDelegator.sol#L438-L445)\n\n\nWhen the _from address is not the msg.sender _multiCall() will be made on behalf of the msg.sender. As a result each of the functions called by multiCall() will be made on behalf of msg.sender and not _from.\n\nIf functions such as transfer() or unstake() are called msg.sender will be the original caller which would transfer the attacker the funds if the to field is set to an attackers address.\n\nFurthermore, if an attacker we to call permitAndMulticall() before the _from user they may use their signature and nonce combination. As a nonce is only allowe to be used once the siganture will no longer be valid and _permitToken.permit() will fail on the second call.\n\nAn attacker may use this as a Denial of Service (DoS) attack by continually front-running permitAndCall() using other users signatures.\n\nsolidity\nfunction _multicall(bytes[] calldata _data) internal virtual returns (bytes[] memory results) {\n  results = new bytes[(_data.length);\n  for (uint256 i = 0; i < _data.length; i++) {\n    results[i] = Address.functionDelegateCall(address(this), _data[i]);\n  }\n  return results;\n}\n\nsolidity\nfunction _permitAndMulticall(\n  IERC20Permit _permitToken,\n  address _from,\n  uint256 _amount,\n  Signature calldata _permitSignature,\n  bytes[] calldata _data\n) internal {\n  _permitToken.permit(\n    _from,\n    address(this),\n    _amount,\n    _permitSignature.deadline,\n    _permitSignature.v,\n    _permitSignature.r,\n    _permitSignature.s\n  );\n\n  _multicall(_data);\n}\n\n\n",
                "Repair": "\nConsider updating the _from field to be the msg.sender in permitAndMulticall() (or alternatively do this in _permitAndMulticall() to save some gas).\nsolidity\nfunction permitAndMulticall(\n  uint256 _amount,\n  Signature calldata _permitSignature,\n  bytes[] calldata _data\n) external {\n  _permitAndMulticall(IERC20Permit(address(ticket)), msg.sender, _amount, _permitSignature, _data);\n}\n\n\nPierrickGT (PoolTogether) confirmed and resolved(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20#issuecomment-1057474934):\n  PR: https://github.com/pooltogether/v4-twab-delegator/pull/29\n\nPierrickGT (PoolTogether) disagreed with Medium severity and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20#issuecomment-1058307757):\n  Should be labelled as a 3 (High Risk) issue because an attacker could steal the funds.\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20#issuecomment-1060617163):\n  I'm not exactly sure how this might be abused to steal funds. By front-running a call permitAndMulticall() with the same _from account, an attacker is able to use up the user's nonce and DoS their transactions. However, an attacker CAN control the _data parsed to the _multicall() function and delegate call to the TWABDelegator.sol contract. Although, in this case msg.sender will be the attacker and not the delegatee.\n \n  As such, any call to transfer a delegation to another account will fail as the delegation is computed based off msg.sender and _slot.\n \n  Could you confirm if there is a viable attack vector that would result in lost funds? @PierrickGT \n\nPierrickGT (PoolTogether) commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20#issuecomment-1061952284):\n You are right, the only attack vector possible would be with the updateDelegatee function since an attacker could pass a _delegatee address and we compute the delegation with the passed _delegator param.\n https://github.com/pooltogether/v4-twab-delegator/blob/60ae14e11947f8c896c1fef8f4d19ee714719383/contracts/TWABDelegator.sol#L265\n \n Funds wouldn't be at risk but delegated to the attacker address.\n So I think the 2 (Med Risk) label makes sense in this case since funds are not directly at risk but the attacker would enjoy better odds of winning.\n I've removed the disagree with severity label.\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/20#issuecomment-1062612286):\n  As per the above comment, I will leave this as 2 (Med Risk). The exploit does not lead to a loss of funds but can be abused to DoS this functionality and enjoy better odds of winning.\n\n\n\n*\n\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 9 reports were submitted by wardens detailing low risk and non-critical issues. The reports highlighted below received the top 3 scores from the judge and are by the following wardens/teams: 1) WatchPug(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/27); 2) CertoraInc(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/10); and 3) hickuphh3(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16).\n\n_The following wardens also submitted reports: gzeon(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/28), Rhynorater(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/40), Dravee(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/35), chunter(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/19), jayjonah8(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/1), and robee(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/14)._\n\n\n"
            },
            {
                "Name": "L-01",
                "Location": [
                    "//solidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  for (uint256 i = 0; i < calls.length; i++) {\n    response[i] = _executeCall(calls[i].to, calls[i].value, calls[i].data);\n  }\n  return response;\n}\n"
                ],
                "Type": " delegator and/or representative should be allowed for arbitrary code execution besides restricted operations during unlocked period",
                "Description": "\n\nDelegation.sol#L39-L46(https://github.com/pooltogether/v4-twab-delegator/blob/21bb53b2ea54a248bbd1d3170dbadd3a0c83d874/contracts/Delegation.sol#L39-L46)\n\n\nDelegation is a contract deployed dedicated to holding the ticket tokens for the delegator and they can then be delegate to a delegatee.\n\nOn the Delegation contract, there is a method named executeCalls() designed for \"Executes calls on behalf of this contract\" which allows arbitrary code execution for the owner.\n\nHowever, we found that the owner of Delegation will always be TWABDelegator, and the TWABDelegator will only use Delegation.sol#executeCalls() to call one particular address: the ticket address, and for only two methods: transfer() and delegate().\n\nFurthermore, even though in Delegation.sol#executeCalls(), calls[i].value is used, the function is not being marked as payable, that makes it hard for calls that requires eth payments.\n\nDelegation.sol#L39-L46(https://github.com/pooltogether/v4-twab-delegator/blob/21bb53b2ea54a248bbd1d3170dbadd3a0c83d874/contracts/Delegation.sol#L39-L46)\n\nsolidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  for (uint256 i = 0; i < calls.length; i++) {\n    response[i] = _executeCall(calls[i].to, calls[i].value, calls[i].data);\n  }\n  return response;\n}\n\n\nWhile the ticket is being delegated through TWABDelegator, they won't be able to retrieve the tickets back until the lockUntil, without the ability to make arbitrary code execution, the delegator may miss some of the potential benefits as a holder of the ticket tokens, for example, an airdrop to all holders of the ticket tokens, or an NFT made mintable only for certain ticket holders.\n\n",
                "Repair": "\nConsider adding a new method on TWABDelegator:\n\nsolidity\nfunction executeCalls(\n  address _delegator,\n  uint256 _slot,\n  Delegation.Call[] memory calls\n) external payable returns (bytes[] memory) {\n  _requireDelegatorOrRepresentative(_delegator);\n  Delegation _delegation = Delegation(_computeAddress(_delegator, _slot));\n\n  if (block.timestamp < _delegation.lockUntil()) {\n    for (uint256 i = 0; i < calls.length; i++) {\n      if (calls[i].to == address(ticket)) {\n        revert(\"TWABDelegator/delegation-locked\");\n      }\n    }\n  }\n\n  return _delegation.executeCalls{value: msg.value}(_calls);\n}\n\n\nAnd also, consider making Delegation.sol#executeCalls() a payable method.\n\nPierrickGT (PoolTogether) acknowledged and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/27#issuecomment-1058241764):\n  The issue outlined by the warden is relevant but users won't need to execute arbitrary calls cause potential rewards given out to ticket holders will be handled by our TWABRewards contract.\n This contract retrieves users TWAB (Time-Weighted Average Balance) for a given period of time and calculate the amount of rewards they are eligible to. \n Users can then claimRewards on behalf of others. So delegatees will be able to claim their rewards and delegators could claim on their behalf.\n \n TwabRewards.sol#L410(https://github.com/pooltogether/v4-periphery/blob/348d2bf7cfcf5750bad4aae63b8ade5a2a45f188/contracts/TwabRewards.sol#L410)<br\n ITwabRewards.sol#L94(https://github.com/pooltogether/v4-periphery/blob/348d2bf7cfcf5750bad4aae63b8ade5a2a45f188/contracts/interfaces/ITwabRewards.sol#L94)<br\n \n For more informations about how the TWAB works, here is some documentation:\n Time-Weighted Average Balance(https://dev.pooltogether.com/protocol/architecture/time-weighted-average-balance)\n Better Reward Distribution(https://medium.com/pooltogether/better-reward-distribution-65d900f3cef0)\n \n Also, by restricting calls to the transfer and delegate methods on the ticket, we limit the attack surface and any attack vector we may not have thought about.\n \n For the reasons above, I've acknowledged the issue but we won't implement the proposed solution\n\n0xleastwood (judge) decreased severity to Low and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/27#issuecomment-1062705166):\n  I don't really see a case where _delegateCall() or _transferCall() will need to have some ETH attached with it. They are solely dealing with the Ticket ERC20 token and updating delegation data. Considering the fact that rewards are handled by a separate contract, I think its fair to downgrade this to 1 (Low Risk).\n\n\n\n*\n\n\n"
            },
            {
                "Name": "N-01",
                "Location": [],
                "Type": " Tickets can get locked",
                "Description": "\nif a user calls transferDelegationTo with the address of the TWABDelegator contract as the to parameter, the tokens will be transferred to the address without minting the user the stake token, so maybe you can think of adding this functionality. I know that there is the withdrawDelegationToStake function for that, but that can be nice to enable it that way too.\n\nPierrickGT (PoolTogether) confirmed, but disagreed with severity and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/10#issuecomment-1057131932):\n The tickets would actually get stuck in the contract. I've added a require to avoid transferring directly to the contract.\n\n Based on the severity criteria, I think this one should be labelled as a 2 (Med Risk) issue. Would be an error from the user interacting with the functions but funds would indeed be at risk, not direct but at risk.\n\n PR: pooltogether/v4-twab-delegator#27\n\n0xleastwood (judge) commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/10#issuecomment-1066030370):\n I think the issue highlighted is more in-line with incorrect state handling, so I'll leave the severity as is.\n\n\n\n*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "L-02",
                "Location": [],
                "Type": " Incorrect comment on  transferDelegationTo() ",
                "Description": "\nTWABDelegator.sol#L370-L371(https://github.com/pooltogether/v4-twab-delegator/blob/master/contracts/TWABDelegator.sol#L370-L371)\n\nThe comments say that the withdrawn tickets are transferred to the caller / delegator wallet, but are actually transferred to the _to address.\n\n",
                "Repair": "\n* @notice Withdraw an _amount of tickets from a delegation. The delegator is assumed to be the caller.\n* @dev Tickets are sent directly to the passed _to address\n\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16#issuecomment-1054830545):\n PR: pooltogether/v4-twab-delegator#21(https://github.com/pooltogether/v4-twab-delegator/pull/21)\n\n\n\n*\n\n\n"
            },
            {
                "Name": "L-03",
                "Location": [],
                "Type": " Incorrect comment on  TransferredDelegation  event",
                "Description": "\nTWABDelegator.sol#L125-L136(https://github.com/pooltogether/v4-twab-delegator/blob/master/contracts/TWABDelegator.sol#L125-L136)\n\nIn relation to L03, the TransferredDelegation event\n\n    is incorrectly commented that the withdrawn tickets are transferred to the caller / delegator wallet\n    lacks a description about the to indexed parameter.\n\n",
                "Repair": "solidity\n/\n * @notice Emitted when a delegator withdraws an amount of tickets from a delegation to a specified wallet.\n * @param delegator Address of the delegator\n * @param slot  Slot of the delegation\n * @param amount Amount of tickets withdrawn\n * @param to Recipient address of withdrawn tickets\n */\n  event TransferredDelegation(\n    address indexed delegator,\n    uint256 indexed slot,\n    uint256 amount,\n    address indexed to\n  );\n\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16#issuecomment-1054830545):\n PR: pooltogether/v4-twab-delegator#21(https://github.com/pooltogether/v4-twab-delegator/pull/21)\n\n\n\n*\n\n\n"
            },
            {
                "Name": "L-04",
                "Location": [],
                "Type": " Incorrect comment on  DelegationFundedFromStake  event",
                "Description": "\nTWABDelegator.sol#L102(https://github.com/pooltogether/v4-twab-delegator/blob/master/contracts/TWABDelegator.sol#L102)\n\nThe DelegationFundedFromStake() allows a representative or delegator himself to fund a delegation contract using the delegator\u2019s stake. The user in the DelegationFundedFromStake event refers to msg.sender. Since the funds are coming solely from the delegator, its description isn\u2019t entirely correct.\n\n",
                "Repair": "@param user Address of the user who pulled funds from the delegator to the delegation\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16#issuecomment-1054830545):\n PR: pooltogether/v4-twab-delegator#21(https://github.com/pooltogether/v4-twab-delegator/pull/21)\n\n\n\n*\n\n\n"
            },
            {
                "Name": "N-02",
                "Location": [],
                "Type": " Extra whitespace in slot description of  WithdrewDelegationToStake()  event",
                "Description": "\nTWABDelegator.sol#L114(https://github.com/pooltogether/v4-twab-delegator/blob/master/contracts/TWABDelegator.sol#L114)\n\nThere is an additional spacing between slot and Slot.\n\n",
                "Repair": "Remove the spacing to become: * @param slot Slot of the delegation\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16#issuecomment-1054830545):\n PR: pooltogether/v4-twab-delegator#21(https://github.com/pooltogether/v4-twab-delegator/pull/21)\n\n\n\n*\n\n\n"
            },
            {
                "Name": "N-03",
                "Location": [],
                "Type": " TWABDelegator: Consider renaming  _delegateCall()  to  _setDelegateeCall() ",
                "Description": "\nTWABDelegator.sol#L519(https://github.com/pooltogether/v4-twab-delegator/blob/master/contracts/TWABDelegator.sol#L519)\n\n_delegateCall() could easily be confused for the inbuilt delegatecall() method. I recommend renaming it to something more distinguishable like _setDelegateeCall().\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/16#issuecomment-1054830545):\n PR: pooltogether/v4-twab-delegator#21(https://github.com/pooltogether/v4-twab-delegator/pull/21)\n\n\n\n*\n\n# Gas Optimizations\n\nFor this contest, 17 reports were submitted by wardens detailing gas optimizations. The report highlighted below(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/9) by warden team CertoraInc received the top score from the judge.\n\n_The following wardens also submitted reports: Dravee(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/36), nascent(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/33), IllIllI(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/38), WatchPug(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/31), robee(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/15), Tomio(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/32), sorrynotsorry(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/22), kenta(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/41), gzeon(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/30), rfa(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/44), z3s(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/25), Omik(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/45), 0x1f8b(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/37), ye0lde(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/39), pedroais(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/48), and hickuphh3(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/17)._\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  for (uint256 i = 0; i < calls.length; i++) {\n    response[i] = _executeCall(calls[i].to, calls[i].value, calls[i].data);\n  }\n  return response;\n}\n",
                    "//solidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  uint256 length = calls.length;\n  Call memory call;\n  for (uint256 i; i < length; ++i) {\n    call = calls[i];\n    response[i] = _executeCall(call.to, call.value, call.data);\n  }\n  return response;\n}\n"
                ],
                "Type": " Loop in  Delegation  and  PermitAndMulticall  contracts",
                "Description": "\nLoops can be optimized in several ways. Let's take for example the loop in the executeCalls function of the Delegation contract.\n\nsolidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  for (uint256 i = 0; i < calls.length; i++) {\n    response[i] = _executeCall(calls[i].to, calls[i].value, calls[i].data);\n  }\n  return response;\n}\n\n\nTo optimize this loop and make it consume less gas, we can do the foloowing things:\n\n1.  Use ++i instead of i++, which is a cheaper operation (in this case there is no difference between i++ and ++i because we dont use the return value of this expression, which is the only difference between these two expression).\n2.  Save the calls array length in a local variable instead of accessing it in every iteration.\n3.  Save calls[i] in a local variable instead of accessing it 3 times in every iteration. This will save accssing the array's ith element 3 times in every iteration ,which requires an address calculation.\n4.  There's no need to initialize i to its default value, it will be done automatically and it will consume more gas if it will be done (I know, sounds stupid, but trust me it works).\n\nSo after applying all these changes, the loop will look something like this:\n\nsolidity\nfunction executeCalls(Call[] calldata calls) external onlyOwner returns (bytes[] memory) {\n  bytes[] memory response = new bytes[(calls.length);\n  uint256 length = calls.length;\n  Call memory call;\n  for (uint256 i; i < length; ++i) {\n    call = calls[i];\n    response[i] = _executeCall(call.to, call.value, call.data);\n  }\n  return response;\n}\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\nfunction _computeAddress(address _delegator, uint256 _slot) internal view returns (address) {\n  return _computeAddress(_computeSalt(_delegator, bytes32(_slot)));\n}\n\nfunction _computeLockUntil(uint96 _lockDuration) internal view returns (uint96) {\n  return uint96(block.timestamp) + _lockDuration;\n}\n\nfunction _requireDelegatorOrRepresentative(address _delegator) internal view {\n  require(\n    _delegator == msg.sender || representatives[_delegator][msg.sender] == true,\n    \"TWABDelegator/not-delegator-or-rep\"\n  );\n}\n\nfunction _requireDelegateeNotZeroAddress(address _delegatee) internal pure {\n  require(_delegatee != address(0), \"TWABDelegator/dlgt-not-zero-adr\");\n}\n\nfunction _requireAmountGtZero(uint256 _amount) internal pure {\n  require(_amount  0, \"TWABDelegator/amount-gt-zero\");\n}\n\nfunction _requireDelegatorNotZeroAddress(address _delegator) internal pure {\n  require(_delegator != address(0), \"TWABDelegator/dlgtr-not-zero-adr\");\n}\n\nfunction _requireRecipientNotZeroAddress(address _to) internal pure {\n  require(_to != address(0), \"TWABDelegator/to-not-zero-addr\");\n}\n\nfunction _requireDelegationUnlocked(Delegation _delegation) internal view {\n  require(block.timestamp = _delegation.lockUntil(), \"TWABDelegator/delegation-locked\");\n}\n\nfunction _requireContract(address _address) internal view {\n  require(_address.isContract(), \"TWABDelegator/not-a-contract\");\n}\n\nfunction _requireLockDuration(uint256 _lockDuration) internal pure {\n  require(_lockDuration <= MAX_LOCK, \"TWABDelegator/lock-too-long\");\n}\n"
                ],
                "Type": " Inline all these little functions",
                "Description": "\nDefining all these little functions cause 2 things:\n\n1.  contract's code size gets bigger\n2.  the function calls consumes more gas than exectuing it as an inlined function (part of the code, without the function call)\n\nSo in order to save gas, I would recommend to inline these functions.\n\nsolidity\nfunction _computeAddress(address _delegator, uint256 _slot) internal view returns (address) {\n  return _computeAddress(_computeSalt(_delegator, bytes32(_slot)));\n}\n\nfunction _computeLockUntil(uint96 _lockDuration) internal view returns (uint96) {\n  return uint96(block.timestamp) + _lockDuration;\n}\n\nfunction _requireDelegatorOrRepresentative(address _delegator) internal view {\n  require(\n    _delegator == msg.sender || representatives[_delegator][msg.sender] == true,\n    \"TWABDelegator/not-delegator-or-rep\"\n  );\n}\n\nfunction _requireDelegateeNotZeroAddress(address _delegatee) internal pure {\n  require(_delegatee != address(0), \"TWABDelegator/dlgt-not-zero-adr\");\n}\n\nfunction _requireAmountGtZero(uint256 _amount) internal pure {\n  require(_amount  0, \"TWABDelegator/amount-gt-zero\");\n}\n\nfunction _requireDelegatorNotZeroAddress(address _delegator) internal pure {\n  require(_delegator != address(0), \"TWABDelegator/dlgtr-not-zero-adr\");\n}\n\nfunction _requireRecipientNotZeroAddress(address _to) internal pure {\n  require(_to != address(0), \"TWABDelegator/to-not-zero-addr\");\n}\n\nfunction _requireDelegationUnlocked(Delegation _delegation) internal view {\n  require(block.timestamp = _delegation.lockUntil(), \"TWABDelegator/delegation-locked\");\n}\n\nfunction _requireContract(address _address) internal view {\n  require(_address.isContract(), \"TWABDelegator/not-a-contract\");\n}\n\nfunction _requireLockDuration(uint256 _lockDuration) internal pure {\n  require(_lockDuration <= MAX_LOCK, \"TWABDelegator/lock-too-long\");\n}\n\n\nPierrickGT (PoolTogether) confirmed and commented(https://github.com/code-423n4/2022-02-pooltogether-findings/issues/9#issuecomment-1054644165):\n  PR: pooltogether/v4-twab-delegator/pull#18(https://github.com/pooltogether/v4-twab-delegator/pull/18)\n \n We've implemented the different fixes regarding the for loops, except for the ++i recommendation, we kept i++ for better code clarity.\n About the inline suggestion, we prefer to keep the code in reusable functions to keep a more readable and easier to update codebase than if we had to repeat our code through inlining.\n\n\n\n*\n\n\n",
                "Repair": ""
            }
        ]
    }
]