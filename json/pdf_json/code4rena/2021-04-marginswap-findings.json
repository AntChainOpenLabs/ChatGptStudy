[
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./CrossMarginLiquidation.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\n    constructor(address _peg, address _roles)\n        RoleAware(_roles)\n        PriceAware(_peg)\n    {\n        liquidationThresholdPercent = 110;\n        coolingOffPeriod = 20;\n        leveragePercent = 300;\n    }\n\n    /// @dev admin function to set the token cap\n    function setTokenCap(address token, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Caller not authorized to set token cap\"\n        );\n        tokenCaps[token] = cap;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeverage(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm a deposit to an account\n    function registerDeposit(\n        address trader,\n        address token,\n        uint256 depositAmount\n    ) external override returns (uint256 extinguishableDebt) {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n        account.lastDepositBlock = block.number;\n\n        if (account.borrowed[token] > 0) {\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\n            extinguishDebt(account, token, extinguishableDebt);\n            totalShort[token] -= extinguishableDebt;\n        }\n\n        // no overflow because depositAmount >= extinguishableDebt\n        uint256 addedHolding = depositAmount - extinguishableDebt;\n        _registerDeposit(account, token, addedHolding);\n    }\n\n    function _registerDeposit(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 addedHolding\n    ) internal {\n        addHolding(account, token, addedHolding);\n\n        totalLong[token] += addedHolding;\n        require(\n            tokenCaps[token] >= totalLong[token],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n    }\n\n    /// @dev gets called by router to affirm borrowing event\n    function registerBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerBorrow(account, borrowToken, borrowAmount);\n    }\n\n    function _registerBorrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        totalShort[borrowToken] += borrowAmount;\n        totalLong[borrowToken] += borrowAmount;\n        require(\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        borrow(account, borrowToken, borrowAmount);\n    }\n\n    /// @dev gets called by router to affirm withdrawal of tokens from account\n    function registerWithdrawal(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\n    }\n\n    function _registerWithdrawal(\n        CrossMarginAccount storage account,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) internal {\n        require(\n            block.number > account.lastDepositBlock + coolingOffPeriod,\n            \"To prevent attacks you must wait until your cooling off period is over to withdraw\"\n        );\n\n        totalLong[withdrawToken] -= withdrawAmount;\n        // throws on underflow\n        account.holdings[withdrawToken] =\n            account.holdings[withdrawToken] -\n            withdrawAmount;\n        require(\n            positiveBalance(account),\n            \"Account balance is too low to withdraw\"\n        );\n    }\n\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\n    function registerOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        _registerDeposit(account, depositToken, depositAmount);\n        _registerBorrow(account, borrowToken, withdrawAmount);\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\n\n        account.lastDepositBlock = block.number;\n    }\n\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\n    function registerTradeAndBorrow(\n        address trader,\n        address tokenFrom,\n        address tokenTo,\n        uint256 inAmount,\n        uint256 outAmount\n    )\n        external\n        override\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        if (account.borrowed[tokenTo] > 0) {\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\n            extinguishDebt(account, tokenTo, extinguishableDebt);\n            totalShort[tokenTo] -= extinguishableDebt;\n        }\n        totalLong[tokenFrom] -= inAmount;\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\n        require(\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        uint256 sellAmount = inAmount;\n        if (inAmount > account.holdings[tokenFrom]) {\n            sellAmount = account.holdings[tokenFrom];\n            /// won't overflow\n            borrowAmount = inAmount - sellAmount;\n\n            totalShort[tokenFrom] += borrowAmount;\n            require(\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\n                \"Exceeding global exposure cap to token -- try again later\"\n            );\n\n            borrow(account, tokenFrom, borrowAmount);\n        }\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\n    }\n\n    /// @dev can get called by router to register the dissolution of an account\n    function registerLiquidation(address trader) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        require(\n            loanInPeg(account, false) == 0,\n            \"Can't liquidate currently borrowing account\"\n        );\n\n        deleteAccount(account);\n    }\n\n    /// @dev view function to display account held assets state\n    function getHoldingAmounts(address trader)\n        external\n        view\n        override\n        returns (\n            address[] memory holdingTokens,\n            uint256[] memory holdingAmounts\n        )\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        holdingTokens = account.holdingTokens;\n\n        holdingAmounts = new uint256[](account.holdingTokens.length);\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\n            address tokenAddress = holdingTokens[idx];\n            holdingAmounts[idx] = account.holdings[tokenAddress];\n        }\n    }\n\n    /// @dev view function to display account borrowing state\n    function getBorrowAmounts(address trader)\n        external\n        view\n        override\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        borrowTokens = account.borrowTokens;\n\n        borrowAmounts = new uint256[](account.borrowTokens.length);\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\n            address tokenAddress = borrowTokens[idx];\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\n                account.borrowed[tokenAddress],\n                tokenAddress,\n                account.borrowedYieldQuotientsFP[tokenAddress]\n            );\n        }\n    }\n\n    /// @dev view function to get loan amount in peg\n    function viewLoanInPeg(address trader)\n        external\n        view\n        returns (uint256 amount)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return\n            viewTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"../interfaces/IMarginTrading.sol\";\nimport \"./Lending.sol\";\nimport \"./Admin.sol\";\nimport \"./IncentivizedHolder.sol\";\n\n/// @title Top level transaction controller\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\n    /// @notice wrapped ETH ERC20 contract\n    address public immutable WETH;\n    uint256 public constant mswapFeesPer10k = 10;\n\n    /// emitted when a trader depoits on cross margin\n    event CrossDeposit(\n        address trader,\n        address depositToken,\n        uint256 depositAmount\n    );\n    /// emitted whenever a trade happens\n    event CrossTrade(\n        address trader,\n        address inToken,\n        uint256 inTokenAmount,\n        uint256 inTokenBorrow,\n        address outToken,\n        uint256 outTokenAmount,\n        uint256 outTokenExtinguish\n    );\n    /// emitted when a trader withdraws funds\n    event CrossWithdraw(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    );\n    /// emitted upon sucessfully borrowing\n    event CrossBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    );\n\n    /// emmited on deposit-borrow-withdraw\n    event CrossOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    );\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Trade has expired\");\n        _;\n    }\n\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\n        WETH = _WETH;\n    }\n\n    /// @notice traders call this to deposit funds on cross margin\n    function crossDeposit(address depositToken, uint256 depositAmount)\n        external\n    {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                depositToken,\n                depositAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(depositToken, extinguishAmount);\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\n    }\n\n    /// @notice deposit wrapped ehtereum into cross margin account\n    function crossDepositETH() external payable {\n        Fund(fund()).depositToWETH{value: msg.value}();\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                WETH,\n                msg.value\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(WETH, extinguishAmount);\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, WETH, msg.value);\n    }\n\n    /// @notice withdraw deposits/earnings from cross margin account\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\n        external\n    {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            withdrawToken,\n            withdrawAmount\n        );\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\n    }\n\n    /// @notice withdraw ethereum from cross margin account\n    function crossWithdrawETH(uint256 withdrawAmount) external {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            WETH,\n            withdrawAmount\n        );\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\n    }\n\n    /// @notice borrow into cross margin trading account\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\n        IMarginTrading(marginTrading()).registerBorrow(\n            msg.sender,\n            borrowToken,\n            borrowAmount\n        );\n\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\n    }\n\n    /// @notice convenience function to perform overcollateralized borrowing\n    /// against a cross margin account.\n    /// @dev caution: the account still has to have a positive balaance at the end\n    /// of the withdraw. So an underwater account may not be able to withdraw\n    function crossOvercollateralizedBorrow(\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        Lending(lending()).registerBorrow(borrowToken, withdrawAmount);\n        IMarginTrading(marginTrading()).registerOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n\n        Fund(fund()).withdraw(borrowToken, msg.sender, withdrawAmount);\n        stakeClaim(msg.sender, borrowToken, withdrawAmount);\n        emit CrossOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n    }\n\n    /// @notice close an account that is no longer borrowing and return gains\n    function crossCloseAccount() external {\n        (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\n            IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\n\n        // requires all debts paid off\n        IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\n\n        for (uint256 i; holdingTokens.length > i; i++) {\n            Fund(fund()).withdraw(\n                holdingTokens[i],\n                msg.sender,\n                holdingAmounts[i]\n            );\n        }\n    }\n\n    // **** SWAP ****\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory pairs,\n        address[] memory tokens,\n        address _to\n    ) internal virtual {\n        address outToken = tokens[tokens.length - 1];\n        uint256 startingBalance = IERC20(outToken).balanceOf(_to);\n        for (uint256 i; i < pairs.length; i++) {\n            (address input, address output) = (tokens[i], tokens[i + 1]);\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\n\n            uint256 amountOut = amounts[i + 1];\n\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0\n                    ? (uint256(0), amountOut)\n                    : (amountOut, uint256(0));\n\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n\n        uint256 endingBalance = IERC20(outToken).balanceOf(_to);\n        require(\n            endingBalance >= startingBalance + amounts[amounts.length - 1],\n            \"Defective AMM route; balances don't match\"\n        );\n    }\n\n    /// @dev internal helper swapping exact token for token on AMM\n    function _swapExactT4T(\n        uint256[] memory amounts,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    /// @notice make swaps on AMM using protocol funds, only for authorized contracts\n    function authorizedSwapExactT4T(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsOut(amountIn, pairs, tokens);\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    // @dev internal helper swapping exact token for token on on AMM\n    function _swapT4ExactT(\n        uint256[] memory amounts,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        // TODO minimum trade?\n        require(\n            amounts[0] <= amountInMax,\n            \"MarginRouter: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    //// @notice swap protocol funds on AMM, only for authorized\n    function authorizedSwapT4ExactT(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // calc fees\n        uint256 fees = takeFeesFromInput(amountIn);\n\n        // swap\n        amounts = UniswapStyleLib.getAmountsOut(amountIn - fees, pairs, tokens);\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amountIn,\n            amounts[amounts.length - 1]\n        );\n\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // swap\n        amounts = UniswapStyleLib.getAmountsIn(\n            amountOut + takeFeesFromOutput(amountOut),\n            pairs,\n            tokens\n        );\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amounts[0],\n            amountOut\n        );\n\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @dev helper function does all the work of telling other contracts\n    /// about a trade\n    function registerTrade(\n        address trader,\n        address inToken,\n        address outToken,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        (uint256 extinguishAmount, uint256 borrowAmount) =\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\n                trader,\n                inToken,\n                outToken,\n                inAmount,\n                outAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(outToken, extinguishAmount);\n            withdrawClaim(trader, outToken, extinguishAmount);\n        }\n        if (borrowAmount > 0) {\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\n            stakeClaim(trader, inToken, borrowAmount);\n        }\n\n        emit CrossTrade(\n            trader,\n            inToken,\n            inAmount,\n            borrowAmount,\n            outToken,\n            outAmount,\n            extinguishAmount\n        );\n    }\n\n    function getAmountsOut(\n        uint256 inAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsOut(inAmount, pairs, tokens);\n    }\n\n    function getAmountsIn(\n        uint256 outAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsIn(outAmount, pairs, tokens);\n    }\n\n    function takeFeesFromOutput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / 10_000;\n    }\n\n    function takeFeesFromInput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginTrading.sol",
            "MarginRouter.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [
                    "//solidity\npair.swap(0.0001 WETH, 1 WBTC, FUND, new bytes(0)); // can re-enter here\n"
                ],
                "Type": " Re-entrancy bug allows inflating balance",
                "Description": "\n\nOne can call the MarginRouter.crossSwapExactTokensForTokens function first with a fake contract disguised as a token pair:\ncrossSwapExactTokensForTokens(0.0001 WETH, 0, ATTACKER_CONTRACT], WETH, WBTC]). When the amounts are computed by the amounts = UniswapStyleLib.getAmountsOut(amountIn fees, pairs, tokens); call, the attacker contract returns fake reserves that yield 1 WBTC for the tiny input. The resulting amount is credited through registerTrade. Afterwards, _swapExactT4T([0.0001 WETH, 1 WBTC], 0, ATTACKER_CONTRACT], WETH, WBTC]) is called with the fake pair and token amounts. At some point _swap is called, the starting balance is stored in startingBalance, and the attacker contract call allows a re-entrancy:\n\nsolidity\npair.swap(0.0001 WETH, 1 WBTC, FUND, new bytes(0)); // can re-enter here\n\n\nFrom the ATTACKER_CONTRACT we re-enter the MarginRouter.crossSwapExactTokensForTokens(30 WETH, 0, WETH_WBTC_PAIR, WETH, WBTC]) function with the actual WETH < WBTC pair contract. All checks pass, the FUND receives the actual amount, the outer _swap continues execution after the re-entrancy and the endingBalance = startingBalance + amounts[amounts.length 1] check passes as well because the inner swap successfully deposited these funds. We end up doing 1 real trade but being credited twice the output amount.\n\nThis allows someone to be credited multiples of the actual swap result. This can be repeated many times and finally, all tokens can be stolen.\n\n",
                "Repair": "Recommend adding re-entrancy guards (from OpenZeppelin) to all external functions of MarginRouter. There might be several attack vectors of this function as the attacker controls many parameters. The idea of first doing an estimation with UniswapStyleLib.getAmountsOut(amountIn fees, pairs, tokens) and updating the user with these estimated amounts, before doing the actual trade, feels quite vulnerable to me. Consider removing the estimation and only doing the actual trade first, then calling registerTrade with the actual trade amounts returned.\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./CrossMarginLiquidation.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\n    constructor(address _peg, address _roles)\n        RoleAware(_roles)\n        PriceAware(_peg)\n    {\n        liquidationThresholdPercent = 110;\n        coolingOffPeriod = 20;\n        leveragePercent = 300;\n    }\n\n    /// @dev admin function to set the token cap\n    function setTokenCap(address token, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Caller not authorized to set token cap\"\n        );\n        tokenCaps[token] = cap;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeverage(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm a deposit to an account\n    function registerDeposit(\n        address trader,\n        address token,\n        uint256 depositAmount\n    ) external override returns (uint256 extinguishableDebt) {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n        account.lastDepositBlock = block.number;\n\n        if (account.borrowed[token] > 0) {\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\n            extinguishDebt(account, token, extinguishableDebt);\n            totalShort[token] -= extinguishableDebt;\n        }\n\n        // no overflow because depositAmount >= extinguishableDebt\n        uint256 addedHolding = depositAmount - extinguishableDebt;\n        _registerDeposit(account, token, addedHolding);\n    }\n\n    function _registerDeposit(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 addedHolding\n    ) internal {\n        addHolding(account, token, addedHolding);\n\n        totalLong[token] += addedHolding;\n        require(\n            tokenCaps[token] >= totalLong[token],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n    }\n\n    /// @dev gets called by router to affirm borrowing event\n    function registerBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerBorrow(account, borrowToken, borrowAmount);\n    }\n\n    function _registerBorrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        totalShort[borrowToken] += borrowAmount;\n        totalLong[borrowToken] += borrowAmount;\n        require(\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        borrow(account, borrowToken, borrowAmount);\n    }\n\n    /// @dev gets called by router to affirm withdrawal of tokens from account\n    function registerWithdrawal(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\n    }\n\n    function _registerWithdrawal(\n        CrossMarginAccount storage account,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) internal {\n        require(\n            block.number > account.lastDepositBlock + coolingOffPeriod,\n            \"To prevent attacks you must wait until your cooling off period is over to withdraw\"\n        );\n\n        totalLong[withdrawToken] -= withdrawAmount;\n        // throws on underflow\n        account.holdings[withdrawToken] =\n            account.holdings[withdrawToken] -\n            withdrawAmount;\n        require(\n            positiveBalance(account),\n            \"Account balance is too low to withdraw\"\n        );\n    }\n\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\n    function registerOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        _registerDeposit(account, depositToken, depositAmount);\n        _registerBorrow(account, borrowToken, withdrawAmount);\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\n\n        account.lastDepositBlock = block.number;\n    }\n\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\n    function registerTradeAndBorrow(\n        address trader,\n        address tokenFrom,\n        address tokenTo,\n        uint256 inAmount,\n        uint256 outAmount\n    )\n        external\n        override\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        if (account.borrowed[tokenTo] > 0) {\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\n            extinguishDebt(account, tokenTo, extinguishableDebt);\n            totalShort[tokenTo] -= extinguishableDebt;\n        }\n        totalLong[tokenFrom] -= inAmount;\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\n        require(\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        uint256 sellAmount = inAmount;\n        if (inAmount > account.holdings[tokenFrom]) {\n            sellAmount = account.holdings[tokenFrom];\n            /// won't overflow\n            borrowAmount = inAmount - sellAmount;\n\n            totalShort[tokenFrom] += borrowAmount;\n            require(\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\n                \"Exceeding global exposure cap to token -- try again later\"\n            );\n\n            borrow(account, tokenFrom, borrowAmount);\n        }\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\n    }\n\n    /// @dev can get called by router to register the dissolution of an account\n    function registerLiquidation(address trader) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        require(\n            loanInPeg(account, false) == 0,\n            \"Can't liquidate currently borrowing account\"\n        );\n\n        deleteAccount(account);\n    }\n\n    /// @dev view function to display account held assets state\n    function getHoldingAmounts(address trader)\n        external\n        view\n        override\n        returns (\n            address[] memory holdingTokens,\n            uint256[] memory holdingAmounts\n        )\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        holdingTokens = account.holdingTokens;\n\n        holdingAmounts = new uint256[](account.holdingTokens.length);\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\n            address tokenAddress = holdingTokens[idx];\n            holdingAmounts[idx] = account.holdings[tokenAddress];\n        }\n    }\n\n    /// @dev view function to display account borrowing state\n    function getBorrowAmounts(address trader)\n        external\n        view\n        override\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        borrowTokens = account.borrowTokens;\n\n        borrowAmounts = new uint256[](account.borrowTokens.length);\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\n            address tokenAddress = borrowTokens[idx];\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\n                account.borrowed[tokenAddress],\n                tokenAddress,\n                account.borrowedYieldQuotientsFP[tokenAddress]\n            );\n        }\n    }\n\n    /// @dev view function to get loan amount in peg\n    function viewLoanInPeg(address trader)\n        external\n        view\n        returns (uint256 amount)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return\n            viewTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"../interfaces/IMarginTrading.sol\";\nimport \"./Lending.sol\";\nimport \"./Admin.sol\";\nimport \"./IncentivizedHolder.sol\";\n\n/// @title Top level transaction controller\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\n    /// @notice wrapped ETH ERC20 contract\n    address public immutable WETH;\n    uint256 public constant mswapFeesPer10k = 10;\n\n    /// emitted when a trader depoits on cross margin\n    event CrossDeposit(\n        address trader,\n        address depositToken,\n        uint256 depositAmount\n    );\n    /// emitted whenever a trade happens\n    event CrossTrade(\n        address trader,\n        address inToken,\n        uint256 inTokenAmount,\n        uint256 inTokenBorrow,\n        address outToken,\n        uint256 outTokenAmount,\n        uint256 outTokenExtinguish\n    );\n    /// emitted when a trader withdraws funds\n    event CrossWithdraw(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    );\n    /// emitted upon sucessfully borrowing\n    event CrossBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    );\n\n    /// emmited on deposit-borrow-withdraw\n    event CrossOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    );\n\n    modifier ensure(uint256 deadline) {\n        require(deadline >= block.timestamp, \"Trade has expired\");\n        _;\n    }\n\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\n        WETH = _WETH;\n    }\n\n    /// @notice traders call this to deposit funds on cross margin\n    function crossDeposit(address depositToken, uint256 depositAmount)\n        external\n    {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                depositToken,\n                depositAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(depositToken, extinguishAmount);\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\n    }\n\n    /// @notice deposit wrapped ehtereum into cross margin account\n    function crossDepositETH() external payable {\n        Fund(fund()).depositToWETH{value: msg.value}();\n        uint256 extinguishAmount =\n            IMarginTrading(marginTrading()).registerDeposit(\n                msg.sender,\n                WETH,\n                msg.value\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(WETH, extinguishAmount);\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\n        }\n        emit CrossDeposit(msg.sender, WETH, msg.value);\n    }\n\n    /// @notice withdraw deposits/earnings from cross margin account\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\n        external\n    {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            withdrawToken,\n            withdrawAmount\n        );\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\n    }\n\n    /// @notice withdraw ethereum from cross margin account\n    function crossWithdrawETH(uint256 withdrawAmount) external {\n        IMarginTrading(marginTrading()).registerWithdrawal(\n            msg.sender,\n            WETH,\n            withdrawAmount\n        );\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\n    }\n\n    /// @notice borrow into cross margin trading account\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\n        IMarginTrading(marginTrading()).registerBorrow(\n            msg.sender,\n            borrowToken,\n            borrowAmount\n        );\n\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\n    }\n\n    /// @notice convenience function to perform overcollateralized borrowing\n    /// against a cross margin account.\n    /// @dev caution: the account still has to have a positive balaance at the end\n    /// of the withdraw. So an underwater account may not be able to withdraw\n    function crossOvercollateralizedBorrow(\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external {\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\n\n        Lending(lending()).registerBorrow(borrowToken, withdrawAmount);\n        IMarginTrading(marginTrading()).registerOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n\n        Fund(fund()).withdraw(borrowToken, msg.sender, withdrawAmount);\n        stakeClaim(msg.sender, borrowToken, withdrawAmount);\n        emit CrossOvercollateralizedBorrow(\n            msg.sender,\n            depositToken,\n            depositAmount,\n            borrowToken,\n            withdrawAmount\n        );\n    }\n\n    /// @notice close an account that is no longer borrowing and return gains\n    function crossCloseAccount() external {\n        (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\n            IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\n\n        // requires all debts paid off\n        IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\n\n        for (uint256 i; holdingTokens.length > i; i++) {\n            Fund(fund()).withdraw(\n                holdingTokens[i],\n                msg.sender,\n                holdingAmounts[i]\n            );\n        }\n    }\n\n    // **** SWAP ****\n    /// @dev requires the initial amount to have already been sent to the first pair\n    function _swap(\n        uint256[] memory amounts,\n        address[] memory pairs,\n        address[] memory tokens,\n        address _to\n    ) internal virtual {\n        address outToken = tokens[tokens.length - 1];\n        uint256 startingBalance = IERC20(outToken).balanceOf(_to);\n        for (uint256 i; i < pairs.length; i++) {\n            (address input, address output) = (tokens[i], tokens[i + 1]);\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\n\n            uint256 amountOut = amounts[i + 1];\n\n            (uint256 amount0Out, uint256 amount1Out) =\n                input == token0\n                    ? (uint256(0), amountOut)\n                    : (amountOut, uint256(0));\n\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\n        }\n\n        uint256 endingBalance = IERC20(outToken).balanceOf(_to);\n        require(\n            endingBalance >= startingBalance + amounts[amounts.length - 1],\n            \"Defective AMM route; balances don't match\"\n        );\n    }\n\n    /// @dev internal helper swapping exact token for token on AMM\n    function _swapExactT4T(\n        uint256[] memory amounts,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        require(\n            amounts[amounts.length - 1] >= amountOutMin,\n            \"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    /// @notice make swaps on AMM using protocol funds, only for authorized contracts\n    function authorizedSwapExactT4T(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsOut(amountIn, pairs, tokens);\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    // @dev internal helper swapping exact token for token on on AMM\n    function _swapT4ExactT(\n        uint256[] memory amounts,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) internal {\n        // TODO minimum trade?\n        require(\n            amounts[0] <= amountInMax,\n            \"MarginRouter: EXCESSIVE_INPUT_AMOUNT\"\n        );\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n        _swap(amounts, pairs, tokens, fund());\n    }\n\n    //// @notice swap protocol funds on AMM, only for authorized\n    function authorizedSwapT4ExactT(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external returns (uint256[] memory amounts) {\n        require(\n            isAuthorizedFundTrader(msg.sender),\n            \"Calling contract is not authorized to trade with protocl funds\"\n        );\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // calc fees\n        uint256 fees = takeFeesFromInput(amountIn);\n\n        // swap\n        amounts = UniswapStyleLib.getAmountsOut(amountIn - fees, pairs, tokens);\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amountIn,\n            amounts[amounts.length - 1]\n        );\n\n        _swapExactT4T(amounts, amountOutMin, pairs, tokens);\n    }\n\n    /// @notice entry point for swapping tokens held in cross margin account\n    function crossSwapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata pairs,\n        address[] calldata tokens,\n        uint256 deadline\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\n        // swap\n        amounts = UniswapStyleLib.getAmountsIn(\n            amountOut + takeFeesFromOutput(amountOut),\n            pairs,\n            tokens\n        );\n\n        // checks that trader is within allowed lending bounds\n        registerTrade(\n            msg.sender,\n            tokens[0],\n            tokens[tokens.length - 1],\n            amounts[0],\n            amountOut\n        );\n\n        _swapT4ExactT(amounts, amountInMax, pairs, tokens);\n    }\n\n    /// @dev helper function does all the work of telling other contracts\n    /// about a trade\n    function registerTrade(\n        address trader,\n        address inToken,\n        address outToken,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        (uint256 extinguishAmount, uint256 borrowAmount) =\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\n                trader,\n                inToken,\n                outToken,\n                inAmount,\n                outAmount\n            );\n        if (extinguishAmount > 0) {\n            Lending(lending()).payOff(outToken, extinguishAmount);\n            withdrawClaim(trader, outToken, extinguishAmount);\n        }\n        if (borrowAmount > 0) {\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\n            stakeClaim(trader, inToken, borrowAmount);\n        }\n\n        emit CrossTrade(\n            trader,\n            inToken,\n            inAmount,\n            borrowAmount,\n            outToken,\n            outAmount,\n            extinguishAmount\n        );\n    }\n\n    function getAmountsOut(\n        uint256 inAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsOut(inAmount, pairs, tokens);\n    }\n\n    function getAmountsIn(\n        uint256 outAmount,\n        address[] calldata pairs,\n        address[] calldata tokens\n    ) external view returns (uint256[] memory) {\n        return UniswapStyleLib.getAmountsIn(outAmount, pairs, tokens);\n    }\n\n    function takeFeesFromOutput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / 10_000;\n    }\n\n    function takeFeesFromInput(uint256 amount)\n        internal\n        pure\n        returns (uint256 fees)\n    {\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./PriceAware.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\nstruct CrossMarginAccount {\n    uint256 lastDepositBlock;\n    address[] borrowTokens;\n    // borrowed token address => amount\n    mapping(address => uint256) borrowed;\n    // borrowed token => yield quotient\n    mapping(address => uint256) borrowedYieldQuotientsFP;\n    address[] holdingTokens;\n    // token held in portfolio => amount\n    mapping(address => uint256) holdings;\n    // boolean value of whether an account holds a token\n    mapping(address => bool) holdsToken;\n}\n\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\n    /// @dev gets used in calculating how much accounts can borrow\n    uint256 public leveragePercent;\n\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\n    uint256 public liquidationThresholdPercent;\n\n    /// @dev record of all cross margin accounts\n    mapping(address => CrossMarginAccount) internal marginAccounts;\n    /// @dev total token caps\n    mapping(address => uint256) public tokenCaps;\n    /// @dev tracks total of short positions per token\n    mapping(address => uint256) public totalShort;\n    /// @dev tracks total of long positions per token\n    mapping(address => uint256) public totalLong;\n    uint256 public coolingOffPeriod;\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev add an asset to be held by account\n    function addHolding(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 depositAmount\n    ) internal {\n        if (!hasHoldingToken(account, token)) {\n            account.holdingTokens.push(token);\n        }\n\n        account.holdings[token] += depositAmount;\n    }\n\n    /// @dev adjust account to reflect borrowing of token amount\n    function borrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        if (!hasBorrowedToken(account, borrowToken)) {\n            account.borrowTokens.push(borrowToken);\n        } else {\n            account.borrowed[borrowToken] = Lending(lending())\n                .applyBorrowInterest(\n                account.borrowed[borrowToken],\n                borrowToken,\n                account.borrowedYieldQuotientsFP[borrowToken]\n            );\n        }\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\n            .viewBorrowingYieldFP(borrowToken);\n\n        account.borrowed[borrowToken] += borrowAmount;\n        addHolding(account, borrowToken, borrowAmount);\n\n        require(positiveBalance(account), \"Can't borrow: insufficient balance\");\n    }\n\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\n    function positiveBalance(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, false);\n        uint256 holdings = holdingsInPeg(account, false);\n        // The following condition should hold:\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\n        // =>\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\n    }\n\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\n    function extinguishDebt(\n        CrossMarginAccount storage account,\n        address debtToken,\n        uint256 extinguishAmount\n    ) internal {\n        // will throw if insufficient funds\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\n            account.borrowed[debtToken],\n            debtToken,\n            account.borrowedYieldQuotientsFP[debtToken]\n        );\n\n        account.borrowed[debtToken] =\n            account.borrowed[debtToken] -\n            extinguishAmount;\n        account.holdings[debtToken] =\n            account.holdings[debtToken] -\n            extinguishAmount;\n\n        if (account.borrowed[debtToken] > 0) {\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\n                .viewBorrowingYieldFP(debtToken);\n        } else {\n            delete account.borrowedYieldQuotientsFP[debtToken];\n\n            bool decrement = false;\n            uint256 len = account.borrowTokens.length;\n            for (uint256 i; len > i; i++) {\n                address currToken = account.borrowTokens[i];\n                if (currToken == debtToken) {\n                    decrement = true;\n                } else if (decrement) {\n                    account.borrowTokens[i - 1] = currToken;\n                }\n            }\n            account.borrowTokens.pop();\n        }\n    }\n\n    /// @dev checks whether an account holds a token\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.holdsToken[token];\n    }\n\n    /// @dev checks whether an account has borrowed a token\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.borrowedYieldQuotientsFP[token] > 0;\n    }\n\n    /// @dev calculate total loan in reference currency, including compound interest\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\n        internal\n        returns (uint256)\n    {\n        return\n            sumTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP,\n                forceCurBlock\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function holdingsInPeg(\n        CrossMarginAccount storage account,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        return\n            sumTokensInPeg(\n                account.holdingTokens,\n                account.holdings,\n                forceCurBlock\n            );\n    }\n\n    /// @dev check whether an account can/should be liquidated\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, true);\n        uint256 holdings = holdingsInPeg(account, true);\n        // The following should hold:\n        // holdings / loan >= 1.1\n        // => holdings >= loan * 1.1\n        return 100 * holdings >= liquidationThresholdPercent * loan;\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function sumTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.getCurrentPriceInPeg(\n                token,\n                amounts[token],\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function viewTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function sumTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += yieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP,\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function viewTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += viewYieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP\n            );\n        }\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function yieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return\n            PriceAware.getCurrentPriceInPeg(\n                token,\n                amountInToken,\n                forceCurBlock\n            );\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function viewYieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\n    }\n\n    /// @dev move tokens from one holding to another\n    function adjustAmounts(\n        CrossMarginAccount storage account,\n        address fromToken,\n        address toToken,\n        uint256 soldAmount,\n        uint256 boughtAmount\n    ) internal {\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\n        addHolding(account, toToken, boughtAmount);\n    }\n\n    /// sets borrow and holding to zero\n    function deleteAccount(CrossMarginAccount storage account) internal {\n        uint256 len = account.borrowTokens.length;\n        for (uint256 borrowIdx; len > borrowIdx; borrowIdx++) {\n            address borrowToken = account.borrowTokens[borrowIdx];\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\n            account.borrowed[borrowToken] = 0;\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\n        }\n        len = account.holdingTokens.length;\n        for (uint256 holdingIdx; len > holdingIdx; holdingIdx++) {\n            address holdingToken = account.holdingTokens[holdingIdx];\n            totalLong[holdingToken] -= account.holdings[holdingToken];\n            account.holdings[holdingToken] = 0;\n            account.holdsToken[holdingToken] = false;\n        }\n        delete account.borrowTokens;\n        delete account.holdingTokens;\n    }\n\n    /// @dev minimum\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginTrading.sol",
            "MarginRouter.sol",
            "CrossMarginAccounts.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-02",
                "Location": [
                    "//solidity\nfunction _swapExactT4T() {\n  // withdraw happens here\n    Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n    _swap(amounts, pairs, tokens, fund());\n}\n\nfunction _swap() {\n  uint256 startingBalance = IERC20(outToken).balanceOf(_to);\n  uint256 endingBalance = IERC20(outToken).balanceOf(_to);\n  // passes as startingBalance == endingBalance + 0\n  require(\n      endingBalance = startingBalance + amounts[amounts.length 1],\n      \"Defective AMM route; balances don't match\"\n  );\n}\n"
                ],
                "Type": " Missing  fromToken != toToken  check",
                "Description": "\nAttacker calls MarginRouter.crossSwapExactTokensForTokens with a fake pair and the same token[0] == token[1].\ncrossSwapExactTokensForTokens(1000 WETH, 0, ATTACKER_CONTRACT], WETH, WETH]). When the amounts are computed by the amounts = UniswapStyleLib.getAmountsOut(amountIn fees, pairs, tokens); call, the attacker contract returns fake reserves that yield 0 output. When _swapExactT4T is called, the funds are sent to the fake contract and doing nothing passes all checks in _swap call that follows because the startingBalance is stored _after_ the initial Fund withdraw to the pair.\n\nsolidity\nfunction _swapExactT4T() {\n  // withdraw happens here\n    Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\n    _swap(amounts, pairs, tokens, fund());\n}\n\nfunction _swap() {\n  uint256 startingBalance = IERC20(outToken).balanceOf(_to);\n  uint256 endingBalance = IERC20(outToken).balanceOf(_to);\n  // passes as startingBalance == endingBalance + 0\n  require(\n      endingBalance = startingBalance + amounts[amounts.length 1],\n      \"Defective AMM route; balances don't match\"\n  );\n}\n\n\nThe full impact is not yet known as registerTrade could still fail when subtracting the inAmount and adding 0 outAmount.\nAt least, this attack is similar to a withdrawal which is supposed to only occur after a certain coolingOffPeriod has passed, but this time-lock is circumvented with this attack.\n\n",
                "Repair": "Recommend moving the fund withdrawal to the first pair after the startingBalance assignment. Check fromToken != toToken as cyclical trades (arbitrages) are likely not what margin traders are after. Consider if the same check is required for registerTradeAndBorrow / adjustAmounts functions.\n\n\n"
            },
            {
                "Name": "H-07",
                "Location": [
                    "//solidity\nfunction addHolding(\n    CrossMarginAccount storage account,\n    address token,\n    uint256 depositAmount\n) internal {\n    if (!hasHoldingToken(account, token)) {\n        // SHOULD SET account.holdsToken here\n        account.holdingTokens.push(token);\n    }\n\n    account.holdings[token] += depositAmount;\n}\n",
                    "//solidity\nfunction getHoldingAmounts(address trader)\n    external\n    view\n    override\n    returns (\n        address[] memory holdingTokens,\n        uint256[] memory holdingAmounts\n    )\n{\n    CrossMarginAccount storage account = marginAccounts[trader];\n    holdingTokens = account.holdingTokens;\n\n    holdingAmounts = new uint256[(account.holdingTokens.length);\n    for (uint256 idx = 0; holdingTokens.length  idx; idx++) {\n        address tokenAddress = holdingTokens[idx];\n        // RETURNS SUM OF THE BALANCE FOR EACH TOKEN ENTRY\n        holdingAmounts[idx] = account.holdings[tokenAddress];\n    }\n}\n",
                    "//solidity\nfunction crossCloseAccount() external {\n    (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\n        IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\n\n    // requires all debts paid off\n    IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\n\n    for (uint256 i; holdingTokens.length  i; i++) {\n        Fund(fund()).withdraw(\n            holdingTokens[i],\n            msg.sender,\n            holdingAmounts[i]\n        );\n    }\n}\n"
                ],
                "Type": "  account.holdsToken  is never set",
                "Description": "\nThe addHolding function does not update the account.holdsToken map.\n\nsolidity\nfunction addHolding(\n    CrossMarginAccount storage account,\n    address token,\n    uint256 depositAmount\n) internal {\n    if (!hasHoldingToken(account, token)) {\n        // SHOULD SET account.holdsToken here\n        account.holdingTokens.push(token);\n    }\n\n    account.holdings[token] += depositAmount;\n}\n\n\nThis leads to a critical vulnerability where deposits of the same token keep being pushed to the account.holdingTokens array but the sum is correctly updated in account.holdings[token]. However, because of the duplicate token in the holdingTokens array the same token is counted several times in the getHoldingAmounts function:\n\nsolidity\nfunction getHoldingAmounts(address trader)\n    external\n    view\n    override\n    returns (\n        address[] memory holdingTokens,\n        uint256[] memory holdingAmounts\n    )\n{\n    CrossMarginAccount storage account = marginAccounts[trader];\n    holdingTokens = account.holdingTokens;\n\n    holdingAmounts = new uint256[(account.holdingTokens.length);\n    for (uint256 idx = 0; holdingTokens.length  idx; idx++) {\n        address tokenAddress = holdingTokens[idx];\n        // RETURNS SUM OF THE BALANCE FOR EACH TOKEN ENTRY\n        holdingAmounts[idx] = account.holdings[tokenAddress];\n    }\n}\n\n\nThe MarginRouter.crossCloseAccount function uses these wrong amounts to withdraw all tokens:\n\nsolidity\nfunction crossCloseAccount() external {\n    (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\n        IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\n\n    // requires all debts paid off\n    IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\n\n    for (uint256 i; holdingTokens.length  i; i++) {\n        Fund(fund()).withdraw(\n            holdingTokens[i],\n            msg.sender,\n            holdingAmounts[i]\n        );\n    }\n}\n\n\nAn attacker can just deposit the same token X times which increases their balance by X times the actual value.\nThis inflated balance can then be withdrawn to steal all tokens.\n\n",
                "Repair": "Recommend correctly setting the account.holdsToken map in addHolding.\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./PriceAware.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\nstruct CrossMarginAccount {\n    uint256 lastDepositBlock;\n    address[] borrowTokens;\n    // borrowed token address => amount\n    mapping(address => uint256) borrowed;\n    // borrowed token => yield quotient\n    mapping(address => uint256) borrowedYieldQuotientsFP;\n    address[] holdingTokens;\n    // token held in portfolio => amount\n    mapping(address => uint256) holdings;\n    // boolean value of whether an account holds a token\n    mapping(address => bool) holdsToken;\n}\n\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\n    /// @dev gets used in calculating how much accounts can borrow\n    uint256 public leveragePercent;\n\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\n    uint256 public liquidationThresholdPercent;\n\n    /// @dev record of all cross margin accounts\n    mapping(address => CrossMarginAccount) internal marginAccounts;\n    /// @dev total token caps\n    mapping(address => uint256) public tokenCaps;\n    /// @dev tracks total of short positions per token\n    mapping(address => uint256) public totalShort;\n    /// @dev tracks total of long positions per token\n    mapping(address => uint256) public totalLong;\n    uint256 public coolingOffPeriod;\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev add an asset to be held by account\n    function addHolding(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 depositAmount\n    ) internal {\n        if (!hasHoldingToken(account, token)) {\n            account.holdingTokens.push(token);\n        }\n\n        account.holdings[token] += depositAmount;\n    }\n\n    /// @dev adjust account to reflect borrowing of token amount\n    function borrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        if (!hasBorrowedToken(account, borrowToken)) {\n            account.borrowTokens.push(borrowToken);\n        } else {\n            account.borrowed[borrowToken] = Lending(lending())\n                .applyBorrowInterest(\n                account.borrowed[borrowToken],\n                borrowToken,\n                account.borrowedYieldQuotientsFP[borrowToken]\n            );\n        }\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\n            .viewBorrowingYieldFP(borrowToken);\n\n        account.borrowed[borrowToken] += borrowAmount;\n        addHolding(account, borrowToken, borrowAmount);\n\n        require(positiveBalance(account), \"Can't borrow: insufficient balance\");\n    }\n\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\n    function positiveBalance(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, false);\n        uint256 holdings = holdingsInPeg(account, false);\n        // The following condition should hold:\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\n        // =>\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\n    }\n\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\n    function extinguishDebt(\n        CrossMarginAccount storage account,\n        address debtToken,\n        uint256 extinguishAmount\n    ) internal {\n        // will throw if insufficient funds\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\n            account.borrowed[debtToken],\n            debtToken,\n            account.borrowedYieldQuotientsFP[debtToken]\n        );\n\n        account.borrowed[debtToken] =\n            account.borrowed[debtToken] -\n            extinguishAmount;\n        account.holdings[debtToken] =\n            account.holdings[debtToken] -\n            extinguishAmount;\n\n        if (account.borrowed[debtToken] > 0) {\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\n                .viewBorrowingYieldFP(debtToken);\n        } else {\n            delete account.borrowedYieldQuotientsFP[debtToken];\n\n            bool decrement = false;\n            uint256 len = account.borrowTokens.length;\n            for (uint256 i; len > i; i++) {\n                address currToken = account.borrowTokens[i];\n                if (currToken == debtToken) {\n                    decrement = true;\n                } else if (decrement) {\n                    account.borrowTokens[i - 1] = currToken;\n                }\n            }\n            account.borrowTokens.pop();\n        }\n    }\n\n    /// @dev checks whether an account holds a token\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.holdsToken[token];\n    }\n\n    /// @dev checks whether an account has borrowed a token\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.borrowedYieldQuotientsFP[token] > 0;\n    }\n\n    /// @dev calculate total loan in reference currency, including compound interest\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\n        internal\n        returns (uint256)\n    {\n        return\n            sumTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP,\n                forceCurBlock\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function holdingsInPeg(\n        CrossMarginAccount storage account,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        return\n            sumTokensInPeg(\n                account.holdingTokens,\n                account.holdings,\n                forceCurBlock\n            );\n    }\n\n    /// @dev check whether an account can/should be liquidated\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, true);\n        uint256 holdings = holdingsInPeg(account, true);\n        // The following should hold:\n        // holdings / loan >= 1.1\n        // => holdings >= loan * 1.1\n        return 100 * holdings >= liquidationThresholdPercent * loan;\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function sumTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.getCurrentPriceInPeg(\n                token,\n                amounts[token],\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function viewTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function sumTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += yieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP,\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function viewTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += viewYieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP\n            );\n        }\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function yieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return\n            PriceAware.getCurrentPriceInPeg(\n                token,\n                amountInToken,\n                forceCurBlock\n            );\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function viewYieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\n    }\n\n    /// @dev move tokens from one holding to another\n    function adjustAmounts(\n        CrossMarginAccount storage account,\n        address fromToken,\n        address toToken,\n        uint256 soldAmount,\n        uint256 boughtAmount\n    ) internal {\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\n        addHolding(account, toToken, boughtAmount);\n    }\n\n    /// sets borrow and holding to zero\n    function deleteAccount(CrossMarginAccount storage account) internal {\n        uint256 len = account.borrowTokens.length;\n        for (uint256 borrowIdx; len > borrowIdx; borrowIdx++) {\n            address borrowToken = account.borrowTokens[borrowIdx];\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\n            account.borrowed[borrowToken] = 0;\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\n        }\n        len = account.holdingTokens.length;\n        for (uint256 holdingIdx; len > holdingIdx; holdingIdx++) {\n            address holdingToken = account.holdingTokens[holdingIdx];\n            totalLong[holdingToken] -= account.holdings[holdingToken];\n            account.holdings[holdingToken] = 0;\n            account.holdsToken[holdingToken] = false;\n        }\n        delete account.borrowTokens;\n        delete account.holdingTokens;\n    }\n\n    /// @dev minimum\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginAccounts.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-03",
                "Location": [
                    "PriceAware.getCurrentPriceInPeg(token, inAmount, forceCurBlock=true)"
                ],
                "Type": " Price feed can be manipulated",
                "Description": "\nAnyone can trigger an update to the price feed by calling PriceAware.getCurrentPriceInPeg(token, inAmount, forceCurBlock=true).\nIf the update window has passed, the price will be computed by simulating a Uniswap-like trade with the amounts.\nThis simulation uses the reserves of the Uniswap pairs which can be changed drastically using flash loans to yield almost arbitrary output amounts, and thus prices. Wrong prices break the core functionality of the contracts such as borrowing on margin, liquidations, etc.\n\n",
                "Repair": "Recommend against using the Uniswap spot price as the real price. Uniswap itself warns against this and instead recommends implementing a TWAP price oracle(https://uniswap.org/docs/v2/smart-contract-integration/building-an-oracle/) using the price*CumulativeLast variables.\n\n\n"
            },
            {
                "Name": "M-01",
                "Location": [
                    "liquidationThresholdPercent",
                    "belowMaintenanceThreshold"
                ],
                "Type": " No default  liquidationThresholdPercent ",
                "Description": "\nThe IsolatedMarginTrading contract does not define a default liquidationThresholdPercent which means it is set to 0. The belowMaintenanceThreshold function uses this value and anyone could be liquidated due to 100 * holdings = liquidationThresholdPercent * loan = 0 being always true.\n\nAnyone can be liquidated immediately. If the faulty belowMaintenanceThreshold function is fixed (see other issue), then nobody could be liquidated which is bad as well.\n\n",
                "Repair": "Recommend setting a default liquidation threshold like in CrossMarginTrading contracts.\n\n\n"
            },
            {
                "Name": "M-06",
                "Location": [
                    "liquidationThresholdPercent"
                ],
                "Type": " Users Can Drain Funds From MarginSwap By Making Undercollateralized Borrows If The Price Of A Token Has Moved More Than 10% Since The Last MarginSwap Borrow/Liquidation Involving Accounts Holding That Token.",
                "Description": "\nUsers Can Drain Funds From MarginSwap By Making Undercollateralized Borrows If The Price Of A Token Has Moved More Than 10% Since The Last MarginSwap Borrow/Liquidation Involving Accounts Holding That Token.\n\nMarginSwap's internal price oracle is only updated for a particular token if a borrow or liquidation is attempted for an account that is lending/borrowing that particular token.\n\nFor a less popular token, the price could move quite a bit without any borrow or liquidation being called on any account lending/borrowing that token, especially if MarginSwap does not end up being wildly popular, or if it supports lesser known assets.\nIf the Uniswap price has moved more than 10% (liquidationThresholdPercent 100) without a borrow or liquidation on an account lending/borrowing that particular token occurring on MarginSwap, then Alice can make undercollateralized loans, leaving behind her collateral and draining funds from the contract.\n\n(1) Alice waits for the Uniswap price for any token to move more than 10% (liquidationThresholdPercent 100) without a borrow or liquidation occurring for any account lending/borrowing that token occurring on MarginSwap.\n(2) When this condition is satisfied, Alice can loop the following actions:\n(2.1) If the price has fallen, Alice can use the token as collateral (making sure to use more than UPDATE_MAX_PEG_AMOUNT worth of the token in ETH), borrow ether from MarginSwap, sell the ether for the token on Uniswap, and repeat, leaving coolingOffPeriod blocks between each lend and borrow.\n(2.2) If the price has risen, Alice can use ether as collateral, borrow the token from MarginSwap (making sure to use more than UPDATE_MAX_PEG_AMOUNT worth of the token in ETH), sell the token for ether on Uniswap, and repeat, leaving coolingOffPeriod blocks between each lend and borrow.\n\nBecause the MarginSwap price is now stale, Alice can borrow more than 100% of the actual value of her collateral, since MarginSwap believes the borrowed funds to only be worth 90% or less than their actual current market value.\n\nThe various defenses that MarginSwap has employed against undercollateralized loans are all bypassed:\n(a) The exponential moving price average stored within MarginSwap is not updated, because Alice borrows at least UPDATE_MAX_PEG_AMOUNT worth of the token in ETH, so MarginSwap.PriceAware.getPriceFromAMM skips the price update due to the \"outAmount < UPDATE_MAX_PEG_AMOUNT\" condition failing.\n(b) CoolingOffPeriod can be bypassed by Alice splitting her deposits and borrows up by 20 blocks (the current value of CoolingOffPeriod). Since deposits do not trigger a price oracle update, Alice can even deposit ahead of time as the price is nearing 10% off of peg, allowing her to perform the borrow right when 10% is passed.\n(c) MarginSwap.Lending.registerBorrow check is bypassed. The check is \"meta.totalLending = meta.totalBorrowed\", but this is a global check that only ensures that the contract as a whole has sufficient tokens to fund Alice's borrow. Alice simply needs to ensure that she only borrows up to the amount of tokens that the contract currently owns.\n\nEven if the issue of the price oracle stalling were to be fixed by using a large enough UPDATE_MAX_PEG_AMOUNT, since the moving average updates so slowly (MarginSwap is currently set at moving 8/1000th towards new price every 8 blocks) and only when actions are taken on MarginSwap (which may not be frequent on lesser known tokens or if MarginSwap is not too popular), Alice can still take out undercollateralized loans for a period of time before the price oracle catches up.\nThe real solution here is to use UniswapV2/SushiSwap/UniswapV3's built in TWAP price oracle, especially since MarginSwap is built on top of Uniswap/Sushiswap.\n\nwerg (Marginswap) acknowledged(https://github.com/code-423n4/2021-04-marginswap-findings/issues/67#issuecomment-816204245):\n\n I believe the issue above is referring to the \"overcollateralized borrow\" functionality, because there is talk of withdrawing. In any case of withdrawal (whether immediately or not) it is not the liquidationThresholdPercent which governs how much a user may withdraw. Rather, we check whether the account has positive balance (i.e. the value of assets exceeds the loan).\n\n In the current system, at 3x possible leverage level, users can withdraw maximally 66% of the face value (to the system) they deposited. If a user deposited collateral that had dropped in price by 10% it would allow them to withdraw around 73% of the real value. -Not undercollateralized.\n The price of an asset would have to have dropped by 33%, without the system catching on, for Alice to break even (without considering gas cost).\n\n Cross margin trading will only be available for a select set of tokens with high enough trading volume. Anyone will be able to update the price if our exponential weighted average is out of date.\n Nevertheless, risk remains as in any lending system.\n\n We will consider adding an additional buffer around immediate withdrawals\n If staleness becomes an issue the protocol can institute rewards for updating the price\n\n also of course there are liquidators waiting in the wings to make their cut on underwater accounts and liquidators can update the price.\n\n\n",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"./RoleAware.sol\";\n\n/// @title Base lending behavior\nabstract contract BaseLending is Ownable {\n    uint256 constant FP32 = 2**32;\n    uint256 constant ACCUMULATOR_INIT = 10**18;\n\n    struct YieldAccumulator {\n        uint256 accumulatorFP;\n        uint256 lastUpdated;\n        uint256 hourlyYieldFP;\n    }\n\n    struct LendingMetadata {\n        uint256 totalLending;\n        uint256 totalBorrowed;\n        uint256 lendingBuffer;\n        uint256 lendingCap;\n    }\n    mapping(address => LendingMetadata) public lendingMeta;\n\n    /// @dev accumulate interest per issuer (like compound indices)\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\n\n    uint256 public maxHourlyYieldFP;\n    uint256 public yieldChangePerSecondFP;\n\n    /// @dev simple formula for calculating interest relative to accumulator\n    function applyInterest(\n        uint256 balance,\n        uint256 accumulatorFP,\n        uint256 yieldQuotientFP\n    ) internal pure returns (uint256) {\n        // 1 * FP / FP = 1\n        return (balance * accumulatorFP) / yieldQuotientFP;\n    }\n\n    /// update the yield for an asset based on recent supply and demand\n    function updatedYieldFP(\n        // previous yield\n        uint256 _yieldFP,\n        // timestamp\n        uint256 lastUpdated,\n        uint256 totalLendingInBucket,\n        uint256 bucketTarget,\n        uint256 buyingSpeed,\n        uint256 withdrawingSpeed,\n        uint256 bucketMaxYield\n    ) internal view returns (uint256 yieldFP) {\n        yieldFP = _yieldFP;\n        uint256 timeDiff = block.timestamp - lastUpdated;\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\n\n        if (\n            totalLendingInBucket >= bucketTarget ||\n            buyingSpeed >= withdrawingSpeed\n        ) {\n            yieldFP -= min(yieldFP, yieldDiff);\n        } else {\n            yieldFP += yieldDiff;\n            if (yieldFP > bucketMaxYield) {\n                yieldFP = bucketMaxYield;\n            }\n        }\n    }\n\n    function updateSpeed(\n        uint256 speed,\n        uint256 lastAction,\n        uint256 amount,\n        uint256 runtime\n    ) internal view returns (uint256 newSpeed, uint256 newLastAction) {\n        uint256 timeDiff = block.timestamp - lastAction;\n        uint256 updateAmount = (amount * runtime) / (timeDiff + 1);\n\n        uint256 oldSpeedWeight = (runtime + 120 minutes) / 3;\n        uint256 updateWeight = timeDiff + 1;\n        // scale adjustment relative to runtime\n        newSpeed =\n            (speed * oldSpeedWeight + updateAmount * updateWeight) /\n            (oldSpeedWeight + updateWeight);\n        newLastAction = block.timestamp;\n    }\n\n    /// @dev minimum\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n\n    function _makeFallbackBond(\n        address issuer,\n        address holder,\n        uint256 amount\n    ) internal virtual;\n\n    function lendingTarget(LendingMetadata storage meta)\n        internal\n        view\n        returns (uint256)\n    {\n        return min(meta.lendingCap, meta.totalBorrowed + meta.lendingBuffer);\n    }\n\n    /// View lending target\n    function viewLendingTarget(address issuer) external view returns (uint256) {\n        LendingMetadata storage meta = lendingMeta[issuer];\n        return lendingTarget(meta);\n    }\n\n    /// Set maximum hourly yield in floating point\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\n        maxHourlyYieldFP = maxYieldFP;\n    }\n\n    /// Set yield change per second in floating point\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\n        external\n        onlyOwner\n    {\n        yieldChangePerSecondFP = changePerSecondFP;\n    }\n\n    /// Available tokens to this issuance\n    function issuanceBalance(address issuance)\n        internal\n        view\n        virtual\n        returns (uint256);\n}\n\n\n",
        "CodeNames": [
            "BaseLending.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-04",
                "Location": [
                    "//solidity\nreturn\nbond.amount +\napplyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\nand some not:\n\nbalanceWithInterest = applyInterest(\nbalance,\nyA.accumulatorFP,\nyieldQuotientFP\n);\n"
                ],
                "Type": " Inconsistent usage of  applyInterest ",
                "Description": "\nIt is unclear if the function applyInterest is supposed to return a new balance with the interest applied or only the accrued interest? There are various usages of it, some calls add the return value to the old amount:\n\nsolidity\nreturn\nbond.amount +\napplyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\nand some not:\n\nbalanceWithInterest = applyInterest(\nbalance,\nyA.accumulatorFP,\nyieldQuotientFP\n);\n\n\nThis makes the code misbehave and return the wrong values for the balance and accrued interest.\n\n",
                "Repair": "Recommend making it consistent in all cases when calling this function.\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IncentiveDistribution.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"./CrossMarginTrading.sol\";\n\n/** \n@title Here we support staking for MFI incentives as well as\nstaking to perform the maintenance role.\n*/\ncontract Admin is RoleAware, Ownable {\n    /// Marginswap (MFI) token address\n    address public immutable MFI;\n    mapping(address => uint256) public stakes;\n    uint256 public totalStakes;\n\n    uint256 public maintenanceStakePerBlock = 10 ether;\n    mapping(address => address) public nextMaintenanceStaker;\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\n    address public currentMaintenanceStaker;\n    address public prevMaintenanceStaker;\n    uint256 public currentMaintenanceStakerStartBlock;\n    address public immutable lockedMFI;\n\n    constructor(\n        address _MFI,\n        address _lockedMFI,\n        address lockedMFIDelegate,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        maintenanceStakePerBlock = 1 ether;\n        lockedMFI = _lockedMFI;\n\n        // for initialization purposes and to ensure availability of service\n        // the team's locked MFI participate in maintenance staking only\n        // (not in the incentive staking part)\n        // this implies some trust of the team to execute, which we deem reasonable\n        // since the locked stake is temporary and diminishing as well as the fact\n        // that the team is heavily invested in the protocol and incentivized\n        // by fees like any other maintainer\n        // furthermore others could step in to liquidate via the attacker route\n        // and take away the team fees if they were delinquent\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\n        currentMaintenanceStaker = _lockedMFI;\n        prevMaintenanceStaker = _lockedMFI;\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\n        currentMaintenanceStakerStartBlock = block.number;\n    }\n\n    /// Maintence stake setter\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\n        maintenanceStakePerBlock = amount;\n    }\n\n    function _stake(address holder, uint256 amount) internal {\n        Fund(fund()).depositFor(holder, MFI, amount);\n\n        stakes[holder] += amount;\n        totalStakes += amount;\n\n        IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Deposit a stake for sender\n    function depositStake(uint256 amount) external {\n        _stake(msg.sender, amount);\n    }\n\n    function _withdrawStake(\n        address holder,\n        uint256 amount,\n        address recipient\n    ) internal {\n        // overflow failure desirable\n        stakes[holder] -= amount;\n        totalStakes -= amount;\n        Fund(fund()).withdraw(MFI, recipient, amount);\n\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Withdraw stake for sender\n    function withdrawStake(uint256 amount) external {\n        require(\n            !isAuthorizedStaker(msg.sender),\n            \"You can't withdraw while you're authorized staker\"\n        );\n        _withdrawStake(msg.sender, amount, msg.sender);\n    }\n\n    /// Deposit maintenance stake\n    function depositMaintenanceStake(uint256 amount) external {\n        require(\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\n            \"Insufficient stake to call even one block\"\n        );\n        _stake(msg.sender, amount);\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\n        }\n    }\n\n    function getMaintenanceStakerStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        if (staker == lockedMFI) {\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\n        } else {\n            return stakes[staker];\n        }\n    }\n\n    function getUpdatedCurrentStaker() public returns (address) {\n        uint256 currentStake =\n            getMaintenanceStakerStake(currentMaintenanceStaker);\n        while (\n            (block.number - currentMaintenanceStakerStartBlock) *\n                maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // delete current from daisy chain\n                address nextOne =\n                    nextMaintenanceStaker[currentMaintenanceStaker];\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\n\n                currentMaintenanceStaker = nextOne;\n            } else {\n                currentMaintenanceStakerStartBlock +=\n                    currentStake /\n                    maintenanceStakePerBlock;\n\n                prevMaintenanceStaker = currentMaintenanceStaker;\n                currentMaintenanceStaker = nextMaintenanceStaker[\n                    currentMaintenanceStaker\n                ];\n            }\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\n        }\n        return currentMaintenanceStaker;\n    }\n\n    function viewCurrentMaintenanceStaker()\n        public\n        view\n        returns (address staker, uint256 startBlock)\n    {\n        staker = currentMaintenanceStaker;\n        uint256 currentStake = getMaintenanceStakerStake(staker);\n        startBlock = currentMaintenanceStakerStartBlock;\n        while (\n            (block.number - startBlock) * maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // skip\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            } else {\n                startBlock += currentStake / maintenanceStakePerBlock;\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            }\n        }\n    }\n\n    /// Add a delegate for staker\n    function addDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = true;\n    }\n\n    /// Remove a delegate for staker\n    function removeDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = false;\n    }\n\n    function isAuthorizedStaker(address caller)\n        public\n        returns (bool isAuthorized)\n    {\n        address currentStaker = getUpdatedCurrentStaker();\n        isAuthorized =\n            currentStaker == caller ||\n            maintenanceDelegateTo[currentStaker][caller];\n    }\n\n    /// Penalize a staker\n    function penalizeMaintenanceStake(\n        address maintainer,\n        uint256 penalty,\n        address recipient\n    ) external returns (uint256 stakeTaken) {\n        require(\n            isStakePenalizer(msg.sender),\n            \"msg.sender not authorized to penalize stakers\"\n        );\n        if (penalty > stakes[maintainer]) {\n            stakeTaken = stakes[maintainer];\n        } else {\n            stakeTaken = penalty;\n        }\n        _withdrawStake(maintainer, stakeTaken, recipient);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./PriceAware.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\nstruct CrossMarginAccount {\n    uint256 lastDepositBlock;\n    address[] borrowTokens;\n    // borrowed token address => amount\n    mapping(address => uint256) borrowed;\n    // borrowed token => yield quotient\n    mapping(address => uint256) borrowedYieldQuotientsFP;\n    address[] holdingTokens;\n    // token held in portfolio => amount\n    mapping(address => uint256) holdings;\n    // boolean value of whether an account holds a token\n    mapping(address => bool) holdsToken;\n}\n\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\n    /// @dev gets used in calculating how much accounts can borrow\n    uint256 public leveragePercent;\n\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\n    uint256 public liquidationThresholdPercent;\n\n    /// @dev record of all cross margin accounts\n    mapping(address => CrossMarginAccount) internal marginAccounts;\n    /// @dev total token caps\n    mapping(address => uint256) public tokenCaps;\n    /// @dev tracks total of short positions per token\n    mapping(address => uint256) public totalShort;\n    /// @dev tracks total of long positions per token\n    mapping(address => uint256) public totalLong;\n    uint256 public coolingOffPeriod;\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev add an asset to be held by account\n    function addHolding(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 depositAmount\n    ) internal {\n        if (!hasHoldingToken(account, token)) {\n            account.holdingTokens.push(token);\n        }\n\n        account.holdings[token] += depositAmount;\n    }\n\n    /// @dev adjust account to reflect borrowing of token amount\n    function borrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        if (!hasBorrowedToken(account, borrowToken)) {\n            account.borrowTokens.push(borrowToken);\n        } else {\n            account.borrowed[borrowToken] = Lending(lending())\n                .applyBorrowInterest(\n                account.borrowed[borrowToken],\n                borrowToken,\n                account.borrowedYieldQuotientsFP[borrowToken]\n            );\n        }\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\n            .viewBorrowingYieldFP(borrowToken);\n\n        account.borrowed[borrowToken] += borrowAmount;\n        addHolding(account, borrowToken, borrowAmount);\n\n        require(positiveBalance(account), \"Can't borrow: insufficient balance\");\n    }\n\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\n    function positiveBalance(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, false);\n        uint256 holdings = holdingsInPeg(account, false);\n        // The following condition should hold:\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\n        // =>\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\n    }\n\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\n    function extinguishDebt(\n        CrossMarginAccount storage account,\n        address debtToken,\n        uint256 extinguishAmount\n    ) internal {\n        // will throw if insufficient funds\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\n            account.borrowed[debtToken],\n            debtToken,\n            account.borrowedYieldQuotientsFP[debtToken]\n        );\n\n        account.borrowed[debtToken] =\n            account.borrowed[debtToken] -\n            extinguishAmount;\n        account.holdings[debtToken] =\n            account.holdings[debtToken] -\n            extinguishAmount;\n\n        if (account.borrowed[debtToken] > 0) {\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\n                .viewBorrowingYieldFP(debtToken);\n        } else {\n            delete account.borrowedYieldQuotientsFP[debtToken];\n\n            bool decrement = false;\n            uint256 len = account.borrowTokens.length;\n            for (uint256 i; len > i; i++) {\n                address currToken = account.borrowTokens[i];\n                if (currToken == debtToken) {\n                    decrement = true;\n                } else if (decrement) {\n                    account.borrowTokens[i - 1] = currToken;\n                }\n            }\n            account.borrowTokens.pop();\n        }\n    }\n\n    /// @dev checks whether an account holds a token\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.holdsToken[token];\n    }\n\n    /// @dev checks whether an account has borrowed a token\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.borrowedYieldQuotientsFP[token] > 0;\n    }\n\n    /// @dev calculate total loan in reference currency, including compound interest\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\n        internal\n        returns (uint256)\n    {\n        return\n            sumTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP,\n                forceCurBlock\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function holdingsInPeg(\n        CrossMarginAccount storage account,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        return\n            sumTokensInPeg(\n                account.holdingTokens,\n                account.holdings,\n                forceCurBlock\n            );\n    }\n\n    /// @dev check whether an account can/should be liquidated\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, true);\n        uint256 holdings = holdingsInPeg(account, true);\n        // The following should hold:\n        // holdings / loan >= 1.1\n        // => holdings >= loan * 1.1\n        return 100 * holdings >= liquidationThresholdPercent * loan;\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function sumTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.getCurrentPriceInPeg(\n                token,\n                amounts[token],\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function viewTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function sumTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += yieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP,\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function viewTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += viewYieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP\n            );\n        }\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function yieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return\n            PriceAware.getCurrentPriceInPeg(\n                token,\n                amountInToken,\n                forceCurBlock\n            );\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function viewYieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\n    }\n\n    /// @dev move tokens from one holding to another\n    function adjustAmounts(\n        CrossMarginAccount storage account,\n        address fromToken,\n        address toToken,\n        uint256 soldAmount,\n        uint256 boughtAmount\n    ) internal {\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\n        addHolding(account, toToken, boughtAmount);\n    }\n\n    /// sets borrow and holding to zero\n    function deleteAccount(CrossMarginAccount storage account) internal {\n        uint256 len = account.borrowTokens.length;\n        for (uint256 borrowIdx; len > borrowIdx; borrowIdx++) {\n            address borrowToken = account.borrowTokens[borrowIdx];\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\n            account.borrowed[borrowToken] = 0;\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\n        }\n        len = account.holdingTokens.length;\n        for (uint256 holdingIdx; len > holdingIdx; holdingIdx++) {\n            address holdingToken = account.holdingTokens[holdingIdx];\n            totalLong[holdingToken] -= account.holdings[holdingToken];\n            account.holdings[holdingToken] = 0;\n            account.holdsToken[holdingToken] = false;\n        }\n        delete account.borrowTokens;\n        delete account.holdingTokens;\n    }\n\n    /// @dev minimum\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "Admin.sol",
            "CrossMarginAccounts.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-05",
                "Location": [
                    "//solidity\nfunction belowMaintenanceThreshold(CrossMarginAccount storage account)\n    internal\n    returns (bool)\n{\n    uint256 loan = loanInPeg(account, true);\n    uint256 holdings = holdingsInPeg(account, true);\n    // The following should hold:\n    // holdings / loan = 1.1\n    // =\n    return 100 * holdings = liquidationThresholdPercent * loan;\n}\n"
                ],
                "Type": " Wrong liquidation logic",
                "Description": "\nThe belowMaintenanceThreshold function decides if a trader can be liquidated:\n\nsolidity\nfunction belowMaintenanceThreshold(CrossMarginAccount storage account)\n    internal\n    returns (bool)\n{\n    uint256 loan = loanInPeg(account, true);\n    uint256 holdings = holdingsInPeg(account, true);\n    // The following should hold:\n    // holdings / loan = 1.1\n    // =\n    return 100 * holdings = liquidationThresholdPercent * loan;\n}\n\n\nThe inequality in the last equation is wrong because it says the higher the holdings (margin + loan) compared to the loan, the higher the chance of being liquidated. The inverse equality was probably intended return 100 * holdings <= liquidationThresholdPercent * loan;. Users that shouldn't be liquidated can be liquidated, and users that should be liquidated cannot get liquidated.\n\n\n",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./CrossMarginLiquidation.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\n    constructor(address _peg, address _roles)\n        RoleAware(_roles)\n        PriceAware(_peg)\n    {\n        liquidationThresholdPercent = 110;\n        coolingOffPeriod = 20;\n        leveragePercent = 300;\n    }\n\n    /// @dev admin function to set the token cap\n    function setTokenCap(address token, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Caller not authorized to set token cap\"\n        );\n        tokenCaps[token] = cap;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeverage(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm a deposit to an account\n    function registerDeposit(\n        address trader,\n        address token,\n        uint256 depositAmount\n    ) external override returns (uint256 extinguishableDebt) {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n        account.lastDepositBlock = block.number;\n\n        if (account.borrowed[token] > 0) {\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\n            extinguishDebt(account, token, extinguishableDebt);\n            totalShort[token] -= extinguishableDebt;\n        }\n\n        // no overflow because depositAmount >= extinguishableDebt\n        uint256 addedHolding = depositAmount - extinguishableDebt;\n        _registerDeposit(account, token, addedHolding);\n    }\n\n    function _registerDeposit(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 addedHolding\n    ) internal {\n        addHolding(account, token, addedHolding);\n\n        totalLong[token] += addedHolding;\n        require(\n            tokenCaps[token] >= totalLong[token],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n    }\n\n    /// @dev gets called by router to affirm borrowing event\n    function registerBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerBorrow(account, borrowToken, borrowAmount);\n    }\n\n    function _registerBorrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        totalShort[borrowToken] += borrowAmount;\n        totalLong[borrowToken] += borrowAmount;\n        require(\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        borrow(account, borrowToken, borrowAmount);\n    }\n\n    /// @dev gets called by router to affirm withdrawal of tokens from account\n    function registerWithdrawal(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\n    }\n\n    function _registerWithdrawal(\n        CrossMarginAccount storage account,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) internal {\n        require(\n            block.number > account.lastDepositBlock + coolingOffPeriod,\n            \"To prevent attacks you must wait until your cooling off period is over to withdraw\"\n        );\n\n        totalLong[withdrawToken] -= withdrawAmount;\n        // throws on underflow\n        account.holdings[withdrawToken] =\n            account.holdings[withdrawToken] -\n            withdrawAmount;\n        require(\n            positiveBalance(account),\n            \"Account balance is too low to withdraw\"\n        );\n    }\n\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\n    function registerOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        _registerDeposit(account, depositToken, depositAmount);\n        _registerBorrow(account, borrowToken, withdrawAmount);\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\n\n        account.lastDepositBlock = block.number;\n    }\n\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\n    function registerTradeAndBorrow(\n        address trader,\n        address tokenFrom,\n        address tokenTo,\n        uint256 inAmount,\n        uint256 outAmount\n    )\n        external\n        override\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        if (account.borrowed[tokenTo] > 0) {\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\n            extinguishDebt(account, tokenTo, extinguishableDebt);\n            totalShort[tokenTo] -= extinguishableDebt;\n        }\n        totalLong[tokenFrom] -= inAmount;\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\n        require(\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        uint256 sellAmount = inAmount;\n        if (inAmount > account.holdings[tokenFrom]) {\n            sellAmount = account.holdings[tokenFrom];\n            /// won't overflow\n            borrowAmount = inAmount - sellAmount;\n\n            totalShort[tokenFrom] += borrowAmount;\n            require(\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\n                \"Exceeding global exposure cap to token -- try again later\"\n            );\n\n            borrow(account, tokenFrom, borrowAmount);\n        }\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\n    }\n\n    /// @dev can get called by router to register the dissolution of an account\n    function registerLiquidation(address trader) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        require(\n            loanInPeg(account, false) == 0,\n            \"Can't liquidate currently borrowing account\"\n        );\n\n        deleteAccount(account);\n    }\n\n    /// @dev view function to display account held assets state\n    function getHoldingAmounts(address trader)\n        external\n        view\n        override\n        returns (\n            address[] memory holdingTokens,\n            uint256[] memory holdingAmounts\n        )\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        holdingTokens = account.holdingTokens;\n\n        holdingAmounts = new uint256[](account.holdingTokens.length);\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\n            address tokenAddress = holdingTokens[idx];\n            holdingAmounts[idx] = account.holdings[tokenAddress];\n        }\n    }\n\n    /// @dev view function to display account borrowing state\n    function getBorrowAmounts(address trader)\n        external\n        view\n        override\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        borrowTokens = account.borrowTokens;\n\n        borrowAmounts = new uint256[](account.borrowTokens.length);\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\n            address tokenAddress = borrowTokens[idx];\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\n                account.borrowed[tokenAddress],\n                tokenAddress,\n                account.borrowedYieldQuotientsFP[tokenAddress]\n            );\n        }\n    }\n\n    /// @dev view function to get loan amount in peg\n    function viewLoanInPeg(address trader)\n        external\n        view\n        returns (uint256 amount)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return\n            viewTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./PriceAware.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\nstruct CrossMarginAccount {\n    uint256 lastDepositBlock;\n    address[] borrowTokens;\n    // borrowed token address => amount\n    mapping(address => uint256) borrowed;\n    // borrowed token => yield quotient\n    mapping(address => uint256) borrowedYieldQuotientsFP;\n    address[] holdingTokens;\n    // token held in portfolio => amount\n    mapping(address => uint256) holdings;\n    // boolean value of whether an account holds a token\n    mapping(address => bool) holdsToken;\n}\n\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\n    /// @dev gets used in calculating how much accounts can borrow\n    uint256 public leveragePercent;\n\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\n    uint256 public liquidationThresholdPercent;\n\n    /// @dev record of all cross margin accounts\n    mapping(address => CrossMarginAccount) internal marginAccounts;\n    /// @dev total token caps\n    mapping(address => uint256) public tokenCaps;\n    /// @dev tracks total of short positions per token\n    mapping(address => uint256) public totalShort;\n    /// @dev tracks total of long positions per token\n    mapping(address => uint256) public totalLong;\n    uint256 public coolingOffPeriod;\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev add an asset to be held by account\n    function addHolding(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 depositAmount\n    ) internal {\n        if (!hasHoldingToken(account, token)) {\n            account.holdingTokens.push(token);\n        }\n\n        account.holdings[token] += depositAmount;\n    }\n\n    /// @dev adjust account to reflect borrowing of token amount\n    function borrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        if (!hasBorrowedToken(account, borrowToken)) {\n            account.borrowTokens.push(borrowToken);\n        } else {\n            account.borrowed[borrowToken] = Lending(lending())\n                .applyBorrowInterest(\n                account.borrowed[borrowToken],\n                borrowToken,\n                account.borrowedYieldQuotientsFP[borrowToken]\n            );\n        }\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\n            .viewBorrowingYieldFP(borrowToken);\n\n        account.borrowed[borrowToken] += borrowAmount;\n        addHolding(account, borrowToken, borrowAmount);\n\n        require(positiveBalance(account), \"Can't borrow: insufficient balance\");\n    }\n\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\n    function positiveBalance(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, false);\n        uint256 holdings = holdingsInPeg(account, false);\n        // The following condition should hold:\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\n        // =>\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\n    }\n\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\n    function extinguishDebt(\n        CrossMarginAccount storage account,\n        address debtToken,\n        uint256 extinguishAmount\n    ) internal {\n        // will throw if insufficient funds\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\n            account.borrowed[debtToken],\n            debtToken,\n            account.borrowedYieldQuotientsFP[debtToken]\n        );\n\n        account.borrowed[debtToken] =\n            account.borrowed[debtToken] -\n            extinguishAmount;\n        account.holdings[debtToken] =\n            account.holdings[debtToken] -\n            extinguishAmount;\n\n        if (account.borrowed[debtToken] > 0) {\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\n                .viewBorrowingYieldFP(debtToken);\n        } else {\n            delete account.borrowedYieldQuotientsFP[debtToken];\n\n            bool decrement = false;\n            uint256 len = account.borrowTokens.length;\n            for (uint256 i; len > i; i++) {\n                address currToken = account.borrowTokens[i];\n                if (currToken == debtToken) {\n                    decrement = true;\n                } else if (decrement) {\n                    account.borrowTokens[i - 1] = currToken;\n                }\n            }\n            account.borrowTokens.pop();\n        }\n    }\n\n    /// @dev checks whether an account holds a token\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.holdsToken[token];\n    }\n\n    /// @dev checks whether an account has borrowed a token\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\n        internal\n        view\n        returns (bool)\n    {\n        return account.borrowedYieldQuotientsFP[token] > 0;\n    }\n\n    /// @dev calculate total loan in reference currency, including compound interest\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\n        internal\n        returns (uint256)\n    {\n        return\n            sumTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP,\n                forceCurBlock\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function holdingsInPeg(\n        CrossMarginAccount storage account,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        return\n            sumTokensInPeg(\n                account.holdingTokens,\n                account.holdings,\n                forceCurBlock\n            );\n    }\n\n    /// @dev check whether an account can/should be liquidated\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\n        internal\n        returns (bool)\n    {\n        uint256 loan = loanInPeg(account, true);\n        uint256 holdings = holdingsInPeg(account, true);\n        // The following should hold:\n        // holdings / loan >= 1.1\n        // => holdings >= loan * 1.1\n        return 100 * holdings >= liquidationThresholdPercent * loan;\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function sumTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.getCurrentPriceInPeg(\n                token,\n                amounts[token],\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and their amounts, summing up\n    function viewTokensInPeg(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function sumTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += yieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP,\n                forceCurBlock\n            );\n        }\n    }\n\n    /// @dev go through list of tokens and ammounts, summing up with interest\n    function viewTokensInPegWithYield(\n        address[] storage tokens,\n        mapping(address => uint256) storage amounts,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256 totalPeg) {\n        uint256 len = tokens.length;\n        for (uint256 tokenId; tokenId < len; tokenId++) {\n            address token = tokens[tokenId];\n            totalPeg += viewYieldTokenInPeg(\n                token,\n                amounts[token],\n                yieldQuotientsFP\n            );\n        }\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function yieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP,\n        bool forceCurBlock\n    ) internal returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return\n            PriceAware.getCurrentPriceInPeg(\n                token,\n                amountInToken,\n                forceCurBlock\n            );\n    }\n\n    /// @dev calculate yield for token amount and convert to reference currency\n    function viewYieldTokenInPeg(\n        address token,\n        uint256 amount,\n        mapping(address => uint256) storage yieldQuotientsFP\n    ) internal view returns (uint256) {\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\n        // 1 * FP / FP = 1\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\n    }\n\n    /// @dev move tokens from one holding to another\n    function adjustAmounts(\n        CrossMarginAccount storage account,\n        address fromToken,\n        address toToken,\n        uint256 soldAmount,\n        uint256 boughtAmount\n    ) internal {\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\n        addHolding(account, toToken, boughtAmount);\n    }\n\n    /// sets borrow and holding to zero\n    function deleteAccount(CrossMarginAccount storage account) internal {\n        uint256 len = account.borrowTokens.length;\n        for (uint256 borrowIdx; len > borrowIdx; borrowIdx++) {\n            address borrowToken = account.borrowTokens[borrowIdx];\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\n            account.borrowed[borrowToken] = 0;\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\n        }\n        len = account.holdingTokens.length;\n        for (uint256 holdingIdx; len > holdingIdx; holdingIdx++) {\n            address holdingToken = account.holdingTokens[holdingIdx];\n            totalLong[holdingToken] -= account.holdings[holdingToken];\n            account.holdings[holdingToken] = 0;\n            account.holdsToken[holdingToken] = false;\n        }\n        delete account.borrowTokens;\n        delete account.holdingTokens;\n    }\n\n    /// @dev minimum\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a > b) {\n            return b;\n        } else {\n            return a;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginTrading.sol",
            "CrossMarginAccounts.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-06",
                "Location": [
                    "adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);",
                    "registerTradeAndBorrow",
                    "registerDeposit",
                    "adjustAmounts",
                    "outAmount"
                ],
                "Type": " Users are credited more tokens when paying back debt with  registerTradeAndBorrow ",
                "Description": "\nThe registerTradeAndBorrow is called with the results of a trade (inAmount, outAmount). It first tries to pay back any debt with the outAmount. However, the full outAmount is credited to the user again as a deposit in the adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount); call. As the user pays back their debt and is credited the same amount again, they are essentially credited twice the outAmount, making a profit of one outAmount. This can be withdrawn and the process can be repeated until the funds are empty.\n\nIn the adjustAmounts call, it should only credit outAmount extinguishableDebt as a deposit like in registerDeposit.\nThe registerDeposit function correctly handles this case.\n\n\n",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IncentiveDistribution.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"./CrossMarginTrading.sol\";\n\n/** \n@title Here we support staking for MFI incentives as well as\nstaking to perform the maintenance role.\n*/\ncontract Admin is RoleAware, Ownable {\n    /// Marginswap (MFI) token address\n    address public immutable MFI;\n    mapping(address => uint256) public stakes;\n    uint256 public totalStakes;\n\n    uint256 public maintenanceStakePerBlock = 10 ether;\n    mapping(address => address) public nextMaintenanceStaker;\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\n    address public currentMaintenanceStaker;\n    address public prevMaintenanceStaker;\n    uint256 public currentMaintenanceStakerStartBlock;\n    address public immutable lockedMFI;\n\n    constructor(\n        address _MFI,\n        address _lockedMFI,\n        address lockedMFIDelegate,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        maintenanceStakePerBlock = 1 ether;\n        lockedMFI = _lockedMFI;\n\n        // for initialization purposes and to ensure availability of service\n        // the team's locked MFI participate in maintenance staking only\n        // (not in the incentive staking part)\n        // this implies some trust of the team to execute, which we deem reasonable\n        // since the locked stake is temporary and diminishing as well as the fact\n        // that the team is heavily invested in the protocol and incentivized\n        // by fees like any other maintainer\n        // furthermore others could step in to liquidate via the attacker route\n        // and take away the team fees if they were delinquent\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\n        currentMaintenanceStaker = _lockedMFI;\n        prevMaintenanceStaker = _lockedMFI;\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\n        currentMaintenanceStakerStartBlock = block.number;\n    }\n\n    /// Maintence stake setter\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\n        maintenanceStakePerBlock = amount;\n    }\n\n    function _stake(address holder, uint256 amount) internal {\n        Fund(fund()).depositFor(holder, MFI, amount);\n\n        stakes[holder] += amount;\n        totalStakes += amount;\n\n        IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Deposit a stake for sender\n    function depositStake(uint256 amount) external {\n        _stake(msg.sender, amount);\n    }\n\n    function _withdrawStake(\n        address holder,\n        uint256 amount,\n        address recipient\n    ) internal {\n        // overflow failure desirable\n        stakes[holder] -= amount;\n        totalStakes -= amount;\n        Fund(fund()).withdraw(MFI, recipient, amount);\n\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Withdraw stake for sender\n    function withdrawStake(uint256 amount) external {\n        require(\n            !isAuthorizedStaker(msg.sender),\n            \"You can't withdraw while you're authorized staker\"\n        );\n        _withdrawStake(msg.sender, amount, msg.sender);\n    }\n\n    /// Deposit maintenance stake\n    function depositMaintenanceStake(uint256 amount) external {\n        require(\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\n            \"Insufficient stake to call even one block\"\n        );\n        _stake(msg.sender, amount);\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\n        }\n    }\n\n    function getMaintenanceStakerStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        if (staker == lockedMFI) {\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\n        } else {\n            return stakes[staker];\n        }\n    }\n\n    function getUpdatedCurrentStaker() public returns (address) {\n        uint256 currentStake =\n            getMaintenanceStakerStake(currentMaintenanceStaker);\n        while (\n            (block.number - currentMaintenanceStakerStartBlock) *\n                maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // delete current from daisy chain\n                address nextOne =\n                    nextMaintenanceStaker[currentMaintenanceStaker];\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\n\n                currentMaintenanceStaker = nextOne;\n            } else {\n                currentMaintenanceStakerStartBlock +=\n                    currentStake /\n                    maintenanceStakePerBlock;\n\n                prevMaintenanceStaker = currentMaintenanceStaker;\n                currentMaintenanceStaker = nextMaintenanceStaker[\n                    currentMaintenanceStaker\n                ];\n            }\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\n        }\n        return currentMaintenanceStaker;\n    }\n\n    function viewCurrentMaintenanceStaker()\n        public\n        view\n        returns (address staker, uint256 startBlock)\n    {\n        staker = currentMaintenanceStaker;\n        uint256 currentStake = getMaintenanceStakerStake(staker);\n        startBlock = currentMaintenanceStakerStartBlock;\n        while (\n            (block.number - startBlock) * maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // skip\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            } else {\n                startBlock += currentStake / maintenanceStakePerBlock;\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            }\n        }\n    }\n\n    /// Add a delegate for staker\n    function addDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = true;\n    }\n\n    /// Remove a delegate for staker\n    function removeDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = false;\n    }\n\n    function isAuthorizedStaker(address caller)\n        public\n        returns (bool isAuthorized)\n    {\n        address currentStaker = getUpdatedCurrentStaker();\n        isAuthorized =\n            currentStaker == caller ||\n            maintenanceDelegateTo[currentStaker][caller];\n    }\n\n    /// Penalize a staker\n    function penalizeMaintenanceStake(\n        address maintainer,\n        uint256 penalty,\n        address recipient\n    ) external returns (uint256 stakeTaken) {\n        require(\n            isStakePenalizer(msg.sender),\n            \"msg.sender not authorized to penalize stakers\"\n        );\n        if (penalty > stakes[maintainer]) {\n            stakeTaken = stakes[maintainer];\n        } else {\n            stakeTaken = penalty;\n        }\n        _withdrawStake(maintainer, stakeTaken, recipient);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\n\nstruct Claim {\n    uint256 startingRewardRateFP;\n    uint256 amount;\n    uint256 intraDayGain;\n    uint256 intraDayLoss;\n}\n\n/// @title Manage distribution of liquidity stake incentives\n/// Some efforts have been made to reduce gas cost at claim time\n/// and shift gas burden onto those who would want to withdraw\ncontract IncentiveDistribution is RoleAware, Ownable {\n    // fixed point number factor\n    uint256 internal constant FP32 = 2**32;\n    // the amount of contraction per thousand, per day\n    // of the overal daily incentive distribution\n    // https://en.wikipedia.org/wiki/Per_mil\n    uint256 public constant contractionPerMil = 999;\n    address public immutable MFI;\n\n    constructor(\n        address _MFI,\n        uint256 startingDailyDistributionWithoutDecimals,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        currentDailyDistribution =\n            startingDailyDistributionWithoutDecimals *\n            (1 ether);\n    }\n\n    // how much is going to be distributed, contracts every day\n    uint256 public currentDailyDistribution;\n\n    uint256 public trancheShareTotal;\n    uint256[] public allTranches;\n\n    struct TrancheMeta {\n        // portion of daily distribution per each tranche\n        uint256 rewardShare;\n\n        uint256 currentDayGains;\n        uint256 currentDayLosses;\n\n        uint256 tomorrowOngoingTotals;\n        uint256 yesterdayOngoingTotals;\n\n        // aggregate all the unclaimed intra-days\n        uint256 intraDayGains;\n        uint256 intraDayLosses;\n        uint256 intraDayRewardGains;\n        uint256 intraDayRewardLosses;\n\n\n        // how much each claim unit would get if they had staked from the dawn of time\n        // expressed as fixed point number\n        // claim amounts are expressed relative to this ongoing aggregate\n        uint256 aggregateDailyRewardRateFP;\n        uint256 yesterdayRewardRateFP;\n\n        mapping(address => Claim) claims;\n    }\n\n    mapping(uint256 => TrancheMeta) public trancheMetadata;\n\n    // last updated day\n    uint256 public lastUpdatedDay;\n\n    mapping(address => uint256) public accruedReward;\n\n    /// Set share of tranche\n    function setTrancheShare(uint256 tranche, uint256 share)\n        external\n        onlyOwner\n    {\n        require(\n            trancheMetadata[tranche].rewardShare > 0,\n            \"Tranche is not initialized, please initialize first\"\n        );\n        _setTrancheShare(tranche, share);\n    }\n\n    function _setTrancheShare(uint256 tranche, uint256 share) internal {\n        TrancheMeta storage tm = trancheMetadata[tranche];\n\n        if (share > tm.rewardShare) {\n            trancheShareTotal += share - tm.rewardShare;\n        } else {\n            trancheShareTotal -= tm.rewardShare - share;\n        }\n        tm.rewardShare = share;\n    }\n\n    /// Initialize tranche\n    function initTranche(uint256 tranche, uint256 share) external onlyOwner {\n        TrancheMeta storage tm = trancheMetadata[tranche];\n        require(tm.rewardShare == 0, \"Tranche already initialized\");\n        _setTrancheShare(tranche, share);\n\n        // simply initialize to 1.0\n        tm.aggregateDailyRewardRateFP = FP32;\n        allTranches.push(tranche);\n    }\n\n    /// Start / increase amount of claim\n    function addToClaimAmount(\n        uint256 tranche,\n        address recipient,\n        uint256 claimAmount\n    ) external {\n        require(\n            isIncentiveReporter(msg.sender),\n            \"Contract not authorized to report incentives\"\n        );\n        if (currentDailyDistribution > 0) {\n            TrancheMeta storage tm = trancheMetadata[tranche];\n            Claim storage claim = tm.claims[recipient];\n\n            uint256 currentDay =\n                claimAmount * (1 days - (block.timestamp % (1 days)));\n\n            tm.currentDayGains += currentDay;\n            claim.intraDayGain += currentDay * currentDailyDistribution;\n\n            tm.tomorrowOngoingTotals += claimAmount * 1 days;\n            updateAccruedReward(tm, recipient, claim);\n\n            claim.amount += claimAmount * (1 days);\n        }\n    }\n\n    /// Decrease amount of claim\n    function subtractFromClaimAmount(\n        uint256 tranche,\n        address recipient,\n        uint256 subtractAmount\n    ) external {\n        require(\n            isIncentiveReporter(msg.sender),\n            \"Contract not authorized to report incentives\"\n        );\n        uint256 currentDay = subtractAmount * (block.timestamp % (1 days));\n\n        TrancheMeta storage tm = trancheMetadata[tranche];\n        Claim storage claim = tm.claims[recipient];\n\n        tm.currentDayLosses += currentDay;\n        claim.intraDayLoss += currentDay * currentDailyDistribution;\n\n        tm.tomorrowOngoingTotals -= subtractAmount * 1 days;\n\n        updateAccruedReward(tm, recipient, claim);\n        claim.amount -= subtractAmount * (1 days);\n    }\n\n    function updateAccruedReward(\n        TrancheMeta storage tm,\n        address recipient,\n        Claim storage claim\n                                 ) internal returns (uint256 rewardDelta){\n        if (claim.startingRewardRateFP > 0) {\n            rewardDelta = calcRewardAmount(tm, claim);\n            accruedReward[recipient] += rewardDelta;\n        }\n        // don't reward for current day (approximately)\n        claim.startingRewardRateFP =\n            tm.yesterdayRewardRateFP +\n            tm.aggregateDailyRewardRateFP;\n    }\n\n    /// @dev additional reward accrued since last update\n    function calcRewardAmount(TrancheMeta storage tm, Claim storage claim)\n        internal\n        view\n        returns (uint256 rewardAmount)\n    {\n        uint256 ours = claim.startingRewardRateFP;\n        uint256 aggregate = tm.aggregateDailyRewardRateFP;\n        if (aggregate > ours) {\n            rewardAmount = (claim.amount * (aggregate - ours)) / FP32;\n        }\n    }\n\n    function applyIntraDay(\n                           TrancheMeta storage tm,\n        Claim storage claim\n                           ) internal view returns (uint256 gainImpact, uint256 lossImpact) {\n        uint256 gain = claim.intraDayGain;\n        uint256 loss = claim.intraDayLoss;\n\n        if (gain + loss > 0) {\n            gainImpact =\n                (gain * tm.intraDayRewardGains) /\n                    (tm.intraDayGains + 1);\n            lossImpact =\n                (loss * tm.intraDayRewardLosses) /\n                    (tm.intraDayLosses + 1);\n        }\n    }\n\n    /// Get a view of reward amount\n    function viewRewardAmount(uint256 tranche, address claimant)\n        external\n        view\n        returns (uint256)\n    {\n        TrancheMeta storage tm = trancheMetadata[tranche];\n        Claim storage claim = tm.claims[claimant];\n\n        uint256 rewardAmount =\n            accruedReward[claimant] + calcRewardAmount(tm, claim);\n        (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\n\n        return rewardAmount + gainImpact - lossImpact;\n    }\n\n    /// Withdraw current reward amount\n    function withdrawReward(uint256[] calldata tranches)\n        external\n        returns (uint256 withdrawAmount)\n    {\n        require(\n            isIncentiveReporter(msg.sender),\n            \"Contract not authorized to report incentives\"\n        );\n\n        updateDayTotals();\n\n        withdrawAmount = accruedReward[msg.sender];\n        for (uint256 i; tranches.length > i; i++) {\n            uint256 tranche = tranches[i];\n\n            TrancheMeta storage tm = trancheMetadata[tranche];\n            Claim storage claim = tm.claims[msg.sender];\n\n            withdrawAmount += updateAccruedReward(tm, msg.sender, claim);\n\n            (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(\n                                                                     tm,\n                claim\n            );\n\n            withdrawAmount = withdrawAmount + gainImpact - lossImpact;\n\n            tm.intraDayGains -= claim.intraDayGain;\n            tm.intraDayLosses -= claim.intraDayLoss;\n            tm.intraDayRewardGains -= gainImpact;\n            tm.intraDayRewardLosses -= lossImpact;\n            \n            claim.intraDayGain = 0;\n        }\n\n        accruedReward[msg.sender] = 0;\n\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\n    }\n\n    function updateDayTotals() internal {\n        uint256 nowDay = block.timestamp / (1 days);\n        uint256 dayDiff = nowDay - lastUpdatedDay;\n\n        // shrink the daily distribution for every day that has passed\n        for (uint256 i = 0; i < dayDiff; i++) {\n            _updateTrancheTotals();\n\n            currentDailyDistribution =\n                (currentDailyDistribution * contractionPerMil) /\n                1000;\n\n            lastUpdatedDay += 1;\n        }\n    }\n\n    function _updateTrancheTotals() internal {\n        for (uint256 i; allTranches.length > i; i++) {\n            uint256 tranche = allTranches[i];\n            TrancheMeta storage tm = trancheMetadata[tranche];\n\n            uint256 todayTotal =\n                tm.yesterdayOngoingTotals +\n                    tm.currentDayGains -\n                tm.currentDayLosses;\n\n            uint256 todayRewardRateFP =\n                (FP32 * (currentDailyDistribution * tm.rewardShare)) /\n                    trancheShareTotal /\n                    todayTotal;\n\n            tm.yesterdayRewardRateFP = todayRewardRateFP;\n\n            tm.aggregateDailyRewardRateFP += todayRewardRateFP;\n\n            tm.intraDayGains +=\n                tm.currentDayGains *\n                currentDailyDistribution;\n\n            tm.intraDayLosses +=\n                tm.currentDayLosses *\n                currentDailyDistribution;\n\n            tm.intraDayRewardGains +=\n                (tm.currentDayGains * todayRewardRateFP) /\n                FP32;\n\n            tm.intraDayRewardLosses +=\n                (tm.currentDayLosses * todayRewardRateFP) /\n                FP32;\n\n            tm.yesterdayOngoingTotals = tm.tomorrowOngoingTotals;\n            tm.currentDayGains = 0;\n            tm.currentDayLosses = 0;\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "Admin.sol",
            "IncentiveDistribution.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-08",
                "Location": [
                    "updateAccruedReward",
                    "accruedReward[recipient]",
                    "withdrawReward",
                    "recipient"
                ],
                "Type": " Rewards cannot be withdrawn",
                "Description": "\nThe rewards for a recipient in IncentiveDistribution.sol are stored in the storage mapping indexed by recipient accruedReward[recipient] and the recipient is the actual margin trader account, see updateAccruedReward.\n\nThese rewards are supposed to be withdrawn through the withdrawReward function but msg.sender is used here instead of a recipient (withdrawer) parameter.\nHowever, msg.sender is enforced to be the incentive reporter and can therefore not be the margin trader.\n\nNobody can withdraw the rewards.\n\n",
                "Repair": "Recommend removing the  isIncentiveReporter(msg.sender) check from withdrawReward function.\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\n/// Stores how many of token you could get for 1k of peg\nstruct TokenPrice {\n    uint256 blockLastUpdated;\n    uint256 tokenPer1k;\n    address[] liquidationPairs;\n    address[] inverseLiquidationPairs;\n    address[] liquidationTokens;\n    address[] inverseLiquidationTokens;\n}\n\n/// @title The protocol features several mechanisms to prevent vulnerability to\n/// price manipulation:\n/// 1) global exposure caps on all tokens which need to be raised gradually\n///    during the process of introducing a new token, making attacks unprofitable\n///    due to lack  of scale\n/// 2) Exponential moving average with cautious price update. Prices for estimating\n///    how much a trader can borrow need not be extremely current and precise, mainly\n///    they must be resilient against extreme manipulation\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\n///    of front-running and other price manipulation.\nabstract contract PriceAware is Ownable, RoleAware {\n    address public immutable peg;\n    mapping(address => TokenPrice) public tokenPrices;\n    /// update window in blocks\n    uint16 public priceUpdateWindow = 8;\n    uint256 public UPDATE_RATE_PERMIL = 80;\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\n\n    constructor(address _peg) Ownable() {\n        peg = _peg;\n    }\n\n    /// Set window for price updates\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\n        priceUpdateWindow = window;\n    }\n\n    /// Set rate for updates\n    function setUpdateRate(uint256 rate) external onlyOwner {\n        UPDATE_RATE_PERMIL = rate;\n    }\n\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MAX_PEG_AMOUNT = amount;\n    }\n\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MIN_PEG_AMOUNT = amount;\n    }\n\n    /// Get current price of token in peg\n    function getCurrentPriceInPeg(\n        address token,\n        uint256 inAmount,\n        bool forceCurBlock\n    ) public returns (uint256) {\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        if (forceCurBlock) {\n            if (\n                block.number - tokenPrice.blockLastUpdated > priceUpdateWindow\n            ) {\n                // update the currently cached price\n                return getPriceFromAMM(token, inAmount);\n            } else {\n                // just get the current price from AMM\n                return viewCurrentPriceInPeg(token, inAmount);\n            }\n        } else if (tokenPrice.tokenPer1k == 0) {\n            // do the best we can if it's at zero\n            return getPriceFromAMM(token, inAmount);\n        }\n\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\n            // update the price somewhat\n            getPriceFromAMM(token, inAmount);\n        }\n\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\n    }\n\n    /// Get view of current price of token in peg\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\n        public\n        view\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n            return outAmount;\n        }\n    }\n\n    /// @dev retrieves the price from the AMM\n    function getPriceFromAMM(address token, uint256 inAmount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n\n            if (\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\n                outAmount < UPDATE_MAX_PEG_AMOUNT\n            ) {\n                setPriceVal(tokenPrice, inAmount, outAmount);\n            }\n\n            return outAmount;\n        }\n    }\n\n    function setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        _setPriceVal(tokenPrice, inAmount, outAmount, UPDATE_RATE_PERMIL);\n        tokenPrice.blockLastUpdated = block.number;\n    }\n\n    function _setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount,\n        uint256 weightPerMil\n    ) internal {\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\n        tokenPrice.tokenPer1k =\n            (tokenPrice.tokenPer1k *\n                (1000 - weightPerMil) +\n                updatePer1k *\n                weightPerMil) /\n            1000;\n    }\n\n    /// add path from token to current liquidation peg\n    function setLiquidationPath(address[] memory path, address[] memory tokens)\n        external\n    {\n        require(\n            isTokenActivator(msg.sender),\n            \"not authorized to set lending cap\"\n        );\n\n        address token = tokens[0];\n\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        tokenPrice.liquidationPairs = new address[](path.length);\n        tokenPrice.inverseLiquidationPairs = new address[](path.length);\n        tokenPrice.liquidationTokens = new address[](tokens.length);\n        tokenPrice.inverseLiquidationTokens = new address[](tokens.length);\n\n        for (uint256 i = 0; path.length > i; i++) {\n            tokenPrice.liquidationPairs[i] = path[i];\n            tokenPrice.inverseLiquidationPairs[i] = path[path.length - i - 1];\n        }\n\n        for (uint256 i = 0; tokens.length > i; i++) {\n            tokenPrice.liquidationTokens[i] = tokens[i];\n            tokenPrice.inverseLiquidationTokens[i] = tokens[\n                tokens.length - i - 1\n            ];\n        }\n\n        uint256[] memory pathAmounts =\n            UniswapStyleLib.getAmountsIn(1000 ether, path, tokens);\n        uint256 inAmount = pathAmounts[0];\n        _setPriceVal(tokenPrice, inAmount, 1000 ether, 1000);\n    }\n\n    function liquidateToPeg(address token, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return amount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapExactT4T(\n                    amount,\n                    0,\n                    tP.liquidationPairs,\n                    tP.liquidationTokens\n                );\n\n            uint256 outAmount = amounts[amounts.length - 1];\n\n            return outAmount;\n        }\n    }\n\n    function liquidateFromPeg(address token, uint256 targetAmount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return targetAmount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapT4ExactT(\n                    targetAmount,\n                    type(uint256).max,\n                    tP.inverseLiquidationPairs,\n                    tP.inverseLiquidationTokens\n                );\n\n            return amounts[0];\n        }\n    }\n}\n\n\npragma solidity >=0.5.0;\n\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\";\n\nlibrary UniswapStyleLib {\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\n    function sortTokens(address tokenA, address tokenB)\n        internal\n        pure\n        returns (address token0, address token1)\n    {\n        require(tokenA != tokenB, \"Identical address!\");\n        (token0, token1) = tokenA < tokenB\n            ? (tokenA, tokenB)\n            : (tokenB, tokenA);\n        require(token0 != address(0), \"Zero address!\");\n    }\n\n    // fetches and sorts the reserves for a pair\n    function getReserves(\n        address pair,\n        address tokenA,\n        address tokenB\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\n        (address token0, ) = sortTokens(tokenA, tokenB);\n        (uint256 reserve0, uint256 reserve1, ) =\n            IUniswapV2Pair(pair).getReserves();\n        (reserveA, reserveB) = tokenA == token0\n            ? (reserve0, reserve1)\n            : (reserve1, reserve0);\n    }\n\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountOut) {\n        require(amountIn > 0, \"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 amountInWithFee = amountIn * 997;\n        uint256 numerator = amountInWithFee * reserveOut;\n        uint256 denominator = reserveIn * 1_000 + amountInWithFee;\n        amountOut = numerator / denominator;\n    }\n\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) internal pure returns (uint256 amountIn) {\n        require(amountOut > 0, \"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\");\n        require(\n            reserveIn > 0 && reserveOut > 0,\n            \"UniswapV2Library: INSUFFICIENT_LIQUIDITY\"\n        );\n        uint256 numerator = reserveIn * amountOut * 1_000;\n        uint256 denominator = (reserveOut - amountOut) - 997;\n        amountIn = (numerator / denominator) + 1;\n    }\n\n    // performs chained getAmountOut calculations on any number of pairs\n    function getAmountsOut(\n        uint256 amountIn,\n        address[] memory pairs,\n        address[] memory tokens\n    ) internal view returns (uint256[] memory amounts) {\n        require(pairs.length >= 1, \"pairs is too short\");\n\n        amounts = new uint256[](tokens.length);\n        amounts[0] = amountIn;\n\n        for (uint256 i; i < tokens.length - 1; i++) {\n            address pair = pairs[i];\n\n            (uint256 reserveIn, uint256 reserveOut) =\n                getReserves(pair, tokens[i], tokens[i + 1]);\n\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\n        }\n    }\n\n    // performs chained getAmountIn calculations on any number of pairs\n    function getAmountsIn(\n        uint256 amountOut,\n        address[] memory pairs,\n        address[] memory tokens\n    ) internal view returns (uint256[] memory amounts) {\n        require(pairs.length >= 1, \"pairs is too short\");\n\n        amounts = new uint256[](tokens.length);\n        amounts[amounts.length - 1] = amountOut;\n\n        for (uint256 i = tokens.length - 1; i > 0; i--) {\n            address pair = pairs[i - 1];\n\n            (uint256 reserveIn, uint256 reserveOut) =\n                getReserves(pair, tokens[i - 1], tokens[i]);\n\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "PriceAware.sol",
            "UniswapStyleLib.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-02",
                "Location": [
                    "getAmountsOut",
                    "setLiquidationPath"
                ],
                "Type": " Missing checks if pairs equal tokens",
                "Description": "\nThe UniswapStyleLib.getAmountsOut, PriceAware.setLiquidationPath (and others) don't check that path.length + 1 == tokens.length which should always hold true. Also, it does not check that the tokens actually match the pair. It's easy to set faulty liquidation paths which then end up reverting the liquidation transactions.\n\n\n",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./CrossMarginLiquidation.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\n    constructor(address _peg, address _roles)\n        RoleAware(_roles)\n        PriceAware(_peg)\n    {\n        liquidationThresholdPercent = 110;\n        coolingOffPeriod = 20;\n        leveragePercent = 300;\n    }\n\n    /// @dev admin function to set the token cap\n    function setTokenCap(address token, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Caller not authorized to set token cap\"\n        );\n        tokenCaps[token] = cap;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeverage(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm a deposit to an account\n    function registerDeposit(\n        address trader,\n        address token,\n        uint256 depositAmount\n    ) external override returns (uint256 extinguishableDebt) {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n        account.lastDepositBlock = block.number;\n\n        if (account.borrowed[token] > 0) {\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\n            extinguishDebt(account, token, extinguishableDebt);\n            totalShort[token] -= extinguishableDebt;\n        }\n\n        // no overflow because depositAmount >= extinguishableDebt\n        uint256 addedHolding = depositAmount - extinguishableDebt;\n        _registerDeposit(account, token, addedHolding);\n    }\n\n    function _registerDeposit(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 addedHolding\n    ) internal {\n        addHolding(account, token, addedHolding);\n\n        totalLong[token] += addedHolding;\n        require(\n            tokenCaps[token] >= totalLong[token],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n    }\n\n    /// @dev gets called by router to affirm borrowing event\n    function registerBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerBorrow(account, borrowToken, borrowAmount);\n    }\n\n    function _registerBorrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        totalShort[borrowToken] += borrowAmount;\n        totalLong[borrowToken] += borrowAmount;\n        require(\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        borrow(account, borrowToken, borrowAmount);\n    }\n\n    /// @dev gets called by router to affirm withdrawal of tokens from account\n    function registerWithdrawal(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\n    }\n\n    function _registerWithdrawal(\n        CrossMarginAccount storage account,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) internal {\n        require(\n            block.number > account.lastDepositBlock + coolingOffPeriod,\n            \"To prevent attacks you must wait until your cooling off period is over to withdraw\"\n        );\n\n        totalLong[withdrawToken] -= withdrawAmount;\n        // throws on underflow\n        account.holdings[withdrawToken] =\n            account.holdings[withdrawToken] -\n            withdrawAmount;\n        require(\n            positiveBalance(account),\n            \"Account balance is too low to withdraw\"\n        );\n    }\n\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\n    function registerOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        _registerDeposit(account, depositToken, depositAmount);\n        _registerBorrow(account, borrowToken, withdrawAmount);\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\n\n        account.lastDepositBlock = block.number;\n    }\n\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\n    function registerTradeAndBorrow(\n        address trader,\n        address tokenFrom,\n        address tokenTo,\n        uint256 inAmount,\n        uint256 outAmount\n    )\n        external\n        override\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        if (account.borrowed[tokenTo] > 0) {\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\n            extinguishDebt(account, tokenTo, extinguishableDebt);\n            totalShort[tokenTo] -= extinguishableDebt;\n        }\n        totalLong[tokenFrom] -= inAmount;\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\n        require(\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        uint256 sellAmount = inAmount;\n        if (inAmount > account.holdings[tokenFrom]) {\n            sellAmount = account.holdings[tokenFrom];\n            /// won't overflow\n            borrowAmount = inAmount - sellAmount;\n\n            totalShort[tokenFrom] += borrowAmount;\n            require(\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\n                \"Exceeding global exposure cap to token -- try again later\"\n            );\n\n            borrow(account, tokenFrom, borrowAmount);\n        }\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\n    }\n\n    /// @dev can get called by router to register the dissolution of an account\n    function registerLiquidation(address trader) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        require(\n            loanInPeg(account, false) == 0,\n            \"Can't liquidate currently borrowing account\"\n        );\n\n        deleteAccount(account);\n    }\n\n    /// @dev view function to display account held assets state\n    function getHoldingAmounts(address trader)\n        external\n        view\n        override\n        returns (\n            address[] memory holdingTokens,\n            uint256[] memory holdingAmounts\n        )\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        holdingTokens = account.holdingTokens;\n\n        holdingAmounts = new uint256[](account.holdingTokens.length);\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\n            address tokenAddress = holdingTokens[idx];\n            holdingAmounts[idx] = account.holdings[tokenAddress];\n        }\n    }\n\n    /// @dev view function to display account borrowing state\n    function getBorrowAmounts(address trader)\n        external\n        view\n        override\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        borrowTokens = account.borrowTokens;\n\n        borrowAmounts = new uint256[](account.borrowTokens.length);\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\n            address tokenAddress = borrowTokens[idx];\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\n                account.borrowed[tokenAddress],\n                tokenAddress,\n                account.borrowedYieldQuotientsFP[tokenAddress]\n            );\n        }\n    }\n\n    /// @dev view function to get loan amount in peg\n    function viewLoanInPeg(address trader)\n        external\n        view\n        returns (uint256 amount)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return\n            viewTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginTrading.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-03",
                "Location": [
                    "registerTrade",
                    "registerTradeAndBorrow"
                ],
                "Type": " No entry checks in crossSwap[Exact",
                "Description": "\nThe functions crossSwapTokensForExactTokens and crossSwapExactTokensForTokens of MarginRouter.sol do not check who is calling the function. They also do not check the contents of pairs and tokens nor do they check if the size of pairs and tokens is the same.\n\nregisterTradeAndBorrow within registerTrade does seem to do an entry check (require(isMarginTrader(msg.sender)...) however as this is an external function msg.sender is the address of MarginRouter.sol, which will verify ok.\n\nCalling these functions allow the caller to trade on behalf of marginswap, which could result in losing funds. It's possible to construct all parameters to circumvent the checks. Also the \"pairs\" can be fully specified; they are contract addresses that are called from getAmountsIn / getAmountsOut and from pair.swap. This way you can call arbitrary (self constructed) code, which can reentrantly call the marginswap code.\n\n",
                "Repair": "Recommend limiting who can call the functions. Perhaps whitelist contents of pairs and tokens. Check the size of pairs and tokens is the same.\n\nwerg (Marginswap) confirmed(https://github.com/code-423n4/2021-04-marginswap-findings/issues/4#issuecomment-813047489):\n\n This has merit: particularly the part about self-constructed pairs. We either need much more rigorous checks or a a process for vetting & approving pairs. The latter is likely more gas efficient.\n\n\n"
            },
            {
                "Name": "M-09",
                "Location": [
                    "liquidationThresholdPercent ="
                ],
                "Type": " Isolated margin contracts declare but do not set the value of liquidationThresholdPercent",
                "Description": "\nCrossMarginTrading sets value of liquidationThresholdPercent in the constructor: liquidationThresholdPercent = 110; Isolated margin contracts declare but do not set the value of liquidationThresholdPercent.\n\n",
                "Repair": "Recommend setting the initial value for the liquidationThresholdPercent in Isolated margin contracts.\n\nThis makes function belowMaintenanceThreshold to always return true unless a value is set via function setLiquidationThresholdPercent. Comments indicate that the value should also be set to 110:\n\nsolidity\n// The following should hold:\n// holdings / loan = 1.1\n// = holdings = loan * 1.1\n\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./CrossMarginAccounts.sol\";\n\n/** \n@title Handles liquidation of accounts below maintenance threshold\n@notice Liquidation can be called by the authorized staker, \nas determined in the Admin contract.\nIf the authorized staker is delinquent, other participants can jump\nin and attack, taking their fees and potentially even their stake,\ndepending how delinquent the responsible authorized staker is.\n*/\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\n    event LiquidationShortfall(uint256 amount);\n    event AccountLiquidated(address account);\n\n    struct Liquidation {\n        uint256 buy;\n        uint256 sell;\n        uint256 blockNum;\n    }\n\n    /// record kept around until a stake attacker can claim their reward\n    struct AccountLiqRecord {\n        uint256 blockNum;\n        address loser;\n        uint256 amount;\n        address stakeAttacker;\n    }\n\n    mapping(address => Liquidation) liquidationAmounts;\n    address[] internal sellTokens;\n    address[] internal buyTokens;\n    address[] internal tradersToLiquidate;\n\n    mapping(address => uint256) public maintenanceFailures;\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\n    uint256 public avgLiquidationPerCall = 10;\n\n    uint256 public liqStakeAttackWindow = 5;\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\n\n    uint256 public failureThreshold = 10;\n\n    /// Set failure threshold\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\n        failureThreshold = threshFactor;\n    }\n\n    /// Set liquidity stake attack window\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\n        liqStakeAttackWindow = window;\n    }\n\n    /// Set maintainer's percent cut\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\n        MAINTAINER_CUT_PERCENT = cut;\n    }\n\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\n    /// and some of them are not straightforward.\n    /// First of all it aggregates liquidation amounts,\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\n    /// exist in memory.\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\n    /// (i.e. current caller is authorized). Also see context below.\n    function calcLiquidationAmounts(\n        address[] memory liquidationCandidates,\n        bool isAuthorized\n    ) internal returns (uint256 attackReturns) {\n        sellTokens = new address[](0);\n        buyTokens = new address[](0);\n        tradersToLiquidate = new address[](0);\n\n        for (\n            uint256 traderIndex = 0;\n            liquidationCandidates.length > traderIndex;\n            traderIndex++\n        ) {\n            address traderAddress = liquidationCandidates[traderIndex];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n            if (belowMaintenanceThreshold(account)) {\n                tradersToLiquidate.push(traderAddress);\n                for (\n                    uint256 sellIdx = 0;\n                    account.holdingTokens.length > sellIdx;\n                    sellIdx++\n                ) {\n                    address token = account.holdingTokens[sellIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = account.holdings[token];\n                        liquidation.buy = 0;\n                        liquidation.blockNum = block.number;\n                        sellTokens.push(token);\n                    } else {\n                        liquidation.sell += account.holdings[token];\n                    }\n                }\n                for (\n                    uint256 buyIdx = 0;\n                    account.borrowTokens.length > buyIdx;\n                    buyIdx++\n                ) {\n                    address token = account.borrowTokens[buyIdx];\n                    Liquidation storage liquidation = liquidationAmounts[token];\n\n                    uint256 loanAmount =\n                        Lending(lending()).applyBorrowInterest(\n                            account.borrowed[token],\n                            token,\n                            account.borrowedYieldQuotientsFP[token]\n                        );\n\n                    Lending(lending()).payOff(token, loanAmount);\n\n                    if (liquidation.blockNum != block.number) {\n                        liquidation.sell = 0;\n                        liquidation.buy = loanAmount;\n                        liquidation.blockNum = block.number;\n                        buyTokens.push(token);\n                    } else {\n                        liquidation.buy += loanAmount;\n                    }\n                }\n            }\n\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[traderAddress];\n            if (isAuthorized) {\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\n            }\n        }\n    }\n\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\n        internal\n        returns (uint256 returnAmount)\n    {\n        if (liqAttackRecord.amount > 0) {\n            // validate attack records, if any\n            uint256 blockDiff =\n                min(\n                    block.number - liqAttackRecord.blockNum,\n                    liqStakeAttackWindow\n                );\n\n            uint256 attackerCut =\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\n\n            Fund(fund()).withdraw(\n                PriceAware.peg,\n                liqAttackRecord.stakeAttacker,\n                attackerCut\n            );\n\n            Admin a = Admin(admin());\n            uint256 penalty =\n                (a.maintenanceStakePerBlock() * attackerCut) /\n                    avgLiquidationPerCall;\n            a.penalizeMaintenanceStake(\n                liqAttackRecord.loser,\n                penalty,\n                liqAttackRecord.stakeAttacker\n            );\n\n            // return remainder, after cut was taken to authorized stakekr\n            returnAmount = liqAttackRecord.amount - attackerCut;\n        }\n    }\n\n    /// Disburse liquidity stake attacks\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\n        external\n    {\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\n            address liqAccount = liquidatedAccounts[i];\n            AccountLiqRecord storage liqAttackRecord =\n                stakeAttackRecords[liqAccount];\n            if (\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\n            ) {\n                _disburseLiqAttack(liqAttackRecord);\n                delete stakeAttackRecords[liqAccount];\n            }\n        }\n    }\n\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\n            address buyToken = buyTokens[tokenIdx];\n            Liquidation storage liq = liquidationAmounts[buyToken];\n            if (liq.buy > liq.sell) {\n                pegAmount += PriceAware.liquidateFromPeg(\n                    buyToken,\n                    liq.buy - liq.sell\n                );\n                delete liquidationAmounts[buyToken];\n            }\n        }\n        delete buyTokens;\n    }\n\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\n        for (\n            uint256 tokenIndex = 0;\n            sellTokens.length > tokenIndex;\n            tokenIndex++\n        ) {\n            address token = sellTokens[tokenIndex];\n            Liquidation storage liq = liquidationAmounts[token];\n            if (liq.sell > liq.buy) {\n                uint256 sellAmount = liq.sell - liq.buy;\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\n                delete liquidationAmounts[token];\n            }\n        }\n        delete sellTokens;\n    }\n\n    function maintainerIsFailing() internal view returns (bool) {\n        (address currentMaintainer, ) =\n            Admin(admin()).viewCurrentMaintenanceStaker();\n        return\n            maintenanceFailures[currentMaintainer] >\n            failureThreshold * avgLiquidationPerCall;\n    }\n\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\n    function liquidate(address[] memory liquidationCandidates)\n        external\n        noIntermediary\n        returns (uint256 maintainerCut)\n    {\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\n\n        // calcLiquidationAmounts does a lot of the work here\n        // * aggregates both sell and buy side targets to be liquidated\n        // * returns attacker cuts to them\n        // * aggregates any returned fees from unauthorized (attacking) attempts\n        maintainerCut = calcLiquidationAmounts(\n            liquidationCandidates,\n            isAuthorized\n        );\n\n        uint256 sale2pegAmount = liquidateToPeg();\n        uint256 peg2targetCost = liquidateFromPeg();\n\n        // this may be a bit imprecise, since individual shortfalls may be obscured\n        // by overall returns and the maintainer cut is taken out of the net total,\n        // but it gives us the general picture\n        if (\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\n            sale2pegAmount\n        ) {\n            emit LiquidationShortfall(\n                (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) /\n                    100 -\n                    sale2pegAmount\n            );\n        }\n\n        address loser = address(0);\n        if (!canTakeNow) {\n            // whoever is the current responsible maintenance staker\n            // and liable to lose their stake\n            loser = Admin(admin()).getUpdatedCurrentStaker();\n        }\n\n        // iterate over traders and send back their money\n        // as well as giving attackers their due, in case caller isn't authorized\n        for (\n            uint256 traderIdx = 0;\n            tradersToLiquidate.length > traderIdx;\n            traderIdx++\n        ) {\n            address traderAddress = tradersToLiquidate[traderIdx];\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\n\n            uint256 holdingsValue = holdingsInPeg(account, true);\n            uint256 borrowValue = loanInPeg(account, true);\n            // 5% of value borrowed\n            uint256 maintainerCut4Account =\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\n            maintainerCut += maintainerCut4Account;\n\n            if (!canTakeNow) {\n                // This could theoretically lead to a previous attackers\n                // record being overwritten, but only if the trader restarts\n                // their account and goes back into the red within the short time window\n                // which would be a costly attack requiring collusion without upside\n                AccountLiqRecord storage liqAttackRecord =\n                    stakeAttackRecords[traderAddress];\n                liqAttackRecord.amount = maintainerCut4Account;\n                liqAttackRecord.stakeAttacker = msg.sender;\n                liqAttackRecord.blockNum = block.number;\n                liqAttackRecord.loser = loser;\n            }\n\n            // send back trader money\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\n                // send remaining funds back to trader\n                Fund(fund()).withdraw(\n                    PriceAware.peg,\n                    traderAddress,\n                    holdingsValue - borrowValue - maintainerCut4Account\n                );\n            }\n\n            emit AccountLiquidated(traderAddress);\n            deleteAccount(account);\n        }\n\n        avgLiquidationPerCall =\n            (avgLiquidationPerCall * 99 + maintainerCut) /\n            100;\n\n        if (canTakeNow) {\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\n        }\n\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\n        if (isAuthorized) {\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\n            } else {\n                maintenanceFailures[currentMaintainer] = 0;\n            }\n        } else {\n            maintenanceFailures[currentMaintainer] += maintainerCut;\n        }\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IncentiveDistribution.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"./CrossMarginTrading.sol\";\n\n/** \n@title Here we support staking for MFI incentives as well as\nstaking to perform the maintenance role.\n*/\ncontract Admin is RoleAware, Ownable {\n    /// Marginswap (MFI) token address\n    address public immutable MFI;\n    mapping(address => uint256) public stakes;\n    uint256 public totalStakes;\n\n    uint256 public maintenanceStakePerBlock = 10 ether;\n    mapping(address => address) public nextMaintenanceStaker;\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\n    address public currentMaintenanceStaker;\n    address public prevMaintenanceStaker;\n    uint256 public currentMaintenanceStakerStartBlock;\n    address public immutable lockedMFI;\n\n    constructor(\n        address _MFI,\n        address _lockedMFI,\n        address lockedMFIDelegate,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        maintenanceStakePerBlock = 1 ether;\n        lockedMFI = _lockedMFI;\n\n        // for initialization purposes and to ensure availability of service\n        // the team's locked MFI participate in maintenance staking only\n        // (not in the incentive staking part)\n        // this implies some trust of the team to execute, which we deem reasonable\n        // since the locked stake is temporary and diminishing as well as the fact\n        // that the team is heavily invested in the protocol and incentivized\n        // by fees like any other maintainer\n        // furthermore others could step in to liquidate via the attacker route\n        // and take away the team fees if they were delinquent\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\n        currentMaintenanceStaker = _lockedMFI;\n        prevMaintenanceStaker = _lockedMFI;\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\n        currentMaintenanceStakerStartBlock = block.number;\n    }\n\n    /// Maintence stake setter\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\n        maintenanceStakePerBlock = amount;\n    }\n\n    function _stake(address holder, uint256 amount) internal {\n        Fund(fund()).depositFor(holder, MFI, amount);\n\n        stakes[holder] += amount;\n        totalStakes += amount;\n\n        IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Deposit a stake for sender\n    function depositStake(uint256 amount) external {\n        _stake(msg.sender, amount);\n    }\n\n    function _withdrawStake(\n        address holder,\n        uint256 amount,\n        address recipient\n    ) internal {\n        // overflow failure desirable\n        stakes[holder] -= amount;\n        totalStakes -= amount;\n        Fund(fund()).withdraw(MFI, recipient, amount);\n\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Withdraw stake for sender\n    function withdrawStake(uint256 amount) external {\n        require(\n            !isAuthorizedStaker(msg.sender),\n            \"You can't withdraw while you're authorized staker\"\n        );\n        _withdrawStake(msg.sender, amount, msg.sender);\n    }\n\n    /// Deposit maintenance stake\n    function depositMaintenanceStake(uint256 amount) external {\n        require(\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\n            \"Insufficient stake to call even one block\"\n        );\n        _stake(msg.sender, amount);\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\n        }\n    }\n\n    function getMaintenanceStakerStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        if (staker == lockedMFI) {\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\n        } else {\n            return stakes[staker];\n        }\n    }\n\n    function getUpdatedCurrentStaker() public returns (address) {\n        uint256 currentStake =\n            getMaintenanceStakerStake(currentMaintenanceStaker);\n        while (\n            (block.number - currentMaintenanceStakerStartBlock) *\n                maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // delete current from daisy chain\n                address nextOne =\n                    nextMaintenanceStaker[currentMaintenanceStaker];\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\n\n                currentMaintenanceStaker = nextOne;\n            } else {\n                currentMaintenanceStakerStartBlock +=\n                    currentStake /\n                    maintenanceStakePerBlock;\n\n                prevMaintenanceStaker = currentMaintenanceStaker;\n                currentMaintenanceStaker = nextMaintenanceStaker[\n                    currentMaintenanceStaker\n                ];\n            }\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\n        }\n        return currentMaintenanceStaker;\n    }\n\n    function viewCurrentMaintenanceStaker()\n        public\n        view\n        returns (address staker, uint256 startBlock)\n    {\n        staker = currentMaintenanceStaker;\n        uint256 currentStake = getMaintenanceStakerStake(staker);\n        startBlock = currentMaintenanceStakerStartBlock;\n        while (\n            (block.number - startBlock) * maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // skip\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            } else {\n                startBlock += currentStake / maintenanceStakePerBlock;\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            }\n        }\n    }\n\n    /// Add a delegate for staker\n    function addDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = true;\n    }\n\n    /// Remove a delegate for staker\n    function removeDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = false;\n    }\n\n    function isAuthorizedStaker(address caller)\n        public\n        returns (bool isAuthorized)\n    {\n        address currentStaker = getUpdatedCurrentStaker();\n        isAuthorized =\n            currentStaker == caller ||\n            maintenanceDelegateTo[currentStaker][caller];\n    }\n\n    /// Penalize a staker\n    function penalizeMaintenanceStake(\n        address maintainer,\n        uint256 penalty,\n        address recipient\n    ) external returns (uint256 stakeTaken) {\n        require(\n            isStakePenalizer(msg.sender),\n            \"msg.sender not authorized to penalize stakers\"\n        );\n        if (penalty > stakes[maintainer]) {\n            stakeTaken = stakes[maintainer];\n        } else {\n            stakeTaken = penalty;\n        }\n        _withdrawStake(maintainer, stakeTaken, recipient);\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginLiquidation.sol",
            "Admin.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-04",
                "Location": [
                    "canTakeNow",
                    "Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);",
                    "maintainerIsFailing()",
                    "maintenanceFailures[currentMaintainer]"
                ],
                "Type": " maintainer can be pushed out",
                "Description": "\nThe function liquidate (in both CrossMarginLiquidation.sol and IsolatedMarginLiquidation.sol) can be called by everyone. If an attacker calls this repeatedly then the maintainer will be punished and eventually be reported as maintainerIsFailing\nAnd then the attacker can take the payouts.\n\nWhen a non authorized address repeatedly calls liquidate then the following happens: isAuthorized = false which means maintenanceFailures[currentMaintainer] increases. After sufficient calls it will be higher than the threshold and then\nmaintainerIsFailing() will be true. This results in canTakeNow being true, which finally means the following will be executed:\n\nFund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\n\nAn attacker can push out a maintainer and take over the liquidation revenues.\n\n",
                "Repair": "Recommend put authorization on who can call the liquidate function, review the maintainer punishment scheme.\n\nwerg (Marginswap) disputed(https://github.com/code-423n4/2021-04-marginswap-findings/issues/5#issuecomment-813044805):\n\n I believe this issue is not a vulnerability, due to the checks in lines 326-335. Even if someone comes in first and claims the maintainer is failing they can do their job in the same or next block and get all / most of their failure record extinguished.\n\nzscole (Judge)(https://github.com/code-423n4/2021-04-marginswap-findings/issues/5#issuecomment-824102934):\n\n Acknowledging feedback from @werg, but maintaining the reported risk level of medium since this has implications on token logic.\n\n\n"
            }
        ]
    },
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-05",
                "Location": [
                    "//solidity\nwithdrawHourlyBond Lending.sol\ncloseHourlyBondAccount Lending.sol\nhaircut Lending.sol\naddDelegate(own adress...) Admin.sol\nremoveDelegate(own adress...) Admin.sol\ndepositStake Admin.sol\ndisburseLiqStakeAttacks CrossMarginLiquidation.sol\ndisburseLiqStakeAttacks IsolatedMarginLiquidation.sol\ngetCurrentPriceInPeg PriceAware.sol\n"
                ],
                "Type": " Several function have no entry check",
                "Description": "\nThe following functions have no entry check or a trivial entry check:\n\nsolidity\nwithdrawHourlyBond Lending.sol\ncloseHourlyBondAccount Lending.sol\nhaircut Lending.sol\naddDelegate(own adress...) Admin.sol\nremoveDelegate(own adress...) Admin.sol\ndepositStake Admin.sol\ndisburseLiqStakeAttacks CrossMarginLiquidation.sol\ndisburseLiqStakeAttacks IsolatedMarginLiquidation.sol\ngetCurrentPriceInPeg PriceAware.sol\n\n\nBy manipulating the input values (for example extremely large values), you might be able to disturb the internal administration of the contract, thus perhaps locking function or giving wrong rates.\n\n",
                "Repair": "Recommend checking the functions to see if they are completely risk free and add entry checks if they are not, and add a comment to notify the function is meant to be called by everyone.\n\nwerg (Marginswap)(https://github.com/code-423n4/2021-04-marginswap-findings/issues/9#issuecomment-813043345):\n\n withdrawHourlyBond: could not find vulnerability, since solidity 0.8.x fails on underflow in HourlyBondSubscriptionLending.sol:115 in case of unauthorized access.\n closeHourlyBondAccount: same story since both call into _withdrawHourlyBond\n haircut: trivially guarded in one way, though this actually has merit in another way -if at some point down the road an attacker were able to establish a token, make it popular enough for us to add it to cross margin, but include in that token contract a malicious function that calls haircut, they could then void everybody's bonds in their token. I don't see how it would be profitable, it's definitely an expensive long con, but... we should add an extra guard to make sure it's an isolated margin trading contract.\n addDelegate has a guard.\n removeDelegate has a guard as well, or am I missing something here?\n depositStake fails for unfunded requests in the safe transfer in Fund.depositFor\n disburseLiqStakeAttacks should be universally accessible by design\n getCurrentPriceInPeg only updates state in a rate limited way, hence fine for it to be public\n\n I will add comments to the effect. Thanks again\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./IncentiveDistribution.sol\";\nimport \"./RoleAware.sol\";\nimport \"./Fund.sol\";\nimport \"./CrossMarginTrading.sol\";\n\n/** \n@title Here we support staking for MFI incentives as well as\nstaking to perform the maintenance role.\n*/\ncontract Admin is RoleAware, Ownable {\n    /// Marginswap (MFI) token address\n    address public immutable MFI;\n    mapping(address => uint256) public stakes;\n    uint256 public totalStakes;\n\n    uint256 public maintenanceStakePerBlock = 10 ether;\n    mapping(address => address) public nextMaintenanceStaker;\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\n    address public currentMaintenanceStaker;\n    address public prevMaintenanceStaker;\n    uint256 public currentMaintenanceStakerStartBlock;\n    address public immutable lockedMFI;\n\n    constructor(\n        address _MFI,\n        address _lockedMFI,\n        address lockedMFIDelegate,\n        address _roles\n    ) RoleAware(_roles) Ownable() {\n        MFI = _MFI;\n        maintenanceStakePerBlock = 1 ether;\n        lockedMFI = _lockedMFI;\n\n        // for initialization purposes and to ensure availability of service\n        // the team's locked MFI participate in maintenance staking only\n        // (not in the incentive staking part)\n        // this implies some trust of the team to execute, which we deem reasonable\n        // since the locked stake is temporary and diminishing as well as the fact\n        // that the team is heavily invested in the protocol and incentivized\n        // by fees like any other maintainer\n        // furthermore others could step in to liquidate via the attacker route\n        // and take away the team fees if they were delinquent\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\n        currentMaintenanceStaker = _lockedMFI;\n        prevMaintenanceStaker = _lockedMFI;\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\n        currentMaintenanceStakerStartBlock = block.number;\n    }\n\n    /// Maintence stake setter\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\n        maintenanceStakePerBlock = amount;\n    }\n\n    function _stake(address holder, uint256 amount) internal {\n        Fund(fund()).depositFor(holder, MFI, amount);\n\n        stakes[holder] += amount;\n        totalStakes += amount;\n\n        IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Deposit a stake for sender\n    function depositStake(uint256 amount) external {\n        _stake(msg.sender, amount);\n    }\n\n    function _withdrawStake(\n        address holder,\n        uint256 amount,\n        address recipient\n    ) internal {\n        // overflow failure desirable\n        stakes[holder] -= amount;\n        totalStakes -= amount;\n        Fund(fund()).withdraw(MFI, recipient, amount);\n\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\n            1,\n            holder,\n            amount\n        );\n    }\n\n    /// Withdraw stake for sender\n    function withdrawStake(uint256 amount) external {\n        require(\n            !isAuthorizedStaker(msg.sender),\n            \"You can't withdraw while you're authorized staker\"\n        );\n        _withdrawStake(msg.sender, amount, msg.sender);\n    }\n\n    /// Deposit maintenance stake\n    function depositMaintenanceStake(uint256 amount) external {\n        require(\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\n            \"Insufficient stake to call even one block\"\n        );\n        _stake(msg.sender, amount);\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\n        }\n    }\n\n    function getMaintenanceStakerStake(address staker)\n        public\n        view\n        returns (uint256)\n    {\n        if (staker == lockedMFI) {\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\n        } else {\n            return stakes[staker];\n        }\n    }\n\n    function getUpdatedCurrentStaker() public returns (address) {\n        uint256 currentStake =\n            getMaintenanceStakerStake(currentMaintenanceStaker);\n        while (\n            (block.number - currentMaintenanceStakerStartBlock) *\n                maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // delete current from daisy chain\n                address nextOne =\n                    nextMaintenanceStaker[currentMaintenanceStaker];\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\n\n                currentMaintenanceStaker = nextOne;\n            } else {\n                currentMaintenanceStakerStartBlock +=\n                    currentStake /\n                    maintenanceStakePerBlock;\n\n                prevMaintenanceStaker = currentMaintenanceStaker;\n                currentMaintenanceStaker = nextMaintenanceStaker[\n                    currentMaintenanceStaker\n                ];\n            }\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\n        }\n        return currentMaintenanceStaker;\n    }\n\n    function viewCurrentMaintenanceStaker()\n        public\n        view\n        returns (address staker, uint256 startBlock)\n    {\n        staker = currentMaintenanceStaker;\n        uint256 currentStake = getMaintenanceStakerStake(staker);\n        startBlock = currentMaintenanceStakerStartBlock;\n        while (\n            (block.number - startBlock) * maintenanceStakePerBlock >=\n            currentStake\n        ) {\n            if (maintenanceStakePerBlock > currentStake) {\n                // skip\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            } else {\n                startBlock += currentStake / maintenanceStakePerBlock;\n                staker = nextMaintenanceStaker[staker];\n                currentStake = getMaintenanceStakerStake(staker);\n            }\n        }\n    }\n\n    /// Add a delegate for staker\n    function addDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = true;\n    }\n\n    /// Remove a delegate for staker\n    function removeDelegate(address forStaker, address delegate) external {\n        require(\n            msg.sender == forStaker ||\n                maintenanceDelegateTo[forStaker][msg.sender],\n            \"msg.sender not authorized to delegate for staker\"\n        );\n        maintenanceDelegateTo[forStaker][delegate] = false;\n    }\n\n    function isAuthorizedStaker(address caller)\n        public\n        returns (bool isAuthorized)\n    {\n        address currentStaker = getUpdatedCurrentStaker();\n        isAuthorized =\n            currentStaker == caller ||\n            maintenanceDelegateTo[currentStaker][caller];\n    }\n\n    /// Penalize a staker\n    function penalizeMaintenanceStake(\n        address maintainer,\n        uint256 penalty,\n        address recipient\n    ) external returns (uint256 stakeTaken) {\n        require(\n            isStakePenalizer(msg.sender),\n            \"msg.sender not authorized to penalize stakers\"\n        );\n        if (penalty > stakes[maintainer]) {\n            stakeTaken = stakes[maintainer];\n        } else {\n            stakeTaken = penalty;\n        }\n        _withdrawStake(maintainer, stakeTaken, recipient);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\nimport \"./BaseLending.sol\";\n\nstruct Bond {\n    address holder;\n    address issuer;\n    uint256 originalPrice;\n    uint256 returnAmount;\n    uint256 maturityTimestamp;\n    uint256 runtime;\n    uint256 yieldFP;\n}\n\n/** \n@title Lending for fixed runtime, fixed interest\nLenders can pick their own bond maturity date\n@dev In order to manage interest rates for the different\nmaturities and create a yield curve we bucket\nbond runtimes into weighted baskets and adjust\nrates individually per bucket, based on supply and demand.\n*/\nabstract contract BondLending is BaseLending {\n    uint256 public minRuntime = 30 days;\n    uint256 public maxRuntime = 365 days;\n    uint256 public diffMaxMinRuntime;\n    /** \n    @dev this is the numerator under runtimeWeights.\n    any excess left over is the weight of hourly bonds\n    */\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\n    uint256 public borrowingMarkupFP;\n\n    struct BondBucketMetadata {\n        uint256 runtimeWeight;\n        uint256 buyingSpeed;\n        uint256 lastBought;\n        uint256 withdrawingSpeed;\n        uint256 lastWithdrawn;\n        uint256 yieldLastUpdated;\n        uint256 totalLending;\n        uint256 runtimeYieldFP;\n    }\n\n    mapping(uint256 => Bond) public bonds;\n\n    mapping(address => BondBucketMetadata[]) public bondBucketMetadata;\n\n    uint256 public nextBondIndex = 1;\n\n    event LiquidityWarning(\n        address indexed issuer,\n        address indexed holder,\n        uint256 value\n    );\n\n    function _makeBond(\n        address holder,\n        address issuer,\n        uint256 runtime,\n        uint256 amount,\n        uint256 minReturn\n    ) internal returns (uint256 bondIndex) {\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\n        BondBucketMetadata storage bondMeta =\n            bondBucketMetadata[issuer][bucketIndex];\n\n        uint256 yieldFP = calcBondYieldFP(issuer, amount, runtime, bondMeta);\n\n        uint256 bondReturn = (yieldFP * amount) / FP32;\n        if (bondReturn >= minReturn) {\n            uint256 interpolatedAmount = (amount + bondReturn) / 2;\n            lendingMeta[issuer].totalLending += interpolatedAmount;\n\n            bondMeta.totalLending += interpolatedAmount;\n\n            bondIndex = nextBondIndex;\n            nextBondIndex++;\n\n            bonds[bondIndex] = Bond({\n                holder: holder,\n                issuer: issuer,\n                originalPrice: amount,\n                returnAmount: bondReturn,\n                maturityTimestamp: block.timestamp + runtime,\n                runtime: runtime,\n                yieldFP: yieldFP\n            });\n\n            (bondMeta.buyingSpeed, bondMeta.lastBought) = updateSpeed(\n                bondMeta.buyingSpeed,\n                bondMeta.lastBought,\n                amount,\n                runtime\n            );\n        }\n    }\n\n    function _withdrawBond(uint256 bondId, Bond storage bond)\n        internal\n        returns (uint256 withdrawAmount)\n    {\n        address issuer = bond.issuer;\n        uint256 bucketIndex = getBucketIndex(issuer, bond.runtime);\n        BondBucketMetadata storage bondMeta =\n            bondBucketMetadata[issuer][bucketIndex];\n\n        uint256 returnAmount = bond.returnAmount;\n        address holder = bond.holder;\n\n        uint256 interpolatedAmount = (bond.originalPrice + returnAmount) / 2;\n\n        LendingMetadata storage meta = lendingMeta[issuer];\n        meta.totalLending -= interpolatedAmount;\n        bondMeta.totalLending -= interpolatedAmount;\n\n        (bondMeta.withdrawingSpeed, bondMeta.lastWithdrawn) = updateSpeed(\n            bondMeta.withdrawingSpeed,\n            bondMeta.lastWithdrawn,\n            bond.originalPrice,\n            bond.runtime\n        );\n\n        delete bonds[bondId];\n        if (\n            meta.totalBorrowed > meta.totalLending ||\n            issuanceBalance(issuer) < returnAmount\n        ) {\n            // apparently there is a liquidity issue\n            emit LiquidityWarning(issuer, holder, returnAmount);\n            _makeFallbackBond(issuer, holder, returnAmount);\n        } else {\n            withdrawAmount = returnAmount;\n        }\n    }\n\n    function calcBondYieldFP(\n        address issuer,\n        uint256 addedAmount,\n        uint256 runtime,\n        BondBucketMetadata storage bucketMeta\n    ) internal view returns (uint256 yieldFP) {\n        uint256 totalLendingInBucket = addedAmount + bucketMeta.totalLending;\n\n        yieldFP = bucketMeta.runtimeYieldFP;\n        uint256 lastUpdated = bucketMeta.yieldLastUpdated;\n\n        LendingMetadata storage meta = lendingMeta[issuer];\n        uint256 bucketTarget =\n            (lendingTarget(meta) * bucketMeta.runtimeWeight) / WEIGHT_TOTAL_10k;\n\n        uint256 buying = bucketMeta.buyingSpeed;\n        uint256 withdrawing = bucketMeta.withdrawingSpeed;\n\n        YieldAccumulator storage borrowAccumulator =\n            borrowYieldAccumulators[issuer];\n\n        uint256 yieldGeneratedFP =\n            (borrowAccumulator.hourlyYieldFP * meta.totalBorrowed) /\n                (1 + meta.totalLending);\n        uint256 _maxHourlyYieldFP = min(maxHourlyYieldFP, yieldGeneratedFP);\n\n        uint256 bucketMaxYield = _maxHourlyYieldFP * (runtime / (1 hours));\n\n        yieldFP = updatedYieldFP(\n            yieldFP,\n            lastUpdated,\n            totalLendingInBucket,\n            bucketTarget,\n            buying,\n            withdrawing,\n            bucketMaxYield\n        );\n    }\n\n    /// Get view of returns on bond\n    function viewBondReturn(\n        address issuer,\n        uint256 runtime,\n        uint256 amount\n    ) external view returns (uint256) {\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\n        uint256 yieldFP =\n            calcBondYieldFP(\n                issuer,\n                amount + bondBucketMetadata[issuer][bucketIndex].totalLending,\n                runtime,\n                bondBucketMetadata[issuer][bucketIndex]\n            );\n        return (yieldFP * amount) / FP32;\n    }\n\n    function getBucketIndex(address issuer, uint256 runtime)\n        internal\n        view\n        returns (uint256 bucketIndex)\n    {\n        uint256 bucketSize =\n            diffMaxMinRuntime / bondBucketMetadata[issuer].length;\n        bucketIndex = (runtime - minRuntime) / bucketSize;\n    }\n\n    /// Set runtime yields in floating point\n    function setRuntimeYieldsFP(address issuer, uint256[] memory yieldsFP)\n        external\n        onlyOwner\n    {\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\n        for (uint256 i; bondMetas.length > i; i++) {\n            bondMetas[i].runtimeYieldFP = yieldsFP[i];\n        }\n    }\n\n    /// Set miniumum runtime\n    function setMinRuntime(uint256 runtime) external onlyOwner {\n        require(runtime > 1 hours, \"Min runtime needs to be at least 1 hour\");\n        require(\n            maxRuntime > runtime,\n            \"Min runtime must be smaller than max runtime\"\n        );\n        minRuntime = runtime;\n    }\n\n    /// Set maximum runtime\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\n        require(\n            runtime > minRuntime,\n            \"Max runtime must be greater than min runtime\"\n        );\n        maxRuntime = runtime;\n    }\n}\n\n\n",
        "CodeNames": [
            "Admin.sol",
            "BondLending.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-07",
                "Location": [
                    "uint",
                    "diffMaxMinRuntime"
                ],
                "Type": " diffMaxMinRuntime gets default value of 0",
                "Description": "\n uint256 public diffMaxMinRuntime; This variable is never set nor updated so it gets a default value of 0.  diffMaxMinRuntime with 0 value is making the calculations that use it either always return 0 (when multiplying) or fail (when dividing) when calculating bucket indexes or sizes.\n\n",
                "Repair": "Recommend setting the appropriate value for diffMaxMinRuntime and update it whenever min or max runtime variables change.\n\n\n"
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"../libraries/UniswapStyleLib.sol\";\n\n/// Stores how many of token you could get for 1k of peg\nstruct TokenPrice {\n    uint256 blockLastUpdated;\n    uint256 tokenPer1k;\n    address[] liquidationPairs;\n    address[] inverseLiquidationPairs;\n    address[] liquidationTokens;\n    address[] inverseLiquidationTokens;\n}\n\n/// @title The protocol features several mechanisms to prevent vulnerability to\n/// price manipulation:\n/// 1) global exposure caps on all tokens which need to be raised gradually\n///    during the process of introducing a new token, making attacks unprofitable\n///    due to lack  of scale\n/// 2) Exponential moving average with cautious price update. Prices for estimating\n///    how much a trader can borrow need not be extremely current and precise, mainly\n///    they must be resilient against extreme manipulation\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\n///    of front-running and other price manipulation.\nabstract contract PriceAware is Ownable, RoleAware {\n    address public immutable peg;\n    mapping(address => TokenPrice) public tokenPrices;\n    /// update window in blocks\n    uint16 public priceUpdateWindow = 8;\n    uint256 public UPDATE_RATE_PERMIL = 80;\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\n\n    constructor(address _peg) Ownable() {\n        peg = _peg;\n    }\n\n    /// Set window for price updates\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\n        priceUpdateWindow = window;\n    }\n\n    /// Set rate for updates\n    function setUpdateRate(uint256 rate) external onlyOwner {\n        UPDATE_RATE_PERMIL = rate;\n    }\n\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MAX_PEG_AMOUNT = amount;\n    }\n\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\n        UPDATE_MIN_PEG_AMOUNT = amount;\n    }\n\n    /// Get current price of token in peg\n    function getCurrentPriceInPeg(\n        address token,\n        uint256 inAmount,\n        bool forceCurBlock\n    ) public returns (uint256) {\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        if (forceCurBlock) {\n            if (\n                block.number - tokenPrice.blockLastUpdated > priceUpdateWindow\n            ) {\n                // update the currently cached price\n                return getPriceFromAMM(token, inAmount);\n            } else {\n                // just get the current price from AMM\n                return viewCurrentPriceInPeg(token, inAmount);\n            }\n        } else if (tokenPrice.tokenPer1k == 0) {\n            // do the best we can if it's at zero\n            return getPriceFromAMM(token, inAmount);\n        }\n\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\n            // update the price somewhat\n            getPriceFromAMM(token, inAmount);\n        }\n\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\n    }\n\n    /// Get view of current price of token in peg\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\n        public\n        view\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n            return outAmount;\n        }\n    }\n\n    /// @dev retrieves the price from the AMM\n    function getPriceFromAMM(address token, uint256 inAmount)\n        internal\n        virtual\n        returns (uint256)\n    {\n        if (token == peg) {\n            return inAmount;\n        } else {\n            TokenPrice storage tokenPrice = tokenPrices[token];\n            uint256[] memory pathAmounts =\n                UniswapStyleLib.getAmountsOut(\n                    inAmount,\n                    tokenPrice.liquidationPairs,\n                    tokenPrice.liquidationTokens\n                );\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\n\n            if (\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\n                outAmount < UPDATE_MAX_PEG_AMOUNT\n            ) {\n                setPriceVal(tokenPrice, inAmount, outAmount);\n            }\n\n            return outAmount;\n        }\n    }\n\n    function setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount\n    ) internal {\n        _setPriceVal(tokenPrice, inAmount, outAmount, UPDATE_RATE_PERMIL);\n        tokenPrice.blockLastUpdated = block.number;\n    }\n\n    function _setPriceVal(\n        TokenPrice storage tokenPrice,\n        uint256 inAmount,\n        uint256 outAmount,\n        uint256 weightPerMil\n    ) internal {\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\n        tokenPrice.tokenPer1k =\n            (tokenPrice.tokenPer1k *\n                (1000 - weightPerMil) +\n                updatePer1k *\n                weightPerMil) /\n            1000;\n    }\n\n    /// add path from token to current liquidation peg\n    function setLiquidationPath(address[] memory path, address[] memory tokens)\n        external\n    {\n        require(\n            isTokenActivator(msg.sender),\n            \"not authorized to set lending cap\"\n        );\n\n        address token = tokens[0];\n\n        TokenPrice storage tokenPrice = tokenPrices[token];\n        tokenPrice.liquidationPairs = new address[](path.length);\n        tokenPrice.inverseLiquidationPairs = new address[](path.length);\n        tokenPrice.liquidationTokens = new address[](tokens.length);\n        tokenPrice.inverseLiquidationTokens = new address[](tokens.length);\n\n        for (uint256 i = 0; path.length > i; i++) {\n            tokenPrice.liquidationPairs[i] = path[i];\n            tokenPrice.inverseLiquidationPairs[i] = path[path.length - i - 1];\n        }\n\n        for (uint256 i = 0; tokens.length > i; i++) {\n            tokenPrice.liquidationTokens[i] = tokens[i];\n            tokenPrice.inverseLiquidationTokens[i] = tokens[\n                tokens.length - i - 1\n            ];\n        }\n\n        uint256[] memory pathAmounts =\n            UniswapStyleLib.getAmountsIn(1000 ether, path, tokens);\n        uint256 inAmount = pathAmounts[0];\n        _setPriceVal(tokenPrice, inAmount, 1000 ether, 1000);\n    }\n\n    function liquidateToPeg(address token, uint256 amount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return amount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapExactT4T(\n                    amount,\n                    0,\n                    tP.liquidationPairs,\n                    tP.liquidationTokens\n                );\n\n            uint256 outAmount = amounts[amounts.length - 1];\n\n            return outAmount;\n        }\n    }\n\n    function liquidateFromPeg(address token, uint256 targetAmount)\n        internal\n        returns (uint256)\n    {\n        if (token == peg) {\n            return targetAmount;\n        } else {\n            TokenPrice storage tP = tokenPrices[token];\n            uint256[] memory amounts =\n                MarginRouter(router()).authorizedSwapT4ExactT(\n                    targetAmount,\n                    type(uint256).max,\n                    tP.inverseLiquidationPairs,\n                    tP.inverseLiquidationTokens\n                );\n\n            return amounts[0];\n        }\n    }\n}\n\n\n",
        "CodeNames": [
            "PriceAware.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-08",
                "Location": [
                    "getPriceFromAMM"
                ],
                "Type": " PriceAware uses prices from getAmountsOut",
                "Description": "\ngetPriceFromAMM relies on values returned from getAmountsOut which can be manipulated (e.g. with the large capital or the help of flash loans). The impact is reduced with UPDATE_MIN_PEG_AMOUNT and UPDATE_MAX_PEG_AMOUNT, however, it is not entirely eliminated.\n\nUniswap v2 recommends using their TWAP oracle: https://uniswap.org/docs/v2/core-concepts/oracles/\n\n\n",
                "Repair": ""
            }
        ]
    },
    {
        "Code": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport \"./Fund.sol\";\nimport \"./Lending.sol\";\nimport \"./RoleAware.sol\";\nimport \"./MarginRouter.sol\";\nimport \"./CrossMarginLiquidation.sol\";\n\n// Goal: all external functions only accessible to margintrader role\n// except for view functions of course\n\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\n    constructor(address _peg, address _roles)\n        RoleAware(_roles)\n        PriceAware(_peg)\n    {\n        liquidationThresholdPercent = 110;\n        coolingOffPeriod = 20;\n        leveragePercent = 300;\n    }\n\n    /// @dev admin function to set the token cap\n    function setTokenCap(address token, uint256 cap) external {\n        require(\n            isTokenActivator(msg.sender),\n            \"Caller not authorized to set token cap\"\n        );\n        tokenCaps[token] = cap;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeverage(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm a deposit to an account\n    function registerDeposit(\n        address trader,\n        address token,\n        uint256 depositAmount\n    ) external override returns (uint256 extinguishableDebt) {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n        account.lastDepositBlock = block.number;\n\n        if (account.borrowed[token] > 0) {\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\n            extinguishDebt(account, token, extinguishableDebt);\n            totalShort[token] -= extinguishableDebt;\n        }\n\n        // no overflow because depositAmount >= extinguishableDebt\n        uint256 addedHolding = depositAmount - extinguishableDebt;\n        _registerDeposit(account, token, addedHolding);\n    }\n\n    function _registerDeposit(\n        CrossMarginAccount storage account,\n        address token,\n        uint256 addedHolding\n    ) internal {\n        addHolding(account, token, addedHolding);\n\n        totalLong[token] += addedHolding;\n        require(\n            tokenCaps[token] >= totalLong[token],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n    }\n\n    /// @dev gets called by router to affirm borrowing event\n    function registerBorrow(\n        address trader,\n        address borrowToken,\n        uint256 borrowAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerBorrow(account, borrowToken, borrowAmount);\n    }\n\n    function _registerBorrow(\n        CrossMarginAccount storage account,\n        address borrowToken,\n        uint256 borrowAmount\n    ) internal {\n        totalShort[borrowToken] += borrowAmount;\n        totalLong[borrowToken] += borrowAmount;\n        require(\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        borrow(account, borrowToken, borrowAmount);\n    }\n\n    /// @dev gets called by router to affirm withdrawal of tokens from account\n    function registerWithdrawal(\n        address trader,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\n    }\n\n    function _registerWithdrawal(\n        CrossMarginAccount storage account,\n        address withdrawToken,\n        uint256 withdrawAmount\n    ) internal {\n        require(\n            block.number > account.lastDepositBlock + coolingOffPeriod,\n            \"To prevent attacks you must wait until your cooling off period is over to withdraw\"\n        );\n\n        totalLong[withdrawToken] -= withdrawAmount;\n        // throws on underflow\n        account.holdings[withdrawToken] =\n            account.holdings[withdrawToken] -\n            withdrawAmount;\n        require(\n            positiveBalance(account),\n            \"Account balance is too low to withdraw\"\n        );\n    }\n\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\n    function registerOvercollateralizedBorrow(\n        address trader,\n        address depositToken,\n        uint256 depositAmount,\n        address borrowToken,\n        uint256 withdrawAmount\n    ) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        _registerDeposit(account, depositToken, depositAmount);\n        _registerBorrow(account, borrowToken, withdrawAmount);\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\n\n        account.lastDepositBlock = block.number;\n    }\n\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\n    function registerTradeAndBorrow(\n        address trader,\n        address tokenFrom,\n        address tokenTo,\n        uint256 inAmount,\n        uint256 outAmount\n    )\n        external\n        override\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n\n        CrossMarginAccount storage account = marginAccounts[trader];\n\n        if (account.borrowed[tokenTo] > 0) {\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\n            extinguishDebt(account, tokenTo, extinguishableDebt);\n            totalShort[tokenTo] -= extinguishableDebt;\n        }\n        totalLong[tokenFrom] -= inAmount;\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\n        require(\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\n            \"Exceeding global exposure cap to token -- try again later\"\n        );\n\n        uint256 sellAmount = inAmount;\n        if (inAmount > account.holdings[tokenFrom]) {\n            sellAmount = account.holdings[tokenFrom];\n            /// won't overflow\n            borrowAmount = inAmount - sellAmount;\n\n            totalShort[tokenFrom] += borrowAmount;\n            require(\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\n                \"Exceeding global exposure cap to token -- try again later\"\n            );\n\n            borrow(account, tokenFrom, borrowAmount);\n        }\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\n    }\n\n    /// @dev can get called by router to register the dissolution of an account\n    function registerLiquidation(address trader) external override {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract is not an authorized margin trader agent\"\n        );\n        CrossMarginAccount storage account = marginAccounts[trader];\n        require(\n            loanInPeg(account, false) == 0,\n            \"Can't liquidate currently borrowing account\"\n        );\n\n        deleteAccount(account);\n    }\n\n    /// @dev view function to display account held assets state\n    function getHoldingAmounts(address trader)\n        external\n        view\n        override\n        returns (\n            address[] memory holdingTokens,\n            uint256[] memory holdingAmounts\n        )\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        holdingTokens = account.holdingTokens;\n\n        holdingAmounts = new uint256[](account.holdingTokens.length);\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\n            address tokenAddress = holdingTokens[idx];\n            holdingAmounts[idx] = account.holdings[tokenAddress];\n        }\n    }\n\n    /// @dev view function to display account borrowing state\n    function getBorrowAmounts(address trader)\n        external\n        view\n        override\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        borrowTokens = account.borrowTokens;\n\n        borrowAmounts = new uint256[](account.borrowTokens.length);\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\n            address tokenAddress = borrowTokens[idx];\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\n                account.borrowed[tokenAddress],\n                tokenAddress,\n                account.borrowedYieldQuotientsFP[tokenAddress]\n            );\n        }\n    }\n\n    /// @dev view function to get loan amount in peg\n    function viewLoanInPeg(address trader)\n        external\n        view\n        returns (uint256 amount)\n    {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return\n            viewTokensInPegWithYield(\n                account.borrowTokens,\n                account.borrowed,\n                account.borrowedYieldQuotientsFP\n            );\n    }\n\n    /// @dev total of assets of account, expressed in reference currency\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\n        CrossMarginAccount storage account = marginAccounts[trader];\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\n    }\n}\n\n\n// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./IsolatedMarginLiquidation.sol\";\n\ncontract IsolatedMarginTrading is IsolatedMarginLiquidation {\n    constructor(address _roles) RoleAware(_roles) Ownable() {}\n\n    /// @dev last time this account deposited\n    /// relevant for withdrawal window\n    function getLastDepositBlock(address trader)\n        external\n        view\n        returns (uint256)\n    {\n        return marginAccounts[trader].lastDepositBlock;\n    }\n\n    /// @dev setter for cooling off period for withdrawing funds after deposit\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\n        coolingOffPeriod = blocks;\n    }\n\n    /// @dev admin function to set leverage\n    function setLeveragePercent(uint256 _leveragePercent) external onlyOwner {\n        leveragePercent = _leveragePercent;\n    }\n\n    /// @dev admin function to set liquidation threshold\n    function setLiquidationThresholdPercent(uint256 threshold)\n        external\n        onlyOwner\n    {\n        liquidationThresholdPercent = threshold;\n    }\n\n    /// @dev gets called by router to affirm trader taking position\n    function registerPosition(\n        address trader,\n        uint256 borrowed,\n        uint256 holdingsAdded\n    ) external {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        account.holding += holdingsAdded;\n        borrow(account, borrowed);\n    }\n\n    /// @dev gets called by router to affirm unwinding of position\n    function registerUnwind(\n        address trader,\n        uint256 extinguished,\n        uint256 holdingsSold\n    ) external {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        account.holding -= holdingsSold;\n        extinguishDebt(account, extinguished);\n    }\n\n    /// @dev gets called by router to close account\n    function registerCloseAccount(address trader)\n        external\n        returns (uint256 holdingAmount)\n    {\n        require(\n            isMarginTrader(msg.sender),\n            \"Calling contract not authorized to deposit\"\n        );\n\n        IsolatedMarginAccount storage account = marginAccounts[trader];\n\n        require(account.borrowed == 0, \"Can't close account that's borrowing\");\n\n        holdingAmount = account.holding;\n\n        delete marginAccounts[trader];\n    }\n}\n\n\n",
        "CodeNames": [
            "CrossMarginTrading.sol",
            "IsolatedMarginTrading.sol"
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-10",
                "Location": [
                    "setLeveragePercent",
                    "setLiquidationThresholdPercent"
                ],
                "Type": " Add a timelock to functions that set key variables",
                "Description": "\nFunctions like setLeveragePercent and setLiquidationThresholdPercent for both IsolatedMarginTrading(https://github.com/code-423n4/marginswap/blob/main/contracts/IsolatedMarginTrading.sol) and CrossMarginTrading(https://github.com/code-423n4/marginswap/blob/main/contracts/CrossMarginTrading.sol) should be put behind a timelock because they would give more trust to users. Currently, the owner could call them whenever they want and a position could become liquidable from a block to the other.\n\nwerg (Marginswap) acknowledged(https://github.com/code-423n4/2021-04-marginswap-findings/issues/70#issuecomment-816168032):\n\n Timelock will be handled by governance\n\nzscole commented(https://github.com/code-423n4/2021-04-marginswap-findings/issues/70#issuecomment-824944141):\n\n Maintaining submission rating of 2 (Med Risk) because this presents a vulnerability at the time of review.\n\n\n",
                "Repair": ""
            }
        ]
    }
]