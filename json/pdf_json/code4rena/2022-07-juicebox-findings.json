[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "H-01",
                "Location": [],
                "Type": " Oracle data feed can be outdated yet used anyways which will impact payment logic",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBChainlinkV3PriceFeed.sol#L44\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBPrices.sol#L57\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L387\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L585\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L661\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L830\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L868\n\n\nThe current implementation of JBChainlinkV3PriceFeed is used by the protocol to showcase how the feed will be retrieved via Chainlink Data Feeds. The feed is used to retrieve the currentPrice, which is also used afterwards by JBPrices.priceFor(), then by JBSingleTokenPaymentTerminalStore.recordPaymentFrom(), JBSingleTokenPaymentTerminalStore.recordDistributionFor, JBSingleTokenPaymentTerminalStore.recordUsedAllowanceOf, JBSingleTokenPaymentTerminalStore._overflowDuring and JBSingleTokenPaymentTerminalStore._currentTotalOverflowOf.\nAlthough the current feeds are calculated by a non implemented IJBPriceFeed, if the implementation of the price feed is the same as the showcased inJBChainlinkV3PriceFeed, the retrieved data can be outdated or out of bounds.\n\nIt is important to remember that the sponsor said on the dedicated Discord Channel that also oracle pricing and data retrieval is inside the scope.\n\n\nChainlink classifies their data feeds into four different groups regarding how reliable is each source thus, how risky they are. The groups are *Verified Feeds, Monitored Feeds, Custom Feeds and Specialized Feeds* (they can be seen here(https://docs.chain.link/docs/selecting-data-feeds/#data-feed-categories)). The risk is the lowest on the first one and highest on the last one.\n\nA strong reliance on the price feeds has to be also monitored as recommended on the Risk Mitigation section(https://docs.chain.link/docs/selecting-data-feeds/#risk-mitigation). There are several reasons why a data feed may fail such as unforeseen market events, volatile market conditions, degraded performance of infrastructure, chains, or networks, upstream data providers outage, malicious activities from third parties among others.\n\nChainlink recommends using their data feeds along with some controls to prevent mismatches with the retrieved data. Along some recommendations, the feed can include circuit breakers (for extreme price events), contract update delays (to ensure that the injected data into the protocol is fresh enough), manual kill-switches (to cease connection in case of found bug or vulnerability in an upstream contract), monitoring (control the deviation of the data) and soak testing (of the price feeds).\n\nThe feed.lastRoundData() interface parameters according to Chainlink(https://docs.chain.link/docs/price-feeds-api-reference/) are the following:\n\n    function latestRoundData() external view\n        returns (\n            uint80 roundId,             //  The round ID.\n            int256 answer,              //  The price.\n            uint256 startedAt,          //  Timestamp of when the round started.\n            uint256 updatedAt,          //  Timestamp of when the round was updated.\n            uint80 answeredInRound      //  The round ID of the round in which the answer was computed.\n        )\n\nRegarding Juicebox itself, only the answer is used on the JBChainlinkV3PriceFeed.currentPrice() implementation. The retrieved price of the priceFeed can be outdated and used anyways as a valid data because no timestamp tolerance of the update source time is checked while storing the return parameters of feed.latestRoundData() inside JBChainlinkV3PriceFeed.currentPrice() as recommended by Chainlink in here(https://docs.chain.link/docs/using-chainlink-reference-contracts/#check-the-timestamp-of-the-latest-answer). The usage of outdated data can impact on how the Payment terminals work regarding pricing calculation and value measurement.\n\nPrecisely the following protocol logic within JBSingleTokenPaymentTerminalStore\u200b\u200c will work unexpectedly regarding value management.\n\n*   recordPaymentFrom():\n\n    This function handles the minting of a project tokens according to a data source if one is given. If the retrieved value of the oracle is outdated, the _weightRatio at Line 387(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L387) will return an incorrect value and then the tokenCount calculated amount will suffer from this mismatch, impacting in the amount of tokens minted.\n\n*   recordDistributionFor():\n\n    Performs the recording of recently distributed funds for a project. On line 580(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L580) the distributedAmount is computed and if the boolean check is false, then the call will perform a call to priceFor at line 585(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L585). If the returned oracle value is not adjusted with current market prices, the distributedAmount will also drag that error computing an incorrect distributedAmount. Afterwards, because the distributedAmount is also used to update the token balances of the msg.sender ([line 598(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L598)) it means that the mismatch impacts on the modified balance.\n\n*   recordUsedAllowanceOf():\n\n    Keeps record of used allowances of a project. It returns are analogue to the ones shown at recordDistributionFor where the usedAmount resembles the distributedAmount. The usedAmount is also used to update the project's balance. If the data of the oracle is outdated, the usedAmount will be calculated dragging that error.\n\n*   _overflowDuring():\n\n    Used to get the amount that is overflowing relative to a specified cycle. The data retrieved from the oracle is used to calculate the value of _distributionLimitRemaining on line 827(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L827) which is used later to calculate the return value if the boolean check performed at line 834 is true. Because the return of this function is the current balance of a project minus the amount that can be still distributed, if the amount that can still be distributed is wrong so will be the subtraction thus the return value.\n\n*   _currentTotalOverflowOf():\n\n    Similar to the latter but used to get the overflow of all the terminals of a project. If the retrieved data has a mismatch with the market, the _totalOverflow18Decimal calculated on line 866(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L827) if the boolean check is false will drag this mismatch which will also be dragged into the final return of the function.\n\nThe issues of those miscalculations impact on every project currently minted, which also affects subsequently on each user that has tokens of a project resulting in a high reach impact.\n\n",
                "Repair": "\nAs Chainlink recommends(https://docs.chain.link/docs/using-chainlink-reference-contracts/#check-the-timestamp-of-the-latest-answer):\n\n Your application should track the latestTimestamp variable or use the updatedAt value from the latestRoundData() function to make sure that the latest answer is recent enough for your application to use it. If your application detects that the reported answer is not updated within the heartbeat or within time limits that you determine are acceptable for your application, pause operation or switch to an alternate operation mode while identifying the cause of the delay.\n\n During periods of low volatility, the heartbeat triggers updates to the latest answer. Some heartbeats are configured to last several hours, so your application should check the timestamp and verify that the latest answer is recent enough for your application.\n\nIt is recommended to add a tolerance that compares the updatedAt return timestamp from latestRoundData() with the current block timestamp and ensure that the priceFeed is being updated with the required frequency.\n\nIf the ETH/USD is the only one that is needed to retrieve, because it is the most popular and available pair. It can also be useful to add other oracle to get the price feed (such as Uniswap's). This can be used as a redundancy in the case of having one oracle that returns outdated values (what is outdated and what is up to date can be determined by a tolerance as mentioned).\n\nmejango (Juicebox) confirmed, but disagreed with severity and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/138#issuecomment-1182192760):\n  There is also a good description in this duplicate #[78(https://github.com/code-423n4/2022-07-juicebox-findings/issues/78)\n\nmejango (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n Appropriate validations to prevent price staleness, round incompleteness and a negative price is put in place now.\n\n*\n\n\n"
            },
            {
                "Name": "H-02",
                "Location": [],
                "Type": " Token Change Can Be Frontrun, Blocking Token",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBTokenStore.sol#L246\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBTokenStore.sol#L266\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L605\n\n\nThis vulnerability allows malicious actors to block other users from changing tokens of their projects. Furthermore if ownership over the token contract is transferred to the JBTokenStore contract prior to the change, as suggested in the recourse section of Juicebox's 24.05.2022 post-mortem update(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/main/security/postmortem/5.24.2022.md#Recourse), this vulnerability would allow an attacker to become the owner of tokens being transferred. For JBToken based tokens this would allow an attacker to begin issuing arbitrary amounts the token that was meant to be transferred.\n\n\nExploit scenario:\n\n1.  Wanting to assign their token to their JB project an unsuspecting owner / admin transfers ownership to a JBTokenStore contract, either directly by calling transferOwnership on the token or indirectly by calling the changeFor method on an older JBTokenStore contract with _newOwner set as the new JBTokenStore contract. (For the newer Juicebox contracts the JBController contract's changeTokenOf method would be called)\n2.  Seeing this change an attacker submits a changeTokenFor calling transaction to the new JBController contract, triggering the JBTokenStore contract's changeFor method, linking it to one of the attacker's projects (this could be created in advance or as part of the same transaction via an attack contract)\n3.  The attacker can then gain ownership over the token by calling changeTokenFor again with the _newOwner set to the attacker's address\n4.  Assuming the token has an owner restricted mint method like JBToken based tokens the attacker can now mint an arbitrary amount of the token\n\n",
                "Repair": "\nBefore allowing a caller to change to a specific token ensure that they have control over it. This can be achieved by storing a list of trusted older JB directories and projects which are then queried. Alternatively the contract could require the caller to actually be the .owner()  address of the token to migrate, this would require admins to:\n\n1.  Call changeTokenOf with themselves as the new owner\n2.  Call the new change token method on the newer contract, since they are the owner they'd pass the check\n3.  Independently transfer the ownership to the new token store to ensure that it can issue tokens\n\nFuture migrations can be made more seamless by having older contracts directly call new contracts via a sub-call, removing a necessary transaction for the admin. The newer contracts needs to verify that the older contract is the owner address of the token that's being set and also has approval of the project owner which is being configured.\n\nmejango (Juicebox) confirmed and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/104#issuecomment-1179367197):\n  Nice. The project should first changeToken and then transfer ownership.\n\nmejango (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n Changing an already set project token is not possible anymore.\n\n*\n\n \n\n"
            },
            {
                "Name": "M-02",
                "Location": [
                    "//solidity\n// in JBFundingCycleStore::_packAndStoreIntrinsicPropertiesOf\n// where the `_start` is derived from `_mustStartAtOrAfter`\n\n./JBFundingCycleStore.sol-518   // start in bits 144-199.\n./JBFundingCycleStore.sol:519:    packed |= _start << 144;\n./JBFundingCycleStore.sol-520-\n./JBFundingCycleStore.sol-521   // number in bits 200-255.\n./JBFundingCycleStore.sol-522   packed |= _number << 200;\n"
                ],
                "Type": " Lack of check on  mustStartAtOrAfter ",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L306-L312\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L518-L522\n\n\nBy setting huge mustStartAtOrAfter, the owner can set start time in the past. It might open up possibility to bypass the ballot waiting time depending on the ballot's implementation.\n\n\nThe proof of concept(https://gist.github.com/zzzitron/a8c6067923a87af8e001c05442258370#file-2022-07-juiceboxv2-t-sol-L77-L115) is almost the same as TestReconfigure::testReconfigureProject(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/system_tests/TestReconfigure.sol#L77-L114). In the original test, the owner of the project is reconfiguring funding cycle, but it is not in effect immediately because ballot is set. Only after 3 days the newly set funding cycle will be the current one.\n\nIn the above proof of concept, only one parameter of the funding cycle is modified: mustStartAtOrAfter is set to type(uint56).max. As the result, the newly set funding cycle is considered as the current one without waiting for the ballot.\n\nThe cause of this is missing check on mustStartAtOrAfter upon setting here(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L306-L312). If the given _mustStartAtOrAfter is huge, it will be passed eventually to the _initFor, _packAndStoreIntrinsicPropertiesOf. Then it will 'overflow' by shifting and set to the funding cycle, which essentially can be set to any value including the past(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L518-L522). Also, it seems like the number will be also effected because the bigger digit will carry over.\n\nsolidity\n// in JBFundingCycleStore::_packAndStoreIntrinsicPropertiesOf\n// where the _start is derived from _mustStartAtOrAfter\n\n./JBFundingCycleStore.sol-518   // start in bits 144-199.\n./JBFundingCycleStore.sol:519:    packed |= _start << 144;\n./JBFundingCycleStore.sol-520-\n./JBFundingCycleStore.sol-521   // number in bits 200-255.\n./JBFundingCycleStore.sol-522   packed |= _number << 200;\n\n\n\nFoundry\n\n",
                "Repair": "\nAdd a check for the _mustStartAtOrAfter:\n\nsolidity\n// example check for _mustSTartAtOrAfter\n// in JBFundingCycleStore::configureFor\n\nif (_mustStartAtOrAfter  type(uint56).max) revert INVALID_START();\n\n\ndrgorillamd (Juicebox) confirmed and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/220#issuecomment-1182519751):\n  We've seen the POC, now assessing how to best mitigate (at what level).\n\njack-the-pug (judge) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/220#issuecomment-1200425695):\n  Good catch!\n\ndrgorillamd (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n mustStartAtOrAfter and the start date of an upcoming funding cycle are now validated to fit in uint56.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-03",
                "Location": [
                    "//solidity\n  function _transferFrom(\n    address _from,\n    address payable _to,\n    uint256 _amount\n  ) internal override {\n    _from == address(this)\n      ? IERC20(token).transfer(_to, _amount)\n      : IERC20(token).transferFrom(_from, _to, _amount);\n  }\n"
                ],
                "Type": " Use a safe transfer helper library for ERC20 transfers",
                "Description": "\nJBERC20PaymentTerminal#_transferFrom calls IERC20#transfer and transferFrom directly. There are two issues with using this interface directly:\n\n1.  JBERC20PaymentTerminal#_transferFrom function does not check the return value of these calls. Tokens that return false rather than revert to indicate failed transfers may silently fail rather than reverting as expected.\n\n2.  Since the IERC20 interface requires a boolean return value, attempting to transfer ERC20s with missing return values(https://github.com/d-xo/weird-erc20#missing-return-values) will revert. This means Juicebox payment terminals cannot support a number of popular ERC20s, including USDT and BNB.\n\nJBERC20PaymentTerminal#_transferFrom(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBERC20PaymentTerminal.sol#L81-L89):\n\nsolidity\n  function _transferFrom(\n    address _from,\n    address payable _to,\n    uint256 _amount\n  ) internal override {\n    _from == address(this)\n      ? IERC20(token).transfer(_to, _amount)\n      : IERC20(token).transferFrom(_from, _to, _amount);\n  }\n\n\n\nJuicebox payment terminals may issue project tokens to users even though their incoming token transfer failed. Juicebox payment terminals cannot support USDT, BNB, and other popular (but nonstandard) ERC20s.\n\n",
                "Repair": "\nUse a safe transfer library like OpenZeppelin SafeERC20(https://docs.openzeppelin.com/contracts/4.x/api/token/erc20#SafeERC20) to ensure consistent handling of ERC20 return values and abstract over inconsistent ERC20(https://github.com/d-xo/weird-erc20) implementations.\n\nAdditionally, since payment terminals are meant to support a variety of ERC20s, consider writing simulation tests that make token transfers using payment terminals for the most popular and most unusual ERC20s.\n\n(Note also that the out of scope JBETHERC20ProjectPayer and JBETHERC20SplitsPayer contracts also call IERC20#transfer and transferFrom without a helper!)\n\nSee the following Forge test, which simulates an attempted USDT transfer. (Run this in fork mode using the --fork-url flag).\n\nsolidity\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.6;\n\nimport './helpers/TestBaseWorkflow.sol';\nimport '@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol';\n\naddress constant USDT_ADDRESS = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);\n\ncontract TestWeirdERC20 is TestBaseWorkflow {\n  using SafeERC20 for IERC20Metadata;\n\n  JBController controller;\n  JBProjectMetadata _projectMetadata;\n  JBFundingCycleData _data;\n  JBFundingCycleMetadata _metadata;\n  JBGroupedSplits[] _groupedSplits;\n  JBFundAccessConstraints[] _fundAccessConstraints;\n  IJBPaymentTerminal[] _terminals;\n  JBTokenStore _tokenStore;\n  JBERC20PaymentTerminal _tetherTerminal;\n\n  IERC20Metadata usdt = IERC20Metadata(USDT_ADDRESS);\n  address _projectOwner;\n\n  uint256 WEIGHT = 1000 * 1018;\n\n  function setUp() public override {\n    super.setUp();\n\n    _projectOwner = multisig();\n\n    _tokenStore = jbTokenStore();\n\n    controller = jbController();\n\n    _projectMetadata = JBProjectMetadata({content: 'myIPFSHash', domain: 1});\n\n    _data = JBFundingCycleData({\n      duration: 14,\n      weight: WEIGHT,\n      discountRate: 450000000,\n      ballot: IJBFundingCycleBallot(address(0))\n    });\n\n    _metadata = JBFundingCycleMetadata({\n      global: JBGlobalFundingCycleMetadata({allowSetTerminals: false, allowSetController: false}),\n      reservedRate: 5000, //50%\n      redemptionRate: 5000, //50%\n      ballotRedemptionRate: 0,\n      pausePay: false,\n      pauseDistributions: false,\n      pauseRedeem: false,\n      pauseBurn: false,\n      allowMinting: false,\n      allowChangeToken: false,\n      allowTerminalMigration: false,\n      allowControllerMigration: false,\n      holdFees: false,\n      useTotalOverflowForRedemptions: false,\n      useDataSourceForPay: false,\n      useDataSourceForRedeem: false,\n      dataSource: address(0)\n    });\n\n    _tetherTerminal = new JBERC20PaymentTerminal(\n      usdt,\n      jbLibraries().ETH(), // currency\n      jbLibraries().ETH(), // base weight currency\n      1, // JBSplitsGroupe\n      jbOperatorStore(),\n      jbProjects(),\n      jbDirectory(),\n      jbSplitsStore(),\n      jbPrices(),\n      jbPaymentTerminalStore(),\n      multisig()\n    );\n    evm.label(address(_tetherTerminal), 'TetherTerminal');\n\n    _terminals.push(_tetherTerminal);\n  }\n\n  function testTetherPaymentsRevert() public {\n    JBERC20PaymentTerminal terminal = _tetherTerminal;\n\n    _fundAccessConstraints.push(\n      JBFundAccessConstraints({\n        terminal: terminal,\n        token: address(USDT_ADDRESS),\n        distributionLimit: 10 * 1018,\n        overflowAllowance: 5 * 1018,\n        distributionLimitCurrency: jbLibraries().ETH(),\n        overflowAllowanceCurrency: jbLibraries().ETH()\n      })\n    );\n\n    uint256 projectId = controller.launchProjectFor(\n      _projectOwner,\n      _projectMetadata,\n      _data,\n      _metadata,\n      block.timestamp,\n      _groupedSplits,\n      _fundAccessConstraints,\n      _terminals,\n      ''\n    );\n\n    address caller = msg.sender;\n    evm.label(caller, 'caller');\n    deal(address(usdt), caller, 20 * 1018);\n\n    evm.prank(caller);\n    usdt.safeApprove(address(terminal), 20 * 1018);\n    evm.prank(caller);\n    terminal.pay(\n      projectId,\n      20 * 1018,\n      address(usdt),\n      msg.sender,\n      0,\n      false,\n      'Forge test',\n      new bytes(0)\n    );\n  }\n}\n\nmejango (Juicebox) confirmed(https://github.com/code-423n4/2022-07-juicebox-findings/issues/281)\n\nmejango (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n OpenZeppelins&#39; SafeERC20 library is now used to ensure consistent handling of ERC20 token transfers.\n\n\n*\n\n\n"
            },
            {
                "Name": "M-04",
                "Location": [],
                "Type": " Juicebox project owner can create a honeypot to cause grief",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L760\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L147\n\n\nIn a Juicebox project the project owner (or anyone that they approve) can set splits. These splits are details of the token distributions to other addresses in response to contributions to the project.\n\nAt the moment the SPLITS_TOTAL_PERCENT = 1_000_000_000. This means that the project owner could theoretically add 1 billion different splits, each with a percent value of 1. Of course, this would require too much gas, but the idea stands. A project owner could honeypot users by creating a project with the MAX_RESERVED_RATE reserved rate, and setting a large percentage split for the msg.sender who calls distributeReservedTokensOf in JBController.sol. The project owner could then fund the project with a series of large payments to ensure that the reserved amount was sufficiently large to entice a user to call distributeReservedTokensOf in the belief that they will be obtaining a large percentage of the reserve.\n\nHowever, when a user calls this method they will hit the block gas limit and will have spent a large amount of ETH on gas, without receiving any of their expected split.\n\nI consider this to be of high severity since user assets (in the form of gas) can be permanently lost without any loss to the project owner/griefer.\n\n\nThe key behaviour we need to prove is that it's possible to set more splits before hitting the block gas limit than it is to distribute reward tokens over the same number of splits. If this is true, the project owner will be able to set a number of splits that will always make the distributeReservedTokensOf hit the block gas limit, and hence grief the caller.\n\nThis can be demonstrated by modifying the existing test cases. From some basic testing I have found that calling distributeReservedTokensOf hits the block gas limit when there are at least 389 splits, but for the same split count the project owner can successfully call set without hitting the block gas limit.\n\n    diff --git a/test/jb_controller/distribute_reserved_token_of.test.js b/test/jb_controller/distribute_reserved\n    _token_of.test.js\n    index 2f964d8..6cfd645 100644\n    --a/test/jb_controller/distribute_reserved_token_of.test.js\n    +++ b/test/jb_controller/distribute_reserved_token_of.test.js\n    @@ -119,10 +119,15 @@ describe('JBController::distributeReservedTokensOf(...)', function () {\n         const { addrs, projectOwner, jbController, mockJbTokenStore, mockSplitsStore, timestamp } =\n           await setup();\n         const caller = addrs[0];\n       const splitsBeneficiariesAddresses = addrs[1], addrs[2]].map((signer) = signer.address);\n    +    let addressList = addrs[1], addrs[2]];\n    +    for (let i = 1; i < 389; i++) {\n    +      addressList.push(addrs[1]);\n    +    }\n    +\n    +    const splitsBeneficiariesAddresses = addressList.map((signer) = signer.address);\n\n         const splits = makeSplits({\n         count: 2,\n    +      count: 389,\n           beneficiary: splitsBeneficiariesAddresses,\n           preferClaimed: true,\n         });\n    diff --git a/test/jb_splits_store/set.test.js b/test/jb_splits_store/set.test.js\n    index 3dd0331..5992957 100644\n    --a/test/jb_splits_store/set.test.js\n    +++ b/test/jb_splits_store/set.test.js\n    @@ -54,7 +54,7 @@ describe('JBSplitsStore::set(...)', function () {\n         };\n       }\n\n     function makeSplits(beneficiaryAddress, count = 4) {\n    +  function makeSplits(beneficiaryAddress, count = 389) {\n         let splits = ];\n         for (let i = 0; i < count; i++) {\n           splits.push({\n\n\nVSCode & Hardhat\n\n",
                "Repair": "\nFor JBSplit objects there should be a minimum percentage for each split when calling set. Furthermore, it would probably be wise to prevent duplicate beneficiaries, but I have omitted that in the below recommendation for clarity. Below is a suggested diff. I've arbitrarily set a minimum percentage of 10,000 but given the PoC the min percentage should be conservatively set to ensure no more than 389 splits can be created (I would probably suggest a cap of max 100 splits per group).\n\n    diff --git a/contracts/JBSplitsStore.sol b/contracts/JBSplitsStore.sol\n    index d61cca2..429d78a 100644\n    --a/contracts/JBSplitsStore.sol\n    +++ b/contracts/JBSplitsStore.sol\n    @@ -227,8 +227,8 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n         uint256 _percentTotal = 0;\n\n         for (uint256 _i = 0; _i < _splits.length; _i++) {\n         // The percent should be greater than 0.\n         if (_splits[_i].percent == 0) revert INVALID_SPLIT_PERCENT();\n    +      // The percent should be greater than or equal to 10000.\n    +      if (_splits[_i].percent < JBConstants.MIN_SPLIT_PERCENT) revert INVALID_SPLIT_PERCENT();\n\n           // ProjectId should be within a uint56\n           if (_splits[_i].projectId  type(uint56).max) revert INVALID_PROJECT_ID();\n    diff --git a/contracts/libraries/JBConstants.sol b/contracts/libraries/JBConstants.sol\n    index 9a418f2..afb5f23 100644\n    --a/contracts/libraries/JBConstants.sol\n    +++ b/contracts/libraries/JBConstants.sol\n    @@ -10,6 +10,7 @@ library JBConstants {\n       uint256 public constant MAX_REDEMPTION_RATE = 10000;\n       uint256 public constant MAX_DISCOUNT_RATE = 1000000000;\n       uint256 public constant SPLITS_TOTAL_PERCENT = 1000000000;\n    +  uint256 public constant MIN_SPLIT_PERCENT = 10000;\n       uint256 public constant MAX_FEE = 1000000000;\n       uint256 public constant MAX_FEE_DISCOUNT = 1000000000;\n     }\n\nAn alternative to setting a minimum percentage would be to have a check on the length of the splits array and capping that at a sensible value. In this instance a project owner could still set low percentages per split, however I don't personally see the value in being able to set a value of 1 (to receive 1 billionth of the reserve).\n\nmejango (Juicebox) acknowledged, but disagreed with severity and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/170#issuecomment-1179397247):\n  Damn. Word. This is deep. Thank you.\n\n  Not sure about \"high\" severity. But surely should be noted among the protocol's risks.\n\njack-the-pug (judge) decreased severity to Medium and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/170#issuecomment-1193226758):\n  Not bad, but also not a High. This is similar to the unbounded loop and other out-of-gas issues, the honeypot probably wont work if the wallet UI is better (alerts about the out-of-gas error).\n \n Will downgrade to Medium.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-05",
                "Location": [
                    "//solidity\nfunction _feeAmount(\n    uint256 _amount,\n    uint256 _fee,\n    uint256 _feeDiscount\n  ) internal pure returns (uint256) {\n    // Calculate the discounted fee.\n    uint256 _discountedFee = _fee -\n      PRBMath.mulDiv(_fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\n\n    // The amount of tokens from the `_amount` to pay as a fee.\n    return\n      _amount PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\n  }\n"
                ],
                "Type": " Discounted fee calculation is imprecise and calculates less fees than anticipated",
                "Description": "\nThe JBPayoutRedemptionPaymentTerminal._feeAmount function is used to calculate the fee based on a given _amount, a fee rate _fee and an optional discount _feeDiscount.\n\nHowever, the current implementation calculates the fee in a way that leads to inaccuracy and to fewer fees being paid than anticipated by the protocol.\n\n\nJBPayoutRedemptionPaymentTerminal._feeAmount(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L1446-L1451)\n\nsolidity\nfunction _feeAmount(\n    uint256 _amount,\n    uint256 _fee,\n    uint256 _feeDiscount\n  ) internal pure returns (uint256) {\n    // Calculate the discounted fee.\n    uint256 _discountedFee = _fee -\n      PRBMath.mulDiv(_fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\n\n    // The amount of tokens from the _amount to pay as a fee.\n    return\n      _amount PRBMath.mulDiv(_amount, JBConstants.MAX_FEE, _discountedFee + JBConstants.MAX_FEE);\n  }\n\n\nExample:\n\nGiven the following (don't mind the floating point arithmetic, this is only for simplicity. The issues still applies with integer arithmetic and higher decimal precision):\n\n*   amount 1000\n*   fee 5 (5%)\n*   feeDiscount 10 (10%)\n*   MAX_FEE_DISCOUNT 100\n*   MAX_FEE 100\n\n$discountedFee = fee {{fee ast feeDiscount} over MAX_FEE_DISCOUNT}$\n$discountedFee = 5 {{5 ast 10} over 100}$\n$discountedFee = 4.5$\n\nCalculating the fee amount based on the discounted fee of $4.5$:\n\n$fee_{Amount} = amount {{amount ast MAX_FEE} over {discountedFee + MAX_FEE}}$\n$fee_{Amount} = 1000 {{1000 ast 100} over {4.5 + 100}}$\n$fee_{Amount} = 1000 956.93779904$\n$fee_{Amount} = 43.06220096$\n\nThe calculated and wrong fee amount is ~43, instead, it should be 45. The issue comes from dividing by _discountedFee + JBConstants.MAX_FEE.\n\nNow the correct way:\n\nI omitted the discountedFee calculation as this formula is correct.\n\n$fee_{Amount} = {{amount ast discountedFee} over {MAX_FEE}}$\n$fee_{Amount} = {{1000 ast 4.5} over {100}}$\n$fee_{Amount} = 45$\n\n",
                "Repair": "\nFix the discounted fee calculation by adjusting the formula to:\n\n$fee_{Amount} = amount ast {fee fee ast {discount over MAX_{FEE_DISCOUNT}} over MAX_{FEE}}$\n\nIn Solidity:\n\nsolidity\nfunction _feeAmount(\n    uint256 _amount,\n    uint256 _fee,\n    uint256 _feeDiscount\n) internal pure returns (uint256) {\n    // Calculate the discounted fee.\n    uint256 _discountedFee = _fee -\n      PRBMath.mulDiv(_fee, _feeDiscount, JBConstants.MAX_FEE_DISCOUNT);\n\n    // The amount of tokens from the _amount to pay as a fee.\n    return PRBMath.mulDiv(_amount, _discountedFee, JBConstants.MAX_FEE);\n}\n\n\nmejango (Juicebox) acknowledged(https://github.com/code-423n4/2022-07-juicebox-findings/issues/275) \n\njack-the-pug (judge) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/275#issuecomment-1193219669):\n  Great job! One of the best write-ups I have ever seen, simple and clean.\n \n  Here is a trophy for you: \ud83c\udfc6\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-06",
                "Location": [
                    "//solidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n372       // Add the amount to the token balance of the project.\n373       balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n374         balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] +\n375         _amount.value;\n",
                    "//solidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #2\n\n597       // Removed the distributed funds from the project's token balance.\n598       balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n599         balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] -\n600         distributedAmount;\n",
                    "//solidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #3\n\n817       (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\n818         _projectId,\n819         _amount,\n820         _currency\n821       );\n822   \n823       // The amount being distributed must be at least as much as was expected.\n824       if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\n825   \n826       // Get a reference to the project owner, which will receive tokens from paying the platform fee\n827       // and receive any extra distributable funds not allocated to payout splits.\n828       address payable _projectOwner = payable(projects.ownerOf(_projectId));\n829   \n830       // Define variables that will be needed outside the scoped section below.\n831       // Keep a reference to the fee amount that was paid.\n832       uint256 _fee;\n833   \n834       // Scoped section prevents stack too deep. `_feeDiscount`, `_feeEligibleDistributionAmount`, and `_leftoverDistributionAmount` only used within scope.\n835       {\n836         // Get the amount of discount that should be applied to any fees taken.\n837         // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience.\n838         uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender]\n839           ? JBConstants.MAX_FEE_DISCOUNT\n840           : _currentFeeDiscount(_projectId);\n841   \n842         // The amount distributed that is eligible for incurring fees.\n843         uint256 _feeEligibleDistributionAmount;\n844   \n845         // The amount leftover after distributing to the splits.\n846         uint256 _leftoverDistributionAmount;\n847   \n848         // Payout to splits and get a reference to the leftover transfer amount after all splits have been paid.\n849         // Also get a reference to the amount that was distributed to splits from which fees should be taken.\n850         (_leftoverDistributionAmount, _feeEligibleDistributionAmount) = _distributeToPayoutSplitsOf(\n851           _projectId,\n852           _fundingCycle.configuration,\n853           payoutSplitsGroup,\n854           _distributedAmount,\n855           _feeDiscount\n856         );\n",
                    "//solidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #4\n\n332     function pay(\n333       uint256 _projectId,\n334       uint256 _amount,\n335       address _token,\n336       address _beneficiary,\n337       uint256 _minReturnedTokens,\n338       bool _preferClaimedTokens,\n339       string calldata _memo,\n340       bytes calldata _metadata\n341     ) external payable virtual override isTerminalOf(_projectId) returns (uint256) {\n342       _token; // Prevents unused var compiler and natspec complaints.\n343   \n344       // ETH shouldn't be sent if this terminal's token isn't ETH.\n345       if (token != JBTokens.ETH) {\n346         if (msg.value  0) revert NO_MSG_VALUE_ALLOWED();\n347   \n348         // Transfer tokens to this terminal from the msg sender.\n349         _transferFrom(msg.sender, payable(address(this)), _amount);\n350       }\n351       // If this terminal's token is ETH, override _amount with msg.value.\n352       else _amount = msg.value;\n353   \n354       return\n355         _pay(\n356           _amount,\n357           msg.sender,\n358           _projectId,\n359           _beneficiary,\n360           _minReturnedTokens,\n361           _preferClaimedTokens,\n362           _memo,\n363           _metadata\n364         );\n365     }\n",
                    "//solidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #5\n\n540     function addToBalanceOf(\n541       uint256 _projectId,\n542       uint256 _amount,\n543       address _token,\n544       string calldata _memo,\n545       bytes calldata _metadata\n546     ) external payable virtual override isTerminalOf(_projectId) {\n547       _token; // Prevents unused var compiler and natspec complaints.\n548   \n549       // If this terminal's token isn't ETH, make sure no msg.value was sent, then transfer the tokens in from msg.sender.\n550       if (token != JBTokens.ETH) {\n551         // Amount must be greater than 0.\n552         if (msg.value  0) revert NO_MSG_VALUE_ALLOWED();\n553   \n554         // Transfer tokens to this terminal from the msg sender.\n555         _transferFrom(msg.sender, payable(address(this)), _amount);\n556       }\n557       // If the terminal's token is ETH, override `_amount` with msg.value.\n558       else _amount = msg.value;\n559   \n560       // Add to balance while only refunding held fees if the funds aren't originating from a feeless terminal.\n561       _addToBalanceOf(_projectId, _amount, !isFeelessAddress[msg.sender], _memo, _metadata);\n562     }\n"
                ],
                "Type": " Code credits fee-on-transfer tokens for amount stated, not amount transferred",
                "Description": "\nSome ERC20 tokens, such as USDT, allow for charging a fee any time transfer() or transferFrom() is called. If a contract does not allow for amounts to change after transfers, subsequent transfer operations based on the original amount will revert() due to the contract having an insufficient balance.\n\n\nIf there is only one user that has use a payment terminal with a fee-on-transfer token to pay a project for its token, that project will be unable to withdraw their funds, because the amount available will be less than the amount stated during deposit, and therefore the token's transfer() call will revert during withdrawal. For more users, consider what happens if the token has a 10% fee-on-transfer fee deposits will be underfunded by 10%, and the projects trying to withdraw the last 10% of deposits/rewards will have their calls revert due to the contract not holding enough tokens. If a whale does a large withdrawal, the extra 10% that that whale gets will mean that *many* projects will not be able to withdraw anything at all.\n\n\nBecause the terminals rely on terminal stores, which only store the initial value provided during the payment, and provide it during distributions, the terminals are unable to use the decreased value when they later are told to distribute funds to a project.\n\nJBSingleTokenPaymentTerminalStore.recordPaymentFrom() stores the value passed in:\n\nsolidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n372       // Add the amount to the token balance of the project.\n373       balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n374         balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] +\n375         _amount.value;\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L372-L375\n\nAnd provide that same value when recording a dispersion:\n\nsolidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #2\n\n597       // Removed the distributed funds from the project's token balance.\n598       balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] =\n599         balanceOf[IJBSingleTokenPaymentTerminal(msg.sender)][_projectId] -\n600         distributedAmount;\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L597-L600\n\nThe terminals themselves use the values directly, and don't consult their balances to look for changes (lines 817 and 850 below):\n\nsolidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #3\n\n817       (JBFundingCycle memory _fundingCycle, uint256 _distributedAmount) = store.recordDistributionFor(\n818         _projectId,\n819         _amount,\n820         _currency\n821       );\n822   \n823       // The amount being distributed must be at least as much as was expected.\n824       if (_distributedAmount < _minReturnedTokens) revert INADEQUATE_DISTRIBUTION_AMOUNT();\n825   \n826       // Get a reference to the project owner, which will receive tokens from paying the platform fee\n827       // and receive any extra distributable funds not allocated to payout splits.\n828       address payable _projectOwner = payable(projects.ownerOf(_projectId));\n829   \n830       // Define variables that will be needed outside the scoped section below.\n831       // Keep a reference to the fee amount that was paid.\n832       uint256 _fee;\n833   \n834       // Scoped section prevents stack too deep. _feeDiscount, _feeEligibleDistributionAmount, and _leftoverDistributionAmount only used within scope.\n835       {\n836         // Get the amount of discount that should be applied to any fees taken.\n837         // If the fee is zero or if the fee is being used by an address that doesn't incur fees, set the discount to 100% for convinience.\n838         uint256 _feeDiscount = fee == 0 || isFeelessAddress[msg.sender]\n839           ? JBConstants.MAX_FEE_DISCOUNT\n840           : _currentFeeDiscount(_projectId);\n841   \n842         // The amount distributed that is eligible for incurring fees.\n843         uint256 _feeEligibleDistributionAmount;\n844   \n845         // The amount leftover after distributing to the splits.\n846         uint256 _leftoverDistributionAmount;\n847   \n848         // Payout to splits and get a reference to the leftover transfer amount after all splits have been paid.\n849         // Also get a reference to the amount that was distributed to splits from which fees should be taken.\n850         (_leftoverDistributionAmount, _feeEligibleDistributionAmount) = _distributeToPayoutSplitsOf(\n851           _projectId,\n852           _fundingCycle.configuration,\n853           payoutSplitsGroup,\n854           _distributedAmount,\n855           _feeDiscount\n856         );\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L817-L856\n\nThe terminals used the amounts stated, rather than transferred in (lines 349 and 356):\n\nsolidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #4\n\n332     function pay(\n333       uint256 _projectId,\n334       uint256 _amount,\n335       address _token,\n336       address _beneficiary,\n337       uint256 _minReturnedTokens,\n338       bool _preferClaimedTokens,\n339       string calldata _memo,\n340       bytes calldata _metadata\n341     ) external payable virtual override isTerminalOf(_projectId) returns (uint256) {\n342       _token; // Prevents unused var compiler and natspec complaints.\n343   \n344       // ETH shouldn't be sent if this terminal's token isn't ETH.\n345       if (token != JBTokens.ETH) {\n346         if (msg.value  0) revert NO_MSG_VALUE_ALLOWED();\n347   \n348         // Transfer tokens to this terminal from the msg sender.\n349         _transferFrom(msg.sender, payable(address(this)), _amount);\n350       }\n351       // If this terminal's token is ETH, override _amount with msg.value.\n352       else _amount = msg.value;\n353   \n354       return\n355         _pay(\n356           _amount,\n357           msg.sender,\n358           _projectId,\n359           _beneficiary,\n360           _minReturnedTokens,\n361           _preferClaimedTokens,\n362           _memo,\n363           _metadata\n364         );\n365     }\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L332-L365\n\nSame here (lines 555 and 561):\n\nsolidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #5\n\n540     function addToBalanceOf(\n541       uint256 _projectId,\n542       uint256 _amount,\n543       address _token,\n544       string calldata _memo,\n545       bytes calldata _metadata\n546     ) external payable virtual override isTerminalOf(_projectId) {\n547       _token; // Prevents unused var compiler and natspec complaints.\n548   \n549       // If this terminal's token isn't ETH, make sure no msg.value was sent, then transfer the tokens in from msg.sender.\n550       if (token != JBTokens.ETH) {\n551         // Amount must be greater than 0.\n552         if (msg.value  0) revert NO_MSG_VALUE_ALLOWED();\n553   \n554         // Transfer tokens to this terminal from the msg sender.\n555         _transferFrom(msg.sender, payable(address(this)), _amount);\n556       }\n557       // If the terminal's token is ETH, override _amount with msg.value.\n558       else _amount = msg.value;\n559   \n560       // Add to balance while only refunding held fees if the funds aren't originating from a feeless terminal.\n561       _addToBalanceOf(_projectId, _amount, !isFeelessAddress[msg.sender], _memo, _metadata);\n562     }\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L540-L562\n\nThe transfer of fees and reserves have the same issue.\n\n",
                "Repair": "\nMeasure the contract balance before and after the call to transfer()/transferFrom() in JBERC20PaymentTerminal._transferFrom(), and use the difference between the two as the amount, rather than the amount stated\n\ndrgorillamd (Juicebox) acknowledged(https://github.com/code-423n4/2022-07-juicebox-findings/issues/304)\n\ndrgorillamd (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n The delta of the token balance before and after a transfer is used instead of the amount stated to handle fee-on-transfer tokens appropriately.\n\n\n*\n\n\n"
            },
            {
                "Name": "M-07",
                "Location": [],
                "Type": " processFees() may fail due to exceed gas limit",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L594\n\n\nThe function processFees() in JBPayoutRedemptionPaymentTerminal.sol may fail due to unbounded loop over _heldFeesOf[_projectId]\n\n_heldFeesOf[_projectId] can get very large due to the function _takeFeeFrom() where it pushes fees that should be paid to a specific beneficiary onto the array\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L1199\n\n_heldFeesOf[_projectId] could get large and cause a DOS condition where no fees can be distributed due to exceed of gas limit\n\n\n        for (uint256 _i = 0; _i < _heldFeeLength; ) {\n          // Get the fee amount.\n          uint256 _amount = _feeAmount(\n            _heldFees[_i].amount,\n            _heldFees[_i].fee,\n            _heldFees[_i].feeDiscount\n          );\n\nmejango (Juicebox) acknowledged(https://github.com/code-423n4/2022-07-juicebox-findings/issues/8) \n\n\n*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "M-08",
                "Location": [],
                "Type": " Reentrancy issues on function  distributePayoutsOf ",
                "Description": "\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L415-L448\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L788-L900\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L981-L1174\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBETHPaymentTerminal.sol#L63-L79\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBERC20PaymentTerminal.sol#L73-L89\n\n\nIn the contract JBPayoutRedemptionPaymentTerminal, the function distributePayoutsOf(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L415-L448) calls the internal function _distributePayoutsOf(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L788-L900) and this internal function perfoms a loop where is using the function _distributeToPayoutSplitsOf(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L981-L1174)\nIn these functions there are a _transferFrom(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L1148) what:\n\n*   JBETHPaymentTerminal using a Address.sendValue(_to, _amount)(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBETHPaymentTerminal.sol#L78)\n*   JBERC20PaymentTerminal using a IERC20(token).transfer(_to, _amount)(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBERC20PaymentTerminal.sol#L87) with a ERC777 as token\n\nBoth give back the control to the msg.sender (_to variable) creating a reentrancy attack vector.\n\nAlso could end with a lot of bad calculation because is using uncheckeds statements and function _distributePayoutsOf its no respecting the checks, effects, interactions pattern.\n\n\nCraft a contract to call function distributePayoutsOf(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L437), on receive ether reentrant to function distributePayoutsOf or use a ERC777 callback.\n\n",
                "Repair": "\nAdd a reentrancyGuard as you do on JBSingleTokenPaymentTerminalStore.sol;\nYou have already imported the ReentrancyGuard on JBPayoutRedemptionPaymentTerminal.sol#L5(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L5) but you are not using it.\n\nMy recommendation is to add nonReentrant modifier on function distributePayoutsOf.\n\ndrgorillamd (Juicebox) acknowledged(https://github.com/code-423n4/2022-07-juicebox-findings/issues/35)\n\njack-the-pug (judge) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/329#issuecomment-1193225553):\n  Lack of clear path to exploit it, but it does seem like _distributeToPayoutSplitsOf can be used to reenter distributePayoutsOf; it requires the attacker to be one of the project's splits beneficiaries, though.\n \n https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L1148-L1153\n \n solidity\n           _transferFrom(\n             address(this),\n             _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender),\n             _netPayoutAmount\n           );\n \n \n\n*\n\n\n"
            },
            {
                "Name": "M-09",
                "Location": [],
                "Type": " Unhandled chainlink revert would lock all price oracle access",
                "Description": "\nCall to latestRoundData could potentially revert and make it impossible to query any prices. Feeds cannot be changed after they are configured (<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBPrices.sol#L115) so this would result in a permanent denial of service.\n\n\nChainlink's multisigs can immediately block access to price feeds at will. Therefore, to prevent denial of service scenarios, it is recommended to query Chainlink price feeds using a defensive approach with Solidity\u2019s try/catch structure. In this way, if the call to the price feed fails, the caller contract is still in control and can handle any errors safely and explicitly.\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBPrices.sol#L69\n\n    if (_feed != IJBPriceFeed(address(0))) return _feed.currentPrice(_decimals);\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBChainlinkV3PriceFeed.sol#L42-L44\n\n    function currentPrice(uint256 _decimals) external view override returns (uint256) {\n      // Get the latest round information. Only need the price is needed.\n      (, int256 _price, , , ) = feed.latestRoundData();\n\nRefer to <https://blog.openzeppelin.com/secure-smart-contract-guidelines-the-dangers-of-price-oracles/ for more information regarding potential risks to account for when relying on external price feed providers.\n\n\nVIM\n\n",
                "Repair": "\nSurround the call to latestRoundData() with try/catch instead of calling it directly. In a scenario where the call reverts, the catch block can be used to call a fallback oracle or handle the error in any other suitable way.\n\nmejango (Juicebox) acknowledged(https://github.com/code-423n4/2022-07-juicebox-findings/issues/59)\n\njack-the-pug (judge) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/59#issuecomment-1200414043):\n  Good catch! Seems like we should update this function to allow changing the feed contract:\n \n https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBPrices.sol#L109-L121\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-10",
                "Location": [
                    "//solidity\n// If there's a beneficiary, send the funds directly to the beneficiary. Otherwise, send to the msg.sender.\n          _transferFrom(\n            address(this),\n            _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender),\n            _netPayoutAmount\n          );\n"
                ],
                "Type": " Grieffer beneficiary can cause DOS",
                "Description": "\nPayouts won't be able to be distributed if one of multiple beneficiaries decides to revert the transaction on receival.\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L1147-L1152\n\nsolidity\n// If there's a beneficiary, send the funds directly to the beneficiary. Otherwise, send to the msg.sender.\n          _transferFrom(\n            address(this),\n            _split.beneficiary != address(0) ? _split.beneficiary : payable(msg.sender),\n            _netPayoutAmount\n          );\n\n\nIf token used is native ETH or ERC777 a beneficiary can revert the transaction on the callback and DOS _distributeToPayoutSplitsOf() for all the other beneficiaries.\n\n",
                "Repair": "\nHave beneficiaries withdraw their benefit instead of sending it to them.\n\nmejango (Juicebox) acknowledged and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/229#issuecomment-1182422038):\n  By design. Project owners bring their own risks and opportunities when setting payout splits. Made clear here(https://info.juicebox.money/dev/learn/risks#setting-a-distribution-limit-and-payout-splits).\n\nhake (warden) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/229#issuecomment-1183603378):\n  A malicious or compromised beneficiary is not exactly under a project owner's control. Implementing the recommended mitigation step would prevent the possibility of DOS while maintaining all privileges of project owner. No risks outlined in link below would be mitigated by the recommended mitigation, thus project owner would still have access to same range of functionalities. \n  https://info.juicebox.money/dev/learn/risks/#setting-a-distribution-limit-and-payout-splits\n\n\n*\n\n\n"
            },
            {
                "Name": "M-11",
                "Location": [],
                "Type": " addFeedFor should check if inverse feed already exists",
                "Description": "\nPotentially inconsistent currency conversions.\n\n\naddFeedFor requires that a price feed for the _currency _base doesn't exist when adding a new price feed but doesn't check if the inverse already exists. This means that two different oracles (potentially with different prices) could be used for _currency - _base vs. _base - _currency. Different prices would lead to inconsistent between conversion ratios depending on the direction of the conversion.\n\n",
                "Repair": "\nChange L115 to:\nif (feedFor[_currency][_base] != IJBPriceFeed(address(0)) || feedFor[_base][_currency] != IJBPriceFeed(address(0))) revert PRICE_FEED_ALREADY_EXISTS()\n\nmejango (Juicebox) confirmed(https://github.com/code-423n4/2022-07-juicebox-findings/issues/79) \n\nmejango (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n An additional check has been added to prevent adding a price feed for the inverse pair.\n\n*\n\n\n"
            },
            {
                "Name": "M-14",
                "Location": [
                    "//solidity\nfunction _reservedTokenAmountFrom(\n    int256 _processedTokenTracker,\n    uint256 _reservedRate,\n    uint256 _totalEligibleTokens\n  ) internal pure returns (uint256) {\n    // Get a reference to the amount of tokens that are unprocessed.\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker = 0\n      ? _totalEligibleTokens uint256(_processedTokenTracker)\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\n\n    // If there are no unprocessed tokens, return.\n    if (_unprocessedTokenBalanceOf == 0) return 0;\n\n    // If all tokens are reserved, return the full unprocessed amount.\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\n\n    return\n      PRBMath.mulDiv(\n        _unprocessedTokenBalanceOf,\n        JBConstants.MAX_RESERVED_RATE,\n        JBConstants.MAX_RESERVED_RATE _reservedRate\n      ) _unprocessedTokenBalanceOf;\n  }\n"
                ],
                "Type": " More outstanding reserved tokens are distributed than anticipated leading to less redeemable assets and therefore loss of user funds",
                "Description": "\nThe JBController.distributeReservedTokensOf function is used to distribute all outstanding reserved tokens for a project. Internally, the JBController._distributeReservedTokensOf function calculates the distributable amount of tokens tokenCount with the function JBController._reservedTokenAmountFrom.\n\nHowever, the current implementation of JBController._reservedTokenAmountFrom calculates the amount of reserved tokens currently tracked in a way that leads to inaccuracy and to more tokens distributed than anticipated.\n\n\nMore tokens than publicly defined via the funding cycle reservedRate are distributed (minted) to the splits and the owner increasing the total supply and therefore reducing the amount of terminal assets redeemable by a user. The increased supply takes effect in JBSingleTokenPaymentTerminStore.recordRedemptionFor on L784(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L784). The higher the token supply, the less terminal assets redeemable.\n\n\nJBController._reservedTokenAmountFrom(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L1086-L1090)\n\nsolidity\nfunction _reservedTokenAmountFrom(\n    int256 _processedTokenTracker,\n    uint256 _reservedRate,\n    uint256 _totalEligibleTokens\n  ) internal pure returns (uint256) {\n    // Get a reference to the amount of tokens that are unprocessed.\n    uint256 _unprocessedTokenBalanceOf = _processedTokenTracker = 0\n      ? _totalEligibleTokens uint256(_processedTokenTracker)\n      : _totalEligibleTokens + uint256(-_processedTokenTracker);\n\n    // If there are no unprocessed tokens, return.\n    if (_unprocessedTokenBalanceOf == 0) return 0;\n\n    // If all tokens are reserved, return the full unprocessed amount.\n    if (_reservedRate == JBConstants.MAX_RESERVED_RATE) return _unprocessedTokenBalanceOf;\n\n    return\n      PRBMath.mulDiv(\n        _unprocessedTokenBalanceOf,\n        JBConstants.MAX_RESERVED_RATE,\n        JBConstants.MAX_RESERVED_RATE _reservedRate\n      ) _unprocessedTokenBalanceOf;\n  }\n\n\nExample:\n\nGiven the following (don't mind the floating point arithmetic, this is only for simplicity. The issues still applies with integer arithmetic and higher decimal precision):\n\n*   processedTokenTracker -1000\n*   reservedRate 10 (10%)\n*   totalEligibleTokens 0\n*   MAX_RESERVED_RATE 100\n\n$unprocessedTokenBalanceOf = 0 + (--1000)$\n$unprocessedTokenBalanceOf = 1000$\n\n$reservedTokenAmount = {{unprocessedTokenBalanceOf ast MAX_RESERVED_RATE} over {MAX_RESERVED_RATE reservedRate}} unprocessedTokenBalanceOf$\n$reservedTokenAmount = {{1000 ast 100} over {100 10}} 1000$\n$reservedTokenAmount = 1111.111 1000$\n$reservedTokenAmount = 111,111$\n\nThe calculated and wrong amount is ~111, instead it should be 100 (10% of 1000). The issue comes from dividing by JBConstants.MAX_RESERVED_RATE _reservedRate.\n\nNow the correct way:\n\n$reservedTokenAmount = {{unprocessedTokenBalanceOf ast reservedRate} over MAX_RESERVED_RATE}$\n$reservedTokenAmount = {{1000 ast 10} over 100}$\n$reservedTokenAmount = 100$\n\n",
                "Repair": "\nFix the outstanding reserve token calculation by implementing the calculation as following:\n\nsolidity\nfunction _reservedTokenAmountFrom(\n    int256 _processedTokenTracker,\n    uint256 _reservedRate,\n    uint256 _totalEligibleTokens\n) internal pure returns (uint256) {\n  // Get a reference to the amount of tokens that are unprocessed.\n  uint256 _unprocessedTokenBalanceOf = _processedTokenTracker = 0\n    ? _totalEligibleTokens uint256(_processedTokenTracker)\n    : _totalEligibleTokens + uint256(-_processedTokenTracker);\n\n  // If there are no unprocessed tokens, return.\n  if (_unprocessedTokenBalanceOf == 0) return 0;\n\n  return\n    PRBMath.mulDiv(\n      _unprocessedTokenBalanceOf,\n      _reservedRate,\n      JBConstants.MAX_RESERVED_RATE\n    );\n}\n\n\nmejango (Juicebox) disputed and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/285#issuecomment-1179405474):\n  The only case where the tracker can be -1000 but the totalEligibleTokens is 0 is if reserved rate is 100%. https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L664\n <img width=\"911\" alt=\"image\" src=\"https://user-images.githubusercontent.com/77952627/178077733-af364733-bcfb-47b9-b673-80bcad0efb2e.png\"\n \n  Furthermore, reserved rate changes per fc is noted in the protocol's known risks exposed by design:https://info.juicebox.money/dev/learn/risks#undistributed-reserved-rate-risk.\n\njack-the-pug (judge) decreased severity to Medium and commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/285#issuecomment-1207328114):\n  I find this issue to be a valid Medium issue as it introduced an unexpected behavior that can cause a leak of value in certain circumstances.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-15",
                "Location": [],
                "Type": " Locked splits can be updated",
                "Description": "\nThe check if the newly provided project splits contain the currently locked splits does not check the JBSplit struct properties preferClaimed and preferAddToBalance.\n\nAccording to the docs in JBSplit.sol, *\"...if the split should be unchangeable until the specified time, with the exception of extending the locked period.\"*, locked sets are unchangeable.\n\nHowever, locked sets with either preferClaimed or preferAddToBalance set to true can have their bool values overwritten by supplying the same split just with different bool values.\n\n\nJBSplitsStore.sol#L213-L220(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L213-L220)\n\nThe check for sameness does not check the equality of the struct properties preferClaimed and preferAddToBalance.\n\n*Please see warden's original report(https://github.com/code-423n4/2022-07-juicebox-findings/issues/278) for full PoC and Mitigation details.*\n\n",
                "Repair": "\nAdd two additional sameness checks for preferClaimed and preferAddToBalance:\n\nmejango (Juicebox) confirmed(https://github.com/code-423n4/2022-07-juicebox-findings/issues/278) \n\nmejango (Juicebox) resolved:\n PR with fix: PR #1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1)\n\nberndartmueller (warden) reviewed mitigation:\n Two additional sameness checks for the split properties preferClaimed and preferAddToBalance have been added.\n\n*\n\n\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 60 reports were submitted by wardens detailing low risk and non-critical issues. The report highlighted below(https://github.com/code-423n4/2022-07-juicebox-findings/issues/299) by IllIllI received the top score from the judge.\n\n*The following wardens also submitted reports: Lambda(https://github.com/code-423n4/2022-07-juicebox-findings/issues/21), &#95;141345&#95;(https://github.com/code-423n4/2022-07-juicebox-findings/issues/205), zzzitron(https://github.com/code-423n4/2022-07-juicebox-findings/issues/217), berndartmueller(https://github.com/code-423n4/2022-07-juicebox-findings/issues/274), Meera(https://github.com/code-423n4/2022-07-juicebox-findings/issues/286), GimelSec(https://github.com/code-423n4/2022-07-juicebox-findings/issues/337), Picodes(https://github.com/code-423n4/2022-07-juicebox-findings/issues/186), horsefacts(https://github.com/code-423n4/2022-07-juicebox-findings/issues/244), 0xNazgul(https://github.com/code-423n4/2022-07-juicebox-findings/issues/123), 0x1f8b(https://github.com/code-423n4/2022-07-juicebox-findings/issues/43), simon135(https://github.com/code-423n4/2022-07-juicebox-findings/issues/228), cccz(https://github.com/code-423n4/2022-07-juicebox-findings/issues/47), sahar(https://github.com/code-423n4/2022-07-juicebox-findings/issues/222), robee(https://github.com/code-423n4/2022-07-juicebox-findings/issues/12), jonatascm(https://github.com/code-423n4/2022-07-juicebox-findings/issues/143), joestakey(https://github.com/code-423n4/2022-07-juicebox-findings/issues/358), hubble(https://github.com/code-423n4/2022-07-juicebox-findings/issues/368), Funen(https://github.com/code-423n4/2022-07-juicebox-findings/issues/268), codexploder(https://github.com/code-423n4/2022-07-juicebox-findings/issues/125), 0xDjango(https://github.com/code-423n4/2022-07-juicebox-findings/issues/265), Sm4rty(https://github.com/code-423n4/2022-07-juicebox-findings/issues/215), Hawkeye(https://github.com/code-423n4/2022-07-juicebox-findings/issues/365), delfin454000(https://github.com/code-423n4/2022-07-juicebox-findings/issues/197), Ch&#95;301(https://github.com/code-423n4/2022-07-juicebox-findings/issues/261), asutorufos(https://github.com/code-423n4/2022-07-juicebox-findings/issues/327), hake(https://github.com/code-423n4/2022-07-juicebox-findings/issues/236), Waze(https://github.com/code-423n4/2022-07-juicebox-findings/issues/191), TomJ(https://github.com/code-423n4/2022-07-juicebox-findings/issues/351), TerrierLover(https://github.com/code-423n4/2022-07-juicebox-findings/issues/325), svskaushik(https://github.com/code-423n4/2022-07-juicebox-findings/issues/151), samruna(https://github.com/code-423n4/2022-07-juicebox-findings/issues/60), sach1r0(https://github.com/code-423n4/2022-07-juicebox-findings/issues/168), Rohan16(https://github.com/code-423n4/2022-07-juicebox-findings/issues/254), ReyAdmirado(https://github.com/code-423n4/2022-07-juicebox-findings/issues/182), rbserver(https://github.com/code-423n4/2022-07-juicebox-findings/issues/183), pashov(https://github.com/code-423n4/2022-07-juicebox-findings/issues/263), oyc&#95;109(https://github.com/code-423n4/2022-07-juicebox-findings/issues/5), MiloTruck(https://github.com/code-423n4/2022-07-juicebox-findings/issues/189), m&#95;Rassska(https://github.com/code-423n4/2022-07-juicebox-findings/issues/94), Kaiziron(https://github.com/code-423n4/2022-07-juicebox-findings/issues/344), JC(https://github.com/code-423n4/2022-07-juicebox-findings/issues/366), durianSausage(https://github.com/code-423n4/2022-07-juicebox-findings/issues/72), defsec(https://github.com/code-423n4/2022-07-juicebox-findings/issues/357), Chom(https://github.com/code-423n4/2022-07-juicebox-findings/issues/322), Chandr(https://github.com/code-423n4/2022-07-juicebox-findings/issues/76), Bnke0x0(https://github.com/code-423n4/2022-07-juicebox-findings/issues/112), aysha(https://github.com/code-423n4/2022-07-juicebox-findings/issues/355), 0xNineDec(https://github.com/code-423n4/2022-07-juicebox-findings/issues/139), 0xf15ers(https://github.com/code-423n4/2022-07-juicebox-findings/issues/284), 0xdanial(https://github.com/code-423n4/2022-07-juicebox-findings/issues/290), 0x29A(https://github.com/code-423n4/2022-07-juicebox-findings/issues/293), 0v3rf10w(https://github.com/code-423n4/2022-07-juicebox-findings/issues/320), &#95;Adam(https://github.com/code-423n4/2022-07-juicebox-findings/issues/154), rajatbeladiya(https://github.com/code-423n4/2022-07-juicebox-findings/issues/208), Noah3o6(https://github.com/code-423n4/2022-07-juicebox-findings/issues/115), jayfromthe13th(https://github.com/code-423n4/2022-07-juicebox-findings/issues/347), fatherOfBlocks(https://github.com/code-423n4/2022-07-juicebox-findings/issues/62), djxploit(https://github.com/code-423n4/2022-07-juicebox-findings/issues/108), and brgltd(https://github.com/code-423n4/2022-07-juicebox-findings/issues/136).*\n\n## Low Risk Issues\n\n|   | Issue                                                               | Instances |\n| | :-----------------------------------------------------------------| :-------: |\n| L-01 | Weight of one being used as zero not documented                     |     1     |\n| L-02 | Calls may run out of gas until arrays are reduced in size           |     2     |\n| L-03 | Dust amounts not compensated, even if not using price oracle        |     1     |\n| L-04 | Splits can't be locked once the timestamp passes type(uint48).max |     1     |\n| L-05 | Unsafe use of transfer()/transferFrom() with IERC20           |     2     |\n\nTotal: 7 instances over 5 issues\n\n\n"
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n467        // A weight of 1 is treated as a weight of 0.\n468        // This is to allow a weight of 0 (default) to represent inheriting the discounted weight of the previous funding cycle.\n469        _weight = _weight  0\n470          ? (_weight == 1 ? 0 : _weight)\n471:         : _deriveWeightFrom(_baseFundingCycle, _start);\n"
                ],
                "Type": " Weight of one being used as zero not documented",
                "Description": "\nThe comments and code below say that a weight of one is being used as a weight of zero. If a project is mature, or eventually becomes mature, a weight of one may in fact be a useful weighting, and the project owners will become very confused when they are unable to receive funds with this weighting.\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n467        // A weight of 1 is treated as a weight of 0.\n468        // This is to allow a weight of 0 (default) to represent inheriting the discounted weight of the previous funding cycle.\n469        _weight = _weight  0\n470          ? (_weight == 1 ? 0 : _weight)\n471:         : _deriveWeightFrom(_baseFundingCycle, _start);\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L467-L471\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "//solidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n385      uint256 _weightRatio = _amount.currency == _baseWeightCurrency\n386        ? 10_decimals\n387        : prices.priceFor(_amount.currency, _baseWeightCurrency, _decimals);\n388  \n389      // Find the number of tokens to mint, as a fixed point number with as many decimals as `weight` has.\n390:     tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio);\n"
                ],
                "Type": " Dust amounts not compensated, even if not using price oracle",
                "Description": "\nIf there's a fixed weighting between what the user provides, and what is minted for them, there should be code that tracks partial token amounts, so that later payments are compensated for their prior partial amounts.\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n385      uint256 _weightRatio = _amount.currency == _baseWeightCurrency\n386        ? 10_decimals\n387        : prices.priceFor(_amount.currency, _baseWeightCurrency, _decimals);\n388  \n389      // Find the number of tokens to mint, as a fixed point number with as many decimals as weight has.\n390:     tokenCount = PRBMath.mulDiv(_amount.value, _weight, _weightRatio);\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L385-L390\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-04",
                "Location": [
                    "//solidity\nFile: contracts/JBSplitsStore.sol   #1\n\n261:         if (_splits[_i].lockedUntil  type(uint48).max) revert INVALID_LOCKED_UNTIL();\n"
                ],
                "Type": " Splits can't be locked once the timestamp passes  type(uint48).max ",
                "Description": "\nThis behavior isn't documented anywhere, and a project will be confused by this behavior when that time comes (the original developers will be unable to explain it because they'll be dead).\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBSplitsStore.sol   #1\n\n261:         if (_splits[_i].lockedUntil  type(uint48).max) revert INVALID_LOCKED_UNTIL();\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L261\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-05",
                "Location": [],
                "Type": " Unsafe use of  transfer() / transferFrom()  with  IERC20 ",
                "Description": "\nSome tokens do not implement the ERC20 standard properly but are still accepted by most code that accepts ERC20 tokens.  For example Tether (USDT)'s transfer() and transferFrom() functions on L1 do not return booleans as the specification requires, and instead have no return value. When these sorts of tokens are cast to IERC20, their function signatures(https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca) do not match and therefore the calls made, revert (see this(https://gist.github.com/IllIllI000/2b00a32e8f0559e8f386ea4f1800abc5) link for a test case). Use OpenZeppelin\u2019s SafeERC20's safeTransfer()/safeTransferFrom() instead.\n\n*There are 2 instances of this issue.*\n\n## Non-Critical Issues\n\n|    | Issue                                                                                       | Instances |\n| -| :-----------------------------------------------------------------------------------------| :-------: |\n| N-01  | Confusing variable names                                                                    |     1     |\n| N-02  | Return values of approve() not checked                                                    |     1     |\n| N-03  | Adding a return statement when the function defines a named return variable, is redundant |     4     |\n| N-04  | Non-assembly method available                                                               |     1     |\n| N-05  | constants should be defined rather than using magic numbers                               |     37    |\n| N-06  | Use a more recent version of solidity                                                       |     1     |\n| N-07  | Use a more recent version of solidity                                                       |     3     |\n| N-08  | Use scientific notation (e.g. 1e18) rather than exponentiation (e.g. 1018)            |     1     |\n| N-09  | Constant redefined elsewhere                                                                |     11    |\n| N-10 | Inconsistent spacing in comments                                                            |     1     |\n| N-11 | Lines are too long                                                                          |     49    |\n| N-12 | Typos                                                                                       |     17    |\n| N-13 | File is missing NatSpec                                                                     |     29    |\n| N-14 | NatSpec is incomplete                                                                       |     5     |\n| N-15 | Event is missing indexed fields                                                           |     34    |\n| N-16 | Not using the named return variables anywhere in the function is confusing                  |     6     |\n\nTotal: 201 instances over 16 issues\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n332:     uint256 _configuration = block.timestamp;\n"
                ],
                "Type": " Confusing variable names",
                "Description": "\nIt was well into my review before I realized that 'configuration' means the timestamp at which the configuration is set, not the actual configuration details. It would be helpful to people reading the code to name it something like configTimestamp in all places. Below is one example of many.\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n332:     uint256 _configuration = block.timestamp;\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L332\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\nFile: contracts/JBERC20PaymentTerminal.sol   #1\n\n99:       IERC20(token).approve(_to, _amount);\n"
                ],
                "Type": " Return values of  approve()  not checked",
                "Description": "\nNot all IERC20 implementations revert() when there's a failure in approve(). The function signature has a boolean return value and they indicate errors that way instead. By not checking the return value, operations that should have marked as failed, may potentially go through without actually approving anything.\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBERC20PaymentTerminal.sol   #1\n\n99:       IERC20(token).approve(_to, _amount);\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/tree/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBERC20PaymentTerminal.sol#L99\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [],
                "Type": " Adding a  return  statement when the function defines a named return variable, is redundant",
                "Description": "\n*There are 4 instances of this issue.*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-04",
                "Location": [
                    "//solidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n320:          _size := extcodesize(_ballot) // No contract at the address ?\n"
                ],
                "Type": " Non-assembly method available",
                "Description": "\nassembly{ id := chainid() } = uint256 id = block.chainid, assembly { size := extcodesize() } = uint256 size = address().code.length\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBFundingCycleStore.sol   #1\n\n320:          _size := extcodesize(_ballot) // No contract at the address ?\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/tree/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L320\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-05",
                "Location": [],
                "Type": "  constant s should be defined rather than using magic numbers",
                "Description": "\nEven assembly(https://github.com/code-423n4/2022-05-opensea-seaport/blob/9d7ce4d08bf3c3010304a0476a785c70c0e90ae7/contracts/lib/TokenTransferrer.sol#L35-L39) can benefit from using readable constants instead of hex/numeric literals.\n\n*There are 37 instances of this issue.*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-06",
                "Location": [
                    "//solidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #1\n\n2:    pragma //solidity 0.8.6;\n"
                ],
                "Type": " Use a more recent version of solidity",
                "Description": "\nUse a solidity version of at least 0.8.12 to get string.concat() to be used instead of abi.encodePacked(<str,<str).\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol   #1\n\n2:    pragma solidity 0.8.6;\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/tree/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/abstract/JBPayoutRedemptionPaymentTerminal.sol#L2\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-07",
                "Location": [],
                "Type": " Use a more recent version of solidity",
                "Description": "\nUse a solidity version of at least 0.8.13 to get the ability to use using for with a list of free functions.\n\n*There are 3 instances of this issue.*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-08",
                "Location": [
                    "//solidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n868:        : PRBMath.mulDiv(_ethOverflow, 1018, prices.priceFor(JBCurrencies.ETH, _currency, 18));\n"
                ],
                "Type": " Use scientific notation (e.g.  1e18 ) rather than exponentiation (e.g.  1018 )",
                "Description": "\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBSingleTokenPaymentTerminalStore.sol   #1\n\n868:        : PRBMath.mulDiv(_ethOverflow, 1018, prices.priceFor(JBCurrencies.ETH, _currency, 18));\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/tree/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L868\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-09",
                "Location": [],
                "Type": " Constant redefined elsewhere",
                "Description": "\nConsider defining in only one contract so that values cannot become out of sync when only one location is updated. A cheap way(https://medium.com/coinmonks/gas-cost-of-solidity-library-functions-dbe0cedd4678) to store constants in a single location is to create an internal constant in a library. If the variable is a local cache of another contract's value, consider making the cache variable internal or private, which will require external users to query the contract with the source of truth, so that callers don't get out of sync.\n\n*There are 11 instances of this issue.*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-10",
                "Location": [
                    "//solidity\nFile: contracts/JBController.sol   #1\n\n912:      //Transfer between all splits.\n"
                ],
                "Type": " Inconsistent spacing in comments",
                "Description": "\nSome lines use // x and some use //x. The instances below point out the usages that don't follow the majority, within each file.\n\n*There is 1 instance of this issue:*\n\nsolidity\nFile: contracts/JBController.sol   #1\n\n912:      //Transfer between all splits.\n\n\n<https://github.com/jbx-protocol/juice-contracts-v2-code4rena/tree/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L912\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-15",
                "Location": [],
                "Type": " Event is missing  indexed  fields",
                "Description": "\nIndex event fields make the field more quickly accessible to off-chain tools that parse events. However, note that each index field costs extra gas during emission, so it's not necessarily best to index the maximum allowed per event (threefields). Each event should use three indexed fields if there are three or more fields, and gas usage is not particularly of concern for the events in question.\n\n*There are 34 instances of this issue.*\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-01",
                "Location": [
                    "diff\n \n   // Delete the stored terminals for the project.\n   _terminalsOf[_projectId] = _terminals;\n-\n     // Make sure duplicates were not added.\n+    // @audit run checks before assigning, to save gas in case of revert\n     if (_terminals.length  1)\n       for (uint256 _i; _i < _terminals.length; _i++)\n         for (uint256 _j = _i + 1; _j < _terminals.length; _j++)\n           if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS();\n \n+    // Delete the stored terminals for the project.\n+    _terminalsOf[_projectId] = _terminals;\n+\n     emit SetTerminals(_projectId, _terminals, msg.sender);\n\n"
                ],
                "Type": " Run checks first",
                "Description": "\nRunning checks before doing other operations can save gas in case the checks don't pass (since less operations were done before the revert).\n\nLines: JBDirectory.sol#L270-L278(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBDirectory.sol#L270-L278)\n\nGas saved: Not measured by tests, can be a few dozen of thousands in case of revert (tested with a contract mocking the same behavior and 3 terminals)\n\ndiff\n \n   // Delete the stored terminals for the project.\n   _terminalsOf[_projectId] = _terminals;\n-\n     // Make sure duplicates were not added.\n+    // @audit run checks before assigning, to save gas in case of revert\n     if (_terminals.length  1)\n       for (uint256 _i; _i < _terminals.length; _i++)\n         for (uint256 _j = _i + 1; _j < _terminals.length; _j++)\n           if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS();\n \n+    // Delete the stored terminals for the project.\n+    _terminalsOf[_projectId] = _terminals;\n+\n     emit SetTerminals(_projectId, _terminals, msg.sender);\n\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "diff\ndiff --git a/contracts/JBController.sol b/contracts/JBController.sol\nindex 26cd238..475a35a 100644\n--a/contracts/JBController.sol\n+++ b/contracts/JBController.sol\n@@ -910,7 +910,7 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n     JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group);\n \n     //Transfer between all splits.\n   for (uint256 _i = 0; _i < _splits.length; _i++) {\n+    for (uint256 _i = 0; _i < _splits.length; ) {\n       // Get a reference to the split being iterated on.\n       JBSplit memory _split = _splits[_i];\n \n@@ -964,6 +964,9 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n         _tokenCount,\n         msg.sender\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n \n@@ -1011,7 +1014,7 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n     splitsStore.set(_projectId, _fundingCycle.configuration, _groupedSplits);\n \n     // Set distribution limits if there are any.\n   for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\n+    for (uint256 _i; _i < _fundAccessConstraints.length; ) {\n       JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\n \n       // If distribution limit value is larger than 232 bits, revert.\n@@ -1051,6 +1054,9 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n         _constraints,\n         msg.sender\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     return _fundingCycle.configuration;\ndiff --git a/contracts/JBDirectory.sol b/contracts/JBDirectory.sol\nindex 865c719..442e704 100644\n--a/contracts/JBDirectory.sol\n+++ b/contracts/JBDirectory.sol\n@@ -137,9 +137,12 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n \n     IJBPaymentTerminal[] storage _terminalOf_projectId = _terminalsOf[_projectId];\n     // Return the first terminal which accepts the specified token.\n   for (uint256 _i; _i < _terminalOf_projectId.length; _i++) {\n+    for (uint256 _i; _i < _terminalOf_projectId.length; ) {\n       IJBPaymentTerminal _terminal = _terminalOf_projectId[_i];\n       if (_terminal.acceptsToken(_token, _projectId)) return _terminal;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Not found.\n@@ -165,8 +168,12 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n     override\n     returns (bool)\n   {\n   for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\n+    for (uint256 _i; _i < _terminalsOf[_projectId].length; ) {\n       if (_terminalsOf[_projectId][_i] == _terminal) return true;\n+      unchecked {\n+        ++_i;\n+      }\n+    }\n     return false;\n   }\n \n@@ -272,9 +279,17 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n     // Make sure duplicates were not added.\n     // @audit run checks before assigning, to save gas in case of revert\n     if (_terminals.length  1)\n     for (uint256 _i; _i < _terminals.length; _i++)\n       for (uint256 _j = _i + 1; _j < _terminals.length; _j++)\n+      for (uint256 _i; _i < _terminals.length; ) {\n+        for (uint256 _j = _i + 1; _j < _terminals.length; ) {\n           if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS();\n+          unchecked {\n+            ++_j;\n+          }\n+        }\n+        unchecked {\n+          ++_i;\n+        }\n+      }\n \n     // Delete the stored terminals for the project.\n     _terminalsOf[_projectId] = _terminals;\ndiff --git a/contracts/JBETHERC20SplitsPayer.sol b/contracts/JBETHERC20SplitsPayer.sol\nindex 97a6517..6c344bd 100644\n--a/contracts/JBETHERC20SplitsPayer.sol\n+++ b/contracts/JBETHERC20SplitsPayer.sol\n@@ -463,7 +463,7 @@ contract JBETHERC20SplitsPayer is IJBSplitsPayer, JBETHERC20ProjectPayer, Reentr\n     leftoverAmount = _amount;\n \n     // Settle between all splits.\n   for (uint256 i = 0; i < _splits.length; i++) {\n+    for (uint256 i = 0; i < _splits.length; ) {\n       // Get a reference to the split being iterated on.\n       JBSplit memory _split = _splits[i];\n \n@@ -544,6 +544,9 @@ contract JBETHERC20SplitsPayer is IJBSplitsPayer, JBETHERC20ProjectPayer, Reentr\n       }\n \n       emit DistributeToSplit(_split, _splitAmount, _defaultBeneficiary, msg.sender);\n+      unchecked {\n+        ++i;\n+      }\n     }\n   }\n }\ndiff --git a/contracts/JBFundingCycleStore.sol b/contracts/JBFundingCycleStore.sol\nindex 13fe9e6..79d16c3 100644\n--a/contracts/JBFundingCycleStore.sol\n+++ b/contracts/JBFundingCycleStore.sol\n@@ -312,8 +312,7 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n     if (_data.weight  type(uint88).max) revert INVALID_WEIGHT();\n \n     // Ballot should be a valid contract, supporting the correct interface\n   if(_data.ballot != IJBFundingCycleBallot(address(0))) {\n-\n+    if (_data.ballot != IJBFundingCycleBallot(address(0))) {\n       address _ballot = address(_data.ballot);\n       uint32 _size;\n       assembly {\n@@ -721,7 +722,7 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n     // Apply the base funding cycle's discount rate for each cycle that has passed.\n     uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration;\n \n   for (uint256 i = 0; i < _discountMultiple; i++) {\n+    for (uint256 i = 0; i < _discountMultiple; ) {\n       // The number of times to apply the discount rate.\n       // Base the new weight on the specified funding cycle's weight.\n       weight = PRBMath.mulDiv(\n@@ -731,6 +732,9 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n       );\n       // The calculation doesn't need to continue if the weight is 0.\n       if (weight == 0) break;\n+      unchecked {\n+        ++i;\n+      }\n     }\n   }\n \ndiff --git a/contracts/JBOperatorStore.sol b/contracts/JBOperatorStore.sol\nindex e1e0241..e67f97d 100644\n--a/contracts/JBOperatorStore.sol\n+++ b/contracts/JBOperatorStore.sol\n@@ -82,13 +82,16 @@ contract JBOperatorStore is IJBOperatorStore {\n     uint256 _domain,\n     uint256[] calldata _permissionIndexes\n   ) external view override returns (bool) {\n   for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\n+    for (uint256 _i = 0; _i < _permissionIndexes.length; ) {\n       uint256 _permissionIndex = _permissionIndexes[_i];\n \n       if (_permissionIndex  255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n \n       if (((permissionsOf[_operator][_account][_domain]  _permissionIndex) & 1) == 0)\n         return false;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n     return true;\n   }\n@@ -132,7 +135,7 @@ contract JBOperatorStore is IJBOperatorStore {\n     @param _operatorData The data that specify the params for each operator being set.\n   */\n   function setOperators(JBOperatorData[] calldata _operatorData) external override {\n   for (uint256 _i = 0; _i < _operatorData.length; _i++) {\n+    for (uint256 _i = 0; _i < _operatorData.length; ) {\n       // Pack the indexes into a uint256.\n       uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\n \n@@ -146,6 +149,9 @@ contract JBOperatorStore is IJBOperatorStore {\n         _operatorData[_i].permissionIndexes,\n         _packed\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n \n@@ -162,13 +168,16 @@ contract JBOperatorStore is IJBOperatorStore {\n     @return packed The packed value.\n   */\n   function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\n   for (uint256 _i = 0; _i < _indexes.length; _i++) {\n+    for (uint256 _i = 0; _i < _indexes.length; ) {\n       uint256 _index = _indexes[_i];\n \n       if (_index  255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n \n       // Turn the bit at the index on.\n       packed |= 1 << _index;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n }\ndiff --git a/contracts/JBSingleTokenPaymentTerminalStore.sol b/contracts/JBSingleTokenPaymentTerminalStore.sol\nindex 4fc5d46..21be5ff 100644\n--a/contracts/JBSingleTokenPaymentTerminalStore.sol\n+++ b/contracts/JBSingleTokenPaymentTerminalStore.sol\n@@ -859,8 +859,12 @@ contract JBSingleTokenPaymentTerminalStore is IJBSingleTokenPaymentTerminalStore\n     uint256 _ethOverflow;\n \n     // Add the current ETH overflow for each terminal.\n   for (uint256 _i = 0; _i < _terminals.length; _i++)\n+    for (uint256 _i = 0; _i < _terminals.length; ) {\n       _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId);\n+      unchecked {\n+        ++_i;\n+      }\n+    }\n \n     // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals.\n     uint256 _totalOverflow18Decimal = _currency == JBCurrencies.ETH\ndiff --git a/contracts/JBSplitsStore.sol b/contracts/JBSplitsStore.sol\nindex be0d17b..2c9d371 100644\n--a/contracts/JBSplitsStore.sol\n+++ b/contracts/JBSplitsStore.sol\n@@ -201,7 +201,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n     JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\n \n     // Check to see if all locked splits are included.\n   for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n+    for (uint256 _i = 0; _i < _currentSplits.length; ) {\n       JBSplit memory _currentSplit_i = _currentSplits[_i];\n       // If not locked, continue.\n       if (block.timestamp = _currentSplit_i.lockedUntil) continue;\n@@ -209,7 +209,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n       // Keep a reference to whether or not the locked split being iterated on is included.\n       bool _includesLocked = false;\n \n     for (uint256 _j = 0; _j < _splits.length; _j++) {\n+      for (uint256 _j = 0; _j < _splits.length; ) {\n         // Check for sameness.\n         JBSplit memory _split_j = _splits[_j];\n         if (\n@@ -220,15 +220,22 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n           // Allow lock extention.\n           _split_j.lockedUntil = _currentSplit_i.lockedUntil\n         ) _includesLocked = true;\n+        unchecked {\n+          ++_j;\n+        }\n       }\n \n       if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n+\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Add up all the percents to make sure they cumulative are under 100%.\n     uint256 _percentTotal = 0;\n \n   for (uint256 _i = 0; _i < _splits.length; _i++) {\n+    for (uint256 _i = 0; _i < _splits.length; ) {\n       JBSplit memory _splits_i = _splits[_i];\n       // The percent should be greater than 0.\n       if (_splits_i.percent == 0) revert INVALID_SPLIT_PERCENT();\n@@ -276,6 +283,9 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n         delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\n \n       emit SetSplit(_projectId, _domain, _group, _splits_i, msg.sender);\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Set the new length of the splits.\n@@ -304,7 +314,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n     JBSplit[] memory _splits = new JBSplit[(_splitCount);\n \n     // Loop through each split and unpack the values into structs.\n   for (uint256 _i = 0; _i < _splitCount; _i++) {\n+    for (uint256 _i = 0; _i < _splitCount; ) {\n       // Get a reference to the fist packed data.\n       uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\n \n@@ -335,6 +345,9 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n \n       // Add the split to the value being returned.\n       _splits[_i] = _split;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     return _splits;\n",
                    "diff\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502 contracts/JBController.sol:JBController contract \u2506                 \u2506         \u2506         \u2506         \u2506         \u2502\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                  \u2506 Deployment Size \u2506         \u2506         \u2506         \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 3979659                                          \u2506 20791           \u2506         \u2506         \u2506         \u2506         \u2502\n+\u2502 3970050                                          \u2506 20743           \u2506         \u2506         \u2506         \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                    \u2506 min             \u2506 avg     \u2506 median  \u2506 max     \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 burnTokensOf                                     \u2506 30462           \u2506 33235   \u2506 30462   \u2506 38783   \u2506 3       \u2502\n+\u2502 burnTokensOf                                     \u2506 30462           \u2506 33211   \u2506 30462   \u2506 38709   \u2506 3       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -155,9 +155,9 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 launchProjectFor                                 \u2506 287838          \u2506 365019  \u2506 363870  \u2506 523212  \u2506 14      \u2502\n+\u2502 launchProjectFor                                 \u2506 287838          \u2506 364965  \u2506 363870  \u2506 522765  \u2506 14      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 mintTokensOf                                     \u2506 20132           \u2506 55030   \u2506 42967   \u2506 102610  \u2506 13      \u2502\n+\u2502 mintTokensOf                                     \u2506 20058           \u2506 55019   \u2506 42967   \u2506 102610  \u2506 13      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -172,21 +172,21 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                \u2506 Deployment Size \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 1247680                                        \u2506 6698            \u2506       \u2506        \u2506       \u2506         \u2502\n+\u2502 1232666                                        \u2506 6623            \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                  \u2506 min             \u2506 avg   \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 isTerminalOf                                   \u2506 633             \u2506 1508  \u2506 1065   \u2506 5065  \u2506 26      \u2502\n+\u2502 isTerminalOf                                   \u2506 633             \u2506 1497  \u2506 1065   \u2506 5065  \u2506 26      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 primaryTerminalOf                              \u2506 2295            \u2506 3221  \u2506 2295   \u2506 5853  \u2506 12      \u2502\n+\u2502 primaryTerminalOf                              \u2506 2295            \u2506 3209  \u2506 2295   \u2506 5779  \u2506 12      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 setTerminalsOf                                 \u2506 54817           \u2506 57189 \u2506 54817  \u2506 78546 \u2506 10      \u2502\n+\u2502 setTerminalsOf                                 \u2506 54817           \u2506 57167 \u2506 54817  \u2506 78324 \u2506 10      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 terminalsOf                                    \u2506 1389            \u2506 1389  \u2506 1389   \u2506 1389  \u2506 2       \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n@@ -226,7 +226,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                    \u2506 Deployment Size \u2506     \u2506        \u2506     \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 2292746                                                            \u2506 12218           \u2506     \u2506        \u2506     \u2506         \u2502\n+\u2502 2283531                                                            \u2506 12172           \u2506     \u2506        \u2506     \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                      \u2506 min             \u2506 avg \u2506 median \u2506 max \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -249,13 +249,13 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 distributePayoutsOf                                              \u2506 102240          \u2506 128903 \u2506 128903 \u2506 155567 \u2506 2       \u2502\n+\u2502 distributePayoutsOf                                              \u2506 102240          \u2506 128758 \u2506 128758 \u2506 155276 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 pay                                                              \u2506 89467           \u2506 105031 \u2506 105031 \u2506 120596 \u2506 2       \u2502\n+\u2502 pay                                                              \u2506 89319           \u2506 104957 \u2506 104957 \u2506 120596 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 redeemTokensOf                                                   \u2506 68162           \u2506 87607  \u2506 87607  \u2506 107052 \u2506 2       \u2502\n+\u2502 redeemTokensOf                                                   \u2506 68162           \u2506 87496  \u2506 87496  \u2506 106830 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 supportsInterface                                                \u2506 503             \u2506 685    \u2506 655    \u2506 853    \u2506 9       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -268,7 +268,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                \u2506 Deployment Size \u2506       \u2506        \u2506        \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 1055746                                                        \u2506 5457            \u2506       \u2506        \u2506        \u2506         \u2502\n+\u2502 1048339                                                        \u2506 5420            \u2506       \u2506        \u2506        \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                  \u2506 min             \u2506 avg   \u2506 median \u2506 max    \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -330,7 +330,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                                            \u2506 Deployment Size \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 2551081                                                                                    \u2506 13119           \u2506       \u2506        \u2506       \u2506         \u2502\n+\u2502 2543674                                                                                    \u2506 13082           \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                                              \u2506 min             \u2506 avg   \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -338,13 +338,13 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 currentTotalOverflowOf                                                                     \u2506 31426           \u2506 31426 \u2506 31426  \u2506 31426 \u2506 1       \u2502\n+\u2502 currentTotalOverflowOf                                                                     \u2506 31278           \u2506 31278 \u2506 31278  \u2506 31278 \u2506 1       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 recordRedemptionFor                                                                        \u2506 25847           \u2506 33828 \u2506 25847  \u2506 49791 \u2506 3       \u2502\n+\u2502 recordRedemptionFor                                                                        \u2506 25847           \u2506 33779 \u2506 25847  \u2506 49643 \u2506 3       \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n@@ -353,15 +353,15 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                    \u2506 Deployment Size \u2506      \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 751811                                             \u2506 4116            \u2506      \u2506        \u2506       \u2506         \u2502\n+\u2502 736791                                             \u2506 4041            \u2506      \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                      \u2506 min             \u2506 avg  \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 set                                                \u2506 2998            \u2506 5840 \u2506 2998   \u2506 57007 \u2506 19      \u2502\n+\u2502 set                                                \u2506 2998            \u2506 5836 \u2506 2998   \u2506 56930 \u2506 19      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 splitsOf                                           \u2506 2941            \u2506 4853 \u2506 2941   \u2506 8679  \u2506 3       \u2502\n+\u2502 splitsOf                                           \u2506 2941            \u2506 4830 \u2506 2941   \u2506 8610  \u2506 3       \u2502\n \n\n"
                ],
                "Type": " Make loop increment unchecked ",
                "Description": "\nOverflowing loop index is virtually impossible, therefore it's cheaper to make the increment unchecked. It's also a bit cheaper to use ++i instead of i++.\n\nGas saved: up to 300 units\n\nLines:\n\n*   JBController.sol#L913(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L913)\n*   JBController.sol#L1014(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBController.sol#L1014)\n*   JBDirectory.sol#L139(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBDirectory.sol#L139)\n*   JBDirectory.sol#L167(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBDirectory.sol#L167)\n*   JBDirectory.sol#L275-L276(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBDirectory.sol#L275-L276)\n*   JBETHERC20SplitsPayer.sol#L466(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBETHERC20SplitsPayer.sol#L466)\n*   JBFundingCycleStore.sol#L724(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBFundingCycleStore.sol#L724)\n*   JBOperatorStore.sol#L85(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBOperatorStore.sol#L85)\n*   JBOperatorStore.sol#L138(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBOperatorStore.sol#L138)\n*   JBOperatorStore.sol#L171(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBOperatorStore.sol#L171)\n*   JBSingleTokenPaymentTerminalStore.sol#L862(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSingleTokenPaymentTerminalStore.sol#L862)\n*   JBSplitsStore.sol#L204(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L204)\n*   JBSplitsStore.sol#L211(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L211)\n*   JBSplitsStore.sol#L229(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L229)\n*   JBSplitsStore.sol#L304(https://github.com/jbx-protocol/juice-contracts-v2-code4rena/blob/828bf2f3e719873daa08081cfa0d0a6deaa5ace5/contracts/JBSplitsStore.sol#L304)\n\ndiff\ndiff --git a/contracts/JBController.sol b/contracts/JBController.sol\nindex 26cd238..475a35a 100644\n--a/contracts/JBController.sol\n+++ b/contracts/JBController.sol\n@@ -910,7 +910,7 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n     JBSplit[] memory _splits = splitsStore.splitsOf(_projectId, _domain, _group);\n \n     //Transfer between all splits.\n   for (uint256 _i = 0; _i < _splits.length; _i++) {\n+    for (uint256 _i = 0; _i < _splits.length; ) {\n       // Get a reference to the split being iterated on.\n       JBSplit memory _split = _splits[_i];\n \n@@ -964,6 +964,9 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n         _tokenCount,\n         msg.sender\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n \n@@ -1011,7 +1014,7 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n     splitsStore.set(_projectId, _fundingCycle.configuration, _groupedSplits);\n \n     // Set distribution limits if there are any.\n   for (uint256 _i; _i < _fundAccessConstraints.length; _i++) {\n+    for (uint256 _i; _i < _fundAccessConstraints.length; ) {\n       JBFundAccessConstraints memory _constraints = _fundAccessConstraints[_i];\n \n       // If distribution limit value is larger than 232 bits, revert.\n@@ -1051,6 +1054,9 @@ contract JBController is IJBController, IJBMigratable, JBOperatable, ERC165 {\n         _constraints,\n         msg.sender\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     return _fundingCycle.configuration;\ndiff --git a/contracts/JBDirectory.sol b/contracts/JBDirectory.sol\nindex 865c719..442e704 100644\n--a/contracts/JBDirectory.sol\n+++ b/contracts/JBDirectory.sol\n@@ -137,9 +137,12 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n \n     IJBPaymentTerminal[] storage _terminalOf_projectId = _terminalsOf[_projectId];\n     // Return the first terminal which accepts the specified token.\n   for (uint256 _i; _i < _terminalOf_projectId.length; _i++) {\n+    for (uint256 _i; _i < _terminalOf_projectId.length; ) {\n       IJBPaymentTerminal _terminal = _terminalOf_projectId[_i];\n       if (_terminal.acceptsToken(_token, _projectId)) return _terminal;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Not found.\n@@ -165,8 +168,12 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n     override\n     returns (bool)\n   {\n   for (uint256 _i; _i < _terminalsOf[_projectId].length; _i++)\n+    for (uint256 _i; _i < _terminalsOf[_projectId].length; ) {\n       if (_terminalsOf[_projectId][_i] == _terminal) return true;\n+      unchecked {\n+        ++_i;\n+      }\n+    }\n     return false;\n   }\n \n@@ -272,9 +279,17 @@ contract JBDirectory is IJBDirectory, JBOperatable, Ownable {\n     // Make sure duplicates were not added.\n     // @audit run checks before assigning, to save gas in case of revert\n     if (_terminals.length  1)\n     for (uint256 _i; _i < _terminals.length; _i++)\n       for (uint256 _j = _i + 1; _j < _terminals.length; _j++)\n+      for (uint256 _i; _i < _terminals.length; ) {\n+        for (uint256 _j = _i + 1; _j < _terminals.length; ) {\n           if (_terminals[_i] == _terminals[_j]) revert DUPLICATE_TERMINALS();\n+          unchecked {\n+            ++_j;\n+          }\n+        }\n+        unchecked {\n+          ++_i;\n+        }\n+      }\n \n     // Delete the stored terminals for the project.\n     _terminalsOf[_projectId] = _terminals;\ndiff --git a/contracts/JBETHERC20SplitsPayer.sol b/contracts/JBETHERC20SplitsPayer.sol\nindex 97a6517..6c344bd 100644\n--a/contracts/JBETHERC20SplitsPayer.sol\n+++ b/contracts/JBETHERC20SplitsPayer.sol\n@@ -463,7 +463,7 @@ contract JBETHERC20SplitsPayer is IJBSplitsPayer, JBETHERC20ProjectPayer, Reentr\n     leftoverAmount = _amount;\n \n     // Settle between all splits.\n   for (uint256 i = 0; i < _splits.length; i++) {\n+    for (uint256 i = 0; i < _splits.length; ) {\n       // Get a reference to the split being iterated on.\n       JBSplit memory _split = _splits[i];\n \n@@ -544,6 +544,9 @@ contract JBETHERC20SplitsPayer is IJBSplitsPayer, JBETHERC20ProjectPayer, Reentr\n       }\n \n       emit DistributeToSplit(_split, _splitAmount, _defaultBeneficiary, msg.sender);\n+      unchecked {\n+        ++i;\n+      }\n     }\n   }\n }\ndiff --git a/contracts/JBFundingCycleStore.sol b/contracts/JBFundingCycleStore.sol\nindex 13fe9e6..79d16c3 100644\n--a/contracts/JBFundingCycleStore.sol\n+++ b/contracts/JBFundingCycleStore.sol\n@@ -312,8 +312,7 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n     if (_data.weight  type(uint88).max) revert INVALID_WEIGHT();\n \n     // Ballot should be a valid contract, supporting the correct interface\n   if(_data.ballot != IJBFundingCycleBallot(address(0))) {\n-\n+    if (_data.ballot != IJBFundingCycleBallot(address(0))) {\n       address _ballot = address(_data.ballot);\n       uint32 _size;\n       assembly {\n@@ -721,7 +722,7 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n     // Apply the base funding cycle's discount rate for each cycle that has passed.\n     uint256 _discountMultiple = _startDistance / _baseFundingCycle.duration;\n \n   for (uint256 i = 0; i < _discountMultiple; i++) {\n+    for (uint256 i = 0; i < _discountMultiple; ) {\n       // The number of times to apply the discount rate.\n       // Base the new weight on the specified funding cycle's weight.\n       weight = PRBMath.mulDiv(\n@@ -731,6 +732,9 @@ contract JBFundingCycleStore is IJBFundingCycleStore, JBControllerUtility {\n       );\n       // The calculation doesn't need to continue if the weight is 0.\n       if (weight == 0) break;\n+      unchecked {\n+        ++i;\n+      }\n     }\n   }\n \ndiff --git a/contracts/JBOperatorStore.sol b/contracts/JBOperatorStore.sol\nindex e1e0241..e67f97d 100644\n--a/contracts/JBOperatorStore.sol\n+++ b/contracts/JBOperatorStore.sol\n@@ -82,13 +82,16 @@ contract JBOperatorStore is IJBOperatorStore {\n     uint256 _domain,\n     uint256[] calldata _permissionIndexes\n   ) external view override returns (bool) {\n   for (uint256 _i = 0; _i < _permissionIndexes.length; _i++) {\n+    for (uint256 _i = 0; _i < _permissionIndexes.length; ) {\n       uint256 _permissionIndex = _permissionIndexes[_i];\n \n       if (_permissionIndex  255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n \n       if (((permissionsOf[_operator][_account][_domain]  _permissionIndex) & 1) == 0)\n         return false;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n     return true;\n   }\n@@ -132,7 +135,7 @@ contract JBOperatorStore is IJBOperatorStore {\n     @param _operatorData The data that specify the params for each operator being set.\n   */\n   function setOperators(JBOperatorData[] calldata _operatorData) external override {\n   for (uint256 _i = 0; _i < _operatorData.length; _i++) {\n+    for (uint256 _i = 0; _i < _operatorData.length; ) {\n       // Pack the indexes into a uint256.\n       uint256 _packed = _packedPermissions(_operatorData[_i].permissionIndexes);\n \n@@ -146,6 +149,9 @@ contract JBOperatorStore is IJBOperatorStore {\n         _operatorData[_i].permissionIndexes,\n         _packed\n       );\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n \n@@ -162,13 +168,16 @@ contract JBOperatorStore is IJBOperatorStore {\n     @return packed The packed value.\n   */\n   function _packedPermissions(uint256[] calldata _indexes) private pure returns (uint256 packed) {\n   for (uint256 _i = 0; _i < _indexes.length; _i++) {\n+    for (uint256 _i = 0; _i < _indexes.length; ) {\n       uint256 _index = _indexes[_i];\n \n       if (_index  255) revert PERMISSION_INDEX_OUT_OF_BOUNDS();\n \n       // Turn the bit at the index on.\n       packed |= 1 << _index;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n   }\n }\ndiff --git a/contracts/JBSingleTokenPaymentTerminalStore.sol b/contracts/JBSingleTokenPaymentTerminalStore.sol\nindex 4fc5d46..21be5ff 100644\n--a/contracts/JBSingleTokenPaymentTerminalStore.sol\n+++ b/contracts/JBSingleTokenPaymentTerminalStore.sol\n@@ -859,8 +859,12 @@ contract JBSingleTokenPaymentTerminalStore is IJBSingleTokenPaymentTerminalStore\n     uint256 _ethOverflow;\n \n     // Add the current ETH overflow for each terminal.\n   for (uint256 _i = 0; _i < _terminals.length; _i++)\n+    for (uint256 _i = 0; _i < _terminals.length; ) {\n       _ethOverflow = _ethOverflow + _terminals[_i].currentEthOverflowOf(_projectId);\n+      unchecked {\n+        ++_i;\n+      }\n+    }\n \n     // Convert the ETH overflow to the specified currency if needed, maintaining a fixed point number with 18 decimals.\n     uint256 _totalOverflow18Decimal = _currency == JBCurrencies.ETH\ndiff --git a/contracts/JBSplitsStore.sol b/contracts/JBSplitsStore.sol\nindex be0d17b..2c9d371 100644\n--a/contracts/JBSplitsStore.sol\n+++ b/contracts/JBSplitsStore.sol\n@@ -201,7 +201,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n     JBSplit[] memory _currentSplits = _getStructsFor(_projectId, _domain, _group);\n \n     // Check to see if all locked splits are included.\n   for (uint256 _i = 0; _i < _currentSplits.length; _i++) {\n+    for (uint256 _i = 0; _i < _currentSplits.length; ) {\n       JBSplit memory _currentSplit_i = _currentSplits[_i];\n       // If not locked, continue.\n       if (block.timestamp = _currentSplit_i.lockedUntil) continue;\n@@ -209,7 +209,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n       // Keep a reference to whether or not the locked split being iterated on is included.\n       bool _includesLocked = false;\n \n     for (uint256 _j = 0; _j < _splits.length; _j++) {\n+      for (uint256 _j = 0; _j < _splits.length; ) {\n         // Check for sameness.\n         JBSplit memory _split_j = _splits[_j];\n         if (\n@@ -220,15 +220,22 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n           // Allow lock extention.\n           _split_j.lockedUntil = _currentSplit_i.lockedUntil\n         ) _includesLocked = true;\n+        unchecked {\n+          ++_j;\n+        }\n       }\n \n       if (!_includesLocked) revert PREVIOUS_LOCKED_SPLITS_NOT_INCLUDED();\n+\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Add up all the percents to make sure they cumulative are under 100%.\n     uint256 _percentTotal = 0;\n \n   for (uint256 _i = 0; _i < _splits.length; _i++) {\n+    for (uint256 _i = 0; _i < _splits.length; ) {\n       JBSplit memory _splits_i = _splits[_i];\n       // The percent should be greater than 0.\n       if (_splits_i.percent == 0) revert INVALID_SPLIT_PERCENT();\n@@ -276,6 +283,9 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n         delete _packedSplitParts2Of[_projectId][_domain][_group][_i];\n \n       emit SetSplit(_projectId, _domain, _group, _splits_i, msg.sender);\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     // Set the new length of the splits.\n@@ -304,7 +314,7 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n     JBSplit[] memory _splits = new JBSplit[(_splitCount);\n \n     // Loop through each split and unpack the values into structs.\n   for (uint256 _i = 0; _i < _splitCount; _i++) {\n+    for (uint256 _i = 0; _i < _splitCount; ) {\n       // Get a reference to the fist packed data.\n       uint256 _packedSplitPart1 = _packedSplitParts1Of[_projectId][_domain][_group][_i];\n \n@@ -335,6 +345,9 @@ contract JBSplitsStore is IJBSplitsStore, JBOperatable {\n \n       // Add the split to the value being returned.\n       _splits[_i] = _split;\n+      unchecked {\n+        ++_i;\n+      }\n     }\n \n     return _splits;\n\n\nGas diff:\n\ndiff\n\u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n \u2502 contracts/JBController.sol:JBController contract \u2506                 \u2506         \u2506         \u2506         \u2506         \u2502\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                  \u2506 Deployment Size \u2506         \u2506         \u2506         \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 3979659                                          \u2506 20791           \u2506         \u2506         \u2506         \u2506         \u2502\n+\u2502 3970050                                          \u2506 20743           \u2506         \u2506         \u2506         \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                    \u2506 min             \u2506 avg     \u2506 median  \u2506 max     \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 burnTokensOf                                     \u2506 30462           \u2506 33235   \u2506 30462   \u2506 38783   \u2506 3       \u2502\n+\u2502 burnTokensOf                                     \u2506 30462           \u2506 33211   \u2506 30462   \u2506 38709   \u2506 3       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -155,9 +155,9 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 launchProjectFor                                 \u2506 287838          \u2506 365019  \u2506 363870  \u2506 523212  \u2506 14      \u2502\n+\u2502 launchProjectFor                                 \u2506 287838          \u2506 364965  \u2506 363870  \u2506 522765  \u2506 14      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 mintTokensOf                                     \u2506 20132           \u2506 55030   \u2506 42967   \u2506 102610  \u2506 13      \u2502\n+\u2502 mintTokensOf                                     \u2506 20058           \u2506 55019   \u2506 42967   \u2506 102610  \u2506 13      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -172,21 +172,21 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                \u2506 Deployment Size \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 1247680                                        \u2506 6698            \u2506       \u2506        \u2506       \u2506         \u2502\n+\u2502 1232666                                        \u2506 6623            \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                  \u2506 min             \u2506 avg   \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 isTerminalOf                                   \u2506 633             \u2506 1508  \u2506 1065   \u2506 5065  \u2506 26      \u2502\n+\u2502 isTerminalOf                                   \u2506 633             \u2506 1497  \u2506 1065   \u2506 5065  \u2506 26      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 primaryTerminalOf                              \u2506 2295            \u2506 3221  \u2506 2295   \u2506 5853  \u2506 12      \u2502\n+\u2502 primaryTerminalOf                              \u2506 2295            \u2506 3209  \u2506 2295   \u2506 5779  \u2506 12      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 setTerminalsOf                                 \u2506 54817           \u2506 57189 \u2506 54817  \u2506 78546 \u2506 10      \u2502\n+\u2502 setTerminalsOf                                 \u2506 54817           \u2506 57167 \u2506 54817  \u2506 78324 \u2506 10      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 terminalsOf                                    \u2506 1389            \u2506 1389  \u2506 1389   \u2506 1389  \u2506 2       \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n@@ -226,7 +226,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                    \u2506 Deployment Size \u2506     \u2506        \u2506     \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 2292746                                                            \u2506 12218           \u2506     \u2506        \u2506     \u2506         \u2502\n+\u2502 2283531                                                            \u2506 12172           \u2506     \u2506        \u2506     \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                      \u2506 min             \u2506 avg \u2506 median \u2506 max \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -249,13 +249,13 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 distributePayoutsOf                                              \u2506 102240          \u2506 128903 \u2506 128903 \u2506 155567 \u2506 2       \u2502\n+\u2502 distributePayoutsOf                                              \u2506 102240          \u2506 128758 \u2506 128758 \u2506 155276 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 pay                                                              \u2506 89467           \u2506 105031 \u2506 105031 \u2506 120596 \u2506 2       \u2502\n+\u2502 pay                                                              \u2506 89319           \u2506 104957 \u2506 104957 \u2506 120596 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 redeemTokensOf                                                   \u2506 68162           \u2506 87607  \u2506 87607  \u2506 107052 \u2506 2       \u2502\n+\u2502 redeemTokensOf                                                   \u2506 68162           \u2506 87496  \u2506 87496  \u2506 106830 \u2506 2       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 supportsInterface                                                \u2506 503             \u2506 685    \u2506 655    \u2506 853    \u2506 9       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -268,7 +268,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                \u2506 Deployment Size \u2506       \u2506        \u2506        \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 1055746                                                        \u2506 5457            \u2506       \u2506        \u2506        \u2506         \u2502\n+\u2502 1048339                                                        \u2506 5420            \u2506       \u2506        \u2506        \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                  \u2506 min             \u2506 avg   \u2506 median \u2506 max    \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -330,7 +330,7 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                                                            \u2506 Deployment Size \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 2551081                                                                                    \u2506 13119           \u2506       \u2506        \u2506       \u2506         \u2502\n+\u2502 2543674                                                                                    \u2506 13082           \u2506       \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                                                              \u2506 min             \u2506 avg   \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n@@ -338,13 +338,13 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 currentTotalOverflowOf                                                                     \u2506 31426           \u2506 31426 \u2506 31426  \u2506 31426 \u2506 1       \u2502\n+\u2502 currentTotalOverflowOf                                                                     \u2506 31278           \u2506 31278 \u2506 31278  \u2506 31278 \u2506 1       \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 recordRedemptionFor                                                                        \u2506 25847           \u2506 33828 \u2506 25847  \u2506 49791 \u2506 3       \u2502\n+\u2502 recordRedemptionFor                                                                        \u2506 25847           \u2506 33779 \u2506 25847  \u2506 49643 \u2506 3       \u2502\n \u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n@@ -353,15 +353,15 @@ Test result: ok. 1 passed; 0 failed; finished in 14.33s\n \u255e\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u256a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2561\n \u2502 Deployment Cost                                    \u2506 Deployment Size \u2506      \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 751811                                             \u2506 4116            \u2506      \u2506        \u2506       \u2506         \u2502\n+\u2502 736791                                             \u2506 4041            \u2506      \u2506        \u2506       \u2506         \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n \u2502 Function Name                                      \u2506 min             \u2506 avg  \u2506 median \u2506 max   \u2506 # calls \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 set                                                \u2506 2998            \u2506 5840 \u2506 2998   \u2506 57007 \u2506 19      \u2502\n+\u2502 set                                                \u2506 2998            \u2506 5836 \u2506 2998   \u2506 56930 \u2506 19      \u2502\n \u251c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u253c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u254c\u2524\n-\u2502 splitsOf                                           \u2506 2941            \u2506 4853 \u2506 2941   \u2506 8679  \u2506 3       \u2502\n+\u2502 splitsOf                                           \u2506 2941            \u2506 4830 \u2506 2941   \u2506 8610  \u2506 3       \u2502\n \n\n\n\ndrgorillamd (Juicebox) commented(https://github.com/code-423n4/2022-07-juicebox-findings/issues/161#issuecomment-1183203750):\n  Really nice PoC/gas analysis, thank you.\n\n# Mitigation Review\n\n*Mitigation review by berndartmueller(https://twitter.com/berndartmueller)*\n\nReviewed pull requests: PR#1(https://github.com/jbx-protocol/juice-contracts-v3/pull/1/) (b8e2472ce750ad084440c8db6090143807e79893), PR#4(https://github.com/jbx-protocol/juice-contracts-v3/pull/4)\n\n## Mitigation Overview\n\nThe following is a high-level overview of the core changes introduced as the mitigation, arranged per the report findings.\n\n* H-01] Resolved. Appropriate validations to prevent price staleness, round incompleteness and a negative price is put in place now.\n* H-02] Resolved. Changing an already set project token is not possible anymore.\n* M-01] Acknowledged. \n* M-02] Resolved. mustStartAtOrAfter and the start date of an upcoming funding cycle are now validated to fit in uint56.\n* M-03] Resolved. OpenZeppelins&#39; SafeERC20 library is now used to ensure consistent handling of ERC20 token transfers.\n* M-04] Acknowledged.\n* M-05] Acknowledged.\n* M-06] Resolved. The delta of the token balance before and after a transfer is used instead of the amount stated to handle fee-on-transfer tokens appropriately.\n* M-07] Acknowledged.\n* M-08] Acknowledged.\n* M-09] Acknowledged.\n* M-10] Acknowledged.\n* M-11] Resolved. An additional check has been added to prevent adding a price feed for the inverse pair.\n* M-12] Resolved. Once a token is set for a project, it can not be changed anymore.\n* M-13] Acknowledged.\n* M-14] Acknowledged.\n* M-15] Resolved. Two additional sameness checks for the split properties preferClaimed and preferAddToBalance have been added.\n\n#\n",
                "Repair": ""
            }
        ]
    }
]