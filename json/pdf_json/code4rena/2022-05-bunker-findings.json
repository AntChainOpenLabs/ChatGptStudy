[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-01",
                "Location": [],
                "Type": "  CNft.sol  - revert inside  safeTransferFrom  will break composability & standard behaviour",
                "Description": "\nCNft.sol#L204(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/CNft.sol#L204)<br\n\nThe function safeTransferFrom is a standard interface in ERC1155, and its expected to succeed if all the parametes are valid, and revert on error, which is not the case here so its a deviation.\n\nRefer to the EIP-1155 safeTransferFrom rules:\n\n MUST revert if _to is the zero address.<br\n MUST revert if balance of holder for token _id is lower than the _value sent to the recipient.<br\n MUST revert on any other error.<br\n\nThere is no loss of assets, but the assets or tokens and CNft contract can be unusable by other protocols, and likelihood & impact of this issue is high.\n\n\nIf other protocols want to integrate CNft, then in that case just for CNft Contract / tokens, they have to take exception and use safeBatchTransferFrom, instead of safeTransferFrom. If they dont take care of this exception, then their protocol functions will fail while using CNft, even if valid values are given.\n\n\nContract : CNft.sol<br\nFunction : safeTransferFrom\n\n Line 204   revert(\"CNFT: Use safeBatchTransferFrom instead\");\n\n",
                "Repair": "\nInstead of revert, call function safeBatchTransferFrom with 1 item in the array, e.g.,\n\n safeBatchTransferFrom(from, to, [id], [amount], data)\n\nbunkerfinance-dev (bunker.finance) confirmed, but disagreed with High severity and commented(https://github.com/code-423n4/2022-05-bunker-findings/issues/93#issuecomment-1129622001):\n  We can fix this, but we do not feel like this is high severity at all.\n\ngzeon (judge) decreased severity to Medium and commented(https://github.com/code-423n4/2022-05-bunker-findings/issues/93#issuecomment-1140430665):\n  I think this is a Med Risk issue as it impacts the function of the protocol.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-03",
                "Location": [
                    "//solidity\nCEther.sol:167:        to.transfer(amount);\n"
                ],
                "Type": "  call()  should be used instead of  transfer()  on an  address payable ",
                "Description": "\nThis is a classic Code4rena issue:\n\n*   <https://github.com/code-423n4/2021-04-meebits-findings/issues/2\n*   <https://github.com/code-423n4/2021-10-tally-findings/issues/20\n*   <https://github.com/code-423n4/2022-01-openleverage-findings/issues/75\n\n\nThe use of the deprecated transfer() function for an address will inevitably make the transaction fail when:\n\n1.  The claimer smart contract does not implement a payable function.\n2.  The claimer smart contract does implement a payable fallback which uses more than 2300 gas unit.\n3.  The claimer smart contract implements a payable fallback function that needs less than 2300 gas units but is called through proxy, raising the call's gas usage above 2300.\n\nAdditionally, using higher than 2300 gas might be mandatory for some multisig wallets.\n\n\nsolidity\nCEther.sol:167:        to.transfer(amount);\n\n\n",
                "Repair": "\nUse call() instead of transfer(), but be sure to implement CEI patterns in CEther and add a global state lock on the comptroller as per Rari.\n\nTHIS HAS REKT COMPOUND FORKS BEFORE!!!\n\nRelevant links:<br\n<https://twitter.com/hacxyk/status/1520715516490379264?s=21&t=fnhDkcC3KpE_kJE8eLiE2A<br\n<https://twitter.com/hacxyk/status/1520715536325218304?s=21&t=fnhDkcC3KpE_kJE8eLiE2A<br\n<https://twitter.com/hacxyk/status/1520370441705037824?s=21&t=fnhDkcC3KpE_kJE8eLiE2A<br\n<https://twitter.com/Hacxyk/status/1521949933380595712<br\n\nbunkerfinance-dev (bunker.finance) acknowledged and commented(https://github.com/code-423n4/2022-05-bunker-findings/issues/116#issuecomment-1129628697):\n  We agree that this can make the protocol hard to use if the claimer is a smart contract. This bug needs to be fixed with great care, so we will hold off on fixing this for now.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-04",
                "Location": [],
                "Type": "  COMP  Distributions Can Be Manipulated And Duplicated Across Any Number Of Accounts",
                "Description": "\nComptroller.sol#L240-L242(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L240-L242)<br\nComptroller.sol#L260-L262(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L260-L262)<br\nComptroller.sol#L469-L472(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L469-L472)<br\nComptroller.sol#L496-L499(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L496-L499)<br\nComptroller.sol#L1139-L1155(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L1139-L1155)<br\nComptroller.sol#L1222-L1243(https://github.com/bunkerfinance/bunker-protocol/blob/752126094691e7457d08fc62a6a5006df59bd2fe/contracts/Comptroller.sol#L1222-L1243)<br\n\nThe updateCompSupplyIndex() and distributeSupplierComp() functions are used by Compound to track distributions owed to users for supplying funds to the protocol. Bunker protocol is a fork of compound with NFT integration, however, part of the original functionality appears to have been mistakenly commented out. As a result, whenever users enter or exit the protocol, COMP distributions will not be correctly calculated for suppliers. At first glance, its possible that this was intended, however, there is nothing stated in the docs that seems to indicate such. Additionally, the COMP distribution functionality has not been commented out for borrowers. Therefore, tokens will still be distributed for borrowers.\n\nBoth the updateCompSupplyIndex() and updateCompBorrowIndex() functions operate on the same compSpeeds value which dictates how many tokens are distributed on each block. Therefore, you cannot directly disable the functionality of supplier distributions without altering how distributions are calculated for borrowers. Because of this, suppliers can manipulate their yield by supplying tokens, calling updateCompSupplyIndex() and distributeSupplierComp(), removing their tokens and repeating the same process on other accounts. This completely breaks all yield distributions and there is currently no way to upgrade the contracts to alter the contract's behaviour. Tokens can be claimed by redepositing in a previously \"checkpointed\" account, calling claimComp() and removing tokens before re-supplying on another account.\n\n",
                "Repair": "\nConsider commenting all behaviour associated with token distributions if token distributions are not meant to be supported. Otherwise, it is worthwhile uncommenting all occurrences of the updateCompSupplyIndex() and distributeSupplierComp() functions.\n\nbunkerfinance-dev (bunker.finance) acknowledged, but disagreed with High severity and commented(https://github.com/code-423n4/2022-05-bunker-findings/issues/105#issuecomment-1129626056):\n  We are not going to use the COMP code. We could fix documentation or comment more code to make this clearer though.\n\ngzeon (judge) decreased severity to Medium and commented(https://github.com/code-423n4/2022-05-bunker-findings/issues/105#issuecomment-1140432093):\n  Comptroller.sol is in scope(https://github.com/code-423n4/2022-05-bunker) of this contest, and there are no indication that token distribution will be disabled despite the sponsor claim they are not going to use the $COMP code. However, it is also true the deployment setup within contest repo lack the deployment of $COMP and its distribution. I believe this is a valid Med Risk issue given fund(reward token) can be lost in certain assumptions.\n\n\n\n*\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 30 reports were submitted by wardens detailing low risk and non-critical issues. The report highlighted below(https://github.com/code-423n4/2022-05-bunker-findings/issues/120) by BowTiedWardens received the top score from the judge.\n\n*The following wardens also submitted reports: IllIllI(https://github.com/code-423n4/2022-05-bunker-findings/issues/26), sorrynotsorry(https://github.com/code-423n4/2022-05-bunker-findings/issues/94), robee(https://github.com/code-423n4/2022-05-bunker-findings/issues/103), ellahi(https://github.com/code-423n4/2022-05-bunker-findings/issues/90), 0xDjango(https://github.com/code-423n4/2022-05-bunker-findings/issues/77), GimelSec(https://github.com/code-423n4/2022-05-bunker-findings/issues/82), Picodes(https://github.com/code-423n4/2022-05-bunker-findings/issues/68), 0x1337(https://github.com/code-423n4/2022-05-bunker-findings/issues/53), dirk_y(https://github.com/code-423n4/2022-05-bunker-findings/issues/72), hyh(https://github.com/code-423n4/2022-05-bunker-findings/issues/70), leastwood(https://github.com/code-423n4/2022-05-bunker-findings/issues/111), samruna(https://github.com/code-423n4/2022-05-bunker-findings/issues/4), TerrierLover(https://github.com/code-423n4/2022-05-bunker-findings/issues/64), 0x4non(https://github.com/code-423n4/2022-05-bunker-findings/issues/62), bobi(https://github.com/code-423n4/2022-05-bunker-findings/issues/84), David_(https://github.com/code-423n4/2022-05-bunker-findings/issues/50), fatherOfBlocks(https://github.com/code-423n4/2022-05-bunker-findings/issues/57), WatchPug(https://github.com/code-423n4/2022-05-bunker-findings/issues/79), 0x1f8b(https://github.com/code-423n4/2022-05-bunker-findings/issues/18), cryptphi(https://github.com/code-423n4/2022-05-bunker-findings/issues/112), csanuragjain(https://github.com/code-423n4/2022-05-bunker-findings/issues/37), delfin454000(https://github.com/code-423n4/2022-05-bunker-findings/issues/121), Funen(https://github.com/code-423n4/2022-05-bunker-findings/issues/97), ilan(https://github.com/code-423n4/2022-05-bunker-findings/issues/123), jayjonah8(https://github.com/code-423n4/2022-05-bunker-findings/issues/42), kebabsec(https://github.com/code-423n4/2022-05-bunker-findings/issues/108), oyc_109(https://github.com/code-423n4/2022-05-bunker-findings/issues/29), simon135(https://github.com/code-423n4/2022-05-bunker-findings/issues/34), and throttle(https://github.com/code-423n4/2022-05-bunker-findings/issues/87).*\n\n## Table of Contents\n\nSee original submission(https://github.com/code-423n4/2022-05-bunker-findings/issues/120).\n\n## [L-01] Add constructor initializers\n\nAs per OpenZeppelin\u2019s (OZ) recommendation(https://forum.openzeppelin.com/t/uupsupgradeable-vulnerability-post-mortem/15680/6), \u201cThe guidelines are now to make it impossible for *anyone* to run initialize on an implementation contract, by adding an empty constructor with the initializer modifier. So the implementation contract gets initialized automatically upon deployment.\u201d\n\nNote that this behaviour is also incorporated the OZ Wizard(https://wizard.openzeppelin.com/) since the UUPS vulnerability discovery: \u201cAdditionally, we modified the code generated by the Wizard 19(https://wizard.openzeppelin.com/) to include a constructor that automatically initializes the implementation when deployed.\u201d\n\nFurthermore, this thwarts any attempts to frontrun the initialization tx of these contracts:\n\nsolidity\ncontracts/CErc20.sol:\n  25:     function initialize(address underlying_,\n  \ncontracts/CNft.sol:\n  17:     function initialize (\n\n\n## [L-02] Missing address(0) checks\n\nConsider adding an address(0) check here:\n\nsolidity\n  underlying = underlying_ (contracts/CErc20.sol#36)\n  pendingAdmin = newPendingAdmin (contracts/CToken.sol#1216)\n  admin = admin_ (contracts/CEther.sol#34)\n  admin = newAdmin (contracts/Comptroller.sol#733)\n  borrowCapGuardian = newBorrowCapGuardian (contracts/Comptroller.sol#966)\n  pauseGuardian = newPauseGuardian (contracts/Comptroller.sol#986)\n  admin = _admin (contracts/Oracles/CNftPriceOracle.sol#48)\n  uniswapV2Factory = _uniswapV2Factory (contracts/Oracles/CNftPriceOracle.sol#50)\n  baseToken = _baseToken (contracts/Oracles/CNftPriceOracle.sol#51)\n  admin = newAdmin (contracts/Oracles/CNftPriceOracle.sol#55)\n\n\n## [L-03] Comptroller.sol#allMarkets: an unbounded loop on array can lead to DoS\n\nCToken[] public allMarkets; in contract ComptrollerV3Storage is an array where there are just pushes. No upper bound, no pop.\n\nAs this array can grow quite large, the transaction's gas cost could exceed the block gas limit and make it impossible to call this function at all here:\n\nsolidity\nFile: Comptroller.sol\n927:     function _addMarketInternal(address cToken) internal {\n928:         for (uint i = 0; i < allMarkets.length; i ++) { //@audit low: unbounded loop\n929:             require(allMarkets[i] != CToken(cToken), \"market already added\");\n930:         }\n931:         allMarkets.push(CToken(cToken));\n932:     }\n\n\nConsider introducing a reasonable upper limit based on block gas limits and adding a method to remove elements in the array.\n\n## [L-04] CNft.sol should implement a 2-step ownership transfer pattern\n\nThis contract inherits from OpenZeppelin's library and the transferOwnership() function is the default one (a one-step process). It's possible that the onlyOwner role mistakenly transfers ownership to a wrong address, resulting in a loss of the onlyOwner role (which is quite powerful given the power from L274:function call). Consider overriding the default transferOwnership() function to first nominate an address as the pending owner and implementing an acceptOwnership() function which is called by the pending owner to confirm the transfer.\n\n## [N-01] Comment says \"public\" instead of \"external\"\n\nsolidity\nFile: CErc20.sol\n131:     /\n132:      * @notice A public function to sweep accidental ERC-20 transfers to this contract. Tokens are sent to admin (timelock) //@audit should say external\n133:      * @param token The address of the ERC-20 token to sweep\n134:      */\n135:     function sweepToken(EIP20NonStandardInterface token) external {\n136:      require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\n137:      uint256 balance = token.balanceOf(address(this));\n138:      token.transfer(admin, balance);\n139:     }\n\n\n## [N-02] Prevent accidentally burning tokens\n\nTransferring tokens to the zero address is usually prohibited to accidentally avoid \"burning\" tokens by sending them to an unrecoverable zero address.\n\nConsider adding a check to prevent accidentally burning tokens here:\n\nsolidity\nFile: CErc20.sol\n207:     function doTransferOut(address payable to, uint amount) internal {\n208:         EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying);\n209:         token.transfer(to, amount); //@audit low: avoid burning token\n\n\n## [N-03] require() should be used for checking error conditions on inputs and return values while assert() should be used for invariant checking\n\nProperly functioning code should never reach a failing assert statement, unless there is a bug in your contract you should fix. Here, I believe the assert should be a require or a revert:\n\nsolidity\ncontracts/Comptroller.sol:\n  207:         assert(assetIndex < len);\n  333:             assert(markets[cToken].accountMembership[borrower]); \n\n\nAs the Solidity version is < 0.8.* the remaining gas would not be refunded in case of failure.\n\n## [N-04] Avoid floating pragmas: the version should be locked\n\nsolidity\ncontracts/CErc20.sol:\n  1: pragma solidity ^0.5.16;\n\ncontracts/CEther.sol:\n  1: pragma solidity ^0.5.16;\n\ncontracts/CNft.sol:\n  2: pragma solidity ^0.8.0;\n\ncontracts/Comptroller.sol:\n  1: pragma solidity ^0.5.16;\n\ncontracts/CToken.sol:\n  1: pragma solidity ^0.5.16;\n\ncontracts/ERC1155Enumerable.sol:\n  2: pragma solidity ^0.8.0;\n\ncontracts/PriceOracleImplementation.sol:\n  1: pragma solidity ^0.5.16;\n\ncontracts/Oracles/CNftPriceOracle.sol:\n  2: pragma solidity ^0.8.0;\n\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n  2: pragma solidity ^0.8.0;\n\n\n\n\n*\n\n# Gas Optimizations\n\nFor this contest, 29 reports were submitted by wardens detailing gas optimizations. The report highlighted below(https://github.com/code-423n4/2022-05-bunker-findings/issues/118) by BowTiedWardens received the top score from the judge.\n\n*The following wardens also submitted reports: joestakey(https://github.com/code-423n4/2022-05-bunker-findings/issues/65), IllIllI(https://github.com/code-423n4/2022-05-bunker-findings/issues/27), robee(https://github.com/code-423n4/2022-05-bunker-findings/issues/104), 0xNazgul(https://github.com/code-423n4/2022-05-bunker-findings/issues/20), delfin454000(https://github.com/code-423n4/2022-05-bunker-findings/issues/124), ellahi(https://github.com/code-423n4/2022-05-bunker-findings/issues/89), slywaters(https://github.com/code-423n4/2022-05-bunker-findings/issues/3), TerrierLover(https://github.com/code-423n4/2022-05-bunker-findings/issues/63), 0v3rf10w(https://github.com/code-423n4/2022-05-bunker-findings/issues/117), 0x4non(https://github.com/code-423n4/2022-05-bunker-findings/issues/61), 0xkatana(https://github.com/code-423n4/2022-05-bunker-findings/issues/126), Cityscape(https://github.com/code-423n4/2022-05-bunker-findings/issues/88), fatherOfBlocks(https://github.com/code-423n4/2022-05-bunker-findings/issues/56), hansfriese(https://github.com/code-423n4/2022-05-bunker-findings/issues/73), oyc_109(https://github.com/code-423n4/2022-05-bunker-findings/issues/28), rfa(https://github.com/code-423n4/2022-05-bunker-findings/issues/100), samruna(https://github.com/code-423n4/2022-05-bunker-findings/issues/5), simon135(https://github.com/code-423n4/2022-05-bunker-findings/issues/35), Tomio(https://github.com/code-423n4/2022-05-bunker-findings/issues/99), MaratCerby(https://github.com/code-423n4/2022-05-bunker-findings/issues/31), 0x1f8b(https://github.com/code-423n4/2022-05-bunker-findings/issues/17), 0xDjango(https://github.com/code-423n4/2022-05-bunker-findings/issues/78), Fitraldys(https://github.com/code-423n4/2022-05-bunker-findings/issues/128), Funen(https://github.com/code-423n4/2022-05-bunker-findings/issues/98), GimelSec(https://github.com/code-423n4/2022-05-bunker-findings/issues/83), ilan(https://github.com/code-423n4/2022-05-bunker-findings/issues/122), Picodes(https://github.com/code-423n4/2022-05-bunker-findings/issues/67), and throttle(https://github.com/code-423n4/2022-05-bunker-findings/issues/86).*\n\n## Table of Contents\n\nSee original submission(https://github.com/code-423n4/2022-05-bunker-findings/issues/118).\n\n\n"
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\nFile: Comptroller.sol\n590:         CToken[] memory assets = accountAssets[account]; //@audit this here is a VERY expensive copy of a whole storage array in memory (as many SLOADs as there are elements)\n591:         for (uint i = 0; i < assets.length; i++) {\n592:             CToken asset = assets[i]; //@audit here is a copy of a memory value in a memory variable\n",
                    "//solidity\n        CToken[] storage assets = accountAssets[account]; //@audit using storage keyword vs memory\n"
                ],
                "Type": " Copying a full array from storage to memory isn't optimal",
                "Description": "\nHere, what's happening is a full copy of a storage array in memory, and then a second copy of each memory element in a CToken struct:\n\nsolidity\nFile: Comptroller.sol\n590:         CToken[] memory assets = accountAssets[account]; //@audit this here is a VERY expensive copy of a whole storage array in memory (as many SLOADs as there are elements)\n591:         for (uint i = 0; i < assets.length; i++) {\n592:             CToken asset = assets[i]; //@audit here is a copy of a memory value in a memory variable\n\n\nThe code should be optimized that way:\n\nsolidity\n        CToken[] storage assets = accountAssets[account]; //@audit using storage keyword vs memory\n\n\nThis way, the amount of MSTOREs gets divided by 2 and no MLOADs are then necessary\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\ncontracts/Comptroller.sol:\n   268:         if (!markets[cToken].isListed) { //@audit gas: Should declare \"Market storage _ctoken = markets[cToken]\" and use it\n   273:         if (cToken != address(nftMarket) && !markets[cToken].accountMembership[redeemer]) { //@audit gas: Should use suggested storage var _ctoken\n   318:         if (!markets[cToken].isListed) { //@audit gas: Should declare \"Market storage _ctoken = markets[cToken]\" and use it\n   322:         if (!markets[cToken].accountMembership[borrower]) { //@audit gas: Should use suggested storage var _ctoken\n   333:             assert(markets[cToken].accountMembership[borrower]); //@audit gas: Should use suggested storage var _ctoken\n  1067:             if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) { //@audit gas: should declare CompMarketState storage _compMarketState = compSupplyState[address(cToken)]; and use it\n  1068:                 compSupplyState[address(cToken)] = CompMarketState({  //@audit gas: should write with suggested _compMarketState.index = compInitialIndex and _compMarketState.block = safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n  1074:             if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {//@audit gas: should use suggested _compMarketState\n  1075:                 compBorrowState[address(cToken)] = CompMarketState({//@audit gas: should use suggested _compMarketState\n  1345:         if (markets[address(cNft)].isListed) { //@audit should declare Market storage _market = markets[address(cNft)]; and use it\n  1355:         markets[address(cNft)] = Market({isListed: true, isComped: false, collateralFactorMantissa: _collateralFactorMantissa}); // @audit should use suggested _market\n\n"
                ],
                "Type": " Help the optimizer by saving a storage variable's reference instead of repeatedly fetching it",
                "Description": "\nTo help the optimizer, declare a storage type variable and use it instead of repeatedly fetching the reference in a map or an array.\n\nThe effect can be quite significant.\n\nAs an example, instead of repeatedly calling someMap[someIndex], save its reference like this: SomeStruct storage someStruct = someMap[someIndex] and use it.\n\nInstances include (check the @audit tags):\n\nsolidity\ncontracts/Comptroller.sol:\n   268:         if (!markets[cToken].isListed) { //@audit gas: Should declare \"Market storage _ctoken = markets[cToken]\" and use it\n   273:         if (cToken != address(nftMarket) && !markets[cToken].accountMembership[redeemer]) { //@audit gas: Should use suggested storage var _ctoken\n   318:         if (!markets[cToken].isListed) { //@audit gas: Should declare \"Market storage _ctoken = markets[cToken]\" and use it\n   322:         if (!markets[cToken].accountMembership[borrower]) { //@audit gas: Should use suggested storage var _ctoken\n   333:             assert(markets[cToken].accountMembership[borrower]); //@audit gas: Should use suggested storage var _ctoken\n  1067:             if (compSupplyState[address(cToken)].index == 0 && compSupplyState[address(cToken)].block == 0) { //@audit gas: should declare CompMarketState storage _compMarketState = compSupplyState[address(cToken)]; and use it\n  1068:                 compSupplyState[address(cToken)] = CompMarketState({  //@audit gas: should write with suggested _compMarketState.index = compInitialIndex and _compMarketState.block = safe32(getBlockNumber(), \"block number exceeds 32 bits\")\n  1074:             if (compBorrowState[address(cToken)].index == 0 && compBorrowState[address(cToken)].block == 0) {//@audit gas: should use suggested _compMarketState\n  1075:                 compBorrowState[address(cToken)] = CompMarketState({//@audit gas: should use suggested _compMarketState\n  1345:         if (markets[address(cNft)].isListed) { //@audit should declare Market storage _market = markets[address(cNft)]; and use it\n  1355:         markets[address(cNft)] = Market({isListed: true, isComped: false, collateralFactorMantissa: _collateralFactorMantissa}); // @audit should use suggested _market\n\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "//solidity\ncontracts/CErc20.sol:\n   37:         EIP20Interface(underlying).totalSupply(); //@audit gas: should use underlying_ to avoid an SLOAD\n  172:         EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying); //@audit gas: should cache underlying\n  173:         uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this)); //@audit gas: should use cached underlying\n  193:         uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this)); //@audit gas: should use cached underlying\n\ncontracts/CNft.sol:\n   64:                     (bool checkSuccess, bytes memory result) = underlying.staticcall(punkIndexToAddress); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n   68:                     (bool buyPunkSuccess, ) = underlying.call(data); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n   73:                     IERC721(underlying).safeTransferFrom(msg.sender, address(this), tokenIds[i], \"\"); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n  147:                     (bool transferPunkSuccess, ) = underlying.call(data); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n  152:                     IERC721(underlying).safeTransferFrom(address(this), msg.sender, tokenIds[i], \"\"); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n\ncontracts/Comptroller.sol:\n   328:             if (err != Error.NO_ERROR) { //@audit gas: Error.NO_ERROR SLOAD 1\n   350:         if (err != Error.NO_ERROR) {  //@audit gas: Error.NO_ERROR SLOAD 2\n   362:         return uint(Error.NO_ERROR); //@audit gas: Error.NO_ERROR SLOAD 3\n   603:             vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset); //@audit gas: oracle SLOAD in for-loop. Cache it before the loop\n   630:         uint256 nftBalance = nftMarket.totalBalance(account);//@audit gas: nftMarket SLOAD 1\n   633:             vars.nftOraclePriceMantissa =  nftOracle.getUnderlyingPrice(nftMarket); //@audit gas: nftMarket SLOAD 2\n   638:             vars.nftCollateralFactor = Exp({mantissa: markets[address(nftMarket)].collateralFactorMantissa});  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 1, nftMarket SLOAD 3\n   641:             vars.sumCollateral = mul_ScalarTruncateAddUInt(mul_(vars.nftOraclePrice, markets[address(nftMarket)].collateralFactorMantissa), nftBalance, vars.sumCollateral);  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 2, nftMarket SLOAD 4\n   642:             if (cAssetModify == address(nftMarket)) {  //@audit gas: nftMarket SLOAD 5\n   645:                 vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(mul_(vars.nftOraclePrice, markets[address(nftMarket)].collateralFactorMantissa), redeemTokens, vars.sumBorrowPlusEffects);  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 3, nftMarket SLOAD 6\n   667:         uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed)); //@audit gas: oracle SLOAD 1\n   668:         uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral)); //@audit gas: oracle SLOAD 2\n   702:         require(cNftCollateral == address(nftMarket), \"cNFT is from the wrong comptroller\");  //@audit gas: nftMarket SLOAD 1\n   706:         uint priceCollateralMantissa = nftOracle.getUnderlyingPrice(nftMarket); //@audit gas: nftMarket SLOAD 2\n   788:         emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa); //@audit gas: SLOAD, should emit newCloseFactorMantissa instead of closeFactorMantissa\n\ncontracts/CToken.sol:\n   976:         if (repayBorrowError != uint(Error.NO_ERROR)) { //@audit gas: uint(Error.NO_ERROR) SLOAD 1\n   986:         require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");//@audit gas: uint(Error.NO_ERROR) SLOAD 2\n  1000:         require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\"); //@audit gas: uint(Error.NO_ERROR) SLOAD 3\n  1005:         return (uint(Error.NO_ERROR), actualRepayAmount);//@audit gas: uint(Error.NO_ERROR) SLOAD 4\n  1073:         if (repayBorrowError != uint(Error.NO_ERROR)) {//@audit gas: uint(Error.NO_ERROR) SLOAD 1\n  1083:         require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");//@audit gas: uint(Error.NO_ERROR) SLOAD 2\n  1101:         return (uint(Error.NO_ERROR), actualRepayAmount);//@audit gas: uint(Error.NO_ERROR) SLOAD 3\n\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n   26:             numPairObservations[pair]  0 && //@audit should cache numPairObservations[pair]\n   27:             (block.timestamp pairObservations[pair][(numPairObservations[pair] 1) % OBSERVATION_BUFFER_SIZE].timestamp) <= MIN_TWAP_TIME //@audit should cache pairObservations[pair]\n   32:         pairObservations[pair][numPairObservations[pair]++ % OBSERVATION_BUFFER_SIZE] = Observation( //@audit should use cached pairObservations[pair] and cached numPairObservations[pair]++. THEN it should SSTORE in numPairObservations[pair] the cached value instead of doing numPairObservations[pair]++\n  130:         if (lastObservation.timestamp  block.timestamp MIN_TWAP_TIME) {  //@audit should cache lastObservation.timestamp\n  136:             block.timestamp lastObservation.timestamp = MIN_TWAP_TIME,  //@audit should use cached lastObservation.timestamp\n  142:             return (px0Cumulative lastObservation.price0Cumulative) / (block.timestamp lastObservation.timestamp);  //@audit should use cached lastObservation.timestamp\n  151:         if (lastObservation.timestamp  block.timestamp MIN_TWAP_TIME) { //@audit should use cached lastObservation.timestamp\n  157:             block.timestamp lastObservation.timestamp = MIN_TWAP_TIME, //@audit should use cached lastObservation.timestamp\n  163:             return (px1Cumulative lastObservation.price1Cumulative) / (block.timestamp lastObservation.timestamp); //@audit should use cached lastObservation.timestamp\n"
                ],
                "Type": " Caching storage values in memory",
                "Description": "\nThe code can be optimized by minimising the number of SLOADs. SLOADs are expensive (100 gas) compared to MLOADs/MSTOREs (3 gas). Here, storage values should get cached in memory (see the @audit tags for further details):\n\nsolidity\ncontracts/CErc20.sol:\n   37:         EIP20Interface(underlying).totalSupply(); //@audit gas: should use underlying_ to avoid an SLOAD\n  172:         EIP20NonStandardInterface token = EIP20NonStandardInterface(underlying); //@audit gas: should cache underlying\n  173:         uint balanceBefore = EIP20Interface(underlying).balanceOf(address(this)); //@audit gas: should use cached underlying\n  193:         uint balanceAfter = EIP20Interface(underlying).balanceOf(address(this)); //@audit gas: should use cached underlying\n\ncontracts/CNft.sol:\n   64:                     (bool checkSuccess, bytes memory result) = underlying.staticcall(punkIndexToAddress); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n   68:                     (bool buyPunkSuccess, ) = underlying.call(data); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n   73:                     IERC721(underlying).safeTransferFrom(msg.sender, address(this), tokenIds[i], \"\"); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n  147:                     (bool transferPunkSuccess, ) = underlying.call(data); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n  152:                     IERC721(underlying).safeTransferFrom(address(this), msg.sender, tokenIds[i], \"\"); //@audit this is a SLOAD in a loop. Should cache underlying before if/else statement and use cached value here\n\ncontracts/Comptroller.sol:\n   328:             if (err != Error.NO_ERROR) { //@audit gas: Error.NO_ERROR SLOAD 1\n   350:         if (err != Error.NO_ERROR) {  //@audit gas: Error.NO_ERROR SLOAD 2\n   362:         return uint(Error.NO_ERROR); //@audit gas: Error.NO_ERROR SLOAD 3\n   603:             vars.oraclePriceMantissa = oracle.getUnderlyingPrice(asset); //@audit gas: oracle SLOAD in for-loop. Cache it before the loop\n   630:         uint256 nftBalance = nftMarket.totalBalance(account);//@audit gas: nftMarket SLOAD 1\n   633:             vars.nftOraclePriceMantissa =  nftOracle.getUnderlyingPrice(nftMarket); //@audit gas: nftMarket SLOAD 2\n   638:             vars.nftCollateralFactor = Exp({mantissa: markets[address(nftMarket)].collateralFactorMantissa});  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 1, nftMarket SLOAD 3\n   641:             vars.sumCollateral = mul_ScalarTruncateAddUInt(mul_(vars.nftOraclePrice, markets[address(nftMarket)].collateralFactorMantissa), nftBalance, vars.sumCollateral);  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 2, nftMarket SLOAD 4\n   642:             if (cAssetModify == address(nftMarket)) {  //@audit gas: nftMarket SLOAD 5\n   645:                 vars.sumBorrowPlusEffects = mul_ScalarTruncateAddUInt(mul_(vars.nftOraclePrice, markets[address(nftMarket)].collateralFactorMantissa), redeemTokens, vars.sumBorrowPlusEffects);  //@audit gas: markets[address(nftMarket)].collateralFactorMantissa SLOAD 3, nftMarket SLOAD 6\n   667:         uint priceBorrowedMantissa = oracle.getUnderlyingPrice(CToken(cTokenBorrowed)); //@audit gas: oracle SLOAD 1\n   668:         uint priceCollateralMantissa = oracle.getUnderlyingPrice(CToken(cTokenCollateral)); //@audit gas: oracle SLOAD 2\n   702:         require(cNftCollateral == address(nftMarket), \"cNFT is from the wrong comptroller\");  //@audit gas: nftMarket SLOAD 1\n   706:         uint priceCollateralMantissa = nftOracle.getUnderlyingPrice(nftMarket); //@audit gas: nftMarket SLOAD 2\n   788:         emit NewCloseFactor(oldCloseFactorMantissa, closeFactorMantissa); //@audit gas: SLOAD, should emit newCloseFactorMantissa instead of closeFactorMantissa\n\ncontracts/CToken.sol:\n   976:         if (repayBorrowError != uint(Error.NO_ERROR)) { //@audit gas: uint(Error.NO_ERROR) SLOAD 1\n   986:         require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");//@audit gas: uint(Error.NO_ERROR) SLOAD 2\n  1000:         require(seizeError == uint(Error.NO_ERROR), \"token seizure failed\"); //@audit gas: uint(Error.NO_ERROR) SLOAD 3\n  1005:         return (uint(Error.NO_ERROR), actualRepayAmount);//@audit gas: uint(Error.NO_ERROR) SLOAD 4\n  1073:         if (repayBorrowError != uint(Error.NO_ERROR)) {//@audit gas: uint(Error.NO_ERROR) SLOAD 1\n  1083:         require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");//@audit gas: uint(Error.NO_ERROR) SLOAD 2\n  1101:         return (uint(Error.NO_ERROR), actualRepayAmount);//@audit gas: uint(Error.NO_ERROR) SLOAD 3\n\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n   26:             numPairObservations[pair]  0 && //@audit should cache numPairObservations[pair]\n   27:             (block.timestamp pairObservations[pair][(numPairObservations[pair] 1) % OBSERVATION_BUFFER_SIZE].timestamp) <= MIN_TWAP_TIME //@audit should cache pairObservations[pair]\n   32:         pairObservations[pair][numPairObservations[pair]++ % OBSERVATION_BUFFER_SIZE] = Observation( //@audit should use cached pairObservations[pair] and cached numPairObservations[pair]++. THEN it should SSTORE in numPairObservations[pair] the cached value instead of doing numPairObservations[pair]++\n  130:         if (lastObservation.timestamp  block.timestamp MIN_TWAP_TIME) {  //@audit should cache lastObservation.timestamp\n  136:             block.timestamp lastObservation.timestamp = MIN_TWAP_TIME,  //@audit should use cached lastObservation.timestamp\n  142:             return (px0Cumulative lastObservation.price0Cumulative) / (block.timestamp lastObservation.timestamp);  //@audit should use cached lastObservation.timestamp\n  151:         if (lastObservation.timestamp  block.timestamp MIN_TWAP_TIME) { //@audit should use cached lastObservation.timestamp\n  157:             block.timestamp lastObservation.timestamp = MIN_TWAP_TIME, //@audit should use cached lastObservation.timestamp\n  163:             return (px1Cumulative lastObservation.price1Cumulative) / (block.timestamp lastObservation.timestamp); //@audit should use cached lastObservation.timestamp\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-04",
                "Location": [
                    "//solidity\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n  129:         Observation storage lastObservation = pairObservations[pair][(length 1) % OBSERVATION_BUFFER_SIZE]; //@audit gas: should be unchecked due to L128\n  132:             lastObservation = pairObservations[pair][(length 2) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L131\n  150:         Observation storage lastObservation = pairObservations[pair][(length 1) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L149\n  153:             lastObservation = pairObservations[pair][(length 2) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L152\n"
                ],
                "Type": " Unchecking arithmetics operations that can't underflow/overflow",
                "Description": "\nSolidity version 0.8+ comes with implicit overflow and underflow checks on unsigned integers. When an overflow or an underflow isn't possible (as an example, when a comparison is made before the arithmetic operation), some gas can be saved by using an unchecked block: <https://docs.soliditylang.org/en/v0.8.10/control-structures.html#checked-or-unchecked-arithmetic\n\nI suggest wrapping with an unchecked block here (see @audit tags for more details):\n\nsolidity\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n  129:         Observation storage lastObservation = pairObservations[pair][(length 1) % OBSERVATION_BUFFER_SIZE]; //@audit gas: should be unchecked due to L128\n  132:             lastObservation = pairObservations[pair][(length 2) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L131\n  150:         Observation storage lastObservation = pairObservations[pair][(length 1) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L149\n  153:             lastObservation = pairObservations[pair][(length 2) % OBSERVATION_BUFFER_SIZE];//@audit gas: should be unchecked due to L152\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-05",
                "Location": [
                    "//solidity\nComptroller.sol:142:        if (marketToJoin.accountMembership[borrower] == true) {\nComptroller.sol:997:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1011:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1020:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1029:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1065:            require(market.isListed == true, \"comp market is not listed\");\nComptroller.sol:1226:            if (borrowers == true) {\nComptroller.sol:1233:            if (suppliers == true) {\nComptroller.sol:1325:            borrowGuardianPaused[address(cToken)] == true &&\n"
                ],
                "Type": " Boolean comparisons",
                "Description": "\nComparing to a constant (true or false) is a bit more expensive than directly checking the returned boolean value.\nI suggest using if(directValue) instead of if(directValue == true) here (same for require statements):\n\nsolidity\nComptroller.sol:142:        if (marketToJoin.accountMembership[borrower] == true) {\nComptroller.sol:997:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1011:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1020:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1029:        require(msg.sender == admin || state == true, \"only admin can unpause\");\nComptroller.sol:1065:            require(market.isListed == true, \"comp market is not listed\");\nComptroller.sol:1226:            if (borrowers == true) {\nComptroller.sol:1233:            if (suppliers == true) {\nComptroller.sol:1325:            borrowGuardianPaused[address(cToken)] == true &&\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-06",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:63:            cNfts.length  0 && cNfts.length == nftxTokens.length,\nOracles/UniswapV2PriceOracle.sol:67:                    reserve0  0 && reserve1  0,\nOracles/UniswapV2PriceOracle.sol:91:                    reserve0  0,\nOracles/UniswapV2PriceOracle.sol:115:                    reserve1  0,\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nCToken.sol:37:        require(initialExchangeRateMantissa  0, \"initial exchange rate must be greater than zero.\");\n"
                ],
                "Type": "  > 0  is less efficient than  != 0  for unsigned integers (with proof)",
                "Description": "\n!= 0 costs less gas compared to  0 for unsigned integers in require statements with the optimizer enabled (6 gas)\n\nProof: While it may seem that  0 is cheaper than !=, this is only true without the optimizer enabled and outside a require statement. If you enable the optimizer at 10k AND you're in a require statement, this will save gas. You can see this tweet for more proofs: <https://twitter.com/gzeon/status/1485428085885640706\n\nI suggest changing  0 with != 0 here:\n\nsolidity\nOracles/CNftPriceOracle.sol:63:            cNfts.length  0 && cNfts.length == nftxTokens.length,\nOracles/UniswapV2PriceOracle.sol:67:                    reserve0  0 && reserve1  0,\nOracles/UniswapV2PriceOracle.sol:91:                    reserve0  0,\nOracles/UniswapV2PriceOracle.sol:115:                    reserve1  0,\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nCToken.sol:37:        require(initialExchangeRateMantissa  0, \"initial exchange rate must be greater than zero.\");\n\n\nAlso, please enable the Optimizer.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-07",
                "Location": [
                    "//solidity\ncontracts/CNft.sol:\n  66:                     require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n\ncontracts/Comptroller.sol:\n  947:         require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n\ncontracts/CToken.sol:\n  33:         require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\ncontracts/Oracles/CNftPriceOracle.sol:\n  63:             cNfts.length  0 && cNfts.length == nftxTokens.length,\n\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n  67:                     reserve0  0 && reserve1  0,\n"
                ],
                "Type": " Splitting  require()  statements that use  &&  saves gas",
                "Description": "\nIf you're using the Optimizer at 200, instead of using the && operator in a single require statement to check multiple conditions, I suggest using multiple require statements with 1 condition per require statement:\n\nsolidity\ncontracts/CNft.sol:\n  66:                     require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\n\ncontracts/Comptroller.sol:\n  947:         require(numMarkets != 0 && numMarkets == numBorrowCaps, \"invalid input\");\n\ncontracts/CToken.sol:\n  33:         require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\n\ncontracts/Oracles/CNftPriceOracle.sol:\n  63:             cNfts.length  0 && cNfts.length == nftxTokens.length,\n\ncontracts/Oracles/UniswapV2PriceOracle.sol:\n  67:                     reserve0  0 && reserve1  0,\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-08",
                "Location": [
                    "//solidity\nComptroller.sol:207:        assert(assetIndex < len);\nComptroller.sol:333:            assert(markets[cToken].accountMembership[borrower]);\n"
                ],
                "Type": " Usage of assert() instead of require()",
                "Description": "\nBetween solc 0.4.10 and 0.8.0, require() used REVERT (0xfd) opcode which refunded remaining gas on failure while assert() used INVALID (0xfe) opcode which consumed all the supplied gas. (see <https://docs.soliditylang.org/en/v0.8.1/control-structures.html#error-handling-assert-require-revert-and-exceptions).\nrequire() should be used for checking error conditions on inputs and return values while assert() should be used for invariant checking (properly functioning code should never reach a failing assert statement, unless there is a bug in your contract you should fix).<br\nFrom the current usage of assert, my guess is that they can be replaced with require, unless a Panic really is intended.\n\nHere are the assert locations:\n\nsolidity\nComptroller.sol:207:        assert(assetIndex < len);\nComptroller.sol:333:            assert(markets[cToken].accountMembership[borrower]);\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-09",
                "Location": [
                    "//solidity\nFile: CErc20.sol\n135:     function sweepToken(EIP20NonStandardInterface token) external {\n136:      require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\n137:      uint256 balance = token.balanceOf(address(this));\n138:      token.transfer(admin, balance); //@audit gas: should check for balance == 0 before transfer\n139:     }\n"
                ],
                "Type": " Amounts should be checked for 0 before calling a transfer",
                "Description": "\nChecking non-zero transfer values can avoid an expensive external call and save gas.\n\nI suggest adding a non-zero-value check here:\n\nsolidity\nFile: CErc20.sol\n135:     function sweepToken(EIP20NonStandardInterface token) external {\n136:      require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\n137:      uint256 balance = token.balanceOf(address(this));\n138:      token.transfer(admin, balance); //@audit gas: should check for balance == 0 before transfer\n139:     }\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-10",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) {\nCNft.sol:176:        for (uint256 i; i < vars.length; ++i) {\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\nERC1155Enumerable.sol:51:        for (uint256 i; i < ids.length; ++i) {\n"
                ],
                "Type": " An array's length should be cached to save gas in for-loops",
                "Description": "\nReading array length at each iteration of the loop takes 6 gas (3 for mload and 3 to place memory_offset) in the stack.\n\nCaching the array length in the stack saves around 3 gas per iteration.\n\nHere, I suggest storing the array's length in a variable before the for-loop, and use it instead:\n\nsolidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) {\nCNft.sol:176:        for (uint256 i; i < vars.length; ++i) {\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\nERC1155Enumerable.sol:51:        for (uint256 i; i < ids.length; ++i) {\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-11",
                "Location": [
                    "//solidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n",
                    "//solidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n",
                    "//solidity\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) {\nComptroller.sol:119:        for (uint i = 0; i < len; i++) {\nComptroller.sol:199:        for (uint i = 0; i < len; i++) {\nComptroller.sol:212:        storedList.length--; //@audit use --storedList.length\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:949:        for(uint i = 0; i < numMarkets; i++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\n"
                ],
                "Type": "  ++i  costs less gas compared to  i++  or  i += 1 ",
                "Description": "\n++i costs less gas compared to i++ or i += 1 for unsigned integer, as pre-increment is cheaper (about 5 gas per iteration). This statement is true even with the optimizer enabled.\n\nThe same is also true for i--.\n\ni++ increments i and returns the initial value of i. Which means:\n\nsolidity\nuint i = 1;  \ni++; // == 1 but i == 2  \n\n\nBut ++i returns the actual incremented value:\n\nsolidity\nuint i = 1;  \n++i; // == 2 and i == 2 too, so no need for a temporary variable  \n\n\nIn the first case, the compiler has to create a temporary variable (when used) for returning 1 instead of 2\n\nInstances include:\n\nsolidity\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) {\nComptroller.sol:119:        for (uint i = 0; i < len; i++) {\nComptroller.sol:199:        for (uint i = 0; i < len; i++) {\nComptroller.sol:212:        storedList.length--; //@audit use --storedList.length\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:949:        for(uint i = 0; i < numMarkets; i++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\n\n\nI suggest using ++i instead of i++ to increment the value of an uint variable.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-12",
                "Location": [
                    "//solidity\nFile: Comptroller.sol\n715:         uint seizeTokens;\n716:         Exp memory numerator;\n717:         Exp memory denominator;\n718:         Exp memory ratio;\n719: \n720:         numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n721:         denominator = Exp({mantissa: priceCollateralMantissa});\n722:         ratio = div_(numerator, denominator);\n723: \n724:         seizeTokens = truncate(mul_(ratio, Exp({mantissa: actualRepayAmount})));\n",
                    "//solidity\n        Exp memory numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n        Exp memory denominator = Exp({mantissa: priceCollateralMantissa});\n        Exp memory ratio = div_(numerator, denominator);\n\n        uint seizeTokens = truncate(mul_(ratio, Exp({mantissa: actualRepayAmount})));\n",
                    "//solidity\nFile: Comptroller.sol\n680:         uint seizeTokens;\n681:         Exp memory numerator;\n682:         Exp memory denominator;\n683:         Exp memory ratio;\n684: \n685:         numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n686:         denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\n687:         ratio = div_(numerator, denominator);\n688: \n689:         seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n"
                ],
                "Type": " Do not pre-declare variable with default values",
                "Description": "\nOne of the practices in the project is to pre-declare variables before assigning a value to them. This is not necessary and actually costs some gas (MSTOREs and MLOADs).\n\nAs an example, consider going from:\n\nsolidity\nFile: Comptroller.sol\n715:         uint seizeTokens;\n716:         Exp memory numerator;\n717:         Exp memory denominator;\n718:         Exp memory ratio;\n719: \n720:         numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n721:         denominator = Exp({mantissa: priceCollateralMantissa});\n722:         ratio = div_(numerator, denominator);\n723: \n724:         seizeTokens = truncate(mul_(ratio, Exp({mantissa: actualRepayAmount})));\n\n\nto:\n\nsolidity\n        Exp memory numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n        Exp memory denominator = Exp({mantissa: priceCollateralMantissa});\n        Exp memory ratio = div_(numerator, denominator);\n\n        uint seizeTokens = truncate(mul_(ratio, Exp({mantissa: actualRepayAmount})));\n\n\nSame for the following code:\n\nsolidity\nFile: Comptroller.sol\n680:         uint seizeTokens;\n681:         Exp memory numerator;\n682:         Exp memory denominator;\n683:         Exp memory ratio;\n684: \n685:         numerator = mul_(Exp({mantissa: liquidationIncentiveMantissa}), Exp({mantissa: priceBorrowedMantissa}));\n686:         denominator = mul_(Exp({mantissa: priceCollateralMantissa}), Exp({mantissa: exchangeRateMantissa}));\n687:         ratio = div_(numerator, denominator);\n688: \n689:         seizeTokens = mul_ScalarTruncate(ratio, actualRepayAmount);\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-13",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCNft.sol:50:        for (uint256 i; i < length; ++i) {\nCNft.sol:62:                for (uint256 i; i < length; ++i) {\nCNft.sol:72:                for (uint256 i; i < length; ++i) {\nCNft.sol:98:        for (uint256 i; i < length; ++i) {\nCNft.sol:122:        for (uint256 i; i < length; ++i) {\nCNft.sol:145:                for (uint256 i; i < length; ++i) {\nCNft.sol:151:                for (uint256 i; i < length; ++i) {\nCNft.sol:176:        for (uint256 i; i < vars.length; ++i) {\nERC1155Enumerable.sol:51:        for (uint256 i; i < ids.length; ++i) {\n",
                    "//solidity\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n",
                    "//solidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n"
                ],
                "Type": " Increments can be unchecked",
                "Description": "\nIn Solidity 0.8+, there's a default overflow check on unsigned integers. It's possible to uncheck this in for-loops and save some gas at each iteration, but at the cost of some code readability, as this uncheck cannot be made inline.\n\nethereum/solidity#10695(https://github.com/ethereum/solidity/issues/10695)\n\nInstances include:\n\nsolidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCNft.sol:50:        for (uint256 i; i < length; ++i) {\nCNft.sol:62:                for (uint256 i; i < length; ++i) {\nCNft.sol:72:                for (uint256 i; i < length; ++i) {\nCNft.sol:98:        for (uint256 i; i < length; ++i) {\nCNft.sol:122:        for (uint256 i; i < length; ++i) {\nCNft.sol:145:                for (uint256 i; i < length; ++i) {\nCNft.sol:151:                for (uint256 i; i < length; ++i) {\nCNft.sol:176:        for (uint256 i; i < vars.length; ++i) {\nERC1155Enumerable.sol:51:        for (uint256 i; i < ids.length; ++i) {\n\n\nThe code would go from:\n\nsolidity\nfor (uint256 i; i < numIterations; i++) {  \n // ...  \n}  \n\n\nto:\n\nsolidity\nfor (uint256 i; i < numIterations;) {  \n // ...  \n unchecked { ++i; }  \n}  \n\n\nThe risk of overflow is inexistant for uint256 here.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-14",
                "Location": [
                    "//solidity\n_setInterestRateModel(InterestRateModel) should be declared external:\n\tCToken._setInterestRateModel(InterestRateModel) (contracts/CToken.sol#1452-1460)\n\nenterMarkets(address[]) should be declared external:\n\tComptroller.enterMarkets(address[]) (contracts/Comptroller.sol#115-126)\ngetAccountLiquidity(address) should be declared external:\n\tComptroller.getAccountLiquidity(address) (contracts/Comptroller.sol#533-537)\ngetHypotheticalAccountLiquidity(address,address,uint256,uint256) should be declared external:\n\tComptroller.getHypotheticalAccountLiquidity(address,address,uint256,uint256) (contracts/Comptroller.sol#559-566)\n_setPriceOracle(PriceOracle) should be declared external:\n\tComptroller._setPriceOracle(PriceOracle) (contracts/Comptroller.sol#741-757)\n_setNftPriceOracle(NftPriceOracle) should be declared external:\n\tComptroller._setNftPriceOracle(NftPriceOracle) (contracts/Comptroller.sol#764-774)\n_setPauseGuardian(address) should be declared external:\n\tComptroller._setPauseGuardian(address) (contracts/Comptroller.sol#977-992)\n_setMintPaused(address,bool) should be declared external:\n\tComptroller._setMintPaused(address,bool) (contracts/Comptroller.sol#994-1006)\n_setBorrowPaused(CToken,bool) should be declared external:\n\tComptroller._setBorrowPaused(CToken,bool) (contracts/Comptroller.sol#1008-1016)\n_setTransferPaused(bool) should be declared external:\n\tComptroller._setTransferPaused(bool) (contracts/Comptroller.sol#1018-1025)\n_setSeizePaused(bool) should be declared external:\n\tComptroller._setSeizePaused(bool) (contracts/Comptroller.sol#1027-1034)\n_become(Unitroller) should be declared external:\n\tComptroller._become(Unitroller) (contracts/Comptroller.sol#1036-1039)\nclaimComp(address) should be declared external:\n\tComptroller.claimComp(address) (contracts/Comptroller.sol#1200-1202)\n_grantComp(address,uint256) should be declared external:\n\tComptroller._grantComp(address,uint256) (contracts/Comptroller.sol#1270-1275)\n_setCompSpeed(CToken,uint256) should be declared external:\n\tComptroller._setCompSpeed(CToken,uint256) (contracts/Comptroller.sol#1282-1285)\n_setContributorCompSpeed(address,uint256) should be declared external:\n\tComptroller._setContributorCompSpeed(address,uint256) (contracts/Comptroller.sol#1292-1306)\ngetAllMarkets() should be declared external:\n\tComptroller.getAllMarkets() (contracts/Comptroller.sol#1313-1315)\n"
                ],
                "Type": " Public functions to external",
                "Description": "\nThe following functions could be set external to save gas and improve code quality.<br\nExternal call cost is less expensive than of public functions.\n\nsolidity\n_setInterestRateModel(InterestRateModel) should be declared external:\n\tCToken._setInterestRateModel(InterestRateModel) (contracts/CToken.sol#1452-1460)\n\nenterMarkets(address[]) should be declared external:\n\tComptroller.enterMarkets(address[]) (contracts/Comptroller.sol#115-126)\ngetAccountLiquidity(address) should be declared external:\n\tComptroller.getAccountLiquidity(address) (contracts/Comptroller.sol#533-537)\ngetHypotheticalAccountLiquidity(address,address,uint256,uint256) should be declared external:\n\tComptroller.getHypotheticalAccountLiquidity(address,address,uint256,uint256) (contracts/Comptroller.sol#559-566)\n_setPriceOracle(PriceOracle) should be declared external:\n\tComptroller._setPriceOracle(PriceOracle) (contracts/Comptroller.sol#741-757)\n_setNftPriceOracle(NftPriceOracle) should be declared external:\n\tComptroller._setNftPriceOracle(NftPriceOracle) (contracts/Comptroller.sol#764-774)\n_setPauseGuardian(address) should be declared external:\n\tComptroller._setPauseGuardian(address) (contracts/Comptroller.sol#977-992)\n_setMintPaused(address,bool) should be declared external:\n\tComptroller._setMintPaused(address,bool) (contracts/Comptroller.sol#994-1006)\n_setBorrowPaused(CToken,bool) should be declared external:\n\tComptroller._setBorrowPaused(CToken,bool) (contracts/Comptroller.sol#1008-1016)\n_setTransferPaused(bool) should be declared external:\n\tComptroller._setTransferPaused(bool) (contracts/Comptroller.sol#1018-1025)\n_setSeizePaused(bool) should be declared external:\n\tComptroller._setSeizePaused(bool) (contracts/Comptroller.sol#1027-1034)\n_become(Unitroller) should be declared external:\n\tComptroller._become(Unitroller) (contracts/Comptroller.sol#1036-1039)\nclaimComp(address) should be declared external:\n\tComptroller.claimComp(address) (contracts/Comptroller.sol#1200-1202)\n_grantComp(address,uint256) should be declared external:\n\tComptroller._grantComp(address,uint256) (contracts/Comptroller.sol#1270-1275)\n_setCompSpeed(CToken,uint256) should be declared external:\n\tComptroller._setCompSpeed(CToken,uint256) (contracts/Comptroller.sol#1282-1285)\n_setContributorCompSpeed(address,uint256) should be declared external:\n\tComptroller._setContributorCompSpeed(address,uint256) (contracts/Comptroller.sol#1292-1306)\ngetAllMarkets() should be declared external:\n\tComptroller.getAllMarkets() (contracts/Comptroller.sol#1313-1315)\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-15",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:41:        uint256 numberUpdated = 0;\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) { //@audit declared \"uint i\" just above, which already defaults to 0\nCNft.sol:49:        uint256 totalAmount = 0;\nCNft.sol:97:        uint256 totalAmount = 0;\nCNft.sol:119:        uint256 totalAmount = 0;\nComptroller.sol:119:        for (uint i = 0; i < len; i++) {\nComptroller.sol:199:        for (uint i = 0; i < len; i++) {\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:949:        for(uint i = 0; i < numMarkets; i++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\nCToken.sol:81:        uint startingAllowance = 0;\n"
                ],
                "Type": " No need to explicitly initialize variables with default values",
                "Description": "\nIf a variable is not set/initialized, it is assumed to have the default value (0 for uint, false for bool, address(0) for address...). Explicitly initializing it with its default value is an anti-pattern and wastes gas.\n\nAs an example: for (uint256 i = 0; i < numIterations; ++i) { should be replaced with for (uint256 i; i < numIterations; ++i) {\n\nInstances include:\n\nsolidity\nOracles/CNftPriceOracle.sol:66:        for (uint256 i = 0; i < cNfts.length; ++i) {\nOracles/UniswapV2PriceOracle.sol:41:        uint256 numberUpdated = 0;\nOracles/UniswapV2PriceOracle.sol:42:        for (uint256 i = 0; i < pairs.length; ++i) {\nCEther.sol:178:        for (i = 0; i < bytes(message).length; i++) { //@audit declared \"uint i\" just above, which already defaults to 0\nCNft.sol:49:        uint256 totalAmount = 0;\nCNft.sol:97:        uint256 totalAmount = 0;\nCNft.sol:119:        uint256 totalAmount = 0;\nComptroller.sol:119:        for (uint i = 0; i < len; i++) {\nComptroller.sol:199:        for (uint i = 0; i < len; i++) {\nComptroller.sol:591:        for (uint i = 0; i < assets.length; i++) {\nComptroller.sol:928:        for (uint i = 0; i < allMarkets.length; i ++) {\nComptroller.sol:949:        for(uint i = 0; i < numMarkets; i++) {\nComptroller.sol:1223:        for (uint i = 0; i < cTokens.length; i++) {\nComptroller.sol:1229:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1235:                for (uint j = 0; j < holders.length; j++) {\nComptroller.sol:1240:        for (uint j = 0; j < holders.length; j++) {\nCToken.sol:81:        uint startingAllowance = 0;\n\n\nI suggest removing explicit initializations for default values.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-16",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:2:pragma //solidity ^0.8.0;\nOracles/UniswapV2PriceOracle.sol:2:pragma //solidity ^0.8.0;\nCNft.sol:2:pragma //solidity ^0.8.0;\nERC1155Enumerable.sol:2:pragma //solidity ^0.8.0;\n"
                ],
                "Type": " Upgrade pragma to at least 0.8.4",
                "Description": "\nUsing newer compiler versions and the optimizer give gas optimizations. Also, additional safety checks are available for free.\n\nThe advantages here are:\n\n*   Low level inliner (= 0.8.2): Cheaper runtime gas (especially relevant when the contract has small functions).\n*   Optimizer improvements in packed structs (= 0.8.3)\n*   Custom errors (= 0.8.4): cheaper deployment cost and runtime cost. *Note*: the runtime cost is only relevant when the revert condition is met. In short, replace revert strings by custom errors.\n\nConsider upgrading pragma to at least 0.8.4:\n\nsolidity\nOracles/CNftPriceOracle.sol:2:pragma solidity ^0.8.0;\nOracles/UniswapV2PriceOracle.sol:2:pragma solidity ^0.8.0;\nCNft.sol:2:pragma solidity ^0.8.0;\nERC1155Enumerable.sol:2:pragma solidity ^0.8.0;\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-17",
                "Location": [
                    "//solidity\nFile: PriceOracleImplementation.sol\n10:     address public cEtherAddress; //@audit gas: should be immutable as it's only set in the constructor\n"
                ],
                "Type": "  PriceOracleImplementation.cEtherAddress  variable should be immutable",
                "Description": "\nThis variable is only set in the constructor and is never edited after that:\n\nsolidity\nFile: PriceOracleImplementation.sol\n10:     address public cEtherAddress; //@audit gas: should be immutable as it's only set in the constructor\n\n\nConsider marking it as immutable.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-18",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:64:            \"CNftPriceOracle: `cNfts` and `nftxTokens` must have nonzero, equal lengths.\"\nOracles/CNftPriceOracle.sol:70:                \"CNftPriceOracle: Cannot overwrite existing address mappings.\"\nOracles/CNftPriceOracle.sol:90:            \"CNftPriceOracle: No NFTX token for cNFT.\"\nOracles/UniswapV2PriceOracle.sol:68:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:92:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:116:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:131:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:137:            \"UniswapV2PriceOracle: Bad TWAP time.\"\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:152:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:158:            \"UniswapV2PriceOracle: Bad TWAP time.\"\nCErc20.sol:136:     require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\nCErc20.sol:234:        require(msg.sender == admin, \"only the admin may set the comp-like delegate\");\nCNft.sol:24:        require(_underlying != address(0), \"CNFT: Asset should not be address(0)\");\nCNft.sol:25:        require(ComptrollerInterface(_comptroller).isComptroller(), \"_comptroller is not a Comptroller contract\");\nCNft.sol:52:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:69:                    require(buyPunkSuccess, \"CNFT: Calling buyPunk was unsuccessful\");\nCNft.sol:93:        require(borrower != liquidator, \"CNFT: Liquidator cannot be borrower\");\nCNft.sol:100:                require(seizeAmounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:124:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:148:                    require(transferPunkSuccess, \"CNFT: Calling transferPunk was unsuccessful\");\nCNft.sol:204:            revert(\"CNFT: Use safeBatchTransferFrom instead\");\nCNft.sol:208:        require(msg.sender == underlying, \"CNFT: This contract can only receive the underlying NFT\");\nCNft.sol:209:        require(operator == address(this), \"CNFT: Only the CNFT contract can be the operator\");\nCNft.sol:279:        require(to != underlying, \"CNFT: Cannot make an arbitrary call to underlying NFT\");\nComptroller.sol:171:        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\nComptroller.sol:420:            require(borrowBalance = repayAmount, \"Can not repay more than the total borrow\");\nComptroller.sol:702:        require(cNftCollateral == address(nftMarket), \"cNFT is from the wrong comptroller\");\nComptroller.sol:942:     require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\nComptroller.sol:960:        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\nComptroller.sol:995:        require(markets[cAsset].isListed, \"cannot pause a market that is not listed\");\nComptroller.sol:996:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1009:        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\nComptroller.sol:1010:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1019:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1028:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1037:        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\nComptroller.sol:1338:        require(address(nftMarket) == address(0), \"nft collateral already initialized\");\nComptroller.sol:1339:        require(address(cNft) != address(0), \"cannot initialize nft market to the 0 address\");\nCToken.sol:32:        require(msg.sender == admin, \"only admin may initialize the market\");\nCToken.sol:33:        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\nCToken.sol:37:        require(initialExchangeRateMantissa  0, \"initial exchange rate must be greater than zero.\");\nCToken.sol:49:        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\nCToken.sol:271:        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\nCToken.sol:328:        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\nCToken.sol:542:        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\nCToken.sol:545:        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\nCToken.sol:609:        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\nCToken.sol:891:        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\nCToken.sol:894:        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\nCToken.sol:986:        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\nCToken.sol:1083:        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\nCToken.sol:1093:        require(seizeTokens == 0, \"LIQUIDATE_SEIZE_INCORRECT_NUM_NFTS\");\nCToken.sol:1433:        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\"); \n"
                ],
                "Type": " Reduce the size of error messages (Long revert Strings)",
                "Description": "\nShortening revert strings to fit in 32 bytes will decrease deployment time gas and will decrease runtime gas when the revert condition is met.\n\nRevert strings that are longer than 32 bytes require at least one additional mstore, along with additional overhead for computing memory offset, etc.\n\nRevert strings  32 bytes:\n\nsolidity\nOracles/CNftPriceOracle.sol:64:            \"CNftPriceOracle: cNfts and nftxTokens must have nonzero, equal lengths.\"\nOracles/CNftPriceOracle.sol:70:                \"CNftPriceOracle: Cannot overwrite existing address mappings.\"\nOracles/CNftPriceOracle.sol:90:            \"CNftPriceOracle: No NFTX token for cNFT.\"\nOracles/UniswapV2PriceOracle.sol:68:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:92:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:116:                    \"UniswapV2PriceOracle: Division by zero.\"\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:131:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:137:            \"UniswapV2PriceOracle: Bad TWAP time.\"\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:152:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:158:            \"UniswapV2PriceOracle: Bad TWAP time.\"\nCErc20.sol:136:     require(address(token) != underlying, \"CErc20::sweepToken: can not sweep underlying token\");\nCErc20.sol:234:        require(msg.sender == admin, \"only the admin may set the comp-like delegate\");\nCNft.sol:24:        require(_underlying != address(0), \"CNFT: Asset should not be address(0)\");\nCNft.sol:25:        require(ComptrollerInterface(_comptroller).isComptroller(), \"_comptroller is not a Comptroller contract\");\nCNft.sol:52:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:69:                    require(buyPunkSuccess, \"CNFT: Calling buyPunk was unsuccessful\");\nCNft.sol:93:        require(borrower != liquidator, \"CNFT: Liquidator cannot be borrower\");\nCNft.sol:100:                require(seizeAmounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:124:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:148:                    require(transferPunkSuccess, \"CNFT: Calling transferPunk was unsuccessful\");\nCNft.sol:204:            revert(\"CNFT: Use safeBatchTransferFrom instead\");\nCNft.sol:208:        require(msg.sender == underlying, \"CNFT: This contract can only receive the underlying NFT\");\nCNft.sol:209:        require(operator == address(this), \"CNFT: Only the CNFT contract can be the operator\");\nCNft.sol:279:        require(to != underlying, \"CNFT: Cannot make an arbitrary call to underlying NFT\");\nComptroller.sol:171:        require(oErr == 0, \"exitMarket: getAccountSnapshot failed\"); // semi-opaque error code\nComptroller.sol:420:            require(borrowBalance = repayAmount, \"Can not repay more than the total borrow\");\nComptroller.sol:702:        require(cNftCollateral == address(nftMarket), \"cNFT is from the wrong comptroller\");\nComptroller.sol:942:     require(msg.sender == admin || msg.sender == borrowCapGuardian, \"only admin or borrow cap guardian can set borrow caps\");\nComptroller.sol:960:        require(msg.sender == admin, \"only admin can set borrow cap guardian\");\nComptroller.sol:995:        require(markets[cAsset].isListed, \"cannot pause a market that is not listed\");\nComptroller.sol:996:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1009:        require(markets[address(cToken)].isListed, \"cannot pause a market that is not listed\");\nComptroller.sol:1010:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1019:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1028:        require(msg.sender == pauseGuardian || msg.sender == admin, \"only pause guardian and admin can pause\");\nComptroller.sol:1037:        require(msg.sender == unitroller.admin(), \"only unitroller admin can change brains\");\nComptroller.sol:1338:        require(address(nftMarket) == address(0), \"nft collateral already initialized\");\nComptroller.sol:1339:        require(address(cNft) != address(0), \"cannot initialize nft market to the 0 address\");\nCToken.sol:32:        require(msg.sender == admin, \"only admin may initialize the market\");\nCToken.sol:33:        require(accrualBlockNumber == 0 && borrowIndex == 0, \"market may only be initialized once\");\nCToken.sol:37:        require(initialExchangeRateMantissa  0, \"initial exchange rate must be greater than zero.\");\nCToken.sol:49:        require(err == uint(Error.NO_ERROR), \"setting interest rate model failed\");\nCToken.sol:271:        require(err == MathError.NO_ERROR, \"borrowBalanceStored: borrowBalanceStoredInternal failed\");\nCToken.sol:328:        require(err == MathError.NO_ERROR, \"exchangeRateStored: exchangeRateStoredInternal failed\");\nCToken.sol:542:        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_TOTAL_SUPPLY_CALCULATION_FAILED\");\nCToken.sol:545:        require(vars.mathErr == MathError.NO_ERROR, \"MINT_NEW_ACCOUNT_BALANCE_CALCULATION_FAILED\");\nCToken.sol:609:        require(redeemTokensIn == 0 || redeemAmountIn == 0, \"one of redeemTokensIn or redeemAmountIn must be zero\");\nCToken.sol:891:        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_ACCOUNT_BORROW_BALANCE_CALCULATION_FAILED\");\nCToken.sol:894:        require(vars.mathErr == MathError.NO_ERROR, \"REPAY_BORROW_NEW_TOTAL_BALANCE_CALCULATION_FAILED\");\nCToken.sol:986:        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\nCToken.sol:1083:        require(amountSeizeError == uint(Error.NO_ERROR), \"LIQUIDATE_COMPTROLLER_CALCULATE_AMOUNT_SEIZE_FAILED\");\nCToken.sol:1093:        require(seizeTokens == 0, \"LIQUIDATE_SEIZE_INCORRECT_NUM_NFTS\");\nCToken.sol:1433:        require(totalReservesNew <= totalReserves, \"reduce reserves unexpected underflow\"); \n\n\nI suggest shortening the revert strings to fit in 32 bytes, or using custom errors as described next.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-19",
                "Location": [
                    "//solidity\nOracles/CNftPriceOracle.sol:31:        require(msg.sender == admin, \"Sender must be the admin.\");\nOracles/CNftPriceOracle.sol:62:        require(\nOracles/CNftPriceOracle.sol:68:            require(\nOracles/CNftPriceOracle.sol:88:        require(\nOracles/UniswapV2PriceOracle.sol:66:                require(\nOracles/UniswapV2PriceOracle.sol:90:                require(\nOracles/UniswapV2PriceOracle.sol:114:                require(\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:131:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:135:        require(\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:152:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:156:        require(\nCNft.sol:24:        require(_underlying != address(0), \"CNFT: Asset should not be address(0)\");\nCNft.sol:25:        require(ComptrollerInterface(_comptroller).isComptroller(), \"_comptroller is not a Comptroller contract\");\nCNft.sol:40:        require(tokenIds.length == amounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:45:        require(mintAllowedResult == 0, \"CNFT: Mint is not allowed\");\nCNft.sol:52:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:66:                    require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\nCNft.sol:69:                    require(buyPunkSuccess, \"CNFT: Calling buyPunk was unsuccessful\");\nCNft.sol:85:        require(seizeIds.length == seizeAmounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:90:        require(siezeAllowedResult == 0, \"CNFT: Seize is not allowed\");\nCNft.sol:93:        require(borrower != liquidator, \"CNFT: Liquidator cannot be borrower\");\nCNft.sol:100:                require(seizeAmounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:116:        require(tokenIds.length == amounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:124:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:127:            require(balanceOf(msg.sender, tokenIds[i]) = amounts[i], \"CNFT: Not enough NFTs to redeem\");\nCNft.sol:132:        require(redeemAllowedResult == 0, \"CNFT: Redeem is not allowed\");\nCNft.sol:148:                    require(transferPunkSuccess, \"CNFT: Calling transferPunk was unsuccessful\");\nCNft.sol:182:        require(transferAllowedResult == 0, \"CNFT: Redeem is not allowed\");\nCNft.sol:208:        require(msg.sender == underlying, \"CNFT: This contract can only receive the underlying NFT\");\nCNft.sol:209:        require(operator == address(this), \"CNFT: Only the CNFT contract can be the operator\");\nCNft.sol:279:        require(to != underlying, \"CNFT: Cannot make an arbitrary call to underlying NFT\");\n"
                ],
                "Type": " Use Custom Errors instead of Revert Strings to save Gas",
                "Description": "\nCustom errors from Solidity 0.8.4 are cheaper than revert strings (cheaper deployment cost and runtime cost when the revert condition is met)\n\nSource: <https://blog.soliditylang.org/2021/04/21/custom-errors/:\n\n Starting from Solidity v0.8.4(https://github.com/ethereum/solidity/releases/tag/v0.8.4), there is a convenient and gas-efficient way to explain to users why an operation failed through the use of custom errors. Until now, you could already use strings to give more information about failures (e.g., revert(\"Insufficient funds.\");), but they are rather expensive, especially when it comes to deploy cost, and it is difficult to use dynamic information in them.\n\nCustom errors are defined using the error statement, which can be used inside and outside of contracts (including interfaces and libraries).\n\nInstances include:\n\nsolidity\nOracles/CNftPriceOracle.sol:31:        require(msg.sender == admin, \"Sender must be the admin.\");\nOracles/CNftPriceOracle.sol:62:        require(\nOracles/CNftPriceOracle.sol:68:            require(\nOracles/CNftPriceOracle.sol:88:        require(\nOracles/UniswapV2PriceOracle.sol:66:                require(\nOracles/UniswapV2PriceOracle.sol:90:                require(\nOracles/UniswapV2PriceOracle.sol:114:                require(\nOracles/UniswapV2PriceOracle.sol:128:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:131:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:135:        require(\nOracles/UniswapV2PriceOracle.sol:149:        require(length  0, \"UniswapV2PriceOracle: No observations.\");\nOracles/UniswapV2PriceOracle.sol:152:            require(length  1, \"UniswapV2PriceOracle: Only one observation.\");\nOracles/UniswapV2PriceOracle.sol:156:        require(\nCNft.sol:24:        require(_underlying != address(0), \"CNFT: Asset should not be address(0)\");\nCNft.sol:25:        require(ComptrollerInterface(_comptroller).isComptroller(), \"_comptroller is not a Comptroller contract\");\nCNft.sol:40:        require(tokenIds.length == amounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:45:        require(mintAllowedResult == 0, \"CNFT: Mint is not allowed\");\nCNft.sol:52:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:66:                    require(checkSuccess && nftOwner == msg.sender, \"Not the NFT owner\");\nCNft.sol:69:                    require(buyPunkSuccess, \"CNFT: Calling buyPunk was unsuccessful\");\nCNft.sol:85:        require(seizeIds.length == seizeAmounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:90:        require(siezeAllowedResult == 0, \"CNFT: Seize is not allowed\");\nCNft.sol:93:        require(borrower != liquidator, \"CNFT: Liquidator cannot be borrower\");\nCNft.sol:100:                require(seizeAmounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:116:        require(tokenIds.length == amounts.length, \"CNFT: id/amounts length mismatch\");\nCNft.sol:124:                require(amounts[i] == 1, \"CNFT: Amounts must be all 1s for non-ERC1155s.\");\nCNft.sol:127:            require(balanceOf(msg.sender, tokenIds[i]) = amounts[i], \"CNFT: Not enough NFTs to redeem\");\nCNft.sol:132:        require(redeemAllowedResult == 0, \"CNFT: Redeem is not allowed\");\nCNft.sol:148:                    require(transferPunkSuccess, \"CNFT: Calling transferPunk was unsuccessful\");\nCNft.sol:182:        require(transferAllowedResult == 0, \"CNFT: Redeem is not allowed\");\nCNft.sol:208:        require(msg.sender == underlying, \"CNFT: This contract can only receive the underlying NFT\");\nCNft.sol:209:        require(operator == address(this), \"CNFT: Only the CNFT contract can be the operator\");\nCNft.sol:279:        require(to != underlying, \"CNFT: Cannot make an arbitrary call to underlying NFT\");\n\n\nI suggest replacing revert strings with custom errors.\n\n\n\n*\n\n\n",
                "Repair": ""
            }
        ]
    }
]