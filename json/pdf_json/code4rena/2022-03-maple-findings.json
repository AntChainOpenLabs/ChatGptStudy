[
    {
        "Code": "",
        "CodeNames": [
            ""
        ],
        "VulnerabilityDesc": [
            {
                "Name": "M-01",
                "Location": [
                    "//solidity\npragma //solidity 0.8.7;\ncontract A{\n    address public destination;\n    uint256 public number;\n    function convertA() external{\n        (bool su,bytes memory ret )= address(this).call(abi.encodeWithSelector(this.ret.selector));\n        number = ret.length;\n        destination = abi.decode(ret, (address));\n    }\n    function ret() public returns(bytes memory){\n        return \"0x74d754378a59Ab45d3E6CaC83f0b87E8E8719270\";\n    }\n}\n"
                ],
                "Type": " Incorrect implementation of Lender can result in lost tokens",
                "Description": "\nMapleLoanInternals._sendFee should check returnData.length == 32 before decoding, otherwise if it returns bytes data, the abi.decode will return 0x20, result in lost tokens.\n\n\nMapleLoanInternals.sol#L332-L344(https://github.com/maple-labs/loan/blob/main/contracts/MapleLoanInternals.sol#L332-L344)<br\nThis contract can test that when the function returns bytes data, abi.encode will decode the return value as 0x20.\nsolidity\npragma solidity 0.8.7;\ncontract A{\n    address public destination;\n    uint256 public number;\n    function convertA() external{\n        (bool su,bytes memory ret )= address(this).call(abi.encodeWithSelector(this.ret.selector));\n        number = ret.length;\n        destination = abi.decode(ret, (address));\n    }\n    function ret() public returns(bytes memory){\n        return \"0x74d754378a59Ab45d3E6CaC83f0b87E8E8719270\";\n    }\n}\n\n\n",
                "Repair": "solidity\nfunction _sendFee(address lookup_, bytes4 selector_, uint256 amount_) internal returns (bool success_) {\n    if (amount_ == uint256(0)) return true;\n\n    ( bool success , bytes memory data ) = lookup_.call(abi.encodeWithSelector(selector_));\n\n+       if (!success || data.length != uint256(32)) return false;\n\n    address destination = abi.decode(data, (address));\n\n    if (destination == address(0)) return false;\n\n    return ERC20Helper.transfer(_fundsAsset, destination, amount_);\n}\n\n\nlucas-manuel (Maple Finance) confirmed, but disagreed with Medium severity and commented(https://github.com/code-423n4/2022-03-maple-findings/issues/16#issuecomment-1075306669):\n  This technically is true, but I consider this informational as this is an extreme edge case. The poolDelegate and mapleTreasury values are almost guaranteed to never change, and if they did it would be to an audited Maple implementation which would never use bytes memory to return the address.\n \n This is a cool finding and we will address, but it is informational.\n\nJGcarv (Maple Finance) resolved(https://github.com/code-423n4/2022-03-maple-findings/issues/16#ref-pullrequest-1178576266):\n  Fix: Check data length (maple-labs/loan#154)(https://github.com/maple-labs/loan/pull/154)\n\nLSDan (judge) commented(https://github.com/code-423n4/2022-03-maple-findings/issues/16#issuecomment-1087997844):\n  Disagree with sponsor on the rating. This has external requirements and assets are not at direct risk, but it could result in a loss of funds.\n\n\n\n*\n\n\n"
            },
            {
                "Name": "M-02",
                "Location": [],
                "Type": " Processes refinance operations may call malicious code by re-created refinancer contract",
                "Description": "\nWhen an attacker (borrower) proposes a new term, the attacker can let a lender accept the malicious term which the lender doesn't expect.\n\nIt uses delegatecall in _acceptNewTerms of MapleLoanInternals.sol. Though a lender can manually check refinancer contract before calling acceptNewTerms, the attacker (borrower) can still re-create a malicious contract on same address before the lender is calling acceptNewTerms, and trigger malicious code by delegatecall in _acceptNewTerms.\n\n\nIn summary, an attacker can use CREATE2 to re-create a new malicious contract on same address. Here is CREATE2 exploit example: <https://x9453.github.io/2020/01/04/Balsn-CTF-2019-Creativity/\n\n1.  An attacker (borrower) first deploy a refinancer contract with normal refinance actions to cheat lenders. The refinancer have malicious constructor which can be hidden in inherited contracts.\n2.  The attacker call proposeNewTerms, specifying a refinancer contract, and monitor acceptNewTerms in Mempool.\n3.  When the attacker monitored a lender calls acceptNewTerms, then quickly pack these transactions:\n    1.  Destroy refinancer contract by calling selfdestruct\n    2.  Use CREATE2 to re-deploy a new refinancer contract with malicious code on same address\n    3.  The lender calls acceptNewTerms\n4.  Then a lender will execute malicious code of new refinancer contract.\n\n\nethers.js\n\n",
                "Repair": "\nAlso check refinancer contract bytecodes in _getRefinanceCommitment:\nsolidity\nfunction _getRefinanceCommitment(address refinancer_, uint256 deadline_, bytes[] calldata calls_) internal pure returns (bytes32 refinanceCommitment_) {\n    return keccak256(abi.encode(refinancer_, deadline_, calls_, at(refinancer)));\n}\n\nfunction at(address _addr) public view returns (bytes memory o_code) {\n    assembly {\n        // retrieve the size of the code, this needs assembly\n        let size := extcodesize(_addr)\n        // allocate output byte array this could also be done without assembly\n        // by using o_code = new bytes(size)\n        o_code := mload(0x40)\n        // new \"memory end\" including padding\n        mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n        // store length in memory\n        mstore(o_code, size)\n        // actually retrieve the code, this needs assembly\n        extcodecopy(_addr, add(o_code, 0x20), 0, size)\n    }\n}\n\n\nlucas-manuel (Maple Finance) disputed and commented(https://github.com/code-423n4/2022-03-maple-findings/issues/23#issuecomment-1074468251):\n  Refinancer contracts are vetted by the smart contracts team. Any custom refinancer that is used will be able to have devastating consequences on the Loan as it performs custom delegatecalls. For this reason the assumption is made that Borrowers and Lenders will only use audited immutable Refinancer contracts that are deployed by the Maple Labs smart contracts team, and if not, they must be diligent enough to audit themselves or must accept any consequences.\n \n This is not a valid issue.\n\nLSDan (judge) commented(https://github.com/code-423n4/2022-03-maple-findings/issues/23#issuecomment-1087977993):\n  The report is valid. Given the potential danger involved, you should whitelist the allowable Refinancer contracts to protect your lenders. Issue stands.\n\nlucas-manuel (Maple Finance) disagreed with High severity and commented(https://github.com/code-423n4/2022-03-maple-findings/issues/23#issuecomment-1088886675):\n  We're providing smart contracts team validated refinancers to the application for the lenders and borrowers to use. If they choose to use externally developed refinancers (something we want to support as it will allow for highly customizable logic between lenders and borrowers which is a feature not a bug), they must audit themselves.\n \n If there is a selfdestruct contained in the contract, it can be immediately assumed to be malicious because of the exploit outlined above. Same goes for proxied refinancers and stateful refinancers.\n \n I do not agree with this being a High Risk issue due to its very high degree of difficulty. The borrower would have to develop a smart contract with this exploit, submit it outside of the application, and convince the Pool Delegate to accept the refinancer address also outside of the application without an audit.\n \n I think that this is an interesting finding and am not discounting it, but I highly disagree with severity.\n\nLSDan (judge) decreased severity to Medium and commented(https://github.com/code-423n4/2022-03-maple-findings/issues/23#issuecomment-1089093596):\n  I see your point. This exploit has external requirements and so should be medium, but I do think this represents a significant attack vector should a lender act accidentally against their own best interests.\n\n\n\n*\n\n# Low Risk and Non-Critical Issues\n\nFor this contest, 8 reports were submitted by wardens detailing low risk and non-critical issues. The report highlighted below(https://github.com/code-423n4/2022-03-maple-findings/issues/17) by warden IllIllI received the top score from the judge.\n\n_The following wardens also submitted reports: WatchPug(https://github.com/code-423n4/2022-03-maple-findings/issues/32), defsec(https://github.com/code-423n4/2022-03-maple-findings/issues/39), gzeon(https://github.com/code-423n4/2022-03-maple-findings/issues/7), CertoraInc(https://github.com/code-423n4/2022-03-maple-findings/issues/14), berndartmueller(https://github.com/code-423n4/2022-03-maple-findings/issues/21), cccz(https://github.com/code-423n4/2022-03-maple-findings/issues/13), and robee(https://github.com/code-423n4/2022-03-maple-findings/issues/3)._\n\n\n"
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\n        if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n            _claimableFunds += treasuryFee_;\n        }\n"
                ],
                "Type": " Treasury fees are given to the lender on failure, rather than reverting",
                "Description": "\nsolidity\n        if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n            _claimableFunds += treasuryFee_;\n        }\n\n\nMapleLoanInternals.sol#L321-L323(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L321-L323)\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\nif (callerAllowance == type(uint256).max) return;\n",
                    "//solidity\n_approve(owner_, msg.sender, allowance[owner_][msg.sender] amount_);\n"
                ],
                "Type": " Inconsistent  approve()  behavior between  ERC20  and  RevenueDistributionToken ",
                "Description": "\nRevenueDistributionToken considers an approval value of type(uint256).max as 'allow all amounts':\n\nsolidity\nif (callerAllowance == type(uint256).max) return;\n\n\nRevenueDistributionToken.sol#L279(https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L279)<br\n\nwhereas ERC20 considers it as a numerical amount:\n\nsolidity\n_approve(owner_, msg.sender, allowance[owner_][msg.sender] amount_);\n\n\nERC20.sol#L110(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L110)<br\n\nThese inconsistences will likely lead to confusion at some point in the future.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "//solidity\nrequire(endingPrincipal_ <= _principal, \"R:DP:ABOVE_CURRENT_PRINCIPAL\");\n"
                ],
                "Type": " Incorrect revert string in  setEndingPrincipal() ",
                "Description": "\nsolidity\nrequire(endingPrincipal_ <= _principal, \"R:DP:ABOVE_CURRENT_PRINCIPAL\");\n\n\nRefinancer.sol#L43(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/Refinancer.sol#L43)<br\n\nIt should be \"R:SEP:ABOVE_CURRENT_PRINCIPAL\".\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-04",
                "Location": [
                    "//solidity\n/// @title Interface of the ERC20 standard as defined in the EIP, including ERC-2612 permit functionality.\ninterface IERC20 {\n"
                ],
                "Type": " IERC20 should be named IERC20Permit",
                "Description": "\nFile: erc20-1.0.0-beta.2/contracts/interfaces/IERC20.sol (lines 4-5(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4-L5))<br\n\nThere may be cases in the future where you may not want EIP-2612 functionality due to deployment costs, and having the name IERC20 taken will cause problems.\n\nsolidity\n/// @title Interface of the ERC20 standard as defined in the EIP, including ERC-2612 permit functionality.\ninterface IERC20 {\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-05",
                "Location": [
                    "//solidity\n/\n    *  @dev    Returns the permit type hash.\n    *  @return permitTypehash_ The permit type hash.\n    */\nfunction PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\n"
                ],
                "Type": " IERC20 incorrectly includes  PERMIT_TYPEHASH ",
                "Description": "\nPERMIT_TYPEHASH is not part of the requirements for EIP-2612, so it shouldn't appear in the interface.\n\nsolidity\n/\n    *  @dev    Returns the permit type hash.\n    *  @return permitTypehash_ The permit type hash.\n    */\nfunction PERMIT_TYPEHASH() external view returns (bytes32 permitTypehash_);\n\n\nIERC20.sol#L134-L138(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L134-L138)<br\nOpenZeppelin has it as a private constant: OpenZeppelin/draft-ERC20Permit.sol#L28(https://github.com/OpenZeppelin/openzeppelin-contracts/blob/52eeebecda140ebaf4ec8752ed119d8288287fac/contracts/token/ERC20/extensions/draft-ERC20Permit.sol#L28).\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-06",
                "Location": [
                    "//solidity\npendingOwner = pendingOwner_;\n"
                ],
                "Type": " Missing checks for  address(0x0)  when assigning values to  address  state variables",
                "Description": "\nFile: revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol (line 73(https://github.com/maple-labs/revenue-distribution-token/blob/41a3e40bf8c109ff19b38b80fde300c44fd42a3d/contracts/RevenueDistributionToken.sol#L73))<br\n\nsolidity\npendingOwner = pendingOwner_;\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-07",
                "Location": [],
                "Type": " Open TODOs",
                "Description": "\nThere are many open TODOs throughout the various test files, but also some among the code files\n\n    ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:    // TODO: Revisit returns\n    ./revenue-distribution-token-1.0.0-beta.1/contracts/RevenueDistributionToken.sol:        // TODO: investigate whether leave this require() in for clarity from error message, or let the safe math check in callerAllowance shares_ handle the underflow.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-08",
                "Location": [
                    "//solidity\n     *  @dev   Emits an event indicating that one account has set the allowance of another account over their tokens.\n"
                ],
                "Type": " Incorrect Natspec",
                "Description": "\nsolidity\n     *  @dev   Emits an event indicating that one account has set the allowance of another account over their tokens.\n\n\nIERC20.sol#L12(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12)<br\nThe natspec doesn't mention that the event is also emitted when transferFrom() is called, even though the natspec for transferFrom() explicitly mentions it.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\nfunction _processEstablishmentFees(uint256 delegateFee_, uint256 treasuryFee_) internal {\n    if (!_sendFee(_lender, ILenderLike.poolDelegate.selector, delegateFee_)) {\n        _claimableFunds += delegateFee_;\n    }\n\n    if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n        _claimableFunds += treasuryFee_;\n    }\n}\n"
                ],
                "Type": "  _processEstablishmentFees()  should emit events when fee processing fails",
                "Description": "\nsolidity\nfunction _processEstablishmentFees(uint256 delegateFee_, uint256 treasuryFee_) internal {\n    if (!_sendFee(_lender, ILenderLike.poolDelegate.selector, delegateFee_)) {\n        _claimableFunds += delegateFee_;\n    }\n\n    if (!_sendFee(_mapleGlobals(), IMapleGlobalsLike.mapleTreasury.selector, treasuryFee_)) {\n        _claimableFunds += treasuryFee_;\n    }\n}\n\n\nMapleLoanInternals.sol#L316-L324(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L316-L324)\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\nmapping(address = uint256) public override balanceOf;\n\nmapping(address = mapping(address = uint256)) public override allowance;\n"
                ],
                "Type": " Multiple  address  mappings can be combined into a single  mapping  of an  address  to a  struct , where appropriate",
                "Description": "\nFile: erc20-1.0.0-beta.2/contracts/ERC20.sol (lines 32-34(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L32-L34))<br\n\nsolidity\nmapping(address = uint256) public override balanceOf;\n\nmapping(address = mapping(address = uint256)) public override allowance;\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "//solidity\nuint256 private constant SCALED_ONE = uint256(10  18);\n"
                ],
                "Type": " Use scientific notation (e.g.  10e18 ) rather than exponentiation (e.g.  1018 )",
                "Description": "\nFile: loan-3.0.0-beta.1/contracts/MapleLoanInternals.sol (line 14(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanInternals.sol#L14))<br\n\nsolidity\nuint256 private constant SCALED_ONE = uint256(10  18);\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-04",
                "Location": [
                    "//solidity\nfunction createInstance(bytes calldata arguments_, bytes32 salt_)\n    override(IMapleProxyFactory, MapleProxyFactory) public returns (\n        address instance_\n"
                ],
                "Type": "  public  functions not called by the contract should be declared  external  instead",
                "Description": "\nContracts are allowed(https://docs.soliditylang.org/en/latest/contracts.html#function-overriding) to override their parents' functions and change the visibility from external to public.<br\n\nFile: loan-3.0.0-beta.1/contracts/MapleLoanFactory.sol (lines 16-18(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/MapleLoanFactory.sol#L16-L18))<br\n\nsolidity\nfunction createInstance(bytes calldata arguments_, bytes32 salt_)\n    override(IMapleProxyFactory, MapleProxyFactory) public returns (\n        address instance_\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-05",
                "Location": [
                    "//solidity\npragma //solidity ^0.8.7;\n"
                ],
                "Type": " Use a more recent version of solidity",
                "Description": "\nUse a solidity version of at least 0.8.12 to get string.concat() to be used instead of abi.encodePacked(<str,<str).<br\n\nFile: erc20-1.0.0-beta.2/contracts/ERC20.sol (line 2(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L2))<br\n\nsolidity\npragma solidity ^0.8.7;\n\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-06",
                "Location": [],
                "Type": " Typos",
                "Description": "\nowner = owner_<br\nIERC20.sol#L129(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L129)<br\nIERC20.sol#L132(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L132)<br\nMigrator.sol#L24(https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L24)<br\nMigrator.sol#L26(https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L26)<br\nMigrator.sol#L27(https://github.com/maple-labs/mpl-migration/blob/a99549d96ed12cd4589a02bccf70747dbaebeb5b/contracts/Migrator.sol#L27)<br\nIOwnable.sol#L17(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L17)\n\naccount = account_<br\nIOwnable.sol#L11(https://github.com/maple-labs/loan/blob/4c6fe2cd91d6d16b8434c426fe7eb6d2bc77bc30/contracts/interfaces/IOwnable.sol#L11)\n\nEmits an event = Emitted when<br\nIERC20.sol#L12(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L12)<br\nIERC20.sol#L20(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L20)\n\nERC-2612 = EIP-2612<br\nIERC20.sol#L4(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/interfaces/IERC20.sol#L4)\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-07",
                "Location": [],
                "Type": " Grammar",
                "Description": "\nThroughout the various interfaces, most of the comments have fragments that end with periods. They should either be converted to actual sentences with both a noun phrase and a verb phrase, or the periods should be removed.\n\nlucas-manuel (Maple Finance) confirmed, but disagreed with severity and commented(https://github.com/code-423n4/2022-03-maple-findings/issues/17#issuecomment-1074465927):\n  L-01] Intentional<br\n L-02] We can address, informational<br\n L-03] We can address, informational<br\n L-04] We are always going to want permit, dismissed<br\n L-05] We would like to keep this public<br\n L-06] pendingOwner does not need a zero check as it is a two step process<br\n L-07] TODOs is duplicate<br\n L-08] Incorrect, Natspec only mentions events emitted in functions<br\n N-01] This will be monitored in tenderly, no event needed<br\n N-02] Won't implement this<br\n N-03] Won't implement this<br\n N-04] Has to match visibility of overriden function<br\n N-05] Won't implement<br\n N-06] Will implement typo changes<br\n \n All issues are informational.\n\nJGcarv (Maple Finance) resolved(https://github.com/code-423n4/2022-03-maple-findings/issues/17#ref-pullrequest-1178190333):\n  Fix typos (maple-labs/erc20#36)(https://github.com/maple-labs/erc20/pull/36)<br\n  Fix typos (maple-labs/mpl-migration#13)(https://github.com/maple-labs/mpl-migration/pull/13)<br\n  Fix typos (maple-labs/loan#152)(https://github.com/maple-labs/loan/pull/152)<br\n  Fix revert message (maple-labs/loan#155)(https://github.com/maple-labs/loan/pull/155)\n\n\n\n*\n\n# Gas Optimizations\n\nFor this contest, 13 reports were submitted by wardens detailing gas optimizations. The report highlighted below(https://github.com/code-423n4/2022-03-maple-findings/issues/31) by warden team WatchPug received the top score from the judge.\n\n_The following wardens also submitted reports: berndartmueller(https://github.com/code-423n4/2022-03-maple-findings/issues/20), rayn(https://github.com/code-423n4/2022-03-maple-findings/issues/22), Dravee(https://github.com/code-423n4/2022-03-maple-findings/issues/12), robee(https://github.com/code-423n4/2022-03-maple-findings/issues/4), IllIllI(https://github.com/code-423n4/2022-03-maple-findings/issues/18), 0xNazgul(https://github.com/code-423n4/2022-03-maple-findings/issues/34), gzeon(https://github.com/code-423n4/2022-03-maple-findings/issues/6), CertoraInc(https://github.com/code-423n4/2022-03-maple-findings/issues/15), 0xwags(https://github.com/code-423n4/2022-03-maple-findings/issues/38), 0xkatana(https://github.com/code-423n4/2022-03-maple-findings/issues/11), Tomio(https://github.com/code-423n4/2022-03-maple-findings/issues/35), and Funen(https://github.com/code-423n4/2022-03-maple-findings/issues/36)._\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-01",
                "Location": [
                    "//solidity\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n"
                ],
                "Type": "  ERC20.sol#transferFrom()  Do not reduce approval on transferFrom if current allowance is type(uint256).max",
                "Description": "\n_Note: suggested optimation, save a decent amount of gas without compromising readability._\n\nThe Wrapped Ether (WETH) ERC-20 contract has a gas optimization that does not update the allowance if it is the max uint.\n\nThe latest version of OpenZeppelin's ERC20 token contract also adopted this optimization.\n\nERC20.sol#L109-L113(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L109-L113)\n\nsolidity\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        _approve(owner_, msg.sender, allowance[owner_][msg.sender] amount_);\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n\n\nSee:\n\n*   OpenZeppelin/ERC20.sol#L336(https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.5.0/contracts/token/ERC20/ERC20.sol#L336)\n*   OpenZeppelin/openzeppelin-contracts#3085(https://github.com/OpenZeppelin/openzeppelin-contracts/pull/3085)\n\n",
                "Repair": "\nChange to:\n\nsolidity\n    function transferFrom(address owner_, address recipient_, uint256 amount_) external override returns (bool success_) {\n        uint256 currentAllowance = allowance[owner_][msg.sender];\n        if (currentAllowance != type(uint256).max) {\n            _approve(owner_, msg.sender, currentAllowance amount_);\n        }\n\n        _transfer(owner_, recipient_, amount_);\n        return true;\n    }\n\n\n\n"
            },
            {
                "Name": "-02",
                "Location": [
                    "//solidity\n    string public override name;\n    string public override symbol;\n",
                    "//solidity\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n"
                ],
                "Type": " Use immutable variables can save gas",
                "Description": "\n_Note: suggested optimation, save a decent amount of gas without compromising readability._\n\nERC20.sol#L25-L26(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L25-L26)\n\nsolidity\n    string public override name;\n    string public override symbol;\n\n\nERC20.sol#L50-L54(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L50-L54)\n\nsolidity\n    constructor(string memory name_, string memory symbol_, uint8 decimals_) {\n        name     = name_;\n        symbol   = symbol_;\n        decimals = decimals_;\n    }\n\n\nIn ERC20.sol, name and symbol will never change, use immutable variable instead of storage variable can save gas.\n\n\n",
                "Repair": ""
            },
            {
                "Name": "-03",
                "Location": [
                    "//solidity\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ = block.timestamp, \"ERC20:P:EXPIRED\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"x19x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n"
                ],
                "Type": " Validation can be done earlier to save gas",
                "Description": "\n_Note: minor optimation, the amount of gas saved is minor, change when you see fit._\n\nERC20.sol#L75-L102(https://github.com/maple-labs/erc20/blob/10ccf4aa0b2d6914e3c2d32e454e4d106a99a4fd/contracts/ERC20.sol#L75-L102)\n\nsolidity\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ = block.timestamp, \"ERC20:P:EXPIRED\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"x19x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_ && owner_ != address(0), \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n\n\nCheck if owner_ != address(0) earlier can avoid unnecessary computing when this check failed.\n\n",
                "Repair": "\nChange to:\n\nsolidity\n    function permit(address owner_, address spender_, uint256 amount_, uint256 deadline_, uint8 v_, bytes32 r_, bytes32 s_) external override {\n        require(deadline_ = block.timestamp, \"ERC20:P:EXPIRED\");\n        require(owner_ != address(0), \"...\");\n\n        // Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n \u00f7 2 + 1, and for v in (302): v \u2208 {27, 28}.\n        require(\n            uint256(s_) <= uint256(0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) &&\n            (v_ == 27 || v_ == 28),\n            \"ERC20:P:MALLEABLE\"\n        );\n\n        // Nonce realistically cannot overflow.\n        unchecked {\n            bytes32 digest = keccak256(\n                abi.encodePacked(\n                    \"x19x01\",\n                    DOMAIN_SEPARATOR(),\n                    keccak256(abi.encode(PERMIT_TYPEHASH, owner_, spender_, amount_, nonces[owner_]++, deadline_))\n                )\n            );\n\n            address recoveredAddress = ecrecover(digest, v_, r_, s_);\n\n            require(recoveredAddress == owner_, \"ERC20:P:INVALID_SIGNATURE\");\n        }\n\n        _approve(owner_, spender_, amount_);\n    }\n\n\nlucas-manuel (Maple Finance) commented(https://github.com/code-423n4/2022-03-maple-findings/issues/31#issuecomment-1075715013):\n   G-01] ERC20.sol#transferFrom() Do not reduce approval on transferFrom if current allowance is type(uint256).max<br\n Less clean, not added\n\n   G-02] Use immutable variables can save gas<br\n Valid, will add\n\n   G-03] Validation can be done earlier to save gas<br\n Less clean, won't add\n\n Acknowledge G-01 and G-03.<br\n Confirm G-02 is valid.\n\n\n\n*\n\n\n"
            }
        ]
    }
]